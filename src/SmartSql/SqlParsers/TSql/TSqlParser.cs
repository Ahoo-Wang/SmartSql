//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Ahoo/SmartSql/doc/ANTLR/TSql\TSqlParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SmartSql.SqlParsers.TSql {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class TSqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ABSENT=1, ADD=2, AES=3, ALL=4, ALLOW_CONNECTIONS=5, ALLOW_MULTIPLE_EVENT_LOSS=6, 
		ALLOW_SINGLE_EVENT_LOSS=7, ALTER=8, AND=9, ANONYMOUS=10, ANY=11, APPEND=12, 
		APPLICATION=13, AS=14, ASC=15, ASYMMETRIC=16, ASYNCHRONOUS_COMMIT=17, 
		AUTHORIZATION=18, AUTHENTICATION=19, AUTOMATED_BACKUP_PREFERENCE=20, AUTOMATIC=21, 
		AVAILABILITY_MODE=22, BACKSLASH=23, BACKUP=24, BEFORE=25, BEGIN=26, BETWEEN=27, 
		BLOCK=28, BLOCKSIZE=29, BLOCKING_HIERARCHY=30, BREAK=31, BROWSE=32, BUFFER=33, 
		BUFFERCOUNT=34, BULK=35, BY=36, CACHE=37, CALLED=38, CASCADE=39, CASE=40, 
		CERTIFICATE=41, CHANGETABLE=42, CHANGES=43, CHECK=44, CHECKPOINT=45, CHECK_POLICY=46, 
		CHECK_EXPIRATION=47, CLASSIFIER_FUNCTION=48, CLOSE=49, CLUSTER=50, CLUSTERED=51, 
		COALESCE=52, COLLATE=53, COLUMN=54, COMPRESSION=55, COMMIT=56, COMPUTE=57, 
		CONFIGURATION=58, CONSTRAINT=59, CONTAINMENT=60, CONTAINS=61, CONTAINSTABLE=62, 
		CONTEXT=63, CONTINUE=64, CONTINUE_AFTER_ERROR=65, CONTRACT=66, CONTRACT_NAME=67, 
		CONVERSATION=68, CONVERT=69, COPY_ONLY=70, CREATE=71, CROSS=72, CURRENT=73, 
		CURRENT_DATE=74, CURRENT_TIME=75, CURRENT_TIMESTAMP=76, CURRENT_USER=77, 
		CURSOR=78, CYCLE=79, DATA=80, DATA_COMPRESSION=81, DATA_SOURCE=82, DATABASE=83, 
		DATABASE_MIRRORING=84, DBCC=85, DEALLOCATE=86, DECLARE=87, DEFAULT=88, 
		DEFAULT_DATABASE=89, DEFAULT_SCHEMA=90, DELETE=91, DENY=92, DESC=93, DIAGNOSTICS=94, 
		DIFFERENTIAL=95, DISK=96, DISTINCT=97, DISTRIBUTED=98, DOUBLE=99, DOUBLE_BACK_SLASH=100, 
		DOUBLE_FORWARD_SLASH=101, DROP=102, DTC_SUPPORT=103, DUMP=104, ELSE=105, 
		ENABLED=106, END=107, ENDPOINT=108, ERRLVL=109, ESCAPE=110, ERROR=111, 
		EVENT=112, EVENTDATA=113, EVENT_RETENTION_MODE=114, EXCEPT=115, EXECUTABLE_FILE=116, 
		EXECUTE=117, EXISTS=118, EXPIREDATE=119, EXIT=120, EXTENSION=121, EXTERNAL=122, 
		EXTERNAL_ACCESS=123, FAILOVER=124, FAILURECONDITIONLEVEL=125, FAN_IN=126, 
		FETCH=127, FILE=128, FILENAME=129, FILLFACTOR=130, FILE_SNAPSHOT=131, 
		FOR=132, FORCESEEK=133, FORCE_SERVICE_ALLOW_DATA_LOSS=134, FOREIGN=135, 
		FREETEXT=136, FREETEXTTABLE=137, FROM=138, FULL=139, FUNCTION=140, GET=141, 
		GOTO=142, GOVERNOR=143, GRANT=144, GROUP=145, HAVING=146, HASHED=147, 
		HEALTHCHECKTIMEOUT=148, IDENTITY=149, IDENTITYCOL=150, IDENTITY_INSERT=151, 
		IF=152, IIF=153, IN=154, INCLUDE=155, INCREMENT=156, INDEX=157, INFINITE=158, 
		INIT=159, INNER=160, INSERT=161, INSTEAD=162, INTERSECT=163, INTO=164, 
		IPV4_ADDR=165, IPV6_ADDR=166, IS=167, ISNULL=168, JOIN=169, KERBEROS=170, 
		KEY=171, KEY_PATH=172, KEY_STORE_PROVIDER_NAME=173, KILL=174, LANGUAGE=175, 
		LEFT=176, LIBRARY=177, LIFETIME=178, LIKE=179, LINENO=180, LINUX=181, 
		LISTENER_IP=182, LISTENER_PORT=183, LOAD=184, LOCAL_SERVICE_NAME=185, 
		LOG=186, MATCHED=187, MASTER=188, MAX_MEMORY=189, MAXTRANSFER=190, MAXVALUE=191, 
		MAX_DISPATCH_LATENCY=192, MAX_EVENT_SIZE=193, MAX_SIZE=194, MAX_OUTSTANDING_IO_PER_VOLUME=195, 
		MEDIADESCRIPTION=196, MEDIANAME=197, MEMBER=198, MEMORY_PARTITION_MODE=199, 
		MERGE=200, MESSAGE_FORWARDING=201, MESSAGE_FORWARD_SIZE=202, MINVALUE=203, 
		MIRROR=204, MUST_CHANGE=205, NATIONAL=206, NEGOTIATE=207, NOCHECK=208, 
		NOFORMAT=209, NOINIT=210, NONCLUSTERED=211, NONE=212, NOREWIND=213, NOSKIP=214, 
		NOUNLOAD=215, NO_CHECKSUM=216, NO_COMPRESSION=217, NO_EVENT_LOSS=218, 
		NOT=219, NOTIFICATION=220, NTLM=221, NULL=222, NULLIF=223, OF=224, OFF=225, 
		OFFSETS=226, OLD_PASSWORD=227, ON=228, ON_FAILURE=229, OPEN=230, OPENDATASOURCE=231, 
		OPENQUERY=232, OPENROWSET=233, OPENXML=234, OPTION=235, OR=236, ORDER=237, 
		OUTER=238, OVER=239, PAGE=240, PARAM_NODE=241, PARTIAL=242, PASSWORD=243, 
		PERCENT=244, PERMISSION_SET=245, PER_CPU=246, PER_DB=247, PER_NODE=248, 
		PIVOT=249, PLAN=250, PLATFORM=251, POLICY=252, PRECISION=253, PREDICATE=254, 
		PRIMARY=255, PRINT=256, PROC=257, PROCEDURE=258, PROCESS=259, PUBLIC=260, 
		PYTHON=261, R=262, RAISERROR=263, RAW=264, READ=265, READTEXT=266, READ_WRITE_FILEGROUPS=267, 
		RECONFIGURE=268, REFERENCES=269, REGENERATE=270, RELATED_CONVERSATION=271, 
		RELATED_CONVERSATION_GROUP=272, REPLICATION=273, REQUIRED=274, RESET=275, 
		RESTART=276, RESTORE=277, RESTRICT=278, RESUME=279, RETAINDAYS=280, RETURN=281, 
		RETURNS=282, REVERT=283, REVOKE=284, REWIND=285, RIGHT=286, ROLLBACK=287, 
		ROLE=288, ROWCOUNT=289, ROWGUIDCOL=290, RSA_512=291, RSA_1024=292, RSA_2048=293, 
		RSA_3072=294, RSA_4096=295, SAFETY=296, RULE=297, SAFE=298, SAVE=299, 
		SCHEDULER=300, SCHEMA=301, SCHEME=302, SECURITY=303, SECURITYAUDIT=304, 
		SELECT=305, SEMANTICKEYPHRASETABLE=306, SEMANTICSIMILARITYDETAILSTABLE=307, 
		SEMANTICSIMILARITYTABLE=308, SEQUENCE=309, SERVER=310, SERVICE=311, SERVICE_BROKER=312, 
		SERVICE_NAME=313, SESSION=314, SESSION_USER=315, SET=316, SETUSER=317, 
		SHUTDOWN=318, SID=319, SKIP_KEYWORD=320, SOFTNUMA=321, SOME=322, SOURCE=323, 
		SPECIFICATION=324, SPLIT=325, SQLDUMPERFLAGS=326, SQLDUMPERPATH=327, SQLDUMPERTIMEOUT=328, 
		STATISTICS=329, STATE=330, STATS=331, START=332, STARTED=333, STARTUP_STATE=334, 
		STOP=335, STOPPED=336, STOP_ON_ERROR=337, SUPPORTED=338, SYSTEM=339, SYSTEM_USER=340, 
		TABLE=341, TABLESAMPLE=342, TAPE=343, TARGET=344, TCP=345, TEXTSIZE=346, 
		THEN=347, TO=348, TOP=349, TRACK_CAUSALITY=350, TRAN=351, TRANSACTION=352, 
		TRANSFER=353, TRIGGER=354, TRUNCATE=355, TSEQUAL=356, UNCHECKED=357, UNION=358, 
		UNIQUE=359, UNLOCK=360, UNPIVOT=361, UNSAFE=362, UPDATE=363, UPDATETEXT=364, 
		URL=365, USE=366, USED=367, USER=368, VALUES=369, VARYING=370, VERBOSELOGGING=371, 
		VIEW=372, VISIBILITY=373, WAITFOR=374, WHEN=375, WHERE=376, WHILE=377, 
		WINDOWS=378, WITH=379, WITHIN=380, WITHOUT=381, WITNESS=382, WRITETEXT=383, 
		ABSOLUTE=384, ACCENT_SENSITIVITY=385, ACTION=386, ACTIVATION=387, ACTIVE=388, 
		ADDRESS=389, AES_128=390, AES_192=391, AES_256=392, AFFINITY=393, AFTER=394, 
		AGGREGATE=395, ALGORITHM=396, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=397, 
		ALLOW_SNAPSHOT_ISOLATION=398, ALLOWED=399, ANSI_NULL_DEFAULT=400, ANSI_NULLS=401, 
		ANSI_PADDING=402, ANSI_WARNINGS=403, APPLICATION_LOG=404, APPLY=405, ARITHABORT=406, 
		ASSEMBLY=407, AUDIT=408, AUDIT_GUID=409, AUTO=410, AUTO_CLEANUP=411, AUTO_CLOSE=412, 
		AUTO_CREATE_STATISTICS=413, AUTO_SHRINK=414, AUTO_UPDATE_STATISTICS=415, 
		AUTO_UPDATE_STATISTICS_ASYNC=416, AVAILABILITY=417, AVG=418, BACKUP_PRIORITY=419, 
		BEGIN_DIALOG=420, BIGINT=421, BINARY_BASE64=422, BINARY_CHECKSUM=423, 
		BINDING=424, BLOB_STORAGE=425, BROKER=426, BROKER_INSTANCE=427, BULK_LOGGED=428, 
		CALLER=429, CAP_CPU_PERCENT=430, CAST=431, CATALOG=432, CATCH=433, CHANGE_RETENTION=434, 
		CHANGE_TRACKING=435, CHECKSUM=436, CHECKSUM_AGG=437, CLEANUP=438, COLLECTION=439, 
		COLUMN_MASTER_KEY=440, COMMITTED=441, COMPATIBILITY_LEVEL=442, CONCAT=443, 
		CONCAT_NULL_YIELDS_NULL=444, CONTENT=445, CONTROL=446, COOKIE=447, COUNT=448, 
		COUNT_BIG=449, COUNTER=450, CPU=451, CREATE_NEW=452, CREATION_DISPOSITION=453, 
		CREDENTIAL=454, CRYPTOGRAPHIC=455, CURSOR_CLOSE_ON_COMMIT=456, CURSOR_DEFAULT=457, 
		DATE_CORRELATION_OPTIMIZATION=458, DATEADD=459, DATEDIFF=460, DATENAME=461, 
		DATEPART=462, DAYS=463, DB_CHAINING=464, DB_FAILOVER=465, DECRYPTION=466, 
		DEFAULT_DOUBLE_QUOTE=467, DEFAULT_FULLTEXT_LANGUAGE=468, DEFAULT_LANGUAGE=469, 
		DELAY=470, DELAYED_DURABILITY=471, DELETED=472, DENSE_RANK=473, DEPENDENTS=474, 
		DES=475, DESCRIPTION=476, DESX=477, DHCP=478, DIALOG=479, DIRECTORY_NAME=480, 
		DISABLE=481, DISABLE_BROKER=482, DISABLED=483, DISK_DRIVE=484, DOCUMENT=485, 
		DYNAMIC=486, ELEMENTS=487, EMERGENCY=488, EMPTY=489, ENABLE=490, ENABLE_BROKER=491, 
		ENCRYPTED_VALUE=492, ENCRYPTION=493, ENDPOINT_URL=494, ERROR_BROKER_CONVERSATIONS=495, 
		EXCLUSIVE=496, EXECUTABLE=497, EXIST=498, EXPAND=499, EXPIRY_DATE=500, 
		EXPLICIT=501, FAIL_OPERATION=502, FAILOVER_MODE=503, FAILURE=504, FAILURE_CONDITION_LEVEL=505, 
		FAST=506, FAST_FORWARD=507, FILEGROUP=508, FILEGROWTH=509, FILEPATH=510, 
		FILESTREAM=511, FILTER=512, FIRST=513, FIRST_VALUE=514, FOLLOWING=515, 
		FORCE=516, FORCE_FAILOVER_ALLOW_DATA_LOSS=517, FORCED=518, FORMAT=519, 
		FORWARD_ONLY=520, FULLSCAN=521, FULLTEXT=522, GB=523, GETDATE=524, GETUTCDATE=525, 
		GLOBAL=526, GO=527, GROUP_MAX_REQUESTS=528, GROUPING=529, GROUPING_ID=530, 
		HADR=531, HASH=532, HEALTH_CHECK_TIMEOUT=533, HIGH=534, HONOR_BROKER_PRIORITY=535, 
		HOURS=536, IDENTITY_VALUE=537, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=538, 
		IMMEDIATE=539, IMPERSONATE=540, IMPORTANCE=541, INCLUDE_NULL_VALUES=542, 
		INCREMENTAL=543, INITIATOR=544, INPUT=545, INSENSITIVE=546, INSERTED=547, 
		INT=548, IP=549, ISOLATION=550, JSON=551, KB=552, KEEP=553, KEEPFIXED=554, 
		KEY_SOURCE=555, KEYS=556, KEYSET=557, LAG=558, LAST=559, LAST_VALUE=560, 
		LEAD=561, LEVEL=562, LIST=563, LISTENER=564, LISTENER_URL=565, LOB_COMPACTION=566, 
		LOCAL=567, LOCATION=568, LOCK=569, LOCK_ESCALATION=570, LOGIN=571, LOOP=572, 
		LOW=573, MANUAL=574, MARK=575, MATERIALIZED=576, MAX=577, MAX_CPU_PERCENT=578, 
		MAX_DOP=579, MAX_FILES=580, MAX_IOPS_PER_VOLUME=581, MAX_MEMORY_PERCENT=582, 
		MAX_PROCESSES=583, MAX_QUEUE_READERS=584, MAX_ROLLOVER_FILES=585, MAXDOP=586, 
		MAXRECURSION=587, MAXSIZE=588, MB=589, MEDIUM=590, MEMORY_OPTIMIZED_DATA=591, 
		MESSAGE=592, MIN=593, MIN_ACTIVE_ROWVERSION=594, MIN_CPU_PERCENT=595, 
		MIN_IOPS_PER_VOLUME=596, MIN_MEMORY_PERCENT=597, MINUTES=598, MIRROR_ADDRESS=599, 
		MIXED_PAGE_ALLOCATION=600, MODE=601, MODIFY=602, MOVE=603, MULTI_USER=604, 
		NAME=605, NESTED_TRIGGERS=606, NEW_ACCOUNT=607, NEW_BROKER=608, NEW_PASSWORD=609, 
		NEXT=610, NO=611, NO_TRUNCATE=612, NO_WAIT=613, NOCOUNT=614, NODES=615, 
		NOEXPAND=616, NON_TRANSACTED_ACCESS=617, NORECOMPUTE=618, NORECOVERY=619, 
		NOWAIT=620, NTILE=621, NUMANODE=622, NUMBER=623, NUMERIC_ROUNDABORT=624, 
		OBJECT=625, OFFLINE=626, OFFSET=627, OLD_ACCOUNT=628, ONLINE=629, ONLY=630, 
		OPEN_EXISTING=631, OPTIMISTIC=632, OPTIMIZE=633, OUT=634, OUTPUT=635, 
		OWNER=636, PAGE_VERIFY=637, PARAMETERIZATION=638, PARTITION=639, PARTITIONS=640, 
		PARTNER=641, PATH=642, POISON_MESSAGE_HANDLING=643, POOL=644, PORT=645, 
		PRECEDING=646, PRIMARY_ROLE=647, PRIOR=648, PRIORITY=649, PRIORITY_LEVEL=650, 
		PRIVATE=651, PRIVATE_KEY=652, PRIVILEGES=653, PROCEDURE_NAME=654, PROPERTY=655, 
		PROVIDER=656, PROVIDER_KEY_NAME=657, QUERY=658, QUEUE=659, QUEUE_DELAY=660, 
		QUOTED_IDENTIFIER=661, RANGE=662, RANK=663, RC2=664, RC4=665, RC4_128=666, 
		READ_COMMITTED_SNAPSHOT=667, READ_ONLY=668, READ_ONLY_ROUTING_LIST=669, 
		READ_WRITE=670, READONLY=671, REBUILD=672, RECEIVE=673, RECOMPILE=674, 
		RECOVERY=675, RECURSIVE_TRIGGERS=676, RELATIVE=677, REMOTE=678, REMOTE_SERVICE_NAME=679, 
		REMOVE=680, REORGANIZE=681, REPEATABLE=682, REPLICA=683, REQUEST_MAX_CPU_TIME_SEC=684, 
		REQUEST_MAX_MEMORY_GRANT_PERCENT=685, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=686, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=687, RESERVE_DISK_SPACE=688, 
		RESOURCE=689, RESOURCE_MANAGER_LOCATION=690, RESTRICTED_USER=691, RETENTION=692, 
		ROBUST=693, ROOT=694, ROUTE=695, ROW=696, ROW_NUMBER=697, ROWGUID=698, 
		ROWS=699, SAMPLE=700, SCHEMABINDING=701, SCOPED=702, SCROLL=703, SCROLL_LOCKS=704, 
		SEARCH=705, SECONDARY=706, SECONDARY_ONLY=707, SECONDARY_ROLE=708, SECONDS=709, 
		SECRET=710, SECURITY_LOG=711, SEEDING_MODE=712, SELF=713, SEMI_SENSITIVE=714, 
		SEND=715, SENT=716, SERIALIZABLE=717, SESSION_TIMEOUT=718, SETERROR=719, 
		SHARE=720, SHOWPLAN=721, SIGNATURE=722, SIMPLE=723, SINGLE_USER=724, SIZE=725, 
		SMALLINT=726, SNAPSHOT=727, SPATIAL_WINDOW_MAX_CELLS=728, STANDBY=729, 
		START_DATE=730, STATIC=731, STATS_STREAM=732, STATUS=733, STDEV=734, STDEVP=735, 
		STOPLIST=736, STUFF=737, SUBJECT=738, SUM=739, SUSPEND=740, SYMMETRIC=741, 
		SYNCHRONOUS_COMMIT=742, SYNONYM=743, TAKE=744, TARGET_RECOVERY_TIME=745, 
		TB=746, TEXTIMAGE_ON=747, THROW=748, TIES=749, TIME=750, TIMEOUT=751, 
		TIMER=752, TINYINT=753, TORN_PAGE_DETECTION=754, TRANSFORM_NOISE_WORDS=755, 
		TRIPLE_DES=756, TRIPLE_DES_3KEY=757, TRUSTWORTHY=758, TRY=759, TSQL=760, 
		TWO_DIGIT_YEAR_CUTOFF=761, TYPE=762, TYPE_WARNING=763, UNBOUNDED=764, 
		UNCOMMITTED=765, UNKNOWN=766, UNLIMITED=767, USING=768, VALID_XML=769, 
		VALIDATION=770, VALUE=771, VAR=772, VARP=773, VIEW_METADATA=774, VIEWS=775, 
		WAIT=776, WELL_FORMED_XML=777, WITHOUT_ARRAY_WRAPPER=778, WORK=779, WORKLOAD=780, 
		XML=781, XMLDATA=782, XMLNAMESPACES=783, XMLSCHEMA=784, XSINIL=785, DOLLAR_ACTION=786, 
		SPACE=787, COMMENT=788, LINE_COMMENT=789, DOUBLE_QUOTE_ID=790, SINGLE_QUOTE=791, 
		SQUARE_BRACKET_ID=792, LOCAL_ID=793, DECIMAL=794, ID=795, QUOTED_URL=796, 
		QUOTED_HOST_AND_PORT=797, STRING=798, BINARY=799, FLOAT=800, REAL=801, 
		EQUAL=802, GREATER=803, LESS=804, EXCLAMATION=805, PLUS_ASSIGN=806, MINUS_ASSIGN=807, 
		MULT_ASSIGN=808, DIV_ASSIGN=809, MOD_ASSIGN=810, AND_ASSIGN=811, XOR_ASSIGN=812, 
		OR_ASSIGN=813, DOUBLE_BAR=814, DOT=815, UNDERLINE=816, AT=817, SHARP=818, 
		DOLLAR=819, LR_BRACKET=820, RR_BRACKET=821, COMMA=822, SEMI=823, COLON=824, 
		STAR=825, DIVIDE=826, MODULE=827, PLUS=828, MINUS=829, BIT_NOT=830, BIT_OR=831, 
		BIT_AND=832, BIT_XOR=833, IPV4_OCTECT=834;
	public const int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_sql_clauses = 2, RULE_sql_clause = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_backup_statement = 6, RULE_cfl_statement = 7, 
		RULE_block_statement = 8, RULE_break_statement = 9, RULE_continue_statement = 10, 
		RULE_goto_statement = 11, RULE_return_statement = 12, RULE_if_statement = 13, 
		RULE_throw_statement = 14, RULE_throw_error_number = 15, RULE_throw_message = 16, 
		RULE_throw_state = 17, RULE_try_catch_statement = 18, RULE_waitfor_statement = 19, 
		RULE_while_statement = 20, RULE_print_statement = 21, RULE_raiseerror_statement = 22, 
		RULE_empty_statement = 23, RULE_another_statement = 24, RULE_alter_application_role = 25, 
		RULE_create_application_role = 26, RULE_drop_aggregate = 27, RULE_drop_application_role = 28, 
		RULE_alter_assembly = 29, RULE_alter_assembly_start = 30, RULE_alter_assembly_clause = 31, 
		RULE_alter_assembly_from_clause = 32, RULE_alter_assembly_from_clause_start = 33, 
		RULE_alter_assembly_drop_clause = 34, RULE_alter_assembly_drop_multiple_files = 35, 
		RULE_alter_assembly_drop = 36, RULE_alter_assembly_add_clause = 37, RULE_alter_asssembly_add_clause_start = 38, 
		RULE_alter_assembly_client_file_clause = 39, RULE_alter_assembly_file_name = 40, 
		RULE_alter_assembly_file_bits = 41, RULE_alter_assembly_as = 42, RULE_alter_assembly_with_clause = 43, 
		RULE_alter_assembly_with = 44, RULE_client_assembly_specifier = 45, RULE_assembly_option = 46, 
		RULE_network_file_share = 47, RULE_network_computer = 48, RULE_network_file_start = 49, 
		RULE_file_path = 50, RULE_file_directory_path_separator = 51, RULE_local_file = 52, 
		RULE_local_drive = 53, RULE_multiple_local_files = 54, RULE_multiple_local_file_start = 55, 
		RULE_create_assembly = 56, RULE_drop_assembly = 57, RULE_alter_asymmetric_key = 58, 
		RULE_alter_asymmetric_key_start = 59, RULE_asymmetric_key_option = 60, 
		RULE_asymmetric_key_option_start = 61, RULE_asymmetric_key_password_change_option = 62, 
		RULE_create_asymmetric_key = 63, RULE_drop_asymmetric_key = 64, RULE_alter_authorization = 65, 
		RULE_authorization_grantee = 66, RULE_entity_to = 67, RULE_colon_colon = 68, 
		RULE_alter_authorization_start = 69, RULE_alter_authorization_for_sql_database = 70, 
		RULE_alter_authorization_for_azure_dw = 71, RULE_alter_authorization_for_parallel_dw = 72, 
		RULE_class_type = 73, RULE_class_type_for_sql_database = 74, RULE_class_type_for_azure_dw = 75, 
		RULE_class_type_for_parallel_dw = 76, RULE_drop_availability_group = 77, 
		RULE_alter_availability_group = 78, RULE_alter_availability_group_start = 79, 
		RULE_alter_availability_group_options = 80, RULE_create_or_alter_broker_priority = 81, 
		RULE_drop_broker_priority = 82, RULE_alter_certificate = 83, RULE_alter_column_encryption_key = 84, 
		RULE_create_column_encryption_key = 85, RULE_drop_certificate = 86, RULE_drop_column_encryption_key = 87, 
		RULE_drop_column_master_key = 88, RULE_drop_contract = 89, RULE_drop_credential = 90, 
		RULE_drop_cryptograhic_provider = 91, RULE_drop_database = 92, RULE_drop_database_audit_specification = 93, 
		RULE_drop_database_scoped_credential = 94, RULE_drop_default = 95, RULE_drop_endpoint = 96, 
		RULE_drop_external_data_source = 97, RULE_drop_external_file_format = 98, 
		RULE_drop_external_library = 99, RULE_drop_external_resource_pool = 100, 
		RULE_drop_external_table = 101, RULE_drop_event_notifications = 102, RULE_drop_event_session = 103, 
		RULE_drop_fulltext_catalog = 104, RULE_drop_fulltext_index = 105, RULE_drop_fulltext_stoplist = 106, 
		RULE_drop_login = 107, RULE_drop_master_key = 108, RULE_drop_message_type = 109, 
		RULE_drop_partition_function = 110, RULE_drop_partition_scheme = 111, 
		RULE_drop_queue = 112, RULE_drop_remote_service_binding = 113, RULE_drop_resource_pool = 114, 
		RULE_drop_db_role = 115, RULE_drop_route = 116, RULE_drop_rule = 117, 
		RULE_drop_schema = 118, RULE_drop_search_property_list = 119, RULE_drop_security_policy = 120, 
		RULE_drop_sequence = 121, RULE_drop_server_audit = 122, RULE_drop_server_audit_specification = 123, 
		RULE_drop_server_role = 124, RULE_drop_service = 125, RULE_drop_signature = 126, 
		RULE_drop_statistics_name_azure_dw_and_pdw = 127, RULE_drop_symmetric_key = 128, 
		RULE_drop_synonym = 129, RULE_drop_user = 130, RULE_drop_workload_group = 131, 
		RULE_drop_xml_schema_collection = 132, RULE_disable_trigger = 133, RULE_enable_trigger = 134, 
		RULE_lock_table = 135, RULE_truncate_table = 136, RULE_create_column_master_key = 137, 
		RULE_alter_credential = 138, RULE_create_credential = 139, RULE_alter_cryptographic_provider = 140, 
		RULE_create_cryptographic_provider = 141, RULE_create_event_notification = 142, 
		RULE_create_or_alter_event_session = 143, RULE_event_session_predicate_expression = 144, 
		RULE_event_session_predicate_factor = 145, RULE_event_session_predicate_leaf = 146, 
		RULE_alter_external_data_source = 147, RULE_alter_external_library = 148, 
		RULE_create_external_library = 149, RULE_alter_external_resource_pool = 150, 
		RULE_create_external_resource_pool = 151, RULE_alter_fulltext_catalog = 152, 
		RULE_create_fulltext_catalog = 153, RULE_alter_fulltext_stoplist = 154, 
		RULE_create_fulltext_stoplist = 155, RULE_alter_login_sql_server = 156, 
		RULE_create_login_sql_server = 157, RULE_alter_login_azure_sql = 158, 
		RULE_create_login_azure_sql = 159, RULE_alter_login_azure_sql_dw_and_pdw = 160, 
		RULE_create_login_pdw = 161, RULE_alter_master_key_sql_server = 162, RULE_create_master_key_sql_server = 163, 
		RULE_alter_master_key_azure_sql = 164, RULE_create_master_key_azure_sql = 165, 
		RULE_alter_message_type = 166, RULE_alter_partition_function = 167, RULE_alter_partition_scheme = 168, 
		RULE_alter_remote_service_binding = 169, RULE_create_remote_service_binding = 170, 
		RULE_create_resource_pool = 171, RULE_alter_resource_governor = 172, RULE_alter_db_role = 173, 
		RULE_create_db_role = 174, RULE_create_route = 175, RULE_create_rule = 176, 
		RULE_alter_schema_sql = 177, RULE_create_schema = 178, RULE_create_schema_azure_sql_dw_and_pdw = 179, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 180, RULE_create_search_property_list = 181, 
		RULE_create_security_policy = 182, RULE_alter_sequence = 183, RULE_create_sequence = 184, 
		RULE_alter_server_audit = 185, RULE_create_server_audit = 186, RULE_alter_server_audit_specification = 187, 
		RULE_create_server_audit_specification = 188, RULE_alter_server_configuration = 189, 
		RULE_alter_server_role = 190, RULE_create_server_role = 191, RULE_alter_server_role_pdw = 192, 
		RULE_alter_service = 193, RULE_create_service = 194, RULE_alter_service_master_key = 195, 
		RULE_alter_symmetric_key = 196, RULE_create_symmetric_key = 197, RULE_create_synonym = 198, 
		RULE_alter_user = 199, RULE_create_user = 200, RULE_create_user_azure_sql_dw = 201, 
		RULE_alter_user_azure_sql = 202, RULE_alter_workload_group = 203, RULE_create_workload_group = 204, 
		RULE_create_xml_schema_collection = 205, RULE_create_queue = 206, RULE_queue_settings = 207, 
		RULE_alter_queue = 208, RULE_queue_action = 209, RULE_queue_rebuild_options = 210, 
		RULE_create_contract = 211, RULE_conversation_statement = 212, RULE_message_statement = 213, 
		RULE_merge_statement = 214, RULE_merge_matched = 215, RULE_merge_not_matched = 216, 
		RULE_delete_statement = 217, RULE_delete_statement_from = 218, RULE_insert_statement = 219, 
		RULE_insert_statement_value = 220, RULE_receive_statement = 221, RULE_select_statement = 222, 
		RULE_time = 223, RULE_update_statement = 224, RULE_output_clause = 225, 
		RULE_output_dml_list_elem = 226, RULE_output_column_name = 227, RULE_create_database = 228, 
		RULE_create_index = 229, RULE_create_or_alter_procedure = 230, RULE_create_or_alter_trigger = 231, 
		RULE_create_or_alter_dml_trigger = 232, RULE_dml_trigger_option = 233, 
		RULE_dml_trigger_operation = 234, RULE_create_or_alter_ddl_trigger = 235, 
		RULE_ddl_trigger_operation = 236, RULE_create_or_alter_function = 237, 
		RULE_func_body_returns_select = 238, RULE_func_body_returns_table = 239, 
		RULE_func_body_returns_scalar = 240, RULE_procedure_param = 241, RULE_procedure_option = 242, 
		RULE_function_option = 243, RULE_create_statistics = 244, RULE_update_statistics = 245, 
		RULE_create_table = 246, RULE_table_options = 247, RULE_create_view = 248, 
		RULE_view_attribute = 249, RULE_alter_table = 250, RULE_alter_database = 251, 
		RULE_database_optionspec = 252, RULE_auto_option = 253, RULE_change_tracking_option = 254, 
		RULE_change_tracking_option_list = 255, RULE_containment_option = 256, 
		RULE_cursor_option = 257, RULE_alter_endpoint = 258, RULE_database_mirroring_option = 259, 
		RULE_mirroring_set_option = 260, RULE_mirroring_partner = 261, RULE_mirroring_witness = 262, 
		RULE_witness_partner_equal = 263, RULE_partner_option = 264, RULE_witness_option = 265, 
		RULE_witness_server = 266, RULE_partner_server = 267, RULE_mirroring_host_port_seperator = 268, 
		RULE_partner_server_tcp_prefix = 269, RULE_port_number = 270, RULE_host = 271, 
		RULE_date_correlation_optimization_option = 272, RULE_db_encryption_option = 273, 
		RULE_db_state_option = 274, RULE_db_update_option = 275, RULE_db_user_access_option = 276, 
		RULE_delayed_durability_option = 277, RULE_external_access_option = 278, 
		RULE_hadr_options = 279, RULE_mixed_page_allocation_option = 280, RULE_parameterization_option = 281, 
		RULE_recovery_option = 282, RULE_service_broker_option = 283, RULE_snapshot_option = 284, 
		RULE_sql_option = 285, RULE_target_recovery_time_option = 286, RULE_termination = 287, 
		RULE_drop_index = 288, RULE_drop_relational_or_xml_or_spatial_index = 289, 
		RULE_drop_backward_compatible_index = 290, RULE_drop_procedure = 291, 
		RULE_drop_trigger = 292, RULE_drop_dml_trigger = 293, RULE_drop_ddl_trigger = 294, 
		RULE_drop_function = 295, RULE_drop_statistics = 296, RULE_drop_table = 297, 
		RULE_drop_view = 298, RULE_create_type = 299, RULE_drop_type = 300, RULE_rowset_function_limited = 301, 
		RULE_openquery = 302, RULE_opendatasource = 303, RULE_declare_statement = 304, 
		RULE_cursor_statement = 305, RULE_backup_database = 306, RULE_backup_log = 307, 
		RULE_backup_certificate = 308, RULE_backup_master_key = 309, RULE_backup_service_master_key = 310, 
		RULE_execute_statement = 311, RULE_execute_body = 312, RULE_execute_statement_arg = 313, 
		RULE_execute_var_string = 314, RULE_security_statement = 315, RULE_create_certificate = 316, 
		RULE_existing_keys = 317, RULE_private_key_options = 318, RULE_generate_new_keys = 319, 
		RULE_date_options = 320, RULE_open_key = 321, RULE_close_key = 322, RULE_create_key = 323, 
		RULE_key_options = 324, RULE_algorithm = 325, RULE_encryption_mechanism = 326, 
		RULE_decryption_mechanism = 327, RULE_grant_permission = 328, RULE_set_statement = 329, 
		RULE_transaction_statement = 330, RULE_go_statement = 331, RULE_use_statement = 332, 
		RULE_setuser_statement = 333, RULE_dbcc_clause = 334, RULE_dbcc_options = 335, 
		RULE_execute_clause = 336, RULE_declare_local = 337, RULE_table_type_definition = 338, 
		RULE_xml_type_definition = 339, RULE_xml_schema_collection = 340, RULE_column_def_table_constraints = 341, 
		RULE_column_def_table_constraint = 342, RULE_column_definition = 343, 
		RULE_materialized_column_definition = 344, RULE_column_constraint = 345, 
		RULE_table_constraint = 346, RULE_on_delete = 347, RULE_on_update = 348, 
		RULE_index_options = 349, RULE_index_option = 350, RULE_declare_cursor = 351, 
		RULE_declare_set_cursor_common = 352, RULE_declare_set_cursor_common_partial = 353, 
		RULE_fetch_cursor = 354, RULE_set_special = 355, RULE_constant_LOCAL_ID = 356, 
		RULE_expression = 357, RULE_primitive_expression = 358, RULE_case_expression = 359, 
		RULE_unary_operator_expression = 360, RULE_bracket_expression = 361, RULE_constant_expression = 362, 
		RULE_subquery = 363, RULE_with_expression = 364, RULE_common_table_expression = 365, 
		RULE_update_elem = 366, RULE_search_condition_list = 367, RULE_search_condition = 368, 
		RULE_search_condition_and = 369, RULE_search_condition_not = 370, RULE_predicate = 371, 
		RULE_query_expression = 372, RULE_sql_union = 373, RULE_query_specification = 374, 
		RULE_top_clause = 375, RULE_top_percent = 376, RULE_top_count = 377, RULE_order_by_clause = 378, 
		RULE_for_clause = 379, RULE_xml_common_directives = 380, RULE_order_by_expression = 381, 
		RULE_group_by_item = 382, RULE_option_clause = 383, RULE_option = 384, 
		RULE_optimize_for_arg = 385, RULE_select_list = 386, RULE_udt_method_arguments = 387, 
		RULE_asterisk = 388, RULE_column_elem = 389, RULE_udt_elem = 390, RULE_expression_elem = 391, 
		RULE_select_list_elem = 392, RULE_table_sources = 393, RULE_table_source = 394, 
		RULE_table_source_item_joined = 395, RULE_table_source_item = 396, RULE_open_xml = 397, 
		RULE_schema_declaration = 398, RULE_column_declaration = 399, RULE_change_table = 400, 
		RULE_join_part = 401, RULE_pivot_clause = 402, RULE_unpivot_clause = 403, 
		RULE_full_column_name_list = 404, RULE_table_name_with_hint = 405, RULE_rowset_function = 406, 
		RULE_bulk_option = 407, RULE_derived_table = 408, RULE_function_call = 409, 
		RULE_xml_data_type_methods = 410, RULE_value_method = 411, RULE_query_method = 412, 
		RULE_exist_method = 413, RULE_modify_method = 414, RULE_nodes_method = 415, 
		RULE_switch_section = 416, RULE_switch_search_condition_section = 417, 
		RULE_as_column_alias = 418, RULE_as_table_alias = 419, RULE_table_alias = 420, 
		RULE_with_table_hints = 421, RULE_insert_with_table_hints = 422, RULE_table_hint = 423, 
		RULE_index_value = 424, RULE_column_alias_list = 425, RULE_column_alias = 426, 
		RULE_table_value_constructor = 427, RULE_expression_list = 428, RULE_ranking_windowed_function = 429, 
		RULE_aggregate_windowed_function = 430, RULE_analytic_windowed_function = 431, 
		RULE_all_distinct_expression = 432, RULE_over_clause = 433, RULE_row_or_range_clause = 434, 
		RULE_window_frame_extent = 435, RULE_window_frame_bound = 436, RULE_window_frame_preceding = 437, 
		RULE_window_frame_following = 438, RULE_create_database_option = 439, 
		RULE_database_filestream_option = 440, RULE_database_file_spec = 441, 
		RULE_file_group = 442, RULE_file_spec = 443, RULE_entity_name = 444, RULE_entity_name_for_azure_dw = 445, 
		RULE_entity_name_for_parallel_dw = 446, RULE_full_table_name = 447, RULE_table_name = 448, 
		RULE_simple_name = 449, RULE_func_proc_name_schema = 450, RULE_func_proc_name_database_schema = 451, 
		RULE_func_proc_name_server_database_schema = 452, RULE_ddl_object = 453, 
		RULE_full_column_name = 454, RULE_column_name_list_with_order = 455, RULE_column_name_list = 456, 
		RULE_cursor_name = 457, RULE_on_off = 458, RULE_clustered = 459, RULE_null_notnull = 460, 
		RULE_null_or_default = 461, RULE_scalar_function_name = 462, RULE_begin_conversation_timer = 463, 
		RULE_begin_conversation_dialog = 464, RULE_contract_name = 465, RULE_service_name = 466, 
		RULE_end_conversation = 467, RULE_waitfor_conversation = 468, RULE_get_conversation = 469, 
		RULE_queue_id = 470, RULE_send_conversation = 471, RULE_data_type = 472, 
		RULE_default_value = 473, RULE_constant = 474, RULE_sign = 475, RULE_id = 476, 
		RULE_simple_id = 477, RULE_comparison_operator = 478, RULE_assignment_operator = 479, 
		RULE_file_size = 480;
	public static readonly string[] ruleNames = {
		"tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause", 
		"backup_statement", "cfl_statement", "block_statement", "break_statement", 
		"continue_statement", "goto_statement", "return_statement", "if_statement", 
		"throw_statement", "throw_error_number", "throw_message", "throw_state", 
		"try_catch_statement", "waitfor_statement", "while_statement", "print_statement", 
		"raiseerror_statement", "empty_statement", "another_statement", "alter_application_role", 
		"create_application_role", "drop_aggregate", "drop_application_role", 
		"alter_assembly", "alter_assembly_start", "alter_assembly_clause", "alter_assembly_from_clause", 
		"alter_assembly_from_clause_start", "alter_assembly_drop_clause", "alter_assembly_drop_multiple_files", 
		"alter_assembly_drop", "alter_assembly_add_clause", "alter_asssembly_add_clause_start", 
		"alter_assembly_client_file_clause", "alter_assembly_file_name", "alter_assembly_file_bits", 
		"alter_assembly_as", "alter_assembly_with_clause", "alter_assembly_with", 
		"client_assembly_specifier", "assembly_option", "network_file_share", 
		"network_computer", "network_file_start", "file_path", "file_directory_path_separator", 
		"local_file", "local_drive", "multiple_local_files", "multiple_local_file_start", 
		"create_assembly", "drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "drop_availability_group", 
		"alter_availability_group", "alter_availability_group_start", "alter_availability_group_options", 
		"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate", 
		"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate", 
		"drop_column_encryption_key", "drop_column_master_key", "drop_contract", 
		"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
		"drop_database_scoped_credential", "drop_default", "drop_endpoint", "drop_external_data_source", 
		"drop_external_file_format", "drop_external_library", "drop_external_resource_pool", 
		"drop_external_table", "drop_event_notifications", "drop_event_session", 
		"drop_fulltext_catalog", "drop_fulltext_index", "drop_fulltext_stoplist", 
		"drop_login", "drop_master_key", "drop_message_type", "drop_partition_function", 
		"drop_partition_scheme", "drop_queue", "drop_remote_service_binding", 
		"drop_resource_pool", "drop_db_role", "drop_route", "drop_rule", "drop_schema", 
		"drop_search_property_list", "drop_security_policy", "drop_sequence", 
		"drop_server_audit", "drop_server_audit_specification", "drop_server_role", 
		"drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
		"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
		"alter_cryptographic_provider", "create_cryptographic_provider", "create_event_notification", 
		"create_or_alter_event_session", "event_session_predicate_expression", 
		"event_session_predicate_factor", "event_session_predicate_leaf", "alter_external_data_source", 
		"alter_external_library", "create_external_library", "alter_external_resource_pool", 
		"create_external_resource_pool", "alter_fulltext_catalog", "create_fulltext_catalog", 
		"alter_fulltext_stoplist", "create_fulltext_stoplist", "alter_login_sql_server", 
		"create_login_sql_server", "alter_login_azure_sql", "create_login_azure_sql", 
		"alter_login_azure_sql_dw_and_pdw", "create_login_pdw", "alter_master_key_sql_server", 
		"create_master_key_sql_server", "alter_master_key_azure_sql", "create_master_key_azure_sql", 
		"alter_message_type", "alter_partition_function", "alter_partition_scheme", 
		"alter_remote_service_binding", "create_remote_service_binding", "create_resource_pool", 
		"alter_resource_governor", "alter_db_role", "create_db_role", "create_route", 
		"create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
		"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
		"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
		"alter_server_audit_specification", "create_server_audit_specification", 
		"alter_server_configuration", "alter_server_role", "create_server_role", 
		"alter_server_role_pdw", "alter_service", "create_service", "alter_service_master_key", 
		"alter_symmetric_key", "create_symmetric_key", "create_synonym", "alter_user", 
		"create_user", "create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
		"create_workload_group", "create_xml_schema_collection", "create_queue", 
		"queue_settings", "alter_queue", "queue_action", "queue_rebuild_options", 
		"create_contract", "conversation_statement", "message_statement", "merge_statement", 
		"merge_matched", "merge_not_matched", "delete_statement", "delete_statement_from", 
		"insert_statement", "insert_statement_value", "receive_statement", "select_statement", 
		"time", "update_statement", "output_clause", "output_dml_list_elem", "output_column_name", 
		"create_database", "create_index", "create_or_alter_procedure", "create_or_alter_trigger", 
		"create_or_alter_dml_trigger", "dml_trigger_option", "dml_trigger_operation", 
		"create_or_alter_ddl_trigger", "ddl_trigger_operation", "create_or_alter_function", 
		"func_body_returns_select", "func_body_returns_table", "func_body_returns_scalar", 
		"procedure_param", "procedure_option", "function_option", "create_statistics", 
		"update_statistics", "create_table", "table_options", "create_view", "view_attribute", 
		"alter_table", "alter_database", "database_optionspec", "auto_option", 
		"change_tracking_option", "change_tracking_option_list", "containment_option", 
		"cursor_option", "alter_endpoint", "database_mirroring_option", "mirroring_set_option", 
		"mirroring_partner", "mirroring_witness", "witness_partner_equal", "partner_option", 
		"witness_option", "witness_server", "partner_server", "mirroring_host_port_seperator", 
		"partner_server_tcp_prefix", "port_number", "host", "date_correlation_optimization_option", 
		"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option", 
		"delayed_durability_option", "external_access_option", "hadr_options", 
		"mixed_page_allocation_option", "parameterization_option", "recovery_option", 
		"service_broker_option", "snapshot_option", "sql_option", "target_recovery_time_option", 
		"termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
		"drop_backward_compatible_index", "drop_procedure", "drop_trigger", "drop_dml_trigger", 
		"drop_ddl_trigger", "drop_function", "drop_statistics", "drop_table", 
		"drop_view", "create_type", "drop_type", "rowset_function_limited", "openquery", 
		"opendatasource", "declare_statement", "cursor_statement", "backup_database", 
		"backup_log", "backup_certificate", "backup_master_key", "backup_service_master_key", 
		"execute_statement", "execute_body", "execute_statement_arg", "execute_var_string", 
		"security_statement", "create_certificate", "existing_keys", "private_key_options", 
		"generate_new_keys", "date_options", "open_key", "close_key", "create_key", 
		"key_options", "algorithm", "encryption_mechanism", "decryption_mechanism", 
		"grant_permission", "set_statement", "transaction_statement", "go_statement", 
		"use_statement", "setuser_statement", "dbcc_clause", "dbcc_options", "execute_clause", 
		"declare_local", "table_type_definition", "xml_type_definition", "xml_schema_collection", 
		"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
		"materialized_column_definition", "column_constraint", "table_constraint", 
		"on_delete", "on_update", "index_options", "index_option", "declare_cursor", 
		"declare_set_cursor_common", "declare_set_cursor_common_partial", "fetch_cursor", 
		"set_special", "constant_LOCAL_ID", "expression", "primitive_expression", 
		"case_expression", "unary_operator_expression", "bracket_expression", 
		"constant_expression", "subquery", "with_expression", "common_table_expression", 
		"update_elem", "search_condition_list", "search_condition", "search_condition_and", 
		"search_condition_not", "predicate", "query_expression", "sql_union", 
		"query_specification", "top_clause", "top_percent", "top_count", "order_by_clause", 
		"for_clause", "xml_common_directives", "order_by_expression", "group_by_item", 
		"option_clause", "option", "optimize_for_arg", "select_list", "udt_method_arguments", 
		"asterisk", "column_elem", "udt_elem", "expression_elem", "select_list_elem", 
		"table_sources", "table_source", "table_source_item_joined", "table_source_item", 
		"open_xml", "schema_declaration", "column_declaration", "change_table", 
		"join_part", "pivot_clause", "unpivot_clause", "full_column_name_list", 
		"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
		"function_call", "xml_data_type_methods", "value_method", "query_method", 
		"exist_method", "modify_method", "nodes_method", "switch_section", "switch_search_condition_section", 
		"as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
		"insert_with_table_hints", "table_hint", "index_value", "column_alias_list", 
		"column_alias", "table_value_constructor", "expression_list", "ranking_windowed_function", 
		"aggregate_windowed_function", "analytic_windowed_function", "all_distinct_expression", 
		"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
		"window_frame_preceding", "window_frame_following", "create_database_option", 
		"database_filestream_option", "database_file_spec", "file_group", "file_spec", 
		"entity_name", "entity_name_for_azure_dw", "entity_name_for_parallel_dw", 
		"full_table_name", "table_name", "simple_name", "func_proc_name_schema", 
		"func_proc_name_database_schema", "func_proc_name_server_database_schema", 
		"ddl_object", "full_column_name", "column_name_list_with_order", "column_name_list", 
		"cursor_name", "on_off", "clustered", "null_notnull", "null_or_default", 
		"scalar_function_name", "begin_conversation_timer", "begin_conversation_dialog", 
		"contract_name", "service_name", "end_conversation", "waitfor_conversation", 
		"get_conversation", "queue_id", "send_conversation", "data_type", "default_value", 
		"constant", "sign", "id", "simple_id", "comparison_operator", "assignment_operator", 
		"file_size"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ABSENT'", "'ADD'", "'AES'", "'ALL'", "'ALLOW_CONNECTIONS'", "'ALLOW_MULTIPLE_EVENT_LOSS'", 
		"'ALLOW_SINGLE_EVENT_LOSS'", "'ALTER'", "'AND'", "'ANONYMOUS'", "'ANY'", 
		"'APPEND'", "'APPLICATION'", "'AS'", "'ASC'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", 
		"'AUTHORIZATION'", "'AUTHENTICATION'", "'AUTOMATED_BACKUP_PREFERENCE'", 
		"'AUTOMATIC'", "'AVAILABILITY_MODE'", "'\\'", "'BACKUP'", "'BEFORE'", 
		"'BEGIN'", "'BETWEEN'", "'BLOCK'", "'BLOCKSIZE'", "'BLOCKING_HIERARCHY'", 
		"'BREAK'", "'BROWSE'", "'BUFFER'", "'BUFFERCOUNT'", "'BULK'", "'BY'", 
		"'CACHE'", "'CALLED'", "'CASCADE'", "'CASE'", "'CERTIFICATE'", "'CHANGETABLE'", 
		"'CHANGES'", "'CHECK'", "'CHECKPOINT'", "'CHECK_POLICY'", "'CHECK_EXPIRATION'", 
		"'CLASSIFIER_FUNCTION'", "'CLOSE'", "'CLUSTER'", "'CLUSTERED'", "'COALESCE'", 
		"'COLLATE'", "'COLUMN'", "'COMPRESSION'", "'COMMIT'", "'COMPUTE'", "'CONFIGURATION'", 
		"'CONSTRAINT'", "'CONTAINMENT'", "'CONTAINS'", "'CONTAINSTABLE'", "'CONTEXT'", 
		"'CONTINUE'", "'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", 
		"'CONVERSATION'", null, "'COPY_ONLY'", "'CREATE'", "'CROSS'", "'CURRENT'", 
		"'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
		"'CURSOR'", "'CYCLE'", "'DATA'", "'DATA_COMPRESSION'", "'DATA_SOURCE'", 
		"'DATABASE'", "'DATABASE_MIRRORING'", "'DBCC'", "'DEALLOCATE'", "'DECLARE'", 
		"'DEFAULT'", "'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", "'DELETE'", "'DENY'", 
		"'DESC'", "'DIAGNOSTICS'", "'DIFFERENTIAL'", "'DISK'", "'DISTINCT'", "'DISTRIBUTED'", 
		"'DOUBLE'", "'\\\\'", "'//'", "'DROP'", "'DTC_SUPPORT'", "'DUMP'", "'ELSE'", 
		"'ENABLED'", "'END'", "'ENDPOINT'", "'ERRLVL'", "'ESCAPE'", "'ERROR'", 
		"'EVENT'", null, "'EVENT_RETENTION_MODE'", "'EXCEPT'", "'EXECUTABLE_FILE'", 
		null, "'EXISTS'", "'EXPIREDATE'", "'EXIT'", "'EXTENSION'", "'EXTERNAL'", 
		"'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", "'FAN_IN'", 
		"'FETCH'", "'FILE'", "'FILENAME'", "'FILLFACTOR'", "'FILE_SNAPSHOT'", 
		"'FOR'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", "'FOREIGN'", 
		"'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FUNCTION'", "'GET'", 
		"'GOTO'", "'GOVERNOR'", "'GRANT'", "'GROUP'", "'HAVING'", "'HASHED'", 
		"'HEALTHCHECKTIMEOUT'", "'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", 
		"'IF'", "'IIF'", "'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", "'INFINITE'", 
		"'INIT'", "'INNER'", "'INSERT'", "'INSTEAD'", "'INTERSECT'", "'INTO'", 
		null, null, "'IS'", "'ISNULL'", "'JOIN'", "'KERBEROS'", "'KEY'", "'KEY_PATH'", 
		"'KEY_STORE_PROVIDER_NAME'", "'KILL'", "'LANGUAGE'", "'LEFT'", "'LIBRARY'", 
		"'LIFETIME'", "'LIKE'", "'LINENO'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", 
		"'LOAD'", "'LOCAL_SERVICE_NAME'", "'LOG'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", 
		"'MAXTRANSFER'", "'MAXVALUE'", "'MAX_DISPATCH_LATENCY'", "'MAX_EVENT_SIZE'", 
		"'MAX_SIZE'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MEDIADESCRIPTION'", 
		"'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", "'MERGE'", "'MESSAGE_FORWARDING'", 
		"'MESSAGE_FORWARD_SIZE'", "'MINVALUE'", "'MIRROR'", "'MUST_CHANGE'", "'NATIONAL'", 
		"'NEGOTIATE'", "'NOCHECK'", "'NOFORMAT'", "'NOINIT'", "'NONCLUSTERED'", 
		"'NONE'", "'NOREWIND'", "'NOSKIP'", "'NOUNLOAD'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", 
		"'NO_EVENT_LOSS'", "'NOT'", "'NOTIFICATION'", "'NTLM'", "'NULL'", "'NULLIF'", 
		"'OF'", "'OFF'", "'OFFSETS'", "'OLD_PASSWORD'", "'ON'", "'ON_FAILURE'", 
		"'OPEN'", "'OPENDATASOURCE'", "'OPENQUERY'", "'OPENROWSET'", "'OPENXML'", 
		"'OPTION'", "'OR'", "'ORDER'", "'OUTER'", "'OVER'", "'PAGE'", "'PARAM_NODE'", 
		"'PARTIAL'", "'PASSWORD'", "'PERCENT'", "'PERMISSION_SET'", "'PER_CPU'", 
		"'PER_DB'", "'PER_NODE'", "'PIVOT'", "'PLAN'", "'PLATFORM'", "'POLICY'", 
		"'PRECISION'", "'PREDICATE'", "'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", 
		"'PROCESS'", "'PUBLIC'", "'PYTHON'", "'R'", "'RAISERROR'", "'RAW'", "'READ'", 
		"'READTEXT'", "'READ_WRITE_FILEGROUPS'", "'RECONFIGURE'", "'REFERENCES'", 
		"'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
		"'REPLICATION'", "'REQUIRED'", "'RESET'", "'RESTART'", "'RESTORE'", "'RESTRICT'", 
		"'RESUME'", "'RETAINDAYS'", "'RETURN'", "'RETURNS'", "'REVERT'", "'REVOKE'", 
		"'REWIND'", "'RIGHT'", "'ROLLBACK'", "'ROLE'", "'ROWCOUNT'", "'ROWGUIDCOL'", 
		"'RSA_512'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", "'RSA_4096'", "'SAFETY'", 
		"'RULE'", "'SAFE'", "'SAVE'", "'SCHEDULER'", "'SCHEMA'", "'SCHEME'", "'SECURITY'", 
		"'SECURITYAUDIT'", "'SELECT'", "'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", 
		"'SEMANTICSIMILARITYTABLE'", "'SEQUENCE'", "'SERVER'", "'SERVICE'", "'SERVICE_BROKER'", 
		"'SERVICE_NAME'", "'SESSION'", "'SESSION_USER'", "'SET'", "'SETUSER'", 
		"'SHUTDOWN'", "'SID'", "'SKIP'", "'SOFTNUMA'", "'SOME'", "'SOURCE'", "'SPECIFICATION'", 
		"'SPLIT'", "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", 
		"'STATISTICS'", "'STATE'", "'STATS'", "'START'", "'STARTED'", "'STARTUP_STATE'", 
		"'STOP'", "'STOPPED'", "'STOP_ON_ERROR'", "'SUPPORTED'", "'SYSTEM'", "'SYSTEM_USER'", 
		"'TABLE'", "'TABLESAMPLE'", "'TAPE'", "'TARGET'", "'TCP'", "'TEXTSIZE'", 
		"'THEN'", "'TO'", "'TOP'", "'TRACK_CAUSALITY'", "'TRAN'", "'TRANSACTION'", 
		"'TRANSFER'", "'TRIGGER'", "'TRUNCATE'", "'TSEQUAL'", "'UNCHECKED'", "'UNION'", 
		"'UNIQUE'", "'UNLOCK'", "'UNPIVOT'", "'UNSAFE'", "'UPDATE'", "'UPDATETEXT'", 
		"'URL'", "'USE'", "'USED'", "'USER'", "'VALUES'", "'VARYING'", "'VERBOSELOGGING'", 
		"'VIEW'", "'VISIBILITY'", "'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WINDOWS'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'WITNESS'", "'WRITETEXT'", 
		"'ABSOLUTE'", "'ACCENT_SENSITIVITY'", "'ACTION'", "'ACTIVATION'", "'ACTIVE'", 
		"'ADDRESS'", "'AES_128'", "'AES_192'", "'AES_256'", "'AFFINITY'", "'AFTER'", 
		"'AGGREGATE'", "'ALGORITHM'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
		"'ALLOW_SNAPSHOT_ISOLATION'", "'ALLOWED'", "'ANSI_NULL_DEFAULT'", "'ANSI_NULLS'", 
		"'ANSI_PADDING'", "'ANSI_WARNINGS'", "'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", 
		"'ASSEMBLY'", "'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", 
		"'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
		"'AUTO_UPDATE_STATISTICS_ASYNC'", "'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", 
		"'BEGIN_DIALOG'", "'BIGINT'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", 
		"'BINDING'", "'BLOB_STORAGE'", "'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", 
		"'CALLER'", "'CAP_CPU_PERCENT'", null, "'CATALOG'", "'CATCH'", "'CHANGE_RETENTION'", 
		"'CHANGE_TRACKING'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
		"'COLUMN_MASTER_KEY'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", "'CONCAT'", 
		"'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", "'CONTROL'", "'COOKIE'", "'COUNT'", 
		"'COUNT_BIG'", "'COUNTER'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
		"'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CURSOR_CLOSE_ON_COMMIT'", "'CURSOR_DEFAULT'", 
		"'DATE_CORRELATION_OPTIMIZATION'", "'DATEADD'", "'DATEDIFF'", "'DATENAME'", 
		"'DATEPART'", "'DAYS'", "'DB_CHAINING'", "'DB_FAILOVER'", "'DECRYPTION'", 
		null, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", "'DELAY'", 
		"'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'", "'DEPENDENTS'", "'DES'", 
		"'DESCRIPTION'", "'DESX'", "'DHCP'", "'DIALOG'", "'DIRECTORY_NAME'", "'DISABLE'", 
		"'DISABLE_BROKER'", "'DISABLED'", null, "'DOCUMENT'", "'DYNAMIC'", "'ELEMENTS'", 
		"'EMERGENCY'", "'EMPTY'", "'ENABLE'", "'ENABLE_BROKER'", "'ENCRYPTED_VALUE'", 
		"'ENCRYPTION'", "'ENDPOINT_URL'", "'ERROR_BROKER_CONVERSATIONS'", "'EXCLUSIVE'", 
		"'EXECUTABLE'", "'EXIST'", "'EXPAND'", "'EXPIRY_DATE'", "'EXPLICIT'", 
		"'FAIL_OPERATION'", "'FAILOVER_MODE'", "'FAILURE'", "'FAILURE_CONDITION_LEVEL'", 
		"'FAST'", "'FAST_FORWARD'", "'FILEGROUP'", "'FILEGROWTH'", "'FILEPATH'", 
		"'FILESTREAM'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FOLLOWING'", 
		"'FORCE'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORCED'", "'FORMAT'", 
		"'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", "'GB'", "'GETDATE'", "'GETUTCDATE'", 
		"'GLOBAL'", "'GO'", "'GROUP_MAX_REQUESTS'", "'GROUPING'", "'GROUPING_ID'", 
		"'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", "'HIGH'", "'HONOR_BROKER_PRIORITY'", 
		"'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
		"'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCLUDE_NULL_VALUES'", 
		"'INCREMENTAL'", "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", "'INSERTED'", 
		"'INT'", "'IP'", "'ISOLATION'", "'JSON'", "'KB'", "'KEEP'", "'KEEPFIXED'", 
		"'KEY_SOURCE'", "'KEYS'", "'KEYSET'", "'LAG'", "'LAST'", "'LAST_VALUE'", 
		"'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", "'LISTENER_URL'", "'LOB_COMPACTION'", 
		"'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOGIN'", "'LOOP'", 
		"'LOW'", "'MANUAL'", "'MARK'", "'MATERIALIZED'", "'MAX'", "'MAX_CPU_PERCENT'", 
		"'MAX_DOP'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY_PERCENT'", 
		"'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", "'MAXDOP'", 
		"'MAXRECURSION'", "'MAXSIZE'", "'MB'", "'MEDIUM'", "'MEMORY_OPTIMIZED_DATA'", 
		"'MESSAGE'", "'MIN'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
		"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MINUTES'", "'MIRROR_ADDRESS'", 
		"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'MOVE'", "'MULTI_USER'", 
		"'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", "'NEW_BROKER'", "'NEW_PASSWORD'", 
		"'NEXT'", "'NO'", "'NO_TRUNCATE'", "'NO_WAIT'", "'NOCOUNT'", "'NODES'", 
		"'NOEXPAND'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NORECOVERY'", 
		"'NOWAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
		"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'", 
		"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", 
		"'OWNER'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", "'PARTITION'", "'PARTITIONS'", 
		"'PARTNER'", "'PATH'", "'POISON_MESSAGE_HANDLING'", "'POOL'", "'PORT'", 
		"'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", 
		"'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", "'PROPERTY'", 
		"'PROVIDER'", "'PROVIDER_KEY_NAME'", "'QUERY'", "'QUEUE'", "'QUEUE_DELAY'", 
		"'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", "'RC2'", "'RC4'", "'RC4_128'", 
		"'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
		"'READ_WRITE'", "'READONLY'", "'REBUILD'", "'RECEIVE'", "'RECOMPILE'", 
		"'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOTE'", "'REMOTE_SERVICE_NAME'", 
		"'REMOVE'", "'REORGANIZE'", "'REPEATABLE'", "'REPLICA'", "'REQUEST_MAX_CPU_TIME_SEC'", 
		"'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
		"'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'RESERVE_DISK_SPACE'", 
		"'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'", 
		"'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", "'ROW_NUMBER'", "'ROWGUID'", 
		"'ROWS'", "'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", 
		"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
		"'SECRET'", "'SECURITY_LOG'", "'SEEDING_MODE'", "'SELF'", "'SEMI_SENSITIVE'", 
		"'SEND'", "'SENT'", "'SERIALIZABLE'", "'SESSION_TIMEOUT'", "'SETERROR'", 
		"'SHARE'", "'SHOWPLAN'", "'SIGNATURE'", "'SIMPLE'", "'SINGLE_USER'", "'SIZE'", 
		"'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'", "'STANDBY'", 
		"'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", "'STDEV'", "'STDEVP'", 
		"'STOPLIST'", "'STUFF'", "'SUBJECT'", "'SUM'", "'SUSPEND'", "'SYMMETRIC'", 
		"'SYNCHRONOUS_COMMIT'", "'SYNONYM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", 
		"'TB'", "'TEXTIMAGE_ON'", "'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", 
		"'TIMER'", "'TINYINT'", "'TORN_PAGE_DETECTION'", "'TRANSFORM_NOISE_WORDS'", 
		"'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", "'TRY'", "'TSQL'", 
		"'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPE_WARNING'", "'UNBOUNDED'", 
		"'UNCOMMITTED'", "'UNKNOWN'", "'UNLIMITED'", "'USING'", "'VALID_XML'", 
		"'VALIDATION'", "'VALUE'", "'VAR'", "'VARP'", "'VIEW_METADATA'", "'VIEWS'", 
		"'WAIT'", "'WELL_FORMED_XML'", "'WITHOUT_ARRAY_WRAPPER'", "'WORK'", "'WORKLOAD'", 
		"'XML'", "'XMLDATA'", "'XMLNAMESPACES'", "'XMLSCHEMA'", "'XSINIL'", "'$ACTION'", 
		null, null, null, null, "'''", null, null, null, null, null, null, null, 
		null, null, null, "'='", "'>'", "'<'", "'!'", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'||'", "'.'", "'_'", "'@'", "'#'", 
		"'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", 
		"'-'", "'~'", "'|'", "'&'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABSENT", "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", "ALLOW_MULTIPLE_EVENT_LOSS", 
		"ALLOW_SINGLE_EVENT_LOSS", "ALTER", "AND", "ANONYMOUS", "ANY", "APPEND", 
		"APPLICATION", "AS", "ASC", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AUTHORIZATION", 
		"AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", "AVAILABILITY_MODE", 
		"BACKSLASH", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", "BLOCK", "BLOCKSIZE", 
		"BLOCKING_HIERARCHY", "BREAK", "BROWSE", "BUFFER", "BUFFERCOUNT", "BULK", 
		"BY", "CACHE", "CALLED", "CASCADE", "CASE", "CERTIFICATE", "CHANGETABLE", 
		"CHANGES", "CHECK", "CHECKPOINT", "CHECK_POLICY", "CHECK_EXPIRATION", 
		"CLASSIFIER_FUNCTION", "CLOSE", "CLUSTER", "CLUSTERED", "COALESCE", "COLLATE", 
		"COLUMN", "COMPRESSION", "COMMIT", "COMPUTE", "CONFIGURATION", "CONSTRAINT", 
		"CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTEXT", "CONTINUE", "CONTINUE_AFTER_ERROR", 
		"CONTRACT", "CONTRACT_NAME", "CONVERSATION", "CONVERT", "COPY_ONLY", "CREATE", 
		"CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"CURRENT_USER", "CURSOR", "CYCLE", "DATA", "DATA_COMPRESSION", "DATA_SOURCE", 
		"DATABASE", "DATABASE_MIRRORING", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", 
		"DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DELETE", "DENY", "DESC", "DIAGNOSTICS", 
		"DIFFERENTIAL", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
		"DOUBLE_FORWARD_SLASH", "DROP", "DTC_SUPPORT", "DUMP", "ELSE", "ENABLED", 
		"END", "ENDPOINT", "ERRLVL", "ESCAPE", "ERROR", "EVENT", "EVENTDATA", 
		"EVENT_RETENTION_MODE", "EXCEPT", "EXECUTABLE_FILE", "EXECUTE", "EXISTS", 
		"EXPIREDATE", "EXIT", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", "FAILOVER", 
		"FAILURECONDITIONLEVEL", "FAN_IN", "FETCH", "FILE", "FILENAME", "FILLFACTOR", 
		"FILE_SNAPSHOT", "FOR", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
		"FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GET", 
		"GOTO", "GOVERNOR", "GRANT", "GROUP", "HAVING", "HASHED", "HEALTHCHECKTIMEOUT", 
		"IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IIF", "IN", "INCLUDE", 
		"INCREMENT", "INDEX", "INFINITE", "INIT", "INNER", "INSERT", "INSTEAD", 
		"INTERSECT", "INTO", "IPV4_ADDR", "IPV6_ADDR", "IS", "ISNULL", "JOIN", 
		"KERBEROS", "KEY", "KEY_PATH", "KEY_STORE_PROVIDER_NAME", "KILL", "LANGUAGE", 
		"LEFT", "LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINUX", "LISTENER_IP", 
		"LISTENER_PORT", "LOAD", "LOCAL_SERVICE_NAME", "LOG", "MATCHED", "MASTER", 
		"MAX_MEMORY", "MAXTRANSFER", "MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_EVENT_SIZE", 
		"MAX_SIZE", "MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", "MEDIANAME", 
		"MEMBER", "MEMORY_PARTITION_MODE", "MERGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MINVALUE", "MIRROR", "MUST_CHANGE", "NATIONAL", "NEGOTIATE", "NOCHECK", 
		"NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", "NOREWIND", "NOSKIP", "NOUNLOAD", 
		"NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", "NOT", "NOTIFICATION", 
		"NTLM", "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "OLD_PASSWORD", "ON", 
		"ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", 
		"OPTION", "OR", "ORDER", "OUTER", "OVER", "PAGE", "PARAM_NODE", "PARTIAL", 
		"PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU", "PER_DB", "PER_NODE", 
		"PIVOT", "PLAN", "PLATFORM", "POLICY", "PRECISION", "PREDICATE", "PRIMARY", 
		"PRINT", "PROC", "PROCEDURE", "PROCESS", "PUBLIC", "PYTHON", "R", "RAISERROR", 
		"RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS", "RECONFIGURE", "REFERENCES", 
		"REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", "REPLICATION", 
		"REQUIRED", "RESET", "RESTART", "RESTORE", "RESTRICT", "RESUME", "RETAINDAYS", 
		"RETURN", "RETURNS", "REVERT", "REVOKE", "REWIND", "RIGHT", "ROLLBACK", 
		"ROLE", "ROWCOUNT", "ROWGUIDCOL", "RSA_512", "RSA_1024", "RSA_2048", "RSA_3072", 
		"RSA_4096", "SAFETY", "RULE", "SAFE", "SAVE", "SCHEDULER", "SCHEMA", "SCHEME", 
		"SECURITY", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
		"SEMANTICSIMILARITYTABLE", "SEQUENCE", "SERVER", "SERVICE", "SERVICE_BROKER", 
		"SERVICE_NAME", "SESSION", "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", 
		"SID", "SKIP_KEYWORD", "SOFTNUMA", "SOME", "SOURCE", "SPECIFICATION", 
		"SPLIT", "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", "STATISTICS", 
		"STATE", "STATS", "START", "STARTED", "STARTUP_STATE", "STOP", "STOPPED", 
		"STOP_ON_ERROR", "SUPPORTED", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
		"TAPE", "TARGET", "TCP", "TEXTSIZE", "THEN", "TO", "TOP", "TRACK_CAUSALITY", 
		"TRAN", "TRANSACTION", "TRANSFER", "TRIGGER", "TRUNCATE", "TSEQUAL", "UNCHECKED", 
		"UNION", "UNIQUE", "UNLOCK", "UNPIVOT", "UNSAFE", "UPDATE", "UPDATETEXT", 
		"URL", "USE", "USED", "USER", "VALUES", "VARYING", "VERBOSELOGGING", "VIEW", 
		"VISIBILITY", "WAITFOR", "WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", 
		"WITHIN", "WITHOUT", "WITNESS", "WRITETEXT", "ABSOLUTE", "ACCENT_SENSITIVITY", 
		"ACTION", "ACTIVATION", "ACTIVE", "ADDRESS", "AES_128", "AES_192", "AES_256", 
		"AFFINITY", "AFTER", "AGGREGATE", "ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
		"ALLOW_SNAPSHOT_ISOLATION", "ALLOWED", "ANSI_NULL_DEFAULT", "ANSI_NULLS", 
		"ANSI_PADDING", "ANSI_WARNINGS", "APPLICATION_LOG", "APPLY", "ARITHABORT", 
		"ASSEMBLY", "AUDIT", "AUDIT_GUID", "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", 
		"AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
		"AVAILABILITY", "AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", "BIGINT", "BINARY_BASE64", 
		"BINARY_CHECKSUM", "BINDING", "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", 
		"BULK_LOGGED", "CALLER", "CAP_CPU_PERCENT", "CAST", "CATALOG", "CATCH", 
		"CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", 
		"COLLECTION", "COLUMN_MASTER_KEY", "COMMITTED", "COMPATIBILITY_LEVEL", 
		"CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTENT", "CONTROL", "COOKIE", "COUNT", 
		"COUNT_BIG", "COUNTER", "CPU", "CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", 
		"CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", "DATE_CORRELATION_OPTIMIZATION", 
		"DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DAYS", "DB_CHAINING", 
		"DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", 
		"DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", 
		"DEPENDENTS", "DES", "DESCRIPTION", "DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", 
		"DISABLE", "DISABLE_BROKER", "DISABLED", "DISK_DRIVE", "DOCUMENT", "DYNAMIC", 
		"ELEMENTS", "EMERGENCY", "EMPTY", "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", 
		"ENCRYPTION", "ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", 
		"EXECUTABLE", "EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", "FAIL_OPERATION", 
		"FAILOVER_MODE", "FAILURE", "FAILURE_CONDITION_LEVEL", "FAST", "FAST_FORWARD", 
		"FILEGROUP", "FILEGROWTH", "FILEPATH", "FILESTREAM", "FILTER", "FIRST", 
		"FIRST_VALUE", "FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
		"FORCED", "FORMAT", "FORWARD_ONLY", "FULLSCAN", "FULLTEXT", "GB", "GETDATE", 
		"GETUTCDATE", "GLOBAL", "GO", "GROUP_MAX_REQUESTS", "GROUPING", "GROUPING_ID", 
		"HADR", "HASH", "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", 
		"HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
		"IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCREMENTAL", "INITIATOR", 
		"INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", "JSON", 
		"KB", "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", "LAG", "LAST", 
		"LAST_VALUE", "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", "LOB_COMPACTION", 
		"LOCAL", "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", "LOOP", "LOW", 
		"MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", "MAX_DOP", 
		"MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", "MAXRECURSION", "MAXSIZE", 
		"MB", "MEDIUM", "MEMORY_OPTIMIZED_DATA", "MESSAGE", "MIN", "MIN_ACTIVE_ROWVERSION", 
		"MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MINUTES", 
		"MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MOVE", "MULTI_USER", 
		"NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", 
		"NEXT", "NO", "NO_TRUNCATE", "NO_WAIT", "NOCOUNT", "NODES", "NOEXPAND", 
		"NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", "NOWAIT", "NTILE", 
		"NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT", "OFFLINE", "OFFSET", 
		"OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", "OPTIMISTIC", "OPTIMIZE", 
		"OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", "PARTITION", 
		"PARTITIONS", "PARTNER", "PATH", "POISON_MESSAGE_HANDLING", "POOL", "PORT", 
		"PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", "PRIVATE", 
		"PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", "PROVIDER", 
		"PROVIDER_KEY_NAME", "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
		"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
		"READ_ONLY_ROUTING_LIST", "READ_WRITE", "READONLY", "REBUILD", "RECEIVE", 
		"RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", "REMOTE", "REMOTE_SERVICE_NAME", 
		"REMOVE", "REORGANIZE", "REPEATABLE", "REPLICA", "REQUEST_MAX_CPU_TIME_SEC", 
		"REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
		"REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESERVE_DISK_SPACE", "RESOURCE", 
		"RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", "RETENTION", "ROBUST", 
		"ROOT", "ROUTE", "ROW", "ROW_NUMBER", "ROWGUID", "ROWS", "SAMPLE", "SCHEMABINDING", 
		"SCOPED", "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
		"SECONDARY_ROLE", "SECONDS", "SECRET", "SECURITY_LOG", "SEEDING_MODE", 
		"SELF", "SEMI_SENSITIVE", "SEND", "SENT", "SERIALIZABLE", "SESSION_TIMEOUT", 
		"SETERROR", "SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER", 
		"SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "STANDBY", 
		"START_DATE", "STATIC", "STATS_STREAM", "STATUS", "STDEV", "STDEVP", "STOPLIST", 
		"STUFF", "SUBJECT", "SUM", "SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", 
		"SYNONYM", "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", 
		"TIES", "TIME", "TIMEOUT", "TIMER", "TINYINT", "TORN_PAGE_DETECTION", 
		"TRANSFORM_NOISE_WORDS", "TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUSTWORTHY", 
		"TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING", "UNBOUNDED", 
		"UNCOMMITTED", "UNKNOWN", "UNLIMITED", "USING", "VALID_XML", "VALIDATION", 
		"VALUE", "VAR", "VARP", "VIEW_METADATA", "VIEWS", "WAIT", "WELL_FORMED_XML", 
		"WITHOUT_ARRAY_WRAPPER", "WORK", "WORKLOAD", "XML", "XMLDATA", "XMLNAMESPACES", 
		"XMLSCHEMA", "XSINIL", "DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", 
		"DOUBLE_QUOTE_ID", "SINGLE_QUOTE", "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", 
		"ID", "QUOTED_URL", "QUOTED_HOST_AND_PORT", "STRING", "BINARY", "FLOAT", 
		"REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
		"OR_ASSIGN", "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", 
		"LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", 
		"MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", 
		"IPV4_OCTECT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TSqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TSqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TSqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TSqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Tsql_fileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TSqlParser.Eof, 0); }
		public BatchContext[] batch() {
			return GetRuleContexts<BatchContext>();
		}
		public BatchContext batch(int i) {
			return GetRuleContext<BatchContext>(i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsql_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTsql_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTsql_file(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsql_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tsql_fileContext tsql_file() {
		Tsql_fileContext _localctx = new Tsql_fileContext(Context, State);
		EnterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BACKUP) | (1L << BEGIN) | (1L << BLOCKING_HIERARCHY) | (1L << BREAK) | (1L << CALLED) | (1L << CASE) | (1L << CLOSE) | (1L << COALESCE) | (1L << COMMIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CREATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (DATA_COMPRESSION - 64)) | (1L << (DBCC - 64)) | (1L << (DEALLOCATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELETE - 64)) | (1L << (DROP - 64)) | (1L << (END - 64)) | (1L << (EVENTDATA - 64)) | (1L << (EXECUTE - 64)) | (1L << (FETCH - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (FILENAME - 129)) | (1L << (FILLFACTOR - 129)) | (1L << (FORCESEEK - 129)) | (1L << (GET - 129)) | (1L << (GOTO - 129)) | (1L << (GRANT - 129)) | (1L << (IDENTITY - 129)) | (1L << (IF - 129)) | (1L << (IIF - 129)) | (1L << (INIT - 129)) | (1L << (INSERT - 129)) | (1L << (ISNULL - 129)) | (1L << (KEY - 129)) | (1L << (LEFT - 129)) | (1L << (MASTER - 129)) | (1L << (MAX_MEMORY - 129)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (MERGE - 200)) | (1L << (NULL - 200)) | (1L << (NULLIF - 200)) | (1L << (OFFSETS - 200)) | (1L << (OPEN - 200)) | (1L << (OVER - 200)) | (1L << (PAGE - 200)) | (1L << (PRINT - 200)) | (1L << (PUBLIC - 200)) | (1L << (R - 200)) | (1L << (RAISERROR - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (RAW - 264)) | (1L << (RETURN - 264)) | (1L << (RETURNS - 264)) | (1L << (REVERT - 264)) | (1L << (RIGHT - 264)) | (1L << (ROLLBACK - 264)) | (1L << (ROWCOUNT - 264)) | (1L << (SAFETY - 264)) | (1L << (SAVE - 264)) | (1L << (SELECT - 264)) | (1L << (SERVER - 264)) | (1L << (SESSION_USER - 264)) | (1L << (SET - 264)) | (1L << (SETUSER - 264)) | (1L << (SID - 264)) | (1L << (SOURCE - 264)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (STATE - 330)) | (1L << (START - 330)) | (1L << (SYSTEM_USER - 330)) | (1L << (TARGET - 330)) | (1L << (TRUNCATE - 330)) | (1L << (UPDATE - 330)) | (1L << (USE - 330)) | (1L << (WAITFOR - 330)) | (1L << (WHILE - 330)) | (1L << (WITH - 330)) | (1L << (ABSOLUTE - 330)) | (1L << (ACCENT_SENSITIVITY - 330)) | (1L << (ACTION - 330)) | (1L << (ACTIVATION - 330)) | (1L << (ACTIVE - 330)) | (1L << (ADDRESS - 330)) | (1L << (AES_128 - 330)) | (1L << (AES_192 - 330)) | (1L << (AES_256 - 330)) | (1L << (AFFINITY - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (AFTER - 394)) | (1L << (AGGREGATE - 394)) | (1L << (ALGORITHM - 394)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 394)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 394)) | (1L << (ALLOWED - 394)) | (1L << (ANSI_NULL_DEFAULT - 394)) | (1L << (ANSI_NULLS - 394)) | (1L << (ANSI_PADDING - 394)) | (1L << (ANSI_WARNINGS - 394)) | (1L << (APPLICATION_LOG - 394)) | (1L << (APPLY - 394)) | (1L << (ARITHABORT - 394)) | (1L << (ASSEMBLY - 394)) | (1L << (AUDIT - 394)) | (1L << (AUDIT_GUID - 394)) | (1L << (AUTO - 394)) | (1L << (AUTO_CLEANUP - 394)) | (1L << (AUTO_CLOSE - 394)) | (1L << (AUTO_CREATE_STATISTICS - 394)) | (1L << (AUTO_SHRINK - 394)) | (1L << (AUTO_UPDATE_STATISTICS - 394)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 394)) | (1L << (AVAILABILITY - 394)) | (1L << (AVG - 394)) | (1L << (BACKUP_PRIORITY - 394)) | (1L << (BEGIN_DIALOG - 394)) | (1L << (BIGINT - 394)) | (1L << (BINARY_BASE64 - 394)) | (1L << (BINARY_CHECKSUM - 394)) | (1L << (BINDING - 394)) | (1L << (BLOB_STORAGE - 394)) | (1L << (BROKER - 394)) | (1L << (BROKER_INSTANCE - 394)) | (1L << (BULK_LOGGED - 394)) | (1L << (CALLER - 394)) | (1L << (CAP_CPU_PERCENT - 394)) | (1L << (CAST - 394)) | (1L << (CATALOG - 394)) | (1L << (CATCH - 394)) | (1L << (CHANGE_RETENTION - 394)) | (1L << (CHANGE_TRACKING - 394)) | (1L << (CHECKSUM - 394)) | (1L << (CHECKSUM_AGG - 394)) | (1L << (CLEANUP - 394)) | (1L << (COLLECTION - 394)) | (1L << (COLUMN_MASTER_KEY - 394)) | (1L << (COMMITTED - 394)) | (1L << (COMPATIBILITY_LEVEL - 394)) | (1L << (CONCAT - 394)) | (1L << (CONCAT_NULL_YIELDS_NULL - 394)) | (1L << (CONTENT - 394)) | (1L << (CONTROL - 394)) | (1L << (COOKIE - 394)) | (1L << (COUNT - 394)) | (1L << (COUNT_BIG - 394)) | (1L << (COUNTER - 394)) | (1L << (CPU - 394)) | (1L << (CREATE_NEW - 394)) | (1L << (CREATION_DISPOSITION - 394)) | (1L << (CREDENTIAL - 394)) | (1L << (CRYPTOGRAPHIC - 394)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 394)) | (1L << (CURSOR_DEFAULT - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (DATE_CORRELATION_OPTIMIZATION - 458)) | (1L << (DATEADD - 458)) | (1L << (DATEDIFF - 458)) | (1L << (DATENAME - 458)) | (1L << (DATEPART - 458)) | (1L << (DAYS - 458)) | (1L << (DB_CHAINING - 458)) | (1L << (DB_FAILOVER - 458)) | (1L << (DECRYPTION - 458)) | (1L << (DEFAULT_DOUBLE_QUOTE - 458)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 458)) | (1L << (DEFAULT_LANGUAGE - 458)) | (1L << (DELAY - 458)) | (1L << (DELAYED_DURABILITY - 458)) | (1L << (DELETED - 458)) | (1L << (DENSE_RANK - 458)) | (1L << (DEPENDENTS - 458)) | (1L << (DES - 458)) | (1L << (DESCRIPTION - 458)) | (1L << (DESX - 458)) | (1L << (DHCP - 458)) | (1L << (DIALOG - 458)) | (1L << (DIRECTORY_NAME - 458)) | (1L << (DISABLE - 458)) | (1L << (DISABLE_BROKER - 458)) | (1L << (DISABLED - 458)) | (1L << (DISK_DRIVE - 458)) | (1L << (DOCUMENT - 458)) | (1L << (DYNAMIC - 458)) | (1L << (EMERGENCY - 458)) | (1L << (EMPTY - 458)) | (1L << (ENABLE - 458)) | (1L << (ENABLE_BROKER - 458)) | (1L << (ENCRYPTED_VALUE - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (ENDPOINT_URL - 458)) | (1L << (ERROR_BROKER_CONVERSATIONS - 458)) | (1L << (EXCLUSIVE - 458)) | (1L << (EXECUTABLE - 458)) | (1L << (EXIST - 458)) | (1L << (EXPAND - 458)) | (1L << (EXPIRY_DATE - 458)) | (1L << (EXPLICIT - 458)) | (1L << (FAIL_OPERATION - 458)) | (1L << (FAILOVER_MODE - 458)) | (1L << (FAILURE - 458)) | (1L << (FAILURE_CONDITION_LEVEL - 458)) | (1L << (FAST - 458)) | (1L << (FAST_FORWARD - 458)) | (1L << (FILEGROUP - 458)) | (1L << (FILEGROWTH - 458)) | (1L << (FILEPATH - 458)) | (1L << (FILESTREAM - 458)) | (1L << (FILTER - 458)) | (1L << (FIRST - 458)) | (1L << (FIRST_VALUE - 458)) | (1L << (FOLLOWING - 458)) | (1L << (FORCE - 458)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 458)) | (1L << (FORCED - 458)) | (1L << (FORMAT - 458)) | (1L << (FORWARD_ONLY - 458)) | (1L << (FULLSCAN - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (FULLTEXT - 522)) | (1L << (GB - 522)) | (1L << (GETDATE - 522)) | (1L << (GETUTCDATE - 522)) | (1L << (GLOBAL - 522)) | (1L << (GO - 522)) | (1L << (GROUP_MAX_REQUESTS - 522)) | (1L << (GROUPING - 522)) | (1L << (GROUPING_ID - 522)) | (1L << (HADR - 522)) | (1L << (HASH - 522)) | (1L << (HEALTH_CHECK_TIMEOUT - 522)) | (1L << (HIGH - 522)) | (1L << (HONOR_BROKER_PRIORITY - 522)) | (1L << (HOURS - 522)) | (1L << (IDENTITY_VALUE - 522)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 522)) | (1L << (IMMEDIATE - 522)) | (1L << (IMPERSONATE - 522)) | (1L << (IMPORTANCE - 522)) | (1L << (INCREMENTAL - 522)) | (1L << (INITIATOR - 522)) | (1L << (INPUT - 522)) | (1L << (INSENSITIVE - 522)) | (1L << (INSERTED - 522)) | (1L << (INT - 522)) | (1L << (IP - 522)) | (1L << (ISOLATION - 522)) | (1L << (KB - 522)) | (1L << (KEEP - 522)) | (1L << (KEEPFIXED - 522)) | (1L << (KEY_SOURCE - 522)) | (1L << (KEYS - 522)) | (1L << (KEYSET - 522)) | (1L << (LAG - 522)) | (1L << (LAST - 522)) | (1L << (LAST_VALUE - 522)) | (1L << (LEAD - 522)) | (1L << (LEVEL - 522)) | (1L << (LIST - 522)) | (1L << (LISTENER - 522)) | (1L << (LISTENER_URL - 522)) | (1L << (LOB_COMPACTION - 522)) | (1L << (LOCAL - 522)) | (1L << (LOCATION - 522)) | (1L << (LOCK - 522)) | (1L << (LOCK_ESCALATION - 522)) | (1L << (LOGIN - 522)) | (1L << (LOOP - 522)) | (1L << (LOW - 522)) | (1L << (MANUAL - 522)) | (1L << (MARK - 522)) | (1L << (MATERIALIZED - 522)) | (1L << (MAX - 522)) | (1L << (MAX_CPU_PERCENT - 522)) | (1L << (MAX_DOP - 522)) | (1L << (MAX_FILES - 522)) | (1L << (MAX_IOPS_PER_VOLUME - 522)) | (1L << (MAX_MEMORY_PERCENT - 522)) | (1L << (MAX_PROCESSES - 522)) | (1L << (MAX_QUEUE_READERS - 522)) | (1L << (MAX_ROLLOVER_FILES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (MAXDOP - 586)) | (1L << (MAXRECURSION - 586)) | (1L << (MAXSIZE - 586)) | (1L << (MB - 586)) | (1L << (MEDIUM - 586)) | (1L << (MEMORY_OPTIMIZED_DATA - 586)) | (1L << (MESSAGE - 586)) | (1L << (MIN - 586)) | (1L << (MIN_ACTIVE_ROWVERSION - 586)) | (1L << (MIN_CPU_PERCENT - 586)) | (1L << (MIN_IOPS_PER_VOLUME - 586)) | (1L << (MIN_MEMORY_PERCENT - 586)) | (1L << (MINUTES - 586)) | (1L << (MIRROR_ADDRESS - 586)) | (1L << (MIXED_PAGE_ALLOCATION - 586)) | (1L << (MODE - 586)) | (1L << (MODIFY - 586)) | (1L << (MOVE - 586)) | (1L << (MULTI_USER - 586)) | (1L << (NAME - 586)) | (1L << (NESTED_TRIGGERS - 586)) | (1L << (NEW_ACCOUNT - 586)) | (1L << (NEW_BROKER - 586)) | (1L << (NEW_PASSWORD - 586)) | (1L << (NEXT - 586)) | (1L << (NO - 586)) | (1L << (NO_TRUNCATE - 586)) | (1L << (NO_WAIT - 586)) | (1L << (NOCOUNT - 586)) | (1L << (NODES - 586)) | (1L << (NOEXPAND - 586)) | (1L << (NON_TRANSACTED_ACCESS - 586)) | (1L << (NORECOMPUTE - 586)) | (1L << (NORECOVERY - 586)) | (1L << (NOWAIT - 586)) | (1L << (NTILE - 586)) | (1L << (NUMANODE - 586)) | (1L << (NUMBER - 586)) | (1L << (NUMERIC_ROUNDABORT - 586)) | (1L << (OBJECT - 586)) | (1L << (OFFLINE - 586)) | (1L << (OFFSET - 586)) | (1L << (OLD_ACCOUNT - 586)) | (1L << (ONLINE - 586)) | (1L << (ONLY - 586)) | (1L << (OPEN_EXISTING - 586)) | (1L << (OPTIMISTIC - 586)) | (1L << (OPTIMIZE - 586)) | (1L << (OUT - 586)) | (1L << (OUTPUT - 586)) | (1L << (OWNER - 586)) | (1L << (PAGE_VERIFY - 586)) | (1L << (PARAMETERIZATION - 586)) | (1L << (PARTITION - 586)) | (1L << (PARTITIONS - 586)) | (1L << (PARTNER - 586)) | (1L << (PATH - 586)) | (1L << (POISON_MESSAGE_HANDLING - 586)) | (1L << (POOL - 586)) | (1L << (PORT - 586)) | (1L << (PRECEDING - 586)) | (1L << (PRIMARY_ROLE - 586)) | (1L << (PRIOR - 586)) | (1L << (PRIORITY - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (PRIORITY_LEVEL - 650)) | (1L << (PRIVATE - 650)) | (1L << (PRIVATE_KEY - 650)) | (1L << (PRIVILEGES - 650)) | (1L << (PROCEDURE_NAME - 650)) | (1L << (PROPERTY - 650)) | (1L << (PROVIDER - 650)) | (1L << (PROVIDER_KEY_NAME - 650)) | (1L << (QUERY - 650)) | (1L << (QUEUE - 650)) | (1L << (QUEUE_DELAY - 650)) | (1L << (QUOTED_IDENTIFIER - 650)) | (1L << (RANGE - 650)) | (1L << (RANK - 650)) | (1L << (RC2 - 650)) | (1L << (RC4 - 650)) | (1L << (RC4_128 - 650)) | (1L << (READ_COMMITTED_SNAPSHOT - 650)) | (1L << (READ_ONLY - 650)) | (1L << (READ_ONLY_ROUTING_LIST - 650)) | (1L << (READ_WRITE - 650)) | (1L << (READONLY - 650)) | (1L << (REBUILD - 650)) | (1L << (RECEIVE - 650)) | (1L << (RECOMPILE - 650)) | (1L << (RECOVERY - 650)) | (1L << (RECURSIVE_TRIGGERS - 650)) | (1L << (RELATIVE - 650)) | (1L << (REMOTE - 650)) | (1L << (REMOTE_SERVICE_NAME - 650)) | (1L << (REMOVE - 650)) | (1L << (REORGANIZE - 650)) | (1L << (REPEATABLE - 650)) | (1L << (REPLICA - 650)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 650)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 650)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 650)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 650)) | (1L << (RESERVE_DISK_SPACE - 650)) | (1L << (RESOURCE - 650)) | (1L << (RESOURCE_MANAGER_LOCATION - 650)) | (1L << (RESTRICTED_USER - 650)) | (1L << (RETENTION - 650)) | (1L << (ROBUST - 650)) | (1L << (ROOT - 650)) | (1L << (ROUTE - 650)) | (1L << (ROW - 650)) | (1L << (ROW_NUMBER - 650)) | (1L << (ROWGUID - 650)) | (1L << (ROWS - 650)) | (1L << (SAMPLE - 650)) | (1L << (SCHEMABINDING - 650)) | (1L << (SCOPED - 650)) | (1L << (SCROLL - 650)) | (1L << (SCROLL_LOCKS - 650)) | (1L << (SEARCH - 650)) | (1L << (SECONDARY - 650)) | (1L << (SECONDARY_ONLY - 650)) | (1L << (SECONDARY_ROLE - 650)) | (1L << (SECONDS - 650)) | (1L << (SECRET - 650)) | (1L << (SECURITY_LOG - 650)) | (1L << (SEEDING_MODE - 650)) | (1L << (SELF - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (SEMI_SENSITIVE - 714)) | (1L << (SEND - 714)) | (1L << (SENT - 714)) | (1L << (SERIALIZABLE - 714)) | (1L << (SESSION_TIMEOUT - 714)) | (1L << (SETERROR - 714)) | (1L << (SHARE - 714)) | (1L << (SHOWPLAN - 714)) | (1L << (SIGNATURE - 714)) | (1L << (SIMPLE - 714)) | (1L << (SINGLE_USER - 714)) | (1L << (SIZE - 714)) | (1L << (SMALLINT - 714)) | (1L << (SNAPSHOT - 714)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 714)) | (1L << (STANDBY - 714)) | (1L << (START_DATE - 714)) | (1L << (STATIC - 714)) | (1L << (STATS_STREAM - 714)) | (1L << (STATUS - 714)) | (1L << (STDEV - 714)) | (1L << (STDEVP - 714)) | (1L << (STOPLIST - 714)) | (1L << (STUFF - 714)) | (1L << (SUBJECT - 714)) | (1L << (SUM - 714)) | (1L << (SUSPEND - 714)) | (1L << (SYMMETRIC - 714)) | (1L << (SYNCHRONOUS_COMMIT - 714)) | (1L << (SYNONYM - 714)) | (1L << (TAKE - 714)) | (1L << (TARGET_RECOVERY_TIME - 714)) | (1L << (TB - 714)) | (1L << (TEXTIMAGE_ON - 714)) | (1L << (THROW - 714)) | (1L << (TIES - 714)) | (1L << (TIME - 714)) | (1L << (TIMEOUT - 714)) | (1L << (TIMER - 714)) | (1L << (TINYINT - 714)) | (1L << (TORN_PAGE_DETECTION - 714)) | (1L << (TRANSFORM_NOISE_WORDS - 714)) | (1L << (TRIPLE_DES - 714)) | (1L << (TRIPLE_DES_3KEY - 714)) | (1L << (TRUSTWORTHY - 714)) | (1L << (TRY - 714)) | (1L << (TSQL - 714)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 714)) | (1L << (TYPE - 714)) | (1L << (TYPE_WARNING - 714)) | (1L << (UNBOUNDED - 714)) | (1L << (UNCOMMITTED - 714)) | (1L << (UNKNOWN - 714)) | (1L << (UNLIMITED - 714)) | (1L << (USING - 714)) | (1L << (VALID_XML - 714)) | (1L << (VALIDATION - 714)) | (1L << (VALUE - 714)) | (1L << (VAR - 714)) | (1L << (VARP - 714)) | (1L << (VIEW_METADATA - 714)) | (1L << (VIEWS - 714)) | (1L << (WAIT - 714)) | (1L << (WELL_FORMED_XML - 714)))) != 0) || ((((_la - 779)) & ~0x3f) == 0 && ((1L << (_la - 779)) & ((1L << (WORK - 779)) | (1L << (WORKLOAD - 779)) | (1L << (XML - 779)) | (1L << (XMLNAMESPACES - 779)) | (1L << (DOUBLE_QUOTE_ID - 779)) | (1L << (SQUARE_BRACKET_ID - 779)) | (1L << (LOCAL_ID - 779)) | (1L << (DECIMAL - 779)) | (1L << (ID - 779)) | (1L << (STRING - 779)) | (1L << (BINARY - 779)) | (1L << (FLOAT - 779)) | (1L << (REAL - 779)) | (1L << (DOLLAR - 779)) | (1L << (LR_BRACKET - 779)) | (1L << (SEMI - 779)) | (1L << (PLUS - 779)) | (1L << (MINUS - 779)) | (1L << (BIT_NOT - 779)))) != 0)) {
				{
				{
				State = 962; batch();
				}
				}
				State = 967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 968; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BatchContext : ParserRuleContext {
		public Execute_bodyContext execute_body() {
			return GetRuleContext<Execute_bodyContext>(0);
		}
		public Go_statementContext[] go_statement() {
			return GetRuleContexts<Go_statementContext>();
		}
		public Go_statementContext go_statement(int i) {
			return GetRuleContext<Go_statementContext>(i);
		}
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBatch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BatchContext batch() {
		BatchContext _localctx = new BatchContext(Context, State);
		EnterRule(_localctx, 2, RULE_batch);
		try {
			int _alt;
			State = 987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 970; execute_body();
				State = 974;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 971; go_statement();
						}
						} 
					}
					State = 976;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 978;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 977; execute_body();
					}
					break;
				}
				State = 980; sql_clauses();
				State = 984;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 981; go_statement();
						}
						} 
					}
					State = 986;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clausesContext : ParserRuleContext {
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(TSqlParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(TSqlParser.SEMI, i);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clausesContext sql_clauses() {
		Sql_clausesContext _localctx = new Sql_clausesContext(Context, State);
		EnterRule(_localctx, 4, RULE_sql_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 993;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 989; sql_clause();
					State = 991;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						State = 990; Match(SEMI);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 995;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clauseContext : ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return GetRuleContext<Dml_clauseContext>(0);
		}
		public Ddl_clauseContext ddl_clause() {
			return GetRuleContext<Ddl_clauseContext>(0);
		}
		public Cfl_statementContext cfl_statement() {
			return GetRuleContext<Cfl_statementContext>(0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return GetRuleContext<Dbcc_clauseContext>(0);
		}
		public Empty_statementContext empty_statement() {
			return GetRuleContext<Empty_statementContext>(0);
		}
		public Another_statementContext another_statement() {
			return GetRuleContext<Another_statementContext>(0);
		}
		public Backup_statementContext backup_statement() {
			return GetRuleContext<Backup_statementContext>(0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clauseContext sql_clause() {
		Sql_clauseContext _localctx = new Sql_clauseContext(Context, State);
		EnterRule(_localctx, 6, RULE_sql_clause);
		try {
			State = 1004;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 997; dml_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 998; ddl_clause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 999; cfl_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1000; dbcc_clause();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1001; empty_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1002; another_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1003; backup_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_clauseContext : ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_clauseContext dml_clause() {
		Dml_clauseContext _localctx = new Dml_clauseContext(Context, State);
		EnterRule(_localctx, 8, RULE_dml_clause);
		try {
			State = 1011;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1006; merge_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1007; delete_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1008; insert_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1009; select_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1010; update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_clauseContext : ParserRuleContext {
		public Alter_application_roleContext alter_application_role() {
			return GetRuleContext<Alter_application_roleContext>(0);
		}
		public Alter_assemblyContext alter_assembly() {
			return GetRuleContext<Alter_assemblyContext>(0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return GetRuleContext<Alter_asymmetric_keyContext>(0);
		}
		public Alter_authorizationContext alter_authorization() {
			return GetRuleContext<Alter_authorizationContext>(0);
		}
		public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return GetRuleContext<Alter_authorization_for_azure_dwContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return GetRuleContext<Alter_authorization_for_parallel_dwContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return GetRuleContext<Alter_authorization_for_sql_databaseContext>(0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return GetRuleContext<Alter_availability_groupContext>(0);
		}
		public Alter_certificateContext alter_certificate() {
			return GetRuleContext<Alter_certificateContext>(0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return GetRuleContext<Alter_column_encryption_keyContext>(0);
		}
		public Alter_credentialContext alter_credential() {
			return GetRuleContext<Alter_credentialContext>(0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return GetRuleContext<Alter_cryptographic_providerContext>(0);
		}
		public Alter_databaseContext alter_database() {
			return GetRuleContext<Alter_databaseContext>(0);
		}
		public Alter_db_roleContext alter_db_role() {
			return GetRuleContext<Alter_db_roleContext>(0);
		}
		public Alter_endpointContext alter_endpoint() {
			return GetRuleContext<Alter_endpointContext>(0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return GetRuleContext<Create_or_alter_event_sessionContext>(0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return GetRuleContext<Alter_external_data_sourceContext>(0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return GetRuleContext<Alter_external_libraryContext>(0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return GetRuleContext<Alter_external_resource_poolContext>(0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return GetRuleContext<Alter_fulltext_catalogContext>(0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return GetRuleContext<Alter_fulltext_stoplistContext>(0);
		}
		public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return GetRuleContext<Alter_login_azure_sqlContext>(0);
		}
		public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_login_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return GetRuleContext<Alter_login_sql_serverContext>(0);
		}
		public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return GetRuleContext<Alter_master_key_azure_sqlContext>(0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return GetRuleContext<Alter_master_key_sql_serverContext>(0);
		}
		public Alter_message_typeContext alter_message_type() {
			return GetRuleContext<Alter_message_typeContext>(0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return GetRuleContext<Alter_partition_functionContext>(0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return GetRuleContext<Alter_partition_schemeContext>(0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return GetRuleContext<Alter_remote_service_bindingContext>(0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return GetRuleContext<Alter_resource_governorContext>(0);
		}
		public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Alter_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return GetRuleContext<Alter_schema_sqlContext>(0);
		}
		public Alter_sequenceContext alter_sequence() {
			return GetRuleContext<Alter_sequenceContext>(0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return GetRuleContext<Alter_server_auditContext>(0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return GetRuleContext<Alter_server_audit_specificationContext>(0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return GetRuleContext<Alter_server_configurationContext>(0);
		}
		public Alter_server_roleContext alter_server_role() {
			return GetRuleContext<Alter_server_roleContext>(0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return GetRuleContext<Alter_server_role_pdwContext>(0);
		}
		public Alter_serviceContext alter_service() {
			return GetRuleContext<Alter_serviceContext>(0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return GetRuleContext<Alter_service_master_keyContext>(0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return GetRuleContext<Alter_symmetric_keyContext>(0);
		}
		public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		public Alter_userContext alter_user() {
			return GetRuleContext<Alter_userContext>(0);
		}
		public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return GetRuleContext<Alter_user_azure_sqlContext>(0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return GetRuleContext<Alter_workload_groupContext>(0);
		}
		public Create_application_roleContext create_application_role() {
			return GetRuleContext<Create_application_roleContext>(0);
		}
		public Create_assemblyContext create_assembly() {
			return GetRuleContext<Create_assemblyContext>(0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return GetRuleContext<Create_asymmetric_keyContext>(0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return GetRuleContext<Create_column_encryption_keyContext>(0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return GetRuleContext<Create_column_master_keyContext>(0);
		}
		public Create_credentialContext create_credential() {
			return GetRuleContext<Create_credentialContext>(0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return GetRuleContext<Create_cryptographic_providerContext>(0);
		}
		public Create_databaseContext create_database() {
			return GetRuleContext<Create_databaseContext>(0);
		}
		public Create_db_roleContext create_db_role() {
			return GetRuleContext<Create_db_roleContext>(0);
		}
		public Create_event_notificationContext create_event_notification() {
			return GetRuleContext<Create_event_notificationContext>(0);
		}
		public Create_external_libraryContext create_external_library() {
			return GetRuleContext<Create_external_libraryContext>(0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return GetRuleContext<Create_external_resource_poolContext>(0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return GetRuleContext<Create_fulltext_catalogContext>(0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return GetRuleContext<Create_fulltext_stoplistContext>(0);
		}
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public Create_login_azure_sqlContext create_login_azure_sql() {
			return GetRuleContext<Create_login_azure_sqlContext>(0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return GetRuleContext<Create_login_pdwContext>(0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return GetRuleContext<Create_login_sql_serverContext>(0);
		}
		public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return GetRuleContext<Create_master_key_azure_sqlContext>(0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return GetRuleContext<Create_master_key_sql_serverContext>(0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return GetRuleContext<Create_or_alter_broker_priorityContext>(0);
		}
		public Create_or_alter_functionContext create_or_alter_function() {
			return GetRuleContext<Create_or_alter_functionContext>(0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return GetRuleContext<Create_or_alter_procedureContext>(0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return GetRuleContext<Create_or_alter_triggerContext>(0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return GetRuleContext<Create_remote_service_bindingContext>(0);
		}
		public Create_resource_poolContext create_resource_pool() {
			return GetRuleContext<Create_resource_poolContext>(0);
		}
		public Create_routeContext create_route() {
			return GetRuleContext<Create_routeContext>(0);
		}
		public Create_ruleContext create_rule() {
			return GetRuleContext<Create_ruleContext>(0);
		}
		public Create_schemaContext create_schema() {
			return GetRuleContext<Create_schemaContext>(0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return GetRuleContext<Create_schema_azure_sql_dw_and_pdwContext>(0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return GetRuleContext<Create_search_property_listContext>(0);
		}
		public Create_security_policyContext create_security_policy() {
			return GetRuleContext<Create_security_policyContext>(0);
		}
		public Create_sequenceContext create_sequence() {
			return GetRuleContext<Create_sequenceContext>(0);
		}
		public Create_server_auditContext create_server_audit() {
			return GetRuleContext<Create_server_auditContext>(0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return GetRuleContext<Create_server_audit_specificationContext>(0);
		}
		public Create_server_roleContext create_server_role() {
			return GetRuleContext<Create_server_roleContext>(0);
		}
		public Create_serviceContext create_service() {
			return GetRuleContext<Create_serviceContext>(0);
		}
		public Create_statisticsContext create_statistics() {
			return GetRuleContext<Create_statisticsContext>(0);
		}
		public Create_symmetric_keyContext create_symmetric_key() {
			return GetRuleContext<Create_symmetric_keyContext>(0);
		}
		public Create_synonymContext create_synonym() {
			return GetRuleContext<Create_synonymContext>(0);
		}
		public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		public Create_typeContext create_type() {
			return GetRuleContext<Create_typeContext>(0);
		}
		public Create_userContext create_user() {
			return GetRuleContext<Create_userContext>(0);
		}
		public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return GetRuleContext<Create_user_azure_sql_dwContext>(0);
		}
		public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		public Create_workload_groupContext create_workload_group() {
			return GetRuleContext<Create_workload_groupContext>(0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return GetRuleContext<Create_xml_schema_collectionContext>(0);
		}
		public Drop_aggregateContext drop_aggregate() {
			return GetRuleContext<Drop_aggregateContext>(0);
		}
		public Drop_application_roleContext drop_application_role() {
			return GetRuleContext<Drop_application_roleContext>(0);
		}
		public Drop_assemblyContext drop_assembly() {
			return GetRuleContext<Drop_assemblyContext>(0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return GetRuleContext<Drop_asymmetric_keyContext>(0);
		}
		public Drop_availability_groupContext drop_availability_group() {
			return GetRuleContext<Drop_availability_groupContext>(0);
		}
		public Drop_broker_priorityContext drop_broker_priority() {
			return GetRuleContext<Drop_broker_priorityContext>(0);
		}
		public Drop_certificateContext drop_certificate() {
			return GetRuleContext<Drop_certificateContext>(0);
		}
		public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return GetRuleContext<Drop_column_encryption_keyContext>(0);
		}
		public Drop_column_master_keyContext drop_column_master_key() {
			return GetRuleContext<Drop_column_master_keyContext>(0);
		}
		public Drop_contractContext drop_contract() {
			return GetRuleContext<Drop_contractContext>(0);
		}
		public Drop_credentialContext drop_credential() {
			return GetRuleContext<Drop_credentialContext>(0);
		}
		public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return GetRuleContext<Drop_cryptograhic_providerContext>(0);
		}
		public Drop_databaseContext drop_database() {
			return GetRuleContext<Drop_databaseContext>(0);
		}
		public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return GetRuleContext<Drop_database_audit_specificationContext>(0);
		}
		public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return GetRuleContext<Drop_database_scoped_credentialContext>(0);
		}
		public Drop_db_roleContext drop_db_role() {
			return GetRuleContext<Drop_db_roleContext>(0);
		}
		public Drop_defaultContext drop_default() {
			return GetRuleContext<Drop_defaultContext>(0);
		}
		public Drop_endpointContext drop_endpoint() {
			return GetRuleContext<Drop_endpointContext>(0);
		}
		public Drop_event_notificationsContext drop_event_notifications() {
			return GetRuleContext<Drop_event_notificationsContext>(0);
		}
		public Drop_event_sessionContext drop_event_session() {
			return GetRuleContext<Drop_event_sessionContext>(0);
		}
		public Drop_external_data_sourceContext drop_external_data_source() {
			return GetRuleContext<Drop_external_data_sourceContext>(0);
		}
		public Drop_external_file_formatContext drop_external_file_format() {
			return GetRuleContext<Drop_external_file_formatContext>(0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return GetRuleContext<Drop_external_libraryContext>(0);
		}
		public Drop_external_resource_poolContext drop_external_resource_pool() {
			return GetRuleContext<Drop_external_resource_poolContext>(0);
		}
		public Drop_external_tableContext drop_external_table() {
			return GetRuleContext<Drop_external_tableContext>(0);
		}
		public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return GetRuleContext<Drop_fulltext_catalogContext>(0);
		}
		public Drop_fulltext_indexContext drop_fulltext_index() {
			return GetRuleContext<Drop_fulltext_indexContext>(0);
		}
		public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return GetRuleContext<Drop_fulltext_stoplistContext>(0);
		}
		public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		public Drop_loginContext drop_login() {
			return GetRuleContext<Drop_loginContext>(0);
		}
		public Drop_master_keyContext drop_master_key() {
			return GetRuleContext<Drop_master_keyContext>(0);
		}
		public Drop_message_typeContext drop_message_type() {
			return GetRuleContext<Drop_message_typeContext>(0);
		}
		public Drop_partition_functionContext drop_partition_function() {
			return GetRuleContext<Drop_partition_functionContext>(0);
		}
		public Drop_partition_schemeContext drop_partition_scheme() {
			return GetRuleContext<Drop_partition_schemeContext>(0);
		}
		public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		public Drop_queueContext drop_queue() {
			return GetRuleContext<Drop_queueContext>(0);
		}
		public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return GetRuleContext<Drop_remote_service_bindingContext>(0);
		}
		public Drop_resource_poolContext drop_resource_pool() {
			return GetRuleContext<Drop_resource_poolContext>(0);
		}
		public Drop_routeContext drop_route() {
			return GetRuleContext<Drop_routeContext>(0);
		}
		public Drop_ruleContext drop_rule() {
			return GetRuleContext<Drop_ruleContext>(0);
		}
		public Drop_schemaContext drop_schema() {
			return GetRuleContext<Drop_schemaContext>(0);
		}
		public Drop_search_property_listContext drop_search_property_list() {
			return GetRuleContext<Drop_search_property_listContext>(0);
		}
		public Drop_security_policyContext drop_security_policy() {
			return GetRuleContext<Drop_security_policyContext>(0);
		}
		public Drop_sequenceContext drop_sequence() {
			return GetRuleContext<Drop_sequenceContext>(0);
		}
		public Drop_server_auditContext drop_server_audit() {
			return GetRuleContext<Drop_server_auditContext>(0);
		}
		public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return GetRuleContext<Drop_server_audit_specificationContext>(0);
		}
		public Drop_server_roleContext drop_server_role() {
			return GetRuleContext<Drop_server_roleContext>(0);
		}
		public Drop_serviceContext drop_service() {
			return GetRuleContext<Drop_serviceContext>(0);
		}
		public Drop_signatureContext drop_signature() {
			return GetRuleContext<Drop_signatureContext>(0);
		}
		public Drop_statisticsContext drop_statistics() {
			return GetRuleContext<Drop_statisticsContext>(0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return GetRuleContext<Drop_statistics_name_azure_dw_and_pdwContext>(0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return GetRuleContext<Drop_symmetric_keyContext>(0);
		}
		public Drop_synonymContext drop_synonym() {
			return GetRuleContext<Drop_synonymContext>(0);
		}
		public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		public Drop_triggerContext drop_trigger() {
			return GetRuleContext<Drop_triggerContext>(0);
		}
		public Drop_typeContext drop_type() {
			return GetRuleContext<Drop_typeContext>(0);
		}
		public Drop_userContext drop_user() {
			return GetRuleContext<Drop_userContext>(0);
		}
		public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		public Drop_workload_groupContext drop_workload_group() {
			return GetRuleContext<Drop_workload_groupContext>(0);
		}
		public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return GetRuleContext<Drop_xml_schema_collectionContext>(0);
		}
		public Disable_triggerContext disable_trigger() {
			return GetRuleContext<Disable_triggerContext>(0);
		}
		public Enable_triggerContext enable_trigger() {
			return GetRuleContext<Enable_triggerContext>(0);
		}
		public Lock_tableContext lock_table() {
			return GetRuleContext<Lock_tableContext>(0);
		}
		public Truncate_tableContext truncate_table() {
			return GetRuleContext<Truncate_tableContext>(0);
		}
		public Update_statisticsContext update_statistics() {
			return GetRuleContext<Update_statisticsContext>(0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_clauseContext ddl_clause() {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_ddl_clause);
		try {
			State = 1172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1013; alter_application_role();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1014; alter_assembly();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1015; alter_asymmetric_key();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1016; alter_authorization();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1017; alter_authorization_for_azure_dw();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1018; alter_authorization_for_parallel_dw();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1019; alter_authorization_for_sql_database();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1020; alter_availability_group();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1021; alter_certificate();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1022; alter_column_encryption_key();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1023; alter_credential();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1024; alter_cryptographic_provider();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1025; alter_database();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1026; alter_db_role();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1027; alter_endpoint();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1028; create_or_alter_event_session();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1029; alter_external_data_source();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1030; alter_external_library();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1031; alter_external_resource_pool();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1032; alter_fulltext_catalog();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1033; alter_fulltext_stoplist();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1034; alter_login_azure_sql();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1035; alter_login_azure_sql_dw_and_pdw();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1036; alter_login_sql_server();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1037; alter_master_key_azure_sql();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1038; alter_master_key_sql_server();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1039; alter_message_type();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1040; alter_partition_function();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1041; alter_partition_scheme();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1042; alter_remote_service_binding();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1043; alter_resource_governor();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1044; alter_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1045; alter_schema_sql();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1046; alter_sequence();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1047; alter_server_audit();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1048; alter_server_audit_specification();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1049; alter_server_configuration();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1050; alter_server_role();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1051; alter_server_role_pdw();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1052; alter_service();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1053; alter_service_master_key();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1054; alter_symmetric_key();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1055; alter_table();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1056; alter_user();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1057; alter_user_azure_sql();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1058; alter_workload_group();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1059; create_application_role();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1060; create_assembly();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1061; create_asymmetric_key();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1062; create_column_encryption_key();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1063; create_column_master_key();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1064; create_credential();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1065; create_cryptographic_provider();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1066; create_database();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1067; create_db_role();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1068; create_event_notification();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1069; create_external_library();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1070; create_external_resource_pool();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1071; create_fulltext_catalog();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1072; create_fulltext_stoplist();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1073; create_index();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1074; create_login_azure_sql();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1075; create_login_pdw();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1076; create_login_sql_server();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1077; create_master_key_azure_sql();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1078; create_master_key_sql_server();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1079; create_or_alter_broker_priority();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1080; create_or_alter_function();
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1081; create_or_alter_procedure();
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1082; create_or_alter_trigger();
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1083; create_remote_service_binding();
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1084; create_resource_pool();
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1085; create_route();
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1086; create_rule();
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1087; create_schema();
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1088; create_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1089; create_search_property_list();
				}
				break;
			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1090; create_security_policy();
				}
				break;
			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1091; create_sequence();
				}
				break;
			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1092; create_server_audit();
				}
				break;
			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1093; create_server_audit_specification();
				}
				break;
			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1094; create_server_role();
				}
				break;
			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1095; create_service();
				}
				break;
			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1096; create_statistics();
				}
				break;
			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1097; create_symmetric_key();
				}
				break;
			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1098; create_synonym();
				}
				break;
			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1099; create_table();
				}
				break;
			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1100; create_type();
				}
				break;
			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1101; create_user();
				}
				break;
			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1102; create_user_azure_sql_dw();
				}
				break;
			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1103; create_view();
				}
				break;
			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1104; create_workload_group();
				}
				break;
			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1105; create_xml_schema_collection();
				}
				break;
			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1106; drop_aggregate();
				}
				break;
			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1107; drop_application_role();
				}
				break;
			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1108; drop_assembly();
				}
				break;
			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1109; drop_asymmetric_key();
				}
				break;
			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1110; drop_availability_group();
				}
				break;
			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1111; drop_broker_priority();
				}
				break;
			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1112; drop_certificate();
				}
				break;
			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1113; drop_column_encryption_key();
				}
				break;
			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1114; drop_column_master_key();
				}
				break;
			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1115; drop_contract();
				}
				break;
			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1116; drop_credential();
				}
				break;
			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1117; drop_cryptograhic_provider();
				}
				break;
			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1118; drop_database();
				}
				break;
			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1119; drop_database_audit_specification();
				}
				break;
			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1120; drop_database_scoped_credential();
				}
				break;
			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1121; drop_db_role();
				}
				break;
			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1122; drop_default();
				}
				break;
			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1123; drop_endpoint();
				}
				break;
			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1124; drop_event_notifications();
				}
				break;
			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1125; drop_event_session();
				}
				break;
			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1126; drop_external_data_source();
				}
				break;
			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1127; drop_external_file_format();
				}
				break;
			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1128; drop_external_library();
				}
				break;
			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1129; drop_external_resource_pool();
				}
				break;
			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1130; drop_external_table();
				}
				break;
			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1131; drop_fulltext_catalog();
				}
				break;
			case 120:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1132; drop_fulltext_index();
				}
				break;
			case 121:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1133; drop_fulltext_stoplist();
				}
				break;
			case 122:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1134; drop_function();
				}
				break;
			case 123:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1135; drop_index();
				}
				break;
			case 124:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1136; drop_login();
				}
				break;
			case 125:
				EnterOuterAlt(_localctx, 125);
				{
				State = 1137; drop_master_key();
				}
				break;
			case 126:
				EnterOuterAlt(_localctx, 126);
				{
				State = 1138; drop_message_type();
				}
				break;
			case 127:
				EnterOuterAlt(_localctx, 127);
				{
				State = 1139; drop_partition_function();
				}
				break;
			case 128:
				EnterOuterAlt(_localctx, 128);
				{
				State = 1140; drop_partition_scheme();
				}
				break;
			case 129:
				EnterOuterAlt(_localctx, 129);
				{
				State = 1141; drop_procedure();
				}
				break;
			case 130:
				EnterOuterAlt(_localctx, 130);
				{
				State = 1142; drop_queue();
				}
				break;
			case 131:
				EnterOuterAlt(_localctx, 131);
				{
				State = 1143; drop_remote_service_binding();
				}
				break;
			case 132:
				EnterOuterAlt(_localctx, 132);
				{
				State = 1144; drop_resource_pool();
				}
				break;
			case 133:
				EnterOuterAlt(_localctx, 133);
				{
				State = 1145; drop_route();
				}
				break;
			case 134:
				EnterOuterAlt(_localctx, 134);
				{
				State = 1146; drop_rule();
				}
				break;
			case 135:
				EnterOuterAlt(_localctx, 135);
				{
				State = 1147; drop_schema();
				}
				break;
			case 136:
				EnterOuterAlt(_localctx, 136);
				{
				State = 1148; drop_search_property_list();
				}
				break;
			case 137:
				EnterOuterAlt(_localctx, 137);
				{
				State = 1149; drop_security_policy();
				}
				break;
			case 138:
				EnterOuterAlt(_localctx, 138);
				{
				State = 1150; drop_sequence();
				}
				break;
			case 139:
				EnterOuterAlt(_localctx, 139);
				{
				State = 1151; drop_server_audit();
				}
				break;
			case 140:
				EnterOuterAlt(_localctx, 140);
				{
				State = 1152; drop_server_audit_specification();
				}
				break;
			case 141:
				EnterOuterAlt(_localctx, 141);
				{
				State = 1153; drop_server_role();
				}
				break;
			case 142:
				EnterOuterAlt(_localctx, 142);
				{
				State = 1154; drop_service();
				}
				break;
			case 143:
				EnterOuterAlt(_localctx, 143);
				{
				State = 1155; drop_signature();
				}
				break;
			case 144:
				EnterOuterAlt(_localctx, 144);
				{
				State = 1156; drop_statistics();
				}
				break;
			case 145:
				EnterOuterAlt(_localctx, 145);
				{
				State = 1157; drop_statistics_name_azure_dw_and_pdw();
				}
				break;
			case 146:
				EnterOuterAlt(_localctx, 146);
				{
				State = 1158; drop_symmetric_key();
				}
				break;
			case 147:
				EnterOuterAlt(_localctx, 147);
				{
				State = 1159; drop_synonym();
				}
				break;
			case 148:
				EnterOuterAlt(_localctx, 148);
				{
				State = 1160; drop_table();
				}
				break;
			case 149:
				EnterOuterAlt(_localctx, 149);
				{
				State = 1161; drop_trigger();
				}
				break;
			case 150:
				EnterOuterAlt(_localctx, 150);
				{
				State = 1162; drop_type();
				}
				break;
			case 151:
				EnterOuterAlt(_localctx, 151);
				{
				State = 1163; drop_user();
				}
				break;
			case 152:
				EnterOuterAlt(_localctx, 152);
				{
				State = 1164; drop_view();
				}
				break;
			case 153:
				EnterOuterAlt(_localctx, 153);
				{
				State = 1165; drop_workload_group();
				}
				break;
			case 154:
				EnterOuterAlt(_localctx, 154);
				{
				State = 1166; drop_xml_schema_collection();
				}
				break;
			case 155:
				EnterOuterAlt(_localctx, 155);
				{
				State = 1167; disable_trigger();
				}
				break;
			case 156:
				EnterOuterAlt(_localctx, 156);
				{
				State = 1168; enable_trigger();
				}
				break;
			case 157:
				EnterOuterAlt(_localctx, 157);
				{
				State = 1169; lock_table();
				}
				break;
			case 158:
				EnterOuterAlt(_localctx, 158);
				{
				State = 1170; truncate_table();
				}
				break;
			case 159:
				EnterOuterAlt(_localctx, 159);
				{
				State = 1171; update_statistics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_statementContext : ParserRuleContext {
		public Backup_databaseContext backup_database() {
			return GetRuleContext<Backup_databaseContext>(0);
		}
		public Backup_logContext backup_log() {
			return GetRuleContext<Backup_logContext>(0);
		}
		public Backup_certificateContext backup_certificate() {
			return GetRuleContext<Backup_certificateContext>(0);
		}
		public Backup_master_keyContext backup_master_key() {
			return GetRuleContext<Backup_master_keyContext>(0);
		}
		public Backup_service_master_keyContext backup_service_master_key() {
			return GetRuleContext<Backup_service_master_keyContext>(0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_statementContext backup_statement() {
		Backup_statementContext _localctx = new Backup_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_backup_statement);
		try {
			State = 1179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1174; backup_database();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1175; backup_log();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1176; backup_certificate();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1177; backup_master_key();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1178; backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cfl_statementContext : ParserRuleContext {
		public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return GetRuleContext<Try_catch_statementContext>(0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return GetRuleContext<Waitfor_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return GetRuleContext<Raiseerror_statementContext>(0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cfl_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCfl_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCfl_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCfl_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cfl_statementContext cfl_statement() {
		Cfl_statementContext _localctx = new Cfl_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_cfl_statement);
		try {
			State = 1193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1181; block_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1182; break_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1183; continue_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1184; goto_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1185; if_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1186; return_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1187; throw_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1188; try_catch_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1189; waitfor_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1190; while_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1191; print_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1192; raiseerror_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode[] SEMI() { return GetTokens(TSqlParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(TSqlParser.SEMI, i);
		}
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_block_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195; Match(BEGIN);
			State = 1197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 1196; Match(SEMI);
				}
				break;
			}
			State = 1200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 1199; sql_clauses();
				}
				break;
			}
			State = 1202; Match(END);
			State = 1204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 1203; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206; Match(BREAK);
			State = 1208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 1207; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210; Match(CONTINUE);
			State = 1212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 1211; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(TSqlParser.GOTO, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_goto_statement);
		try {
			State = 1224;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOTO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1214; Match(GOTO);
				State = 1215; id();
				State = 1217;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 1216; Match(SEMI);
					}
					break;
				}
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1219; id();
				State = 1220; Match(COLON);
				State = 1222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 1221; Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1226; Match(RETURN);
			State = 1228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 1227; expression(0);
				}
				break;
			}
			State = 1231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 1230; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1233; Match(IF);
			State = 1234; search_condition();
			State = 1235; sql_clause();
			State = 1238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 1236; Match(ELSE);
				State = 1237; sql_clause();
				}
				break;
			}
			State = 1241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 1240; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public Throw_error_numberContext throw_error_number() {
			return GetRuleContext<Throw_error_numberContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Throw_messageContext throw_message() {
			return GetRuleContext<Throw_messageContext>(0);
		}
		public Throw_stateContext throw_state() {
			return GetRuleContext<Throw_stateContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_throw_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243; Match(THROW);
			State = 1250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 1244; throw_error_number();
				State = 1245; Match(COMMA);
				State = 1246; throw_message();
				State = 1247; Match(COMMA);
				State = 1248; throw_state();
				}
				break;
			}
			State = 1253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 1252; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_error_numberContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_error_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_error_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_error_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_error_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_error_numberContext throw_error_number() {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(Context, State);
		EnterRule(_localctx, 30, RULE_throw_error_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_messageContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_messageContext throw_message() {
		Throw_messageContext _localctx = new Throw_messageContext(Context, State);
		EnterRule(_localctx, 32, RULE_throw_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_stateContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_state; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterThrow_state(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitThrow_state(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_stateContext throw_state() {
		Throw_stateContext _localctx = new Throw_stateContext(Context, State);
		EnterRule(_localctx, 34, RULE_throw_state);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1259;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_catch_statementContext : ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public ITerminalNode[] BEGIN() { return GetTokens(TSqlParser.BEGIN); }
		public ITerminalNode BEGIN(int i) {
			return GetToken(TSqlParser.BEGIN, i);
		}
		public ITerminalNode[] TRY() { return GetTokens(TSqlParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(TSqlParser.TRY, i);
		}
		public ITerminalNode[] END() { return GetTokens(TSqlParser.END); }
		public ITerminalNode END(int i) {
			return GetToken(TSqlParser.END, i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(TSqlParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(TSqlParser.CATCH, i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(TSqlParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(TSqlParser.SEMI, i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_catch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTry_catch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTry_catch_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_catch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_catch_statementContext try_catch_statement() {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_try_catch_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261; Match(BEGIN);
			State = 1262; Match(TRY);
			State = 1264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 1263; Match(SEMI);
				}
				break;
			}
			State = 1267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 1266; _localctx.try_clauses = sql_clauses();
				}
				break;
			}
			State = 1269; Match(END);
			State = 1270; Match(TRY);
			State = 1272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 1271; Match(SEMI);
				}
			}

			State = 1274; Match(BEGIN);
			State = 1275; Match(CATCH);
			State = 1277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 1276; Match(SEMI);
				}
				break;
			}
			State = 1280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 1279; _localctx.catch_clauses = sql_clauses();
				}
				break;
			}
			State = 1282; Match(END);
			State = 1283; Match(CATCH);
			State = 1285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 1284; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_statementContext : ParserRuleContext {
		public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		public Receive_statementContext receive_statement() {
			return GetRuleContext<Receive_statementContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitfor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_statementContext waitfor_statement() {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_waitfor_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287; Match(WAITFOR);
			State = 1289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 1288; receive_statement();
				}
				break;
			}
			State = 1292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1291; Match(COMMA);
				}
			}

			State = 1296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 1294;
				_la = TokenStream.LA(1);
				if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1295; time();
				}
				break;
			}
			State = 1299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 1298; expression(0);
				}
				break;
			}
			State = 1302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 1301; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(TSqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clauseContext sql_clause() {
			return GetRuleContext<Sql_clauseContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(TSqlParser.BREAK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(TSqlParser.CONTINUE, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1304; Match(WHILE);
			State = 1305; search_condition();
			State = 1315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 1306; sql_clause();
				}
				break;
			case 2:
				{
				State = 1307; Match(BREAK);
				State = 1309;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 1308; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 1311; Match(CONTINUE);
				State = 1313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 1312; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(TSqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_print_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1317; Match(PRINT);
			State = 1320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 1318; expression(0);
				}
				break;
			case 2:
				{
				State = 1319; Match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			State = 1326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1322; Match(COMMA);
				State = 1323; Match(LOCAL_ID);
				}
				}
				State = 1328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 1329; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raiseerror_statementContext : ParserRuleContext {
		public IToken msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public IToken formatstring;
		public IToken argument;
		public ITerminalNode RAISERROR() { return GetToken(TSqlParser.RAISERROR, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Constant_LOCAL_IDContext[] constant_LOCAL_ID() {
			return GetRuleContexts<Constant_LOCAL_IDContext>();
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return GetRuleContext<Constant_LOCAL_IDContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseerror_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRaiseerror_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRaiseerror_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseerror_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raiseerror_statementContext raiseerror_statement() {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_raiseerror_statement);
		int _la;
		try {
			State = 1364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1332; Match(RAISERROR);
				State = 1333; Match(LR_BRACKET);
				State = 1334;
				_localctx.msg = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (LOCAL_ID - 793)) | (1L << (DECIMAL - 793)) | (1L << (STRING - 793)))) != 0)) ) {
					_localctx.msg = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1335; Match(COMMA);
				State = 1336; _localctx.severity = constant_LOCAL_ID();
				State = 1337; Match(COMMA);
				State = 1338; _localctx.state = constant_LOCAL_ID();
				State = 1343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1339; Match(COMMA);
					State = 1340; constant_LOCAL_ID();
					}
					}
					State = 1345;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1346; Match(RR_BRACKET);
				State = 1349;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 1347; Match(WITH);
					State = 1348;
					_la = TokenStream.LA(1);
					if ( !(_la==LOG || _la==SETERROR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1352;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 1351; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1354; Match(RAISERROR);
				State = 1355; Match(DECIMAL);
				State = 1356;
				_localctx.formatstring = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (DOUBLE_QUOTE_ID - 790)) | (1L << (LOCAL_ID - 790)) | (1L << (STRING - 790)))) != 0)) ) {
					_localctx.formatstring = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1357; Match(COMMA);
					State = 1358;
					_localctx.argument = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (LOCAL_ID - 793)) | (1L << (DECIMAL - 793)) | (1L << (STRING - 793)))) != 0)) ) {
						_localctx.argument = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1363;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1366; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Another_statementContext : ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		public Cursor_statementContext cursor_statement() {
			return GetRuleContext<Cursor_statementContext>(0);
		}
		public Conversation_statementContext conversation_statement() {
			return GetRuleContext<Conversation_statementContext>(0);
		}
		public Create_contractContext create_contract() {
			return GetRuleContext<Create_contractContext>(0);
		}
		public Create_queueContext create_queue() {
			return GetRuleContext<Create_queueContext>(0);
		}
		public Alter_queueContext alter_queue() {
			return GetRuleContext<Alter_queueContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public Message_statementContext message_statement() {
			return GetRuleContext<Message_statementContext>(0);
		}
		public Security_statementContext security_statement() {
			return GetRuleContext<Security_statementContext>(0);
		}
		public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		public Transaction_statementContext transaction_statement() {
			return GetRuleContext<Transaction_statementContext>(0);
		}
		public Use_statementContext use_statement() {
			return GetRuleContext<Use_statementContext>(0);
		}
		public Setuser_statementContext setuser_statement() {
			return GetRuleContext<Setuser_statementContext>(0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_another_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnother_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnother_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnother_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Another_statementContext another_statement() {
		Another_statementContext _localctx = new Another_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_another_statement);
		try {
			State = 1381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1368; declare_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1369; cursor_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1370; conversation_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1371; create_contract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1372; create_queue();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1373; alter_queue();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1374; execute_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1375; message_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1376; security_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1377; set_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1378; transaction_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1379; use_statement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1380; setuser_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_application_roleContext : ParserRuleContext {
		public IdContext appliction_role;
		public IdContext new_application_role_name;
		public IToken application_role_password;
		public IdContext app_role_default_schema;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_application_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_application_roleContext alter_application_role() {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(Context, State);
		EnterRule(_localctx, 50, RULE_alter_application_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1383; Match(ALTER);
			State = 1384; Match(APPLICATION);
			State = 1385; Match(ROLE);
			State = 1386; _localctx.appliction_role = id();
			State = 1387; Match(WITH);
			State = 1394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 1389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1388; Match(COMMA);
					}
				}

				State = 1391; Match(NAME);
				State = 1392; Match(EQUAL);
				State = 1393; _localctx.new_application_role_name = id();
				}
				break;
			}
			State = 1402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 1397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1396; Match(COMMA);
					}
				}

				State = 1399; Match(PASSWORD);
				State = 1400; Match(EQUAL);
				State = 1401; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SCHEMA || _la==COMMA) {
				{
				State = 1405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1404; Match(COMMA);
					}
				}

				State = 1407; Match(DEFAULT_SCHEMA);
				State = 1408; Match(EQUAL);
				State = 1409; _localctx.app_role_default_schema = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_application_roleContext : ParserRuleContext {
		public IdContext appliction_role;
		public IToken application_role_password;
		public IdContext app_role_default_schema;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_application_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_application_roleContext create_application_role() {
		Create_application_roleContext _localctx = new Create_application_roleContext(Context, State);
		EnterRule(_localctx, 52, RULE_create_application_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412; Match(CREATE);
			State = 1413; Match(APPLICATION);
			State = 1414; Match(ROLE);
			State = 1415; _localctx.appliction_role = id();
			State = 1416; Match(WITH);
			State = 1423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 1418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1417; Match(COMMA);
					}
				}

				State = 1420; Match(PASSWORD);
				State = 1421; Match(EQUAL);
				State = 1422; _localctx.application_role_password = Match(STRING);
				}
				break;
			}
			State = 1431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SCHEMA || _la==COMMA) {
				{
				State = 1426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1425; Match(COMMA);
					}
				}

				State = 1428; Match(DEFAULT_SCHEMA);
				State = 1429; Match(EQUAL);
				State = 1430; _localctx.app_role_default_schema = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_aggregateContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext aggregate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_aggregate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_aggregate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_aggregate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_aggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_aggregateContext drop_aggregate() {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(Context, State);
		EnterRule(_localctx, 54, RULE_drop_aggregate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433; Match(DROP);
			State = 1434; Match(AGGREGATE);
			State = 1437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1435; Match(IF);
				State = 1436; Match(EXISTS);
				}
			}

			State = 1442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 1439; _localctx.schema_name = id();
				State = 1440; Match(DOT);
				}
				break;
			}
			State = 1444; _localctx.aggregate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_application_roleContext : ParserRuleContext {
		public IdContext rolename;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode APPLICATION() { return GetToken(TSqlParser.APPLICATION, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_application_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_application_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_application_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_application_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_application_roleContext drop_application_role() {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(Context, State);
		EnterRule(_localctx, 56, RULE_drop_application_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1446; Match(DROP);
			State = 1447; Match(APPLICATION);
			State = 1448; Match(ROLE);
			State = 1449; _localctx.rolename = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assemblyContext : ParserRuleContext {
		public IdContext assembly_name;
		public Alter_assembly_startContext alter_assembly_start() {
			return GetRuleContext<Alter_assembly_startContext>(0);
		}
		public Alter_assembly_clauseContext alter_assembly_clause() {
			return GetRuleContext<Alter_assembly_clauseContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assemblyContext alter_assembly() {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(Context, State);
		EnterRule(_localctx, 58, RULE_alter_assembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1451; alter_assembly_start();
			State = 1452; _localctx.assembly_name = id();
			State = 1453; alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_startContext alter_assembly_start() {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(Context, State);
		EnterRule(_localctx, 60, RULE_alter_assembly_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455; Match(ALTER);
			State = 1456; Match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return GetRuleContext<Alter_assembly_from_clauseContext>(0);
		}
		public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return GetRuleContext<Alter_assembly_with_clauseContext>(0);
		}
		public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return GetRuleContext<Alter_assembly_drop_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return GetRuleContext<Alter_assembly_add_clauseContext>(0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_clauseContext alter_assembly_clause() {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(Context, State);
		EnterRule(_localctx, 62, RULE_alter_assembly_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 1458; alter_assembly_from_clause();
				}
			}

			State = 1462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 1461; alter_assembly_with_clause();
				}
				break;
			}
			State = 1465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 1464; alter_assembly_drop_clause();
				}
				break;
			}
			State = 1468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADD) {
				{
				State = 1467; alter_assembly_add_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clauseContext : ParserRuleContext {
		public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return GetRuleContext<Alter_assembly_from_clause_startContext>(0);
		}
		public Client_assembly_specifierContext client_assembly_specifier() {
			return GetRuleContext<Client_assembly_specifierContext>(0);
		}
		public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return GetRuleContext<Alter_assembly_file_bitsContext>(0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_from_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(Context, State);
		EnterRule(_localctx, 64, RULE_alter_assembly_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1470; alter_assembly_from_clause_start();
			State = 1473;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_BACK_SLASH:
			case DISK_DRIVE:
			case STRING:
				{
				State = 1471; client_assembly_specifier();
				}
				break;
			case AS:
				{
				State = 1472; alter_assembly_file_bits();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_from_clause_startContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_from_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_from_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_from_clause_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_from_clause_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(Context, State);
		EnterRule(_localctx, 66, RULE_alter_assembly_from_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_clauseContext : ParserRuleContext {
		public Alter_assembly_dropContext alter_assembly_drop() {
			return GetRuleContext<Alter_assembly_dropContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return GetRuleContext<Alter_assembly_drop_multiple_filesContext>(0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(Context, State);
		EnterRule(_localctx, 68, RULE_alter_assembly_drop_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1477; alter_assembly_drop();
			State = 1478; alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_drop_multiple_filesContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Multiple_local_filesContext multiple_local_files() {
			return GetRuleContext<Multiple_local_filesContext>(0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop_multiple_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop_multiple_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop_multiple_files(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop_multiple_files(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(Context, State);
		EnterRule(_localctx, 70, RULE_alter_assembly_drop_multiple_files);
		try {
			State = 1482;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1480; Match(ALL);
				}
				break;
			case DISK_DRIVE:
			case SINGLE_QUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1481; multiple_local_files();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_dropContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_drop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_drop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_drop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_drop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_dropContext alter_assembly_drop() {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(Context, State);
		EnterRule(_localctx, 72, RULE_alter_assembly_drop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484; Match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_add_clauseContext : ParserRuleContext {
		public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return GetRuleContext<Alter_asssembly_add_clause_startContext>(0);
		}
		public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return GetRuleContext<Alter_assembly_client_file_clauseContext>(0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_add_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_add_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_add_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_add_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_alter_assembly_add_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1486; alter_asssembly_add_clause_start();
			State = 1487; alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asssembly_add_clause_startContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asssembly_add_clause_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asssembly_add_clause_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asssembly_add_clause_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asssembly_add_clause_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(Context, State);
		EnterRule(_localctx, 76, RULE_alter_asssembly_add_clause_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1489; Match(ADD);
			State = 1490; Match(FILE);
			State = 1491; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_client_file_clauseContext : ParserRuleContext {
		public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return GetRuleContext<Alter_assembly_file_nameContext>(0);
		}
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_client_file_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_client_file_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_client_file_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_client_file_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_alter_assembly_client_file_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493; alter_assembly_file_name();
			State = 1497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1494; alter_assembly_as();
				State = 1495; id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_nameContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_file_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_nameContext alter_assembly_file_name() {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(Context, State);
		EnterRule(_localctx, 80, RULE_alter_assembly_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1499; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_file_bitsContext : ParserRuleContext {
		public Alter_assembly_asContext alter_assembly_as() {
			return GetRuleContext<Alter_assembly_asContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_file_bits; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_file_bits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_file_bits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_file_bits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(Context, State);
		EnterRule(_localctx, 82, RULE_alter_assembly_file_bits);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1501; alter_assembly_as();
			State = 1502; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_asContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_as; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_as(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_as(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_as(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_asContext alter_assembly_as() {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(Context, State);
		EnterRule(_localctx, 84, RULE_alter_assembly_as);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1504; Match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_with_clauseContext : ParserRuleContext {
		public Alter_assembly_withContext alter_assembly_with() {
			return GetRuleContext<Alter_assembly_withContext>(0);
		}
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_with_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(Context, State);
		EnterRule(_localctx, 86, RULE_alter_assembly_with_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1506; alter_assembly_with();
			State = 1507; assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_assembly_withContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_assembly_with; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_assembly_with(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_assembly_with(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_assembly_with(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_assembly_withContext alter_assembly_with() {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(Context, State);
		EnterRule(_localctx, 88, RULE_alter_assembly_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1509; Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Client_assembly_specifierContext : ParserRuleContext {
		public Network_file_shareContext network_file_share() {
			return GetRuleContext<Network_file_shareContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_client_assembly_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClient_assembly_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClient_assembly_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClient_assembly_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Client_assembly_specifierContext client_assembly_specifier() {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_client_assembly_specifier);
		try {
			State = 1514;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_BACK_SLASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1511; network_file_share();
				}
				break;
			case DISK_DRIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1512; local_file();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1513; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assembly_optionContext : ParserRuleContext {
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode VISIBILITY() { return GetToken(TSqlParser.VISIBILITY, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(TSqlParser.UNCHECKED, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public Assembly_optionContext assembly_option() {
			return GetRuleContext<Assembly_optionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssembly_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssembly_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssembly_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assembly_optionContext assembly_option() {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Assembly_optionContext _localctx = new Assembly_optionContext(Context, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PERMISSION_SET:
				{
				State = 1517; Match(PERMISSION_SET);
				State = 1518; Match(EQUAL);
				State = 1519;
				_la = TokenStream.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case VISIBILITY:
				{
				State = 1520; Match(VISIBILITY);
				State = 1521; Match(EQUAL);
				State = 1522;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case UNCHECKED:
				{
				State = 1523; Match(UNCHECKED);
				State = 1524; Match(DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1531;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					State = 1527;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1528; Match(COMMA);
					}
					} 
				}
				State = 1533;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Network_file_shareContext : ParserRuleContext {
		public Network_file_startContext network_file_start() {
			return GetRuleContext<Network_file_startContext>(0);
		}
		public Network_computerContext network_computer() {
			return GetRuleContext<Network_computerContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_share(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_file_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_shareContext network_file_share() {
		Network_file_shareContext _localctx = new Network_file_shareContext(Context, State);
		EnterRule(_localctx, 94, RULE_network_file_share);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1534; network_file_start();
			State = 1535; network_computer();
			State = 1536; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_computerContext : ParserRuleContext {
		public IdContext computer_name;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_computer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_computer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_computer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_computer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_computerContext network_computer() {
		Network_computerContext _localctx = new Network_computerContext(Context, State);
		EnterRule(_localctx, 96, RULE_network_computer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1538; _localctx.computer_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_file_startContext : ParserRuleContext {
		public ITerminalNode DOUBLE_BACK_SLASH() { return GetToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_file_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_file_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_file_startContext network_file_start() {
		Network_file_startContext _localctx = new Network_file_startContext(Context, State);
		EnterRule(_localctx, 98, RULE_network_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1540; Match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_pathContext : ParserRuleContext {
		public File_directory_path_separatorContext file_directory_path_separator() {
			return GetRuleContext<File_directory_path_separatorContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_path(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_path(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_path(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_pathContext file_path() {
		File_pathContext _localctx = new File_pathContext(Context, State);
		EnterRule(_localctx, 100, RULE_file_path);
		try {
			State = 1546;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BACKSLASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1542; file_directory_path_separator();
				State = 1543; file_path();
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1545; id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_directory_path_separatorContext : ParserRuleContext {
		public ITerminalNode BACKSLASH() { return GetToken(TSqlParser.BACKSLASH, 0); }
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_directory_path_separator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_directory_path_separator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_directory_path_separator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_directory_path_separator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_directory_path_separatorContext file_directory_path_separator() {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(Context, State);
		EnterRule(_localctx, 102, RULE_file_directory_path_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1548; Match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_fileContext : ParserRuleContext {
		public Local_driveContext local_drive() {
			return GetRuleContext<Local_driveContext>(0);
		}
		public File_pathContext file_path() {
			return GetRuleContext<File_pathContext>(0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_file(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_fileContext local_file() {
		Local_fileContext _localctx = new Local_fileContext(Context, State);
		EnterRule(_localctx, 104, RULE_local_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1550; local_drive();
			State = 1551; file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_driveContext : ParserRuleContext {
		public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_drive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLocal_drive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLocal_drive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_drive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_driveContext local_drive() {
		Local_driveContext _localctx = new Local_driveContext(Context, State);
		EnterRule(_localctx, 106, RULE_local_drive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553; Match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_filesContext : ParserRuleContext {
		public Multiple_local_file_startContext multiple_local_file_start() {
			return GetRuleContext<Multiple_local_file_startContext>(0);
		}
		public Local_fileContext local_file() {
			return GetRuleContext<Local_fileContext>(0);
		}
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_files; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_files(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_files(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiple_local_files(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_filesContext multiple_local_files() {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(Context, State);
		EnterRule(_localctx, 108, RULE_multiple_local_files);
		try {
			State = 1561;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1555; multiple_local_file_start();
				State = 1556; local_file();
				State = 1557; Match(SINGLE_QUOTE);
				State = 1558; Match(COMMA);
				}
				break;
			case DISK_DRIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1560; local_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_local_file_startContext : ParserRuleContext {
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_local_file_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMultiple_local_file_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMultiple_local_file_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiple_local_file_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_local_file_startContext multiple_local_file_start() {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(Context, State);
		EnterRule(_localctx, 110, RULE_multiple_local_file_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1563; Match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_assemblyContext : ParserRuleContext {
		public IdContext assembly_name;
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PERMISSION_SET() { return GetToken(TSqlParser.PERMISSION_SET, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode SAFE() { return GetToken(TSqlParser.SAFE, 0); }
		public ITerminalNode EXTERNAL_ACCESS() { return GetToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public ITerminalNode UNSAFE() { return GetToken(TSqlParser.UNSAFE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_assembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_assemblyContext create_assembly() {
		Create_assemblyContext _localctx = new Create_assemblyContext(Context, State);
		EnterRule(_localctx, 112, RULE_create_assembly);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565; Match(CREATE);
			State = 1566; Match(ASSEMBLY);
			State = 1567; _localctx.assembly_name = id();
			State = 1570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 1568; Match(AUTHORIZATION);
				State = 1569; _localctx.owner_name = id();
				}
			}

			State = 1572; Match(FROM);
			State = 1577;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1574;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1573; Match(COMMA);
						}
					}

					State = 1576;
					_la = TokenStream.LA(1);
					if ( !(_la==STRING || _la==BINARY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1579;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 1581; Match(WITH);
				State = 1582; Match(PERMISSION_SET);
				State = 1583; Match(EQUAL);
				State = 1584;
				_la = TokenStream.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_assemblyContext : ParserRuleContext {
		public IdContext assembly_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_assembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_assembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_assembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_assemblyContext drop_assembly() {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(Context, State);
		EnterRule(_localctx, 114, RULE_drop_assembly);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1587; Match(DROP);
			State = 1588; Match(ASSEMBLY);
			State = 1591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1589; Match(IF);
				State = 1590; Match(EXISTS);
				}
			}

			State = 1597;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1594;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1593; Match(COMMA);
						}
					}

					State = 1596; _localctx.assembly_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1599;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 1601; Match(WITH);
				State = 1602; Match(NO);
				State = 1603; Match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_keyContext : ParserRuleContext {
		public IdContext Asym_Key_Name;
		public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return GetRuleContext<Alter_asymmetric_key_startContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return GetRuleContext<Asymmetric_key_optionContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_keyContext alter_asymmetric_key() {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(Context, State);
		EnterRule(_localctx, 116, RULE_alter_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1606; alter_asymmetric_key_start();
			State = 1607; _localctx.Asym_Key_Name = id();
			State = 1612;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 1608; asymmetric_key_option();
				}
				break;
			case REMOVE:
				{
				State = 1609; Match(REMOVE);
				State = 1610; Match(PRIVATE);
				State = 1611; Match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_asymmetric_key_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_asymmetric_key_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_asymmetric_key_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_asymmetric_key_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_asymmetric_key_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(Context, State);
		EnterRule(_localctx, 118, RULE_alter_asymmetric_key_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1614; Match(ALTER);
			State = 1615; Match(ASYMMETRIC);
			State = 1616; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_optionContext : ParserRuleContext {
		public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return GetRuleContext<Asymmetric_key_option_startContext>(0);
		}
		public Asymmetric_key_password_change_optionContext[] asymmetric_key_password_change_option() {
			return GetRuleContexts<Asymmetric_key_password_change_optionContext>();
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return GetRuleContext<Asymmetric_key_password_change_optionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_optionContext asymmetric_key_option() {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(Context, State);
		EnterRule(_localctx, 120, RULE_asymmetric_key_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618; asymmetric_key_option_start();
			State = 1619; asymmetric_key_password_change_option();
			State = 1622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1620; Match(COMMA);
				State = 1621; asymmetric_key_password_change_option();
				}
			}

			State = 1624; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_option_startContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_option_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_option_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_option_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_option_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_option_startContext asymmetric_key_option_start() {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(Context, State);
		EnterRule(_localctx, 122, RULE_asymmetric_key_option_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626; Match(WITH);
			State = 1627; Match(PRIVATE);
			State = 1628; Match(KEY);
			State = 1629; Match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asymmetric_key_password_change_optionContext : ParserRuleContext {
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asymmetric_key_password_change_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsymmetric_key_password_change_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsymmetric_key_password_change_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsymmetric_key_password_change_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(Context, State);
		EnterRule(_localctx, 124, RULE_asymmetric_key_password_change_option);
		try {
			State = 1641;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1631; Match(DECRYPTION);
				State = 1632; Match(BY);
				State = 1633; Match(PASSWORD);
				State = 1634; Match(EQUAL);
				State = 1635; Match(STRING);
				}
				break;
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1636; Match(ENCRYPTION);
				State = 1637; Match(BY);
				State = 1638; Match(PASSWORD);
				State = 1639; Match(EQUAL);
				State = 1640; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_asymmetric_keyContext : ParserRuleContext {
		public IdContext Asym_Key_Nam;
		public IdContext database_principal_name;
		public IdContext Assembly_Name;
		public IdContext Provider_Name;
		public IToken provider_key_name;
		public IToken asymmetric_key_password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EXECUTABLE_FILE() { return GetToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode RSA_4096() { return GetToken(TSqlParser.RSA_4096, 0); }
		public ITerminalNode RSA_3072() { return GetToken(TSqlParser.RSA_3072, 0); }
		public ITerminalNode RSA_2048() { return GetToken(TSqlParser.RSA_2048, 0); }
		public ITerminalNode RSA_1024() { return GetToken(TSqlParser.RSA_1024, 0); }
		public ITerminalNode RSA_512() { return GetToken(TSqlParser.RSA_512, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_asymmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_asymmetric_keyContext create_asymmetric_key() {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(Context, State);
		EnterRule(_localctx, 126, RULE_create_asymmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1643; Match(CREATE);
			State = 1644; Match(ASYMMETRIC);
			State = 1645; Match(KEY);
			State = 1646; _localctx.Asym_Key_Nam = id();
			State = 1649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 1647; Match(AUTHORIZATION);
				State = 1648; _localctx.database_principal_name = id();
				}
			}

			State = 1664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 1651; Match(FROM);
				State = 1662;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FILE:
					{
					State = 1652; Match(FILE);
					State = 1653; Match(EQUAL);
					State = 1654; Match(STRING);
					}
					break;
				case EXECUTABLE_FILE:
					{
					State = 1655; Match(EXECUTABLE_FILE);
					State = 1656; Match(EQUAL);
					State = 1657; Match(STRING);
					}
					break;
				case ASSEMBLY:
					{
					State = 1658; Match(ASSEMBLY);
					State = 1659; _localctx.Assembly_Name = id();
					}
					break;
				case PROVIDER:
					{
					State = 1660; Match(PROVIDER);
					State = 1661; _localctx.Provider_Name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 1678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 1666; Match(WITH);
				State = 1676;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALGORITHM:
					{
					State = 1667; Match(ALGORITHM);
					State = 1668; Match(EQUAL);
					State = 1669;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 291)) & ~0x3f) == 0 && ((1L << (_la - 291)) & ((1L << (RSA_512 - 291)) | (1L << (RSA_1024 - 291)) | (1L << (RSA_2048 - 291)) | (1L << (RSA_3072 - 291)) | (1L << (RSA_4096 - 291)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					State = 1670; Match(PROVIDER_KEY_NAME);
					State = 1671; Match(EQUAL);
					State = 1672; _localctx.provider_key_name = Match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					State = 1673; Match(CREATION_DISPOSITION);
					State = 1674; Match(EQUAL);
					State = 1675;
					_la = TokenStream.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 1685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 1680; Match(ENCRYPTION);
				State = 1681; Match(BY);
				State = 1682; Match(PASSWORD);
				State = 1683; Match(EQUAL);
				State = 1684; _localctx.asymmetric_key_password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_asymmetric_keyContext : ParserRuleContext {
		public IdContext key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_asymmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_asymmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_asymmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_asymmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_asymmetric_keyContext drop_asymmetric_key() {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(Context, State);
		EnterRule(_localctx, 128, RULE_drop_asymmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687; Match(DROP);
			State = 1688; Match(ASYMMETRIC);
			State = 1689; Match(KEY);
			State = 1690; _localctx.key_name = id();
			State = 1694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 1691; Match(REMOVE);
				State = 1692; Match(PROVIDER);
				State = 1693; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorizationContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorizationContext alter_authorization() {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(Context, State);
		EnterRule(_localctx, 130, RULE_alter_authorization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1696; alter_authorization_start();
			State = 1700;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 1697; class_type();
				State = 1698; colon_colon();
				}
				break;
			}
			State = 1702; _localctx.entity = entity_name();
			State = 1703; entity_to();
			State = 1704; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Authorization_granteeContext : ParserRuleContext {
		public IdContext principal_name;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorization_grantee; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuthorization_grantee(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuthorization_grantee(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthorization_grantee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Authorization_granteeContext authorization_grantee() {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(Context, State);
		EnterRule(_localctx, 132, RULE_authorization_grantee);
		try {
			State = 1709;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1706; _localctx.principal_name = id();
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1707; Match(SCHEMA);
				State = 1708; Match(OWNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_toContext : ParserRuleContext {
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_to; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_to(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_to(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_to(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_toContext entity_to() {
		Entity_toContext _localctx = new Entity_toContext(Context, State);
		EnterRule(_localctx, 134, RULE_entity_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1711; Match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Colon_colonContext : ParserRuleContext {
		public ITerminalNode[] COLON() { return GetTokens(TSqlParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TSqlParser.COLON, i);
		}
		public Colon_colonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colon_colon; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColon_colon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColon_colon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColon_colon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Colon_colonContext colon_colon() {
		Colon_colonContext _localctx = new Colon_colonContext(Context, State);
		EnterRule(_localctx, 136, RULE_colon_colon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1713; Match(COLON);
			State = 1714; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_startContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_startContext alter_authorization_start() {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(Context, State);
		EnterRule(_localctx, 138, RULE_alter_authorization_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1716; Match(ALTER);
			State = 1717; Match(AUTHORIZATION);
			State = 1718; Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_sql_databaseContext : ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return GetRuleContext<Class_type_for_sql_databaseContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_sql_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_sql_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(Context, State);
		EnterRule(_localctx, 140, RULE_alter_authorization_for_sql_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1720; alter_authorization_start();
			State = 1724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 1721; class_type_for_sql_database();
				State = 1722; colon_colon();
				}
				break;
			}
			State = 1726; _localctx.entity = entity_name();
			State = 1727; entity_to();
			State = 1728; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_azure_dwContext : ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return GetRuleContext<Entity_name_for_azure_dwContext>(0);
		}
		public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return GetRuleContext<Class_type_for_azure_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_azure_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(Context, State);
		EnterRule(_localctx, 142, RULE_alter_authorization_for_azure_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1730; alter_authorization_start();
			State = 1734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 1731; class_type_for_azure_dw();
				State = 1732; colon_colon();
				}
				break;
			}
			State = 1736; _localctx.entity = entity_name_for_azure_dw();
			State = 1737; entity_to();
			State = 1738; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_authorization_for_parallel_dwContext : ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return GetRuleContext<Alter_authorization_startContext>(0);
		}
		public Entity_toContext entity_to() {
			return GetRuleContext<Entity_toContext>(0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return GetRuleContext<Authorization_granteeContext>(0);
		}
		public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return GetRuleContext<Entity_name_for_parallel_dwContext>(0);
		}
		public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return GetRuleContext<Class_type_for_parallel_dwContext>(0);
		}
		public Colon_colonContext colon_colon() {
			return GetRuleContext<Colon_colonContext>(0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_authorization_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_authorization_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_authorization_for_parallel_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_authorization_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(Context, State);
		EnterRule(_localctx, 144, RULE_alter_authorization_for_parallel_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1740; alter_authorization_start();
			State = 1744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 1741; class_type_for_parallel_dw();
				State = 1742; colon_colon();
				}
				break;
			}
			State = 1746; _localctx.entity = entity_name_for_parallel_dw();
			State = 1747; entity_to();
			State = 1748; authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 146, RULE_class_type);
		try {
			State = 1784;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1750; Match(OBJECT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1751; Match(ASSEMBLY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1752; Match(ASYMMETRIC);
				State = 1753; Match(KEY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1754; Match(AVAILABILITY);
				State = 1755; Match(GROUP);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1756; Match(CERTIFICATE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1757; Match(CONTRACT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1758; Match(TYPE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1759; Match(DATABASE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1760; Match(ENDPOINT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1761; Match(FULLTEXT);
				State = 1762; Match(CATALOG);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1763; Match(FULLTEXT);
				State = 1764; Match(STOPLIST);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1765; Match(MESSAGE);
				State = 1766; Match(TYPE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1767; Match(REMOTE);
				State = 1768; Match(SERVICE);
				State = 1769; Match(BINDING);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1770; Match(ROLE);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1771; Match(ROUTE);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1772; Match(SCHEMA);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1773; Match(SEARCH);
				State = 1774; Match(PROPERTY);
				State = 1775; Match(LIST);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1776; Match(SERVER);
				State = 1777; Match(ROLE);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1778; Match(SERVICE);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1779; Match(SYMMETRIC);
				State = 1780; Match(KEY);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1781; Match(XML);
				State = 1782; Match(SCHEMA);
				State = 1783; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_sql_databaseContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_sql_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_sql_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_sql_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_sql_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_sql_databaseContext class_type_for_sql_database() {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(Context, State);
		EnterRule(_localctx, 148, RULE_class_type_for_sql_database);
		try {
			State = 1807;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1786; Match(OBJECT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1787; Match(ASSEMBLY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1788; Match(ASYMMETRIC);
				State = 1789; Match(KEY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1790; Match(CERTIFICATE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1791; Match(TYPE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1792; Match(DATABASE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1793; Match(FULLTEXT);
				State = 1794; Match(CATALOG);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1795; Match(FULLTEXT);
				State = 1796; Match(STOPLIST);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1797; Match(ROLE);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1798; Match(SCHEMA);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1799; Match(SEARCH);
				State = 1800; Match(PROPERTY);
				State = 1801; Match(LIST);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1802; Match(SYMMETRIC);
				State = 1803; Match(KEY);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1804; Match(XML);
				State = 1805; Match(SCHEMA);
				State = 1806; Match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_azure_dwContext : ParserRuleContext {
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_azure_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_azure_dwContext class_type_for_azure_dw() {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(Context, State);
		EnterRule(_localctx, 150, RULE_class_type_for_azure_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1809;
			_la = TokenStream.LA(1);
			if ( !(_la==SCHEMA || _la==OBJECT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_for_parallel_dwContext : ParserRuleContext {
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClass_type_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClass_type_for_parallel_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(Context, State);
		EnterRule(_localctx, 152, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1811;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==OBJECT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_availability_groupContext : ParserRuleContext {
		public IdContext group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_availability_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_availability_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_availability_groupContext drop_availability_group() {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(Context, State);
		EnterRule(_localctx, 154, RULE_drop_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813; Match(DROP);
			State = 1814; Match(AVAILABILITY);
			State = 1815; Match(GROUP);
			State = 1816; _localctx.group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_groupContext : ParserRuleContext {
		public Alter_availability_group_startContext alter_availability_group_start() {
			return GetRuleContext<Alter_availability_group_startContext>(0);
		}
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return GetRuleContext<Alter_availability_group_optionsContext>(0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_groupContext alter_availability_group() {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(Context, State);
		EnterRule(_localctx, 156, RULE_alter_availability_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1818; alter_availability_group_start();
			State = 1819; alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_startContext : ParserRuleContext {
		public IdContext group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_startContext alter_availability_group_start() {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(Context, State);
		EnterRule(_localctx, 158, RULE_alter_availability_group_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1821; Match(ALTER);
			State = 1822; Match(AVAILABILITY);
			State = 1823; Match(GROUP);
			State = 1824; _localctx.group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_availability_group_optionsContext : ParserRuleContext {
		public IToken milliseconds;
		public IdContext database_name;
		public IToken server_instance;
		public IToken session_timeout;
		public IToken ag_name;
		public IToken ag_name_modified;
		public IToken listener_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTOMATED_BACKUP_PREFERENCE() { return GetToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode[] AVAILABILITY_MODE() { return GetTokens(TSqlParser.AVAILABILITY_MODE); }
		public ITerminalNode AVAILABILITY_MODE(int i) {
			return GetToken(TSqlParser.AVAILABILITY_MODE, i);
		}
		public ITerminalNode[] FAILOVER_MODE() { return GetTokens(TSqlParser.FAILOVER_MODE); }
		public ITerminalNode FAILOVER_MODE(int i) {
			return GetToken(TSqlParser.FAILOVER_MODE, i);
		}
		public ITerminalNode[] SEEDING_MODE() { return GetTokens(TSqlParser.SEEDING_MODE); }
		public ITerminalNode SEEDING_MODE(int i) {
			return GetToken(TSqlParser.SEEDING_MODE, i);
		}
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode[] ALLOW_CONNECTIONS() { return GetTokens(TSqlParser.ALLOW_CONNECTIONS); }
		public ITerminalNode ALLOW_CONNECTIONS(int i) {
			return GetToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode[] SYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.SYNCHRONOUS_COMMIT); }
		public ITerminalNode SYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] ASYNCHRONOUS_COMMIT() { return GetTokens(TSqlParser.ASYNCHRONOUS_COMMIT); }
		public ITerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return GetToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		public ITerminalNode[] AUTOMATIC() { return GetTokens(TSqlParser.AUTOMATIC); }
		public ITerminalNode AUTOMATIC(int i) {
			return GetToken(TSqlParser.AUTOMATIC, i);
		}
		public ITerminalNode[] MANUAL() { return GetTokens(TSqlParser.MANUAL); }
		public ITerminalNode MANUAL(int i) {
			return GetToken(TSqlParser.MANUAL, i);
		}
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] LISTENER_URL() { return GetTokens(TSqlParser.LISTENER_URL); }
		public ITerminalNode LISTENER_URL(int i) {
			return GetToken(TSqlParser.LISTENER_URL, i);
		}
		public ITerminalNode GRANT() { return GetToken(TSqlParser.GRANT, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode DENY() { return GetToken(TSqlParser.DENY, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public ITerminalNode[] IPV4_ADDR() { return GetTokens(TSqlParser.IPV4_ADDR); }
		public ITerminalNode IPV4_ADDR(int i) {
			return GetToken(TSqlParser.IPV4_ADDR, i);
		}
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public ITerminalNode[] IPV6_ADDR() { return GetTokens(TSqlParser.IPV6_ADDR); }
		public ITerminalNode IPV6_ADDR(int i) {
			return GetToken(TSqlParser.IPV6_ADDR, i);
		}
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode DTC_SUPPORT() { return GetToken(TSqlParser.DTC_SUPPORT, 0); }
		public ITerminalNode PER_DB() { return GetToken(TSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_availability_group_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_availability_group_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_availability_group_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_availability_group_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_availability_group_optionsContext alter_availability_group_options() {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(Context, State);
		EnterRule(_localctx, 160, RULE_alter_availability_group_options);
		int _la;
		try {
			int _alt;
			State = 2176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1826; Match(SET);
				State = 1827; Match(LR_BRACKET);
				{
				State = 1843;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTOMATED_BACKUP_PREFERENCE:
					{
					State = 1828; Match(AUTOMATED_BACKUP_PREFERENCE);
					State = 1829; Match(EQUAL);
					State = 1830;
					_la = TokenStream.LA(1);
					if ( !(_la==NONE || _la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case FAILURE_CONDITION_LEVEL:
					{
					State = 1831; Match(FAILURE_CONDITION_LEVEL);
					State = 1832; Match(EQUAL);
					State = 1833; Match(DECIMAL);
					}
					break;
				case HEALTH_CHECK_TIMEOUT:
					{
					State = 1834; Match(HEALTH_CHECK_TIMEOUT);
					State = 1835; Match(EQUAL);
					State = 1836; _localctx.milliseconds = Match(DECIMAL);
					}
					break;
				case DB_FAILOVER:
					{
					State = 1837; Match(DB_FAILOVER);
					State = 1838; Match(EQUAL);
					State = 1839;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					{
					State = 1840; Match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					State = 1841; Match(EQUAL);
					State = 1842; Match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1845; Match(RR_BRACKET);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1846; Match(ADD);
				State = 1847; Match(DATABASE);
				State = 1848; _localctx.database_name = id();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1849; Match(REMOVE);
				State = 1850; Match(DATABASE);
				State = 1851; _localctx.database_name = id();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1852; Match(ADD);
				State = 1853; Match(REPLICA);
				State = 1854; Match(ON);
				State = 1855; _localctx.server_instance = Match(STRING);
				{
				State = 1856; Match(WITH);
				State = 1857; Match(LR_BRACKET);
				{
				State = 1861;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDPOINT_URL) {
					{
					State = 1858; Match(ENDPOINT_URL);
					State = 1859; Match(EQUAL);
					State = 1860; Match(STRING);
					}
				}

				State = 1869;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 1864;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1863; Match(COMMA);
						}
					}

					State = 1866; Match(AVAILABILITY_MODE);
					State = 1867; Match(EQUAL);
					State = 1868;
					_la = TokenStream.LA(1);
					if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1877;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
				case 1:
					{
					State = 1872;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1871; Match(COMMA);
						}
					}

					State = 1874; Match(FAILOVER_MODE);
					State = 1875; Match(EQUAL);
					State = 1876;
					_la = TokenStream.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1885;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
				case 1:
					{
					State = 1880;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1879; Match(COMMA);
						}
					}

					State = 1882; Match(SEEDING_MODE);
					State = 1883; Match(EQUAL);
					State = 1884;
					_la = TokenStream.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1893;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
				case 1:
					{
					State = 1888;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1887; Match(COMMA);
						}
					}

					State = 1890; Match(BACKUP_PRIORITY);
					State = 1891; Match(EQUAL);
					State = 1892; Match(DECIMAL);
					}
					break;
				}
				State = 1904;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 1896;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1895; Match(COMMA);
						}
					}

					State = 1898; Match(PRIMARY_ROLE);
					State = 1899; Match(LR_BRACKET);
					State = 1900; Match(ALLOW_CONNECTIONS);
					State = 1901; Match(EQUAL);
					State = 1902;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1903; Match(RR_BRACKET);
					}
					break;
				}
				State = 1915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SECONDARY_ROLE || _la==COMMA) {
					{
					State = 1907;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1906; Match(COMMA);
						}
					}

					State = 1909; Match(SECONDARY_ROLE);
					State = 1910; Match(LR_BRACKET);
					State = 1911; Match(ALLOW_CONNECTIONS);
					State = 1912; Match(EQUAL);
					{
					State = 1913; Match(READ_ONLY);
					}
					State = 1914; Match(RR_BRACKET);
					}
				}

				}
				}
				State = 1917; Match(RR_BRACKET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1918; Match(SECONDARY_ROLE);
				State = 1919; Match(LR_BRACKET);
				State = 1928;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					State = 1920; Match(ALLOW_CONNECTIONS);
					State = 1921; Match(EQUAL);
					State = 1922;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					State = 1923; Match(READ_ONLY_ROUTING_LIST);
					State = 1924; Match(EQUAL);
					{
					State = 1925; Match(LR_BRACKET);
					{
					{
					State = 1926; Match(STRING);
					}
					}
					State = 1927; Match(RR_BRACKET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1930; Match(PRIMARY_ROLE);
				State = 1931; Match(LR_BRACKET);
				State = 1954;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					State = 1932; Match(ALLOW_CONNECTIONS);
					State = 1933; Match(EQUAL);
					State = 1934;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					State = 1935; Match(READ_ONLY_ROUTING_LIST);
					State = 1936; Match(EQUAL);
					{
					State = 1937; Match(LR_BRACKET);
					State = 1948;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
					case RR_BRACKET:
					case COMMA:
						{
						State = 1944;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==STRING || _la==COMMA) {
							{
							{
							State = 1939;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 1938; Match(COMMA);
								}
							}

							State = 1941; Match(STRING);
							}
							}
							State = 1946;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					case NONE:
						{
						State = 1947; Match(NONE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1950; Match(RR_BRACKET);
					}
					}
					break;
				case SESSION_TIMEOUT:
					{
					State = 1951; Match(SESSION_TIMEOUT);
					State = 1952; Match(EQUAL);
					State = 1953; _localctx.session_timeout = Match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1956; Match(MODIFY);
				State = 1957; Match(REPLICA);
				State = 1958; Match(ON);
				State = 1959; _localctx.server_instance = Match(STRING);
				State = 2017;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WITH:
					{
					State = 1960; Match(WITH);
					State = 1961; Match(LR_BRACKET);
					State = 1977;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ENDPOINT_URL:
						{
						State = 1962; Match(ENDPOINT_URL);
						State = 1963; Match(EQUAL);
						State = 1964; Match(STRING);
						}
						break;
					case AVAILABILITY_MODE:
						{
						State = 1965; Match(AVAILABILITY_MODE);
						State = 1966; Match(EQUAL);
						State = 1967;
						_la = TokenStream.LA(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case FAILOVER_MODE:
						{
						State = 1968; Match(FAILOVER_MODE);
						State = 1969; Match(EQUAL);
						State = 1970;
						_la = TokenStream.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case SEEDING_MODE:
						{
						State = 1971; Match(SEEDING_MODE);
						State = 1972; Match(EQUAL);
						State = 1973;
						_la = TokenStream.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case BACKUP_PRIORITY:
						{
						State = 1974; Match(BACKUP_PRIORITY);
						State = 1975; Match(EQUAL);
						State = 1976; Match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case SECONDARY_ROLE:
					{
					State = 1979; Match(SECONDARY_ROLE);
					State = 1980; Match(LR_BRACKET);
					State = 1989;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						State = 1981; Match(ALLOW_CONNECTIONS);
						State = 1982; Match(EQUAL);
						State = 1983;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						State = 1984; Match(READ_ONLY_ROUTING_LIST);
						State = 1985; Match(EQUAL);
						{
						State = 1986; Match(LR_BRACKET);
						{
						{
						State = 1987; Match(STRING);
						}
						}
						State = 1988; Match(RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case PRIMARY_ROLE:
					{
					State = 1991; Match(PRIMARY_ROLE);
					State = 1992; Match(LR_BRACKET);
					State = 2015;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						State = 1993; Match(ALLOW_CONNECTIONS);
						State = 1994; Match(EQUAL);
						State = 1995;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						State = 1996; Match(READ_ONLY_ROUTING_LIST);
						State = 1997; Match(EQUAL);
						{
						State = 1998; Match(LR_BRACKET);
						State = 2009;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STRING:
						case RR_BRACKET:
						case COMMA:
							{
							State = 2005;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==STRING || _la==COMMA) {
								{
								{
								State = 2000;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 1999; Match(COMMA);
									}
								}

								State = 2002; Match(STRING);
								}
								}
								State = 2007;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
							break;
						case NONE:
							{
							State = 2008; Match(NONE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2011; Match(RR_BRACKET);
						}
						}
						break;
					case SESSION_TIMEOUT:
						{
						State = 2012; Match(SESSION_TIMEOUT);
						State = 2013; Match(EQUAL);
						State = 2014; _localctx.session_timeout = Match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2019; Match(RR_BRACKET);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2020; Match(REMOVE);
				State = 2021; Match(REPLICA);
				State = 2022; Match(ON);
				State = 2023; Match(STRING);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2024; Match(JOIN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2025; Match(JOIN);
				State = 2026; Match(AVAILABILITY);
				State = 2027; Match(GROUP);
				State = 2028; Match(ON);
				State = 2051;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2030;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2029; Match(COMMA);
							}
						}

						State = 2032; _localctx.ag_name = Match(STRING);
						State = 2033; Match(WITH);
						State = 2034; Match(LR_BRACKET);
						{
						State = 2035; Match(LISTENER_URL);
						State = 2036; Match(EQUAL);
						State = 2037; Match(STRING);
						State = 2038; Match(COMMA);
						State = 2039; Match(AVAILABILITY_MODE);
						State = 2040; Match(EQUAL);
						State = 2041;
						_la = TokenStream.LA(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2042; Match(COMMA);
						State = 2043; Match(FAILOVER_MODE);
						State = 2044; Match(EQUAL);
						State = 2045; Match(MANUAL);
						State = 2046; Match(COMMA);
						State = 2047; Match(SEEDING_MODE);
						State = 2048; Match(EQUAL);
						State = 2049;
						_la = TokenStream.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2050; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2053;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2055; Match(MODIFY);
				State = 2056; Match(AVAILABILITY);
				State = 2057; Match(GROUP);
				State = 2058; Match(ON);
				State = 2093;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2060;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2059; Match(COMMA);
							}
						}

						State = 2062; _localctx.ag_name_modified = Match(STRING);
						State = 2063; Match(WITH);
						State = 2064; Match(LR_BRACKET);
						{
						State = 2065; Match(LISTENER_URL);
						State = 2066; Match(EQUAL);
						State = 2067; Match(STRING);
						State = 2074;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
						case 1:
							{
							State = 2069;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 2068; Match(COMMA);
								}
							}

							State = 2071; Match(AVAILABILITY_MODE);
							State = 2072; Match(EQUAL);
							State = 2073;
							_la = TokenStream.LA(1);
							if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						}
						State = 2082;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
						case 1:
							{
							State = 2077;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 2076; Match(COMMA);
								}
							}

							State = 2079; Match(FAILOVER_MODE);
							State = 2080; Match(EQUAL);
							State = 2081; Match(MANUAL);
							}
							break;
						}
						State = 2090;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SEEDING_MODE || _la==COMMA) {
							{
							State = 2085;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 2084; Match(COMMA);
								}
							}

							State = 2087; Match(SEEDING_MODE);
							State = 2088; Match(EQUAL);
							State = 2089;
							_la = TokenStream.LA(1);
							if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 2092; Match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2095;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2097; Match(GRANT);
				State = 2098; Match(CREATE);
				State = 2099; Match(ANY);
				State = 2100; Match(DATABASE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2101; Match(DENY);
				State = 2102; Match(CREATE);
				State = 2103; Match(ANY);
				State = 2104; Match(DATABASE);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2105; Match(FAILOVER);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2106; Match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2107; Match(ADD);
				State = 2108; Match(LISTENER);
				State = 2109; _localctx.listener_name = Match(STRING);
				State = 2110; Match(LR_BRACKET);
				State = 2144;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
				case 1:
					{
					State = 2111; Match(WITH);
					State = 2112; Match(DHCP);
					{
					State = 2113; Match(ON);
					State = 2114; Match(LR_BRACKET);
					{
					State = 2115; Match(IPV4_ADDR);
					State = 2116; Match(IPV4_ADDR);
					}
					State = 2118; Match(RR_BRACKET);
					}
					}
					break;
				case 2:
					{
					State = 2119; Match(WITH);
					State = 2120; Match(IP);
					State = 2121; Match(LR_BRACKET);
					{
					State = 2133;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 2123;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2122; Match(COMMA);
							}
						}

						State = 2125; Match(LR_BRACKET);
						State = 2130;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case IPV4_ADDR:
							{
							State = 2126; Match(IPV4_ADDR);
							State = 2127; Match(COMMA);
							State = 2128; Match(IPV4_ADDR);
							}
							break;
						case IPV6_ADDR:
							{
							State = 2129; Match(IPV6_ADDR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2132; Match(RR_BRACKET);
						}
						}
						State = 2135;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==LR_BRACKET || _la==COMMA );
					State = 2137; Match(RR_BRACKET);
					State = 2142;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2138; Match(COMMA);
						State = 2139; Match(PORT);
						State = 2140; Match(EQUAL);
						State = 2141; Match(DECIMAL);
						}
					}

					}
					}
					break;
				}
				State = 2146; Match(RR_BRACKET);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2147; Match(MODIFY);
				State = 2148; Match(LISTENER);
				State = 2161;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
					{
					State = 2149; Match(ADD);
					State = 2150; Match(IP);
					State = 2151; Match(LR_BRACKET);
					State = 2155;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IPV4_ADDR:
						{
						State = 2152; Match(IPV4_ADDR);
						State = 2153; Match(IPV4_ADDR);
						}
						break;
					case IPV6_ADDR:
						{
						State = 2154; Match(IPV6_ADDR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2157; Match(RR_BRACKET);
					}
					break;
				case PORT:
					{
					State = 2158; Match(PORT);
					State = 2159; Match(EQUAL);
					State = 2160; Match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2163; Match(RESTART);
				State = 2164; Match(LISTENER);
				State = 2165; Match(STRING);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2166; Match(REMOVE);
				State = 2167; Match(LISTENER);
				State = 2168; Match(STRING);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2169; Match(OFFLINE);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2170; Match(WITH);
				State = 2171; Match(LR_BRACKET);
				State = 2172; Match(DTC_SUPPORT);
				State = 2173; Match(EQUAL);
				State = 2174; Match(PER_DB);
				State = 2175; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_broker_priorityContext : ParserRuleContext {
		public IdContext ConversationPriorityName;
		public IToken RemoteServiceName;
		public IToken PriorityValue;
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode CONTRACT_NAME() { return GetToken(TSqlParser.CONTRACT_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode LOCAL_SERVICE_NAME() { return GetToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_broker_priority(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_broker_priority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(Context, State);
		EnterRule(_localctx, 162, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2178;
			_la = TokenStream.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2179; Match(BROKER);
			State = 2180; Match(PRIORITY);
			State = 2181; _localctx.ConversationPriorityName = id();
			State = 2182; Match(FOR);
			State = 2183; Match(CONVERSATION);
			State = 2184; Match(SET);
			State = 2185; Match(LR_BRACKET);
			State = 2195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTRACT_NAME) {
				{
				State = 2186; Match(CONTRACT_NAME);
				State = 2187; Match(EQUAL);
				State = 2190;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					{
					State = 2188; id();
					}
					}
					break;
				case ANY:
					{
					State = 2189; Match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2192; Match(COMMA);
					}
				}

				}
			}

			State = 2209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL_SERVICE_NAME) {
				{
				State = 2197; Match(LOCAL_SERVICE_NAME);
				State = 2198; Match(EQUAL);
				State = 2204;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case DOUBLE_FORWARD_SLASH:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 2200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOUBLE_FORWARD_SLASH) {
						{
						State = 2199; Match(DOUBLE_FORWARD_SLASH);
						}
					}

					State = 2202; id();
					}
					break;
				case ANY:
					{
					State = 2203; Match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2206; Match(COMMA);
					}
				}

				}
			}

			State = 2220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REMOTE_SERVICE_NAME) {
				{
				State = 2211; Match(REMOTE_SERVICE_NAME);
				State = 2212; Match(EQUAL);
				State = 2215;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
					{
					State = 2213; _localctx.RemoteServiceName = Match(STRING);
					}
					break;
				case ANY:
					{
					State = 2214; Match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2217; Match(COMMA);
					}
				}

				}
			}

			State = 2228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIORITY_LEVEL) {
				{
				State = 2222; Match(PRIORITY_LEVEL);
				State = 2223; Match(EQUAL);
				State = 2226;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
					{
					State = 2224; _localctx.PriorityValue = Match(DECIMAL);
					}
					break;
				case DEFAULT:
					{
					State = 2225; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 2230; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_broker_priorityContext : ParserRuleContext {
		public IdContext ConversationPriorityName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_broker_priority; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_broker_priority(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_broker_priority(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_broker_priority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_broker_priorityContext drop_broker_priority() {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(Context, State);
		EnterRule(_localctx, 164, RULE_drop_broker_priority);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2232; Match(DROP);
			State = 2233; Match(BROKER);
			State = 2234; Match(PRIORITY);
			State = 2235; _localctx.ConversationPriorityName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_certificateContext : ParserRuleContext {
		public IdContext certificate_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_certificateContext alter_certificate() {
		Alter_certificateContext _localctx = new Alter_certificateContext(Context, State);
		EnterRule(_localctx, 166, RULE_alter_certificate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2237; Match(ALTER);
			State = 2238; Match(CERTIFICATE);
			State = 2239; _localctx.certificate_name = id();
			State = 2279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 2240; Match(REMOVE);
				State = 2241; Match(PRIVATE_KEY);
				}
				break;
			case 2:
				{
				State = 2242; Match(WITH);
				State = 2243; Match(PRIVATE);
				State = 2244; Match(KEY);
				State = 2245; Match(LR_BRACKET);
				State = 2268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 2268;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FILE:
						{
						State = 2246; Match(FILE);
						State = 2247; Match(EQUAL);
						State = 2248; Match(STRING);
						State = 2250;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2249; Match(COMMA);
							}
						}

						}
						break;
					case DECRYPTION:
						{
						State = 2252; Match(DECRYPTION);
						State = 2253; Match(BY);
						State = 2254; Match(PASSWORD);
						State = 2255; Match(EQUAL);
						State = 2256; Match(STRING);
						State = 2258;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2257; Match(COMMA);
							}
						}

						}
						break;
					case ENCRYPTION:
						{
						State = 2260; Match(ENCRYPTION);
						State = 2261; Match(BY);
						State = 2262; Match(PASSWORD);
						State = 2263; Match(EQUAL);
						State = 2264; Match(STRING);
						State = 2266;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2265; Match(COMMA);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2270;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION );
				State = 2272; Match(RR_BRACKET);
				}
				break;
			case 3:
				{
				State = 2273; Match(WITH);
				State = 2274; Match(ACTIVE);
				State = 2275; Match(FOR);
				State = 2276; Match(BEGIN_DIALOG);
				State = 2277; Match(EQUAL);
				State = 2278;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_column_encryption_keyContext : ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public IToken algorithm_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_column_encryption_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_column_encryption_keyContext alter_column_encryption_key() {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(Context, State);
		EnterRule(_localctx, 168, RULE_alter_column_encryption_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2281; Match(ALTER);
			State = 2282; Match(COLUMN);
			State = 2283; Match(ENCRYPTION);
			State = 2284; Match(KEY);
			State = 2285; _localctx.column_encryption_key = id();
			State = 2286;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2287; Match(VALUE);
			State = 2288; Match(LR_BRACKET);
			State = 2289; Match(COLUMN_MASTER_KEY);
			State = 2290; Match(EQUAL);
			State = 2291; _localctx.column_master_key_name = id();
			State = 2300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2292; Match(COMMA);
				State = 2293; Match(ALGORITHM);
				State = 2294; Match(EQUAL);
				State = 2295; _localctx.algorithm_name = Match(STRING);
				State = 2296; Match(COMMA);
				State = 2297; Match(ENCRYPTED_VALUE);
				State = 2298; Match(EQUAL);
				State = 2299; Match(BINARY);
				}
			}

			State = 2302; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_encryption_keyContext : ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public IToken algorithm_name;
		public IToken encrypted_value;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] COLUMN_MASTER_KEY() { return GetTokens(TSqlParser.COLUMN_MASTER_KEY); }
		public ITerminalNode COLUMN_MASTER_KEY(int i) {
			return GetToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] ENCRYPTED_VALUE() { return GetTokens(TSqlParser.ENCRYPTED_VALUE); }
		public ITerminalNode ENCRYPTED_VALUE(int i) {
			return GetToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_encryption_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_encryption_keyContext create_column_encryption_key() {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(Context, State);
		EnterRule(_localctx, 170, RULE_create_column_encryption_key);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2304; Match(CREATE);
			State = 2305; Match(COLUMN);
			State = 2306; Match(ENCRYPTION);
			State = 2307; Match(KEY);
			State = 2308; _localctx.column_encryption_key = id();
			State = 2309; Match(WITH);
			State = 2310; Match(VALUES);
			State = 2330;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2311; Match(LR_BRACKET);
					State = 2313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2312; Match(COMMA);
						}
					}

					State = 2315; Match(COLUMN_MASTER_KEY);
					State = 2316; Match(EQUAL);
					State = 2317; _localctx.column_master_key_name = id();
					State = 2318; Match(COMMA);
					State = 2319; Match(ALGORITHM);
					State = 2320; Match(EQUAL);
					State = 2321; _localctx.algorithm_name = Match(STRING);
					State = 2322; Match(COMMA);
					State = 2323; Match(ENCRYPTED_VALUE);
					State = 2324; Match(EQUAL);
					State = 2325; _localctx.encrypted_value = Match(BINARY);
					State = 2326; Match(RR_BRACKET);
					State = 2328;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2327; Match(COMMA);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_certificateContext : ParserRuleContext {
		public IdContext certificate_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_certificateContext drop_certificate() {
		Drop_certificateContext _localctx = new Drop_certificateContext(Context, State);
		EnterRule(_localctx, 172, RULE_drop_certificate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2334; Match(DROP);
			State = 2335; Match(CERTIFICATE);
			State = 2336; _localctx.certificate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_encryption_keyContext : ParserRuleContext {
		public IdContext key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_encryption_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_encryption_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_encryption_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column_encryption_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_encryption_keyContext drop_column_encryption_key() {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(Context, State);
		EnterRule(_localctx, 174, RULE_drop_column_encryption_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2338; Match(DROP);
			State = 2339; Match(COLUMN);
			State = 2340; Match(ENCRYPTION);
			State = 2341; Match(KEY);
			State = 2342; _localctx.key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_column_master_keyContext : ParserRuleContext {
		public IdContext key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_column_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_column_master_keyContext drop_column_master_key() {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(Context, State);
		EnterRule(_localctx, 176, RULE_drop_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2344; Match(DROP);
			State = 2345; Match(COLUMN);
			State = 2346; Match(MASTER);
			State = 2347; Match(KEY);
			State = 2348; _localctx.key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_contractContext : ParserRuleContext {
		public IdContext dropped_contract_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_contract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_contract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_contractContext drop_contract() {
		Drop_contractContext _localctx = new Drop_contractContext(Context, State);
		EnterRule(_localctx, 178, RULE_drop_contract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2350; Match(DROP);
			State = 2351; Match(CONTRACT);
			State = 2352; _localctx.dropped_contract_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_credentialContext : ParserRuleContext {
		public IdContext credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_credentialContext drop_credential() {
		Drop_credentialContext _localctx = new Drop_credentialContext(Context, State);
		EnterRule(_localctx, 180, RULE_drop_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2354; Match(DROP);
			State = 2355; Match(CREDENTIAL);
			State = 2356; _localctx.credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_cryptograhic_providerContext : ParserRuleContext {
		public IdContext provider_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_cryptograhic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_cryptograhic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_cryptograhic_provider(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_cryptograhic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(Context, State);
		EnterRule(_localctx, 182, RULE_drop_cryptograhic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2358; Match(DROP);
			State = 2359; Match(CRYPTOGRAPHIC);
			State = 2360; Match(PROVIDER);
			State = 2361; _localctx.provider_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_databaseContext : ParserRuleContext {
		public IdContext database_name_or_database_snapshot_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_databaseContext drop_database() {
		Drop_databaseContext _localctx = new Drop_databaseContext(Context, State);
		EnterRule(_localctx, 184, RULE_drop_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2363; Match(DROP);
			State = 2364; Match(DATABASE);
			State = 2367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2365; Match(IF);
				State = 2366; Match(EXISTS);
				}
			}

			State = 2373;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2370;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2369; Match(COMMA);
						}
					}

					State = 2372; _localctx.database_name_or_database_snapshot_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2375;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_audit_specificationContext : ParserRuleContext {
		public IdContext audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_audit_specificationContext drop_database_audit_specification() {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(Context, State);
		EnterRule(_localctx, 186, RULE_drop_database_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2377; Match(DROP);
			State = 2378; Match(DATABASE);
			State = 2379; Match(AUDIT);
			State = 2380; Match(SPECIFICATION);
			State = 2381; _localctx.audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_scoped_credentialContext : ParserRuleContext {
		public IdContext credential_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_scoped_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_database_scoped_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_database_scoped_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_database_scoped_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(Context, State);
		EnterRule(_localctx, 188, RULE_drop_database_scoped_credential);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2383; Match(DROP);
			State = 2384; Match(DATABASE);
			State = 2385; Match(SCOPED);
			State = 2386; Match(CREDENTIAL);
			State = 2387; _localctx.credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_defaultContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext default_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_default(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_defaultContext drop_default() {
		Drop_defaultContext _localctx = new Drop_defaultContext(Context, State);
		EnterRule(_localctx, 190, RULE_drop_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2389; Match(DROP);
			State = 2390; Match(DEFAULT);
			State = 2393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2391; Match(IF);
				State = 2392; Match(EXISTS);
				}
			}

			{
			State = 2396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2395; Match(COMMA);
				}
			}

			State = 2401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 2398; _localctx.schema_name = id();
				State = 2399; Match(DOT);
				}
				break;
			}
			State = 2403; _localctx.default_name = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_endpointContext : ParserRuleContext {
		public IdContext endPointName;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_endpoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_endpoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_endpointContext drop_endpoint() {
		Drop_endpointContext _localctx = new Drop_endpointContext(Context, State);
		EnterRule(_localctx, 192, RULE_drop_endpoint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2405; Match(DROP);
			State = 2406; Match(ENDPOINT);
			State = 2407; _localctx.endPointName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_data_sourceContext : ParserRuleContext {
		public IdContext external_data_source_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_data_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_data_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_data_sourceContext drop_external_data_source() {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(Context, State);
		EnterRule(_localctx, 194, RULE_drop_external_data_source);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2409; Match(DROP);
			State = 2410; Match(EXTERNAL);
			State = 2411; Match(DATA);
			State = 2412; Match(SOURCE);
			State = 2413; _localctx.external_data_source_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_file_formatContext : ParserRuleContext {
		public IdContext external_file_format_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_file_format; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_file_format(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_file_format(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_file_format(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_file_formatContext drop_external_file_format() {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(Context, State);
		EnterRule(_localctx, 196, RULE_drop_external_file_format);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2415; Match(DROP);
			State = 2416; Match(EXTERNAL);
			State = 2417; Match(FILE);
			State = 2418; Match(FORMAT);
			State = 2419; _localctx.external_file_format_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_libraryContext : ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_libraryContext drop_external_library() {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(Context, State);
		EnterRule(_localctx, 198, RULE_drop_external_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2421; Match(DROP);
			State = 2422; Match(EXTERNAL);
			State = 2423; Match(LIBRARY);
			State = 2424; _localctx.library_name = id();
			State = 2427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 2425; Match(AUTHORIZATION);
				State = 2426; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_resource_poolContext : ParserRuleContext {
		public IdContext pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_resource_poolContext drop_external_resource_pool() {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(Context, State);
		EnterRule(_localctx, 200, RULE_drop_external_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2429; Match(DROP);
			State = 2430; Match(EXTERNAL);
			State = 2431; Match(RESOURCE);
			State = 2432; Match(POOL);
			State = 2433; _localctx.pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_tableContext : ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext table;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_tableContext drop_external_table() {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(Context, State);
		EnterRule(_localctx, 202, RULE_drop_external_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2435; Match(DROP);
			State = 2436; Match(EXTERNAL);
			State = 2437; Match(TABLE);
			State = 2441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 2438; _localctx.database_name = id();
				State = 2439; Match(DOT);
				}
				break;
			}
			State = 2446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 2443; _localctx.schema_name = id();
				State = 2444; Match(DOT);
				}
				break;
			}
			State = 2448; _localctx.table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_notificationsContext : ParserRuleContext {
		public IdContext notification_name;
		public IdContext queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_notifications; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_notifications(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_notifications(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_event_notifications(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_notificationsContext drop_event_notifications() {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(Context, State);
		EnterRule(_localctx, 204, RULE_drop_event_notifications);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2450; Match(DROP);
			State = 2451; Match(EVENT);
			State = 2452; Match(NOTIFICATION);
			State = 2457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2453; Match(COMMA);
					}
				}

				State = 2456; _localctx.notification_name = id();
				}
				}
				State = 2459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)) | (1L << (COMMA - 768)))) != 0) );
			State = 2461; Match(ON);
			State = 2466;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SERVER:
				{
				State = 2462; Match(SERVER);
				}
				break;
			case DATABASE:
				{
				State = 2463; Match(DATABASE);
				}
				break;
			case QUEUE:
				{
				State = 2464; Match(QUEUE);
				State = 2465; _localctx.queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_event_sessionContext : ParserRuleContext {
		public IdContext event_session_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_event_session(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_event_session(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_event_sessionContext drop_event_session() {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(Context, State);
		EnterRule(_localctx, 206, RULE_drop_event_session);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2468; Match(DROP);
			State = 2469; Match(EVENT);
			State = 2470; Match(SESSION);
			State = 2471; _localctx.event_session_name = id();
			State = 2472; Match(ON);
			State = 2473; Match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_catalogContext : ParserRuleContext {
		public IdContext catalog_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_catalog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_catalogContext drop_fulltext_catalog() {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(Context, State);
		EnterRule(_localctx, 208, RULE_drop_fulltext_catalog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2475; Match(DROP);
			State = 2476; Match(FULLTEXT);
			State = 2477; Match(CATALOG);
			State = 2478; _localctx.catalog_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_indexContext : ParserRuleContext {
		public IdContext schema;
		public IdContext table;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_indexContext drop_fulltext_index() {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(Context, State);
		EnterRule(_localctx, 210, RULE_drop_fulltext_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2480; Match(DROP);
			State = 2481; Match(FULLTEXT);
			State = 2482; Match(INDEX);
			State = 2483; Match(ON);
			State = 2487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				{
				State = 2484; _localctx.schema = id();
				State = 2485; Match(DOT);
				}
				break;
			}
			State = 2489; _localctx.table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_fulltext_stoplistContext : ParserRuleContext {
		public IdContext stoplist_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_fulltext_stoplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(Context, State);
		EnterRule(_localctx, 212, RULE_drop_fulltext_stoplist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2491; Match(DROP);
			State = 2492; Match(FULLTEXT);
			State = 2493; Match(STOPLIST);
			State = 2494; _localctx.stoplist_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_loginContext : ParserRuleContext {
		public IdContext login_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_login; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_login(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_login(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_login(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_loginContext drop_login() {
		Drop_loginContext _localctx = new Drop_loginContext(Context, State);
		EnterRule(_localctx, 214, RULE_drop_login);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2496; Match(DROP);
			State = 2497; Match(LOGIN);
			State = 2498; _localctx.login_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_master_keyContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_master_keyContext drop_master_key() {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(Context, State);
		EnterRule(_localctx, 216, RULE_drop_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2500; Match(DROP);
			State = 2501; Match(MASTER);
			State = 2502; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_message_typeContext : ParserRuleContext {
		public IdContext message_type_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_message_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_message_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_message_typeContext drop_message_type() {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(Context, State);
		EnterRule(_localctx, 218, RULE_drop_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2504; Match(DROP);
			State = 2505; Match(MESSAGE);
			State = 2506; Match(TYPE);
			State = 2507; _localctx.message_type_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_functionContext : ParserRuleContext {
		public IdContext partition_function_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_partition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_functionContext drop_partition_function() {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(Context, State);
		EnterRule(_localctx, 220, RULE_drop_partition_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2509; Match(DROP);
			State = 2510; Match(PARTITION);
			State = 2511; Match(FUNCTION);
			State = 2512; _localctx.partition_function_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_partition_schemeContext : ParserRuleContext {
		public IdContext partition_scheme_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_partition_scheme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_partition_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_partition_schemeContext drop_partition_scheme() {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(Context, State);
		EnterRule(_localctx, 222, RULE_drop_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2514; Match(DROP);
			State = 2515; Match(PARTITION);
			State = 2516; Match(SCHEME);
			State = 2517; _localctx.partition_scheme_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_queueContext : ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_queue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_queueContext drop_queue() {
		Drop_queueContext _localctx = new Drop_queueContext(Context, State);
		EnterRule(_localctx, 224, RULE_drop_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2519; Match(DROP);
			State = 2520; Match(QUEUE);
			State = 2524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
			case 1:
				{
				State = 2521; _localctx.database_name = id();
				State = 2522; Match(DOT);
				}
				break;
			}
			State = 2529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 2526; _localctx.schema_name = id();
				State = 2527; Match(DOT);
				}
				break;
			}
			State = 2531; _localctx.queue_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_remote_service_bindingContext : ParserRuleContext {
		public IdContext binding_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_remote_service_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_remote_service_bindingContext drop_remote_service_binding() {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(Context, State);
		EnterRule(_localctx, 226, RULE_drop_remote_service_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2533; Match(DROP);
			State = 2534; Match(REMOTE);
			State = 2535; Match(SERVICE);
			State = 2536; Match(BINDING);
			State = 2537; _localctx.binding_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_resource_poolContext : ParserRuleContext {
		public IdContext pool_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_resource_poolContext drop_resource_pool() {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(Context, State);
		EnterRule(_localctx, 228, RULE_drop_resource_pool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2539; Match(DROP);
			State = 2540; Match(RESOURCE);
			State = 2541; Match(POOL);
			State = 2542; _localctx.pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_db_roleContext : ParserRuleContext {
		public IdContext role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_db_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_db_roleContext drop_db_role() {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(Context, State);
		EnterRule(_localctx, 230, RULE_drop_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2544; Match(DROP);
			State = 2545; Match(ROLE);
			State = 2548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2546; Match(IF);
				State = 2547; Match(EXISTS);
				}
			}

			State = 2550; _localctx.role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_routeContext : ParserRuleContext {
		public IdContext route_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_route(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_route(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_routeContext drop_route() {
		Drop_routeContext _localctx = new Drop_routeContext(Context, State);
		EnterRule(_localctx, 232, RULE_drop_route);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2552; Match(DROP);
			State = 2553; Match(ROUTE);
			State = 2554; _localctx.route_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ruleContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext rule_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ruleContext drop_rule() {
		Drop_ruleContext _localctx = new Drop_ruleContext(Context, State);
		EnterRule(_localctx, 234, RULE_drop_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2556; Match(DROP);
			State = 2557; Match(RULE);
			State = 2560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 2558; Match(IF);
				State = 2559; Match(EXISTS);
				}
				break;
			}
			State = 2571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
			case 1:
				{
				State = 2563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2562; Match(COMMA);
					}
				}

				State = 2568;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
				case 1:
					{
					State = 2565; _localctx.schema_name = id();
					State = 2566; Match(DOT);
					}
					break;
				}
				State = 2570; _localctx.rule_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_schemaContext : ParserRuleContext {
		public IdContext schema_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_schemaContext drop_schema() {
		Drop_schemaContext _localctx = new Drop_schemaContext(Context, State);
		EnterRule(_localctx, 236, RULE_drop_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2573; Match(DROP);
			State = 2574; Match(SCHEMA);
			State = 2577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2575; Match(IF);
				State = 2576; Match(EXISTS);
				}
			}

			State = 2579; _localctx.schema_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_search_property_listContext : ParserRuleContext {
		public IdContext property_list_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_search_property_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_search_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_search_property_listContext drop_search_property_list() {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(Context, State);
		EnterRule(_localctx, 238, RULE_drop_search_property_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2581; Match(DROP);
			State = 2582; Match(SEARCH);
			State = 2583; Match(PROPERTY);
			State = 2584; Match(LIST);
			State = 2585; _localctx.property_list_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_security_policyContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext security_policy_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_security_policy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_security_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_security_policyContext drop_security_policy() {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(Context, State);
		EnterRule(_localctx, 240, RULE_drop_security_policy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2587; Match(DROP);
			State = 2588; Match(SECURITY);
			State = 2589; Match(POLICY);
			State = 2592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2590; Match(IF);
				State = 2591; Match(EXISTS);
				}
			}

			State = 2597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
			case 1:
				{
				State = 2594; _localctx.schema_name = id();
				State = 2595; Match(DOT);
				}
				break;
			}
			State = 2599; _localctx.security_policy_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_sequenceContext : ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext sequence_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_sequence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_sequenceContext drop_sequence() {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(Context, State);
		EnterRule(_localctx, 242, RULE_drop_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2601; Match(DROP);
			State = 2602; Match(SEQUENCE);
			State = 2605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				State = 2603; Match(IF);
				State = 2604; Match(EXISTS);
				}
				break;
			}
			State = 2621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				{
				State = 2608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2607; Match(COMMA);
					}
				}

				State = 2613;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
				case 1:
					{
					State = 2610; _localctx.database_name = id();
					State = 2611; Match(DOT);
					}
					break;
				}
				State = 2618;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 2615; _localctx.schema_name = id();
					State = 2616; Match(DOT);
					}
					break;
				}
				State = 2620; _localctx.sequence_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_auditContext : ParserRuleContext {
		public IdContext audit_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_auditContext drop_server_audit() {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(Context, State);
		EnterRule(_localctx, 244, RULE_drop_server_audit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2623; Match(DROP);
			State = 2624; Match(SERVER);
			State = 2625; Match(AUDIT);
			State = 2626; _localctx.audit_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_audit_specificationContext : ParserRuleContext {
		public IdContext audit_specification_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_audit_specificationContext drop_server_audit_specification() {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(Context, State);
		EnterRule(_localctx, 246, RULE_drop_server_audit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2628; Match(DROP);
			State = 2629; Match(SERVER);
			State = 2630; Match(AUDIT);
			State = 2631; Match(SPECIFICATION);
			State = 2632; _localctx.audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_server_roleContext : ParserRuleContext {
		public IdContext role_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_server_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_server_roleContext drop_server_role() {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(Context, State);
		EnterRule(_localctx, 248, RULE_drop_server_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2634; Match(DROP);
			State = 2635; Match(SERVER);
			State = 2636; Match(ROLE);
			State = 2637; _localctx.role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_serviceContext : ParserRuleContext {
		public IdContext dropped_service_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_service(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_serviceContext drop_service() {
		Drop_serviceContext _localctx = new Drop_serviceContext(Context, State);
		EnterRule(_localctx, 250, RULE_drop_service);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2639; Match(DROP);
			State = 2640; Match(SERVICE);
			State = 2641; _localctx.dropped_service_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_signatureContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext module_name;
		public IdContext cert_name;
		public IdContext Asym_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_signatureContext drop_signature() {
		Drop_signatureContext _localctx = new Drop_signatureContext(Context, State);
		EnterRule(_localctx, 252, RULE_drop_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2643; Match(DROP);
			State = 2645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COUNTER) {
				{
				State = 2644; Match(COUNTER);
				}
			}

			State = 2647; Match(SIGNATURE);
			State = 2648; Match(FROM);
			State = 2652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				{
				State = 2649; _localctx.schema_name = id();
				State = 2650; Match(DOT);
				}
				break;
			}
			State = 2654; _localctx.module_name = id();
			State = 2655; Match(BY);
			State = 2667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 2667;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
				case 1:
					{
					State = 2657;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2656; Match(COMMA);
						}
					}

					State = 2659; Match(CERTIFICATE);
					State = 2660; _localctx.cert_name = id();
					}
					break;
				case 2:
					{
					State = 2662;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2661; Match(COMMA);
						}
					}

					State = 2664; Match(ASYMMETRIC);
					State = 2665; Match(KEY);
					State = 2666; _localctx.Asym_key_name = id();
					}
					break;
				}
				}
				State = 2669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ASYMMETRIC || _la==CERTIFICATE || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statistics_name_azure_dw_and_pdwContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext object_name;
		public IdContext statistics_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics_name_azure_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics_name_azure_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics_name_azure_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_statistics_name_azure_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(Context, State);
		EnterRule(_localctx, 254, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2671; Match(DROP);
			State = 2672; Match(STATISTICS);
			State = 2676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 2673; _localctx.schema_name = id();
				State = 2674; Match(DOT);
				}
				break;
			}
			State = 2678; _localctx.object_name = id();
			State = 2679; Match(DOT);
			State = 2680; _localctx.statistics_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_symmetric_keyContext : ParserRuleContext {
		public IdContext symmetric_key_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_symmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_symmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_symmetric_keyContext drop_symmetric_key() {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(Context, State);
		EnterRule(_localctx, 256, RULE_drop_symmetric_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2682; Match(DROP);
			State = 2683; Match(SYMMETRIC);
			State = 2684; Match(KEY);
			State = 2685; _localctx.symmetric_key_name = id();
			State = 2689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 2686; Match(REMOVE);
				State = 2687; Match(PROVIDER);
				State = 2688; Match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_synonymContext : ParserRuleContext {
		public IdContext schema;
		public IdContext synonym_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_synonym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_synonym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_synonymContext drop_synonym() {
		Drop_synonymContext _localctx = new Drop_synonymContext(Context, State);
		EnterRule(_localctx, 258, RULE_drop_synonym);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2691; Match(DROP);
			State = 2692; Match(SYNONYM);
			State = 2695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2693; Match(IF);
				State = 2694; Match(EXISTS);
				}
			}

			State = 2700;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				{
				State = 2697; _localctx.schema = id();
				State = 2698; Match(DOT);
				}
				break;
			}
			State = 2702; _localctx.synonym_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_userContext : ParserRuleContext {
		public IdContext user_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_user(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_userContext drop_user() {
		Drop_userContext _localctx = new Drop_userContext(Context, State);
		EnterRule(_localctx, 260, RULE_drop_user);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2704; Match(DROP);
			State = 2705; Match(USER);
			State = 2708;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2706; Match(IF);
				State = 2707; Match(EXISTS);
				}
			}

			State = 2710; _localctx.user_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_workload_groupContext : ParserRuleContext {
		public IdContext group_name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_workload_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_workload_groupContext drop_workload_group() {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(Context, State);
		EnterRule(_localctx, 262, RULE_drop_workload_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2712; Match(DROP);
			State = 2713; Match(WORKLOAD);
			State = 2714; Match(GROUP);
			State = 2715; _localctx.group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_xml_schema_collectionContext : ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_xml_schema_collection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_xml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(Context, State);
		EnterRule(_localctx, 264, RULE_drop_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2717; Match(DROP);
			State = 2718; Match(XML);
			State = 2719; Match(SCHEMA);
			State = 2720; Match(COLLECTION);
			State = 2724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				{
				State = 2721; _localctx.relational_schema = id();
				State = 2722; Match(DOT);
				}
				break;
			}
			State = 2726; _localctx.sql_identifier = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disable_triggerContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDisable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDisable_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisable_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Disable_triggerContext disable_trigger() {
		Disable_triggerContext _localctx = new Disable_triggerContext(Context, State);
		EnterRule(_localctx, 266, RULE_disable_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2728; Match(DISABLE);
			State = 2729; Match(TRIGGER);
			State = 2744;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				State = 2739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2731;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2730; Match(COMMA);
						}
					}

					State = 2736;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
					case 1:
						{
						State = 2733; _localctx.schema_name = id();
						State = 2734; Match(DOT);
						}
						break;
					}
					State = 2738; _localctx.trigger_name = id();
					}
					}
					State = 2741;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)) | (1L << (COMMA - 768)))) != 0) );
				}
				break;
			case ALL:
				{
				State = 2743; Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2746; Match(ON);
			State = 2756;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 2750;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
				case 1:
					{
					State = 2747; _localctx.schema_id = id();
					State = 2748; Match(DOT);
					}
					break;
				}
				State = 2752; _localctx.object_name = id();
				}
				break;
			case DATABASE:
				{
				State = 2753; Match(DATABASE);
				}
				break;
			case ALL:
				{
				State = 2754; Match(ALL);
				State = 2755; Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_triggerContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnable_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnable_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnable_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enable_triggerContext enable_trigger() {
		Enable_triggerContext _localctx = new Enable_triggerContext(Context, State);
		EnterRule(_localctx, 268, RULE_enable_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2758; Match(ENABLE);
			State = 2759; Match(TRIGGER);
			State = 2774;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				State = 2769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2761;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2760; Match(COMMA);
						}
					}

					State = 2766;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
					case 1:
						{
						State = 2763; _localctx.schema_name = id();
						State = 2764; Match(DOT);
						}
						break;
					}
					State = 2768; _localctx.trigger_name = id();
					}
					}
					State = 2771;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)) | (1L << (COMMA - 768)))) != 0) );
				}
				break;
			case ALL:
				{
				State = 2773; Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2776; Match(ON);
			State = 2786;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 2780;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
				case 1:
					{
					State = 2777; _localctx.schema_id = id();
					State = 2778; Match(DOT);
					}
					break;
				}
				State = 2782; _localctx.object_name = id();
				}
				break;
			case DATABASE:
				{
				State = 2783; Match(DATABASE);
				}
				break;
			case ALL:
				{
				State = 2784; Match(ALL);
				State = 2785; Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_tableContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterLock_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitLock_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_tableContext lock_table() {
		Lock_tableContext _localctx = new Lock_tableContext(Context, State);
		EnterRule(_localctx, 270, RULE_lock_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2788; Match(LOCK);
			State = 2789; Match(TABLE);
			State = 2790; table_name();
			State = 2791; Match(IN);
			State = 2792;
			_la = TokenStream.LA(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2793; Match(MODE);
			State = 2797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				{
				State = 2794; Match(WAIT);
				State = 2795; _localctx.seconds = Match(DECIMAL);
				}
				break;
			case 2:
				{
				State = 2796; Match(NOWAIT);
				}
				break;
			}
			State = 2800;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				{
				State = 2799; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truncate_tableContext : ParserRuleContext {
		public ITerminalNode TRUNCATE() { return GetToken(TSqlParser.TRUNCATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncate_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTruncate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTruncate_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Truncate_tableContext truncate_table() {
		Truncate_tableContext _localctx = new Truncate_tableContext(Context, State);
		EnterRule(_localctx, 272, RULE_truncate_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2802; Match(TRUNCATE);
			State = 2803; Match(TABLE);
			State = 2804; table_name();
			State = 2824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				{
				State = 2805; Match(WITH);
				State = 2806; Match(LR_BRACKET);
				State = 2807; Match(PARTITIONS);
				State = 2808; Match(LR_BRACKET);
				State = 2818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2810;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2809; Match(COMMA);
						}
					}

					State = 2816;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
					case 1:
						{
						State = 2812; Match(DECIMAL);
						}
						break;
					case 2:
						{
						State = 2813; Match(DECIMAL);
						State = 2814; Match(TO);
						State = 2815; Match(DECIMAL);
						}
						break;
					}
					}
					}
					State = 2820;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECIMAL || _la==COMMA );
				State = 2822; Match(RR_BRACKET);
				State = 2823; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_column_master_keyContext : ParserRuleContext {
		public IdContext key_name;
		public IToken key_store_provider_name;
		public IToken key_path;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode KEY_STORE_PROVIDER_NAME() { return GetToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode KEY_PATH() { return GetToken(TSqlParser.KEY_PATH, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_column_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_column_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_column_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_column_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_column_master_keyContext create_column_master_key() {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(Context, State);
		EnterRule(_localctx, 274, RULE_create_column_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2826; Match(CREATE);
			State = 2827; Match(COLUMN);
			State = 2828; Match(MASTER);
			State = 2829; Match(KEY);
			State = 2830; _localctx.key_name = id();
			State = 2831; Match(WITH);
			State = 2832; Match(LR_BRACKET);
			State = 2833; Match(KEY_STORE_PROVIDER_NAME);
			State = 2834; Match(EQUAL);
			State = 2835; _localctx.key_store_provider_name = Match(STRING);
			State = 2836; Match(COMMA);
			State = 2837; Match(KEY_PATH);
			State = 2838; Match(EQUAL);
			State = 2839; _localctx.key_path = Match(STRING);
			State = 2840; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_credentialContext : ParserRuleContext {
		public IdContext credential_name;
		public IToken identity_name;
		public IToken secret;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_credentialContext alter_credential() {
		Alter_credentialContext _localctx = new Alter_credentialContext(Context, State);
		EnterRule(_localctx, 276, RULE_alter_credential);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2842; Match(ALTER);
			State = 2843; Match(CREDENTIAL);
			State = 2844; _localctx.credential_name = id();
			State = 2845; Match(WITH);
			State = 2846; Match(IDENTITY);
			State = 2847; Match(EQUAL);
			State = 2848; _localctx.identity_name = Match(STRING);
			State = 2853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2849; Match(COMMA);
				State = 2850; Match(SECRET);
				State = 2851; Match(EQUAL);
				State = 2852; _localctx.secret = Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_credentialContext : ParserRuleContext {
		public IdContext credential_name;
		public IToken identity_name;
		public IToken secret;
		public IdContext cryptographic_provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_credential; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_credential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_credential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_credential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_credentialContext create_credential() {
		Create_credentialContext _localctx = new Create_credentialContext(Context, State);
		EnterRule(_localctx, 278, RULE_create_credential);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2855; Match(CREATE);
			State = 2856; Match(CREDENTIAL);
			State = 2857; _localctx.credential_name = id();
			State = 2858; Match(WITH);
			State = 2859; Match(IDENTITY);
			State = 2860; Match(EQUAL);
			State = 2861; _localctx.identity_name = Match(STRING);
			State = 2866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2862; Match(COMMA);
				State = 2863; Match(SECRET);
				State = 2864; Match(EQUAL);
				State = 2865; _localctx.secret = Match(STRING);
				}
			}

			State = 2872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 2868; Match(FOR);
				State = 2869; Match(CRYPTOGRAPHIC);
				State = 2870; Match(PROVIDER);
				State = 2871; _localctx.cryptographic_provider_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_cryptographic_providerContext : ParserRuleContext {
		public IdContext provider_name;
		public IToken crypto_provider_ddl_file;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_cryptographic_provider(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_cryptographic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_cryptographic_providerContext alter_cryptographic_provider() {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(Context, State);
		EnterRule(_localctx, 280, RULE_alter_cryptographic_provider);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2874; Match(ALTER);
			State = 2875; Match(CRYPTOGRAPHIC);
			State = 2876; Match(PROVIDER);
			State = 2877; _localctx.provider_name = id();
			State = 2882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 2878; Match(FROM);
				State = 2879; Match(FILE);
				State = 2880; Match(EQUAL);
				State = 2881; _localctx.crypto_provider_ddl_file = Match(STRING);
				}
			}

			State = 2885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
			case 1:
				{
				State = 2884;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_cryptographic_providerContext : ParserRuleContext {
		public IdContext provider_name;
		public IToken path_of_DLL;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_cryptographic_provider; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_cryptographic_provider(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_cryptographic_provider(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_cryptographic_provider(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_cryptographic_providerContext create_cryptographic_provider() {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(Context, State);
		EnterRule(_localctx, 282, RULE_create_cryptographic_provider);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2887; Match(CREATE);
			State = 2888; Match(CRYPTOGRAPHIC);
			State = 2889; Match(PROVIDER);
			State = 2890; _localctx.provider_name = id();
			State = 2891; Match(FROM);
			State = 2892; Match(FILE);
			State = 2893; Match(EQUAL);
			State = 2894; _localctx.path_of_DLL = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_event_notificationContext : ParserRuleContext {
		public IdContext event_notification_name;
		public IdContext queue_name;
		public IdContext event_type_or_group;
		public IToken broker_service;
		public IToken broker_service_specifier_or_current_database;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EVENT() { return GetToken(TSqlParser.EVENT, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(TSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FAN_IN() { return GetToken(TSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_event_notification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_event_notification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_event_notification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_event_notification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_event_notificationContext create_event_notification() {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(Context, State);
		EnterRule(_localctx, 284, RULE_create_event_notification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2896; Match(CREATE);
			State = 2897; Match(EVENT);
			State = 2898; Match(NOTIFICATION);
			State = 2899; _localctx.event_notification_name = id();
			State = 2900; Match(ON);
			State = 2905;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SERVER:
				{
				State = 2901; Match(SERVER);
				}
				break;
			case DATABASE:
				{
				State = 2902; Match(DATABASE);
				}
				break;
			case QUEUE:
				{
				State = 2903; Match(QUEUE);
				State = 2904; _localctx.queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2907; Match(WITH);
				State = 2908; Match(FAN_IN);
				}
			}

			State = 2911; Match(FOR);
			State = 2916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2912; Match(COMMA);
					}
				}

				State = 2915; _localctx.event_type_or_group = id();
				}
				}
				State = 2918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)) | (1L << (COMMA - 768)))) != 0) );
			State = 2920; Match(TO);
			State = 2921; Match(SERVICE);
			State = 2922; _localctx.broker_service = Match(STRING);
			State = 2923; Match(COMMA);
			State = 2924; _localctx.broker_service_specifier_or_current_database = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_event_sessionContext : ParserRuleContext {
		public IdContext event_session_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext event_name;
		public IdContext event_customizable_attributue;
		public IdContext action_name;
		public IdContext target_name;
		public IdContext target_parameter_name;
		public IToken max_memory;
		public IToken max_dispatch_latency_seconds;
		public IToken max_event_size;
		public ITerminalNode[] EVENT() { return GetTokens(TSqlParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(TSqlParser.EVENT, i);
		}
		public ITerminalNode SESSION() { return GetToken(TSqlParser.SESSION, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode STOP() { return GetToken(TSqlParser.STOP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode EVENT_RETENTION_MODE() { return GetToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public ITerminalNode MAX_DISPATCH_LATENCY() { return GetToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public ITerminalNode MAX_EVENT_SIZE() { return GetToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public ITerminalNode MEMORY_PARTITION_MODE() { return GetToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public ITerminalNode TRACK_CAUSALITY() { return GetToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public ITerminalNode STARTUP_STATE() { return GetToken(TSqlParser.STARTUP_STATE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] KB() { return GetTokens(TSqlParser.KB); }
		public ITerminalNode KB(int i) {
			return GetToken(TSqlParser.KB, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode ALLOW_SINGLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public ITerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return GetToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public ITerminalNode NO_EVENT_LOSS() { return GetToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PER_NODE() { return GetToken(TSqlParser.PER_NODE, 0); }
		public ITerminalNode PER_CPU() { return GetToken(TSqlParser.PER_CPU, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode INFINITE() { return GetToken(TSqlParser.INFINITE, 0); }
		public ITerminalNode[] ACTION() { return GetTokens(TSqlParser.ACTION); }
		public ITerminalNode ACTION(int i) {
			return GetToken(TSqlParser.ACTION, i);
		}
		public ITerminalNode[] WHERE() { return GetTokens(TSqlParser.WHERE); }
		public ITerminalNode WHERE(int i) {
			return GetToken(TSqlParser.WHERE, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_event_session; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_event_session(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_event_session(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_event_session(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_event_sessionContext create_or_alter_event_session() {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(Context, State);
		EnterRule(_localctx, 286, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2926;
			_la = TokenStream.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2927; Match(EVENT);
			State = 2928; Match(SESSION);
			State = 2929; _localctx.event_session_name = id();
			State = 2930; Match(ON);
			State = 2931; Match(SERVER);
			State = 2999;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2933;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2932; Match(COMMA);
						}
					}

					State = 2935; Match(ADD);
					State = 2936; Match(EVENT);
					{
					State = 2940;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
					case 1:
						{
						State = 2937; _localctx.event_module_guid = id();
						State = 2938; Match(DOT);
						}
						break;
					}
					State = 2942; _localctx.event_package_name = id();
					State = 2943; Match(DOT);
					State = 2944; _localctx.event_name = id();
					}
					State = 2994;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,241,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2946; Match(LR_BRACKET);
							State = 2960;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==SET) {
								{
								State = 2947; Match(SET);
								State = 2957;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream,234,Context);
								while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
									if ( _alt==1 ) {
										{
										{
										State = 2949;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la==COMMA) {
											{
											State = 2948; Match(COMMA);
											}
										}

										State = 2951; _localctx.event_customizable_attributue = id();
										State = 2952; Match(EQUAL);
										State = 2953;
										_la = TokenStream.LA(1);
										if ( !(_la==DECIMAL || _la==STRING) ) {
										ErrorHandler.RecoverInline(this);
										}
										else {
											ErrorHandler.ReportMatch(this);
										    Consume();
										}
										}
										} 
									}
									State = 2959;
									ErrorHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(TokenStream,234,Context);
								}
								}
							}

							State = 2982;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								{
								State = 2962; Match(ACTION);
								State = 2963; Match(LR_BRACKET);
								State = 2976;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								do {
									{
									{
									State = 2965;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 2964; Match(COMMA);
										}
									}

									State = 2970;
									ErrorHandler.Sync(this);
									switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
									case 1:
										{
										State = 2967; _localctx.event_module_guid = id();
										State = 2968; Match(DOT);
										}
										break;
									}
									State = 2972; _localctx.event_package_name = id();
									State = 2973; Match(DOT);
									State = 2974; _localctx.action_name = id();
									}
									}
									State = 2978;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)) | (1L << (COMMA - 768)))) != 0) );
								State = 2980; Match(RR_BRACKET);
								}
								}
								State = 2984;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( _la==ACTION );
							State = 2988;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==WHERE) {
								{
								State = 2986; Match(WHERE);
								State = 2987; event_session_predicate_expression();
								}
							}

							State = 2990; Match(RR_BRACKET);
							}
							} 
						}
						State = 2996;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,241,Context);
					}
					}
					} 
				}
				State = 3001;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			}
			State = 3018;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,245,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3003;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3002; Match(COMMA);
						}
					}

					State = 3005; Match(DROP);
					State = 3006; Match(EVENT);
					State = 3010;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
					case 1:
						{
						State = 3007; _localctx.event_module_guid = id();
						State = 3008; Match(DOT);
						}
						break;
					}
					State = 3012; _localctx.event_package_name = id();
					State = 3013; Match(DOT);
					State = 3014; _localctx.event_name = id();
					}
					} 
				}
				State = 3020;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,245,Context);
			}
			State = 3062;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD) {
				{
				{
				{
				State = 3021; Match(ADD);
				State = 3022; Match(TARGET);
				State = 3026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
				case 1:
					{
					State = 3023; _localctx.event_module_guid = id();
					State = 3024; Match(DOT);
					}
					break;
				}
				State = 3028; _localctx.event_package_name = id();
				State = 3029; Match(DOT);
				State = 3030; _localctx.target_name = id();
				}
				State = 3057;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3032; Match(LR_BRACKET);
						State = 3033; Match(SET);
						State = 3049;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 3035;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3034; Match(COMMA);
								}
							}

							State = 3037; _localctx.target_parameter_name = id();
							State = 3038; Match(EQUAL);
							State = 3047;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
							case LR_BRACKET:
								{
								State = 3040;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==LR_BRACKET) {
									{
									State = 3039; Match(LR_BRACKET);
									}
								}

								State = 3042; Match(DECIMAL);
								State = 3044;
								ErrorHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
								case 1:
									{
									State = 3043; Match(RR_BRACKET);
									}
									break;
								}
								}
								break;
							case STRING:
								{
								State = 3046; Match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							State = 3051;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)) | (1L << (COMMA - 768)))) != 0) );
						State = 3053; Match(RR_BRACKET);
						}
						} 
					}
					State = 3059;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
				}
				}
				}
				State = 3064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3078;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,255,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3065; Match(DROP);
					State = 3066; Match(TARGET);
					State = 3070;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
					case 1:
						{
						State = 3067; _localctx.event_module_guid = id();
						State = 3068; Match(DOT);
						}
						break;
					}
					State = 3072; _localctx.event_package_name = id();
					State = 3073; Match(DOT);
					State = 3074; _localctx.target_name = id();
					}
					} 
				}
				State = 3080;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,255,Context);
			}
			State = 3146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				{
				State = 3081; Match(WITH);
				State = 3082; Match(LR_BRACKET);
				State = 3090;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
				case 1:
					{
					State = 3084;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3083; Match(COMMA);
						}
					}

					State = 3086; Match(MAX_MEMORY);
					State = 3087; Match(EQUAL);
					State = 3088; _localctx.max_memory = Match(DECIMAL);
					State = 3089;
					_la = TokenStream.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3098;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
				case 1:
					{
					State = 3093;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3092; Match(COMMA);
						}
					}

					State = 3095; Match(EVENT_RETENTION_MODE);
					State = 3096; Match(EQUAL);
					State = 3097;
					_la = TokenStream.LA(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3110;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
				case 1:
					{
					State = 3101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3100; Match(COMMA);
						}
					}

					State = 3103; Match(MAX_DISPATCH_LATENCY);
					State = 3104; Match(EQUAL);
					State = 3108;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DECIMAL:
						{
						State = 3105; _localctx.max_dispatch_latency_seconds = Match(DECIMAL);
						State = 3106; Match(SECONDS);
						}
						break;
					case INFINITE:
						{
						State = 3107; Match(INFINITE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 3119;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
				case 1:
					{
					State = 3113;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3112; Match(COMMA);
						}
					}

					State = 3115; Match(MAX_EVENT_SIZE);
					State = 3116; Match(EQUAL);
					State = 3117; _localctx.max_event_size = Match(DECIMAL);
					State = 3118;
					_la = TokenStream.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
				case 1:
					{
					State = 3122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3121; Match(COMMA);
						}
					}

					State = 3124; Match(MEMORY_PARTITION_MODE);
					State = 3125; Match(EQUAL);
					State = 3126;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (NONE - 212)) | (1L << (PER_CPU - 212)) | (1L << (PER_NODE - 212)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3135;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
				case 1:
					{
					State = 3130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3129; Match(COMMA);
						}
					}

					State = 3132; Match(TRACK_CAUSALITY);
					State = 3133; Match(EQUAL);
					State = 3134;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTUP_STATE || _la==COMMA) {
					{
					State = 3138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3137; Match(COMMA);
						}
					}

					State = 3140; Match(STARTUP_STATE);
					State = 3141; Match(EQUAL);
					State = 3142;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3145; Match(RR_BRACKET);
				}
				break;
			}
			State = 3151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				{
				State = 3148; Match(STATE);
				State = 3149; Match(EQUAL);
				State = 3150;
				_la = TokenStream.LA(1);
				if ( !(_la==START || _la==STOP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_expressionContext : ParserRuleContext {
		public Event_session_predicate_factorContext[] event_session_predicate_factor() {
			return GetRuleContexts<Event_session_predicate_factorContext>();
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return GetRuleContext<Event_session_predicate_factorContext>(i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Event_session_predicate_expressionContext[] event_session_predicate_expression() {
			return GetRuleContexts<Event_session_predicate_expressionContext>();
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return GetRuleContext<Event_session_predicate_expressionContext>(i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(TSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(TSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_expressionContext event_session_predicate_expression() {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(Context, State);
		EnterRule(_localctx, 288, RULE_event_session_predicate_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3153; Match(COMMA);
					}
				}

				State = 3157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND || _la==OR) {
					{
					State = 3156;
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 3159; Match(NOT);
					}
				}

				State = 3167;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
				case 1:
					{
					State = 3162; event_session_predicate_factor();
					}
					break;
				case 2:
					{
					State = 3163; Match(LR_BRACKET);
					State = 3164; event_session_predicate_expression();
					State = 3165; Match(RR_BRACKET);
					}
					break;
				}
				}
				}
				State = 3171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AND || _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)) | (1L << (NOT - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (OR - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)) | (1L << (LR_BRACKET - 768)) | (1L << (COMMA - 768)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_factorContext : ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return GetRuleContext<Event_session_predicate_leafContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return GetRuleContext<Event_session_predicate_expressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_factor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_factor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_factorContext event_session_predicate_factor() {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(Context, State);
		EnterRule(_localctx, 290, RULE_event_session_predicate_factor);
		try {
			State = 3178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3173; event_session_predicate_leaf();
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3174; Match(LR_BRACKET);
				State = 3175; event_session_predicate_expression();
				State = 3176; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_session_predicate_leafContext : ParserRuleContext {
		public IdContext event_field_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext predicate_source_name;
		public IdContext predicate_compare_name;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_session_predicate_leaf; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEvent_session_predicate_leaf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEvent_session_predicate_leaf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_session_predicate_leaf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_session_predicate_leafContext event_session_predicate_leaf() {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(Context, State);
		EnterRule(_localctx, 292, RULE_event_session_predicate_leaf);
		int _la;
		try {
			State = 3236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3208;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
				case 1:
					{
					State = 3180; _localctx.event_field_name = id();
					}
					break;
				case 2:
					{
					State = 3191;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
					case 1:
						{
						State = 3181; _localctx.event_field_name = id();
						}
						break;
					case 2:
						{
						{
						State = 3185;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
						case 1:
							{
							State = 3182; _localctx.event_module_guid = id();
							State = 3183; Match(DOT);
							}
							break;
						}
						State = 3187; _localctx.event_package_name = id();
						State = 3188; Match(DOT);
						State = 3189; _localctx.predicate_source_name = id();
						}
						}
						break;
					}
					State = 3204;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
					case 1:
						{
						State = 3193; Match(EQUAL);
						}
						break;
					case 2:
						{
						{
						State = 3194; Match(LESS);
						State = 3195; Match(GREATER);
						}
						}
						break;
					case 3:
						{
						{
						State = 3196; Match(EXCLAMATION);
						State = 3197; Match(EQUAL);
						}
						}
						break;
					case 4:
						{
						State = 3198; Match(GREATER);
						}
						break;
					case 5:
						{
						{
						State = 3199; Match(GREATER);
						State = 3200; Match(EQUAL);
						}
						}
						break;
					case 6:
						{
						State = 3201; Match(LESS);
						}
						break;
					case 7:
						{
						State = 3202; Match(LESS);
						State = 3203; Match(EQUAL);
						}
						break;
					}
					State = 3206;
					_la = TokenStream.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 3210; _localctx.event_module_guid = id();
					State = 3211; Match(DOT);
					}
					break;
				}
				State = 3215; _localctx.event_package_name = id();
				State = 3216; Match(DOT);
				State = 3217; _localctx.predicate_compare_name = id();
				State = 3218; Match(LR_BRACKET);
				State = 3232;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
				case 1:
					{
					State = 3219; _localctx.event_field_name = id();
					}
					break;
				case 2:
					{
					{
					State = 3223;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
					case 1:
						{
						State = 3220; _localctx.event_module_guid = id();
						State = 3221; Match(DOT);
						}
						break;
					}
					State = 3225; _localctx.event_package_name = id();
					State = 3226; Match(DOT);
					State = 3227; _localctx.predicate_source_name = id();
					}
					State = 3229; Match(COMMA);
					State = 3230;
					_la = TokenStream.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3234; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_data_sourceContext : ParserRuleContext {
		public IdContext data_source_name;
		public IToken location;
		public IToken resource_manager_location;
		public IdContext credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode DATA() { return GetToken(TSqlParser.DATA, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] LOCATION() { return GetTokens(TSqlParser.LOCATION); }
		public ITerminalNode LOCATION(int i) {
			return GetToken(TSqlParser.LOCATION, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RESOURCE_MANAGER_LOCATION() { return GetTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] QUOTED_URL() { return GetTokens(TSqlParser.QUOTED_URL); }
		public ITerminalNode QUOTED_URL(int i) {
			return GetToken(TSqlParser.QUOTED_URL, i);
		}
		public ITerminalNode[] QUOTED_HOST_AND_PORT() { return GetTokens(TSqlParser.QUOTED_HOST_AND_PORT); }
		public ITerminalNode QUOTED_HOST_AND_PORT(int i) {
			return GetToken(TSqlParser.QUOTED_HOST_AND_PORT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_data_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_data_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_data_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_data_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_data_sourceContext alter_external_data_source() {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(Context, State);
		EnterRule(_localctx, 294, RULE_alter_external_data_source);
		int _la;
		try {
			int _alt;
			State = 3285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3238; Match(ALTER);
				State = 3239; Match(EXTERNAL);
				State = 3240; Match(DATA);
				State = 3241; Match(SOURCE);
				State = 3242; _localctx.data_source_name = id();
				State = 3243; Match(SET);
				State = 3259;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3259;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case LOCATION:
							{
							State = 3244; Match(LOCATION);
							State = 3245; Match(EQUAL);
							State = 3246;
							_localctx.location = TokenStream.LT(1);
							_la = TokenStream.LA(1);
							if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
								_localctx.location = ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							State = 3248;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3247; Match(COMMA);
								}
							}

							}
							break;
						case RESOURCE_MANAGER_LOCATION:
							{
							State = 3250; Match(RESOURCE_MANAGER_LOCATION);
							State = 3251; Match(EQUAL);
							State = 3252;
							_localctx.resource_manager_location = TokenStream.LT(1);
							_la = TokenStream.LA(1);
							if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
								_localctx.resource_manager_location = ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							State = 3254;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3253; Match(COMMA);
								}
							}

							}
							break;
						case CREDENTIAL:
							{
							State = 3256; Match(CREDENTIAL);
							State = 3257; Match(EQUAL);
							State = 3258; _localctx.credential_name = id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3261;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,290,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3263; Match(ALTER);
				State = 3264; Match(EXTERNAL);
				State = 3265; Match(DATA);
				State = 3266; Match(SOURCE);
				State = 3267; _localctx.data_source_name = id();
				State = 3268; Match(WITH);
				State = 3269; Match(LR_BRACKET);
				State = 3270; Match(TYPE);
				State = 3271; Match(EQUAL);
				State = 3272; Match(BLOB_STORAGE);
				State = 3273; Match(COMMA);
				State = 3274; Match(LOCATION);
				State = 3275; Match(EQUAL);
				State = 3276; _localctx.location = Match(STRING);
				State = 3281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3277; Match(COMMA);
					State = 3278; Match(CREDENTIAL);
					State = 3279; Match(EQUAL);
					State = 3280; _localctx.credential_name = id();
					}
				}

				State = 3283; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_libraryContext : ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public IToken client_library;
		public IdContext external_data_source_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_libraryContext alter_external_library() {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(Context, State);
		EnterRule(_localctx, 296, RULE_alter_external_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3287; Match(ALTER);
			State = 3288; Match(EXTERNAL);
			State = 3289; Match(LIBRARY);
			State = 3290; _localctx.library_name = id();
			State = 3293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3291; Match(AUTHORIZATION);
				State = 3292; _localctx.owner_name = id();
				}
			}

			State = 3295;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			{
			State = 3296; Match(LR_BRACKET);
			State = 3297; Match(CONTENT);
			State = 3298; Match(EQUAL);
			State = 3302;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 3299; _localctx.client_library = Match(STRING);
				}
				break;
			case BINARY:
				{
				State = 3300; Match(BINARY);
				}
				break;
			case NONE:
				{
				State = 3301; Match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			State = 3304; Match(COMMA);
			State = 3305; Match(PLATFORM);
			State = 3306; Match(EQUAL);
			State = 3308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINUX || _la==WINDOWS) {
				{
				State = 3307;
				_la = TokenStream.LA(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3310; Match(RR_BRACKET);
			}
			State = 3312; Match(WITH);
			State = 3322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 3322;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LANGUAGE:
				case COMMA:
					{
					State = 3314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3313; Match(COMMA);
						}
					}

					State = 3316; Match(LANGUAGE);
					State = 3317; Match(EQUAL);
					State = 3318;
					_la = TokenStream.LA(1);
					if ( !(_la==PYTHON || _la==R) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case DATA_SOURCE:
					{
					State = 3319; Match(DATA_SOURCE);
					State = 3320; Match(EQUAL);
					State = 3321; _localctx.external_data_source_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 3324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
			State = 3326; Match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_libraryContext : ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public IToken client_library;
		public IdContext external_data_source_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(TSqlParser.LIBRARY, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode PLATFORM() { return GetToken(TSqlParser.PLATFORM, 0); }
		public ITerminalNode[] LANGUAGE() { return GetTokens(TSqlParser.LANGUAGE); }
		public ITerminalNode LANGUAGE(int i) {
			return GetToken(TSqlParser.LANGUAGE, i);
		}
		public ITerminalNode[] DATA_SOURCE() { return GetTokens(TSqlParser.DATA_SOURCE); }
		public ITerminalNode DATA_SOURCE(int i) {
			return GetToken(TSqlParser.DATA_SOURCE, i);
		}
		public ITerminalNode[] R() { return GetTokens(TSqlParser.R); }
		public ITerminalNode R(int i) {
			return GetToken(TSqlParser.R, i);
		}
		public ITerminalNode[] PYTHON() { return GetTokens(TSqlParser.PYTHON); }
		public ITerminalNode PYTHON(int i) {
			return GetToken(TSqlParser.PYTHON, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode LINUX() { return GetToken(TSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_libraryContext create_external_library() {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(Context, State);
		EnterRule(_localctx, 298, RULE_create_external_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3328; Match(CREATE);
			State = 3329; Match(EXTERNAL);
			State = 3330; Match(LIBRARY);
			State = 3331; _localctx.library_name = id();
			State = 3334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3332; Match(AUTHORIZATION);
				State = 3333; _localctx.owner_name = id();
				}
			}

			State = 3336; Match(FROM);
			{
			State = 3338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3337; Match(COMMA);
				}
			}

			State = 3341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 3340; Match(LR_BRACKET);
				}
			}

			State = 3345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTENT) {
				{
				State = 3343; Match(CONTENT);
				State = 3344; Match(EQUAL);
				}
			}

			State = 3350;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 3347; _localctx.client_library = Match(STRING);
				}
				break;
			case BINARY:
				{
				State = 3348; Match(BINARY);
				}
				break;
			case NONE:
				{
				State = 3349; Match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3352; Match(COMMA);
				State = 3353; Match(PLATFORM);
				State = 3354; Match(EQUAL);
				State = 3356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINUX || _la==WINDOWS) {
					{
					State = 3355;
					_la = TokenStream.LA(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3358; Match(RR_BRACKET);
				}
			}

			}
			State = 3376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
			case 1:
				{
				State = 3361; Match(WITH);
				State = 3371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 3371;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LANGUAGE:
					case COMMA:
						{
						State = 3363;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3362; Match(COMMA);
							}
						}

						State = 3365; Match(LANGUAGE);
						State = 3366; Match(EQUAL);
						State = 3367;
						_la = TokenStream.LA(1);
						if ( !(_la==PYTHON || _la==R) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case DATA_SOURCE:
						{
						State = 3368; Match(DATA_SOURCE);
						State = 3369; Match(EQUAL);
						State = 3370; _localctx.external_data_source_name = id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3373;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
				State = 3375; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_resource_poolContext : ParserRuleContext {
		public IdContext pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_external_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_resource_poolContext alter_external_resource_pool() {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(Context, State);
		EnterRule(_localctx, 300, RULE_alter_external_resource_pool);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3378; Match(ALTER);
			State = 3379; Match(EXTERNAL);
			State = 3380; Match(RESOURCE);
			State = 3381; Match(POOL);
			State = 3384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				{
				State = 3382; _localctx.pool_name = id();
				}
				break;
			case 2:
				{
				State = 3383; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 3386; Match(WITH);
			State = 3387; Match(LR_BRACKET);
			State = 3388; Match(MAX_CPU_PERCENT);
			State = 3389; Match(EQUAL);
			State = 3390; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 3428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				State = 3392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3391; Match(COMMA);
					}
				}

				State = 3394; Match(AFFINITY);
				State = 3395; Match(CPU);
				State = 3396; Match(EQUAL);
				State = 3410;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO:
					{
					State = 3397; Match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					State = 3406;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3406;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
							case 1:
								{
								State = 3399;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 3398; Match(COMMA);
									}
								}

								State = 3401; Match(DECIMAL);
								State = 3402; Match(TO);
								State = 3403; Match(DECIMAL);
								}
								break;
							case 2:
								{
								State = 3404; Match(COMMA);
								State = 3405; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3408;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				State = 3412; Match(NUMANODE);
				State = 3413; Match(EQUAL);
				State = 3424;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3424;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
						case 1:
							{
							State = 3415;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3414; Match(COMMA);
								}
							}

							State = 3417; Match(DECIMAL);
							State = 3418; Match(TO);
							State = 3419; Match(DECIMAL);
							}
							break;
						case 2:
							{
							State = 3421;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3420; Match(COMMA);
								}
							}

							State = 3423; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3426;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,319,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
			case 1:
				{
				State = 3431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3430; Match(COMMA);
					}
				}

				State = 3433; Match(MAX_MEMORY_PERCENT);
				State = 3434; Match(EQUAL);
				State = 3435; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 3444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				State = 3439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3438; Match(COMMA);
					}
				}

				State = 3441; Match(MAX_PROCESSES);
				State = 3442; Match(EQUAL);
				State = 3443; _localctx.max_processes = Match(DECIMAL);
				}
			}

			State = 3446; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_resource_poolContext : ParserRuleContext {
		public IdContext pool_name;
		public IToken max_cpu_percent;
		public IToken max_memory_percent;
		public IToken max_processes;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_resource_poolContext create_external_resource_pool() {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(Context, State);
		EnterRule(_localctx, 302, RULE_create_external_resource_pool);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3448; Match(CREATE);
			State = 3449; Match(EXTERNAL);
			State = 3450; Match(RESOURCE);
			State = 3451; Match(POOL);
			State = 3452; _localctx.pool_name = id();
			State = 3453; Match(WITH);
			State = 3454; Match(LR_BRACKET);
			State = 3455; Match(MAX_CPU_PERCENT);
			State = 3456; Match(EQUAL);
			State = 3457; _localctx.max_cpu_percent = Match(DECIMAL);
			State = 3495;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				State = 3459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3458; Match(COMMA);
					}
				}

				State = 3461; Match(AFFINITY);
				State = 3462; Match(CPU);
				State = 3463; Match(EQUAL);
				State = 3477;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO:
					{
					State = 3464; Match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					State = 3473;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 3473;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,327,Context) ) {
							case 1:
								{
								State = 3466;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 3465; Match(COMMA);
									}
								}

								State = 3468; Match(DECIMAL);
								State = 3469; Match(TO);
								State = 3470; Match(DECIMAL);
								}
								break;
							case 2:
								{
								State = 3471; Match(COMMA);
								State = 3472; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3475;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,328,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				State = 3479; Match(NUMANODE);
				State = 3480; Match(EQUAL);
				State = 3491;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 3491;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
						case 1:
							{
							State = 3482;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3481; Match(COMMA);
								}
							}

							State = 3484; Match(DECIMAL);
							State = 3485; Match(TO);
							State = 3486; Match(DECIMAL);
							}
							break;
						case 2:
							{
							State = 3488;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 3487; Match(COMMA);
								}
							}

							State = 3490; Match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3493;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,336,Context) ) {
			case 1:
				{
				State = 3498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3497; Match(COMMA);
					}
				}

				State = 3500; Match(MAX_MEMORY_PERCENT);
				State = 3501; Match(EQUAL);
				State = 3502; _localctx.max_memory_percent = Match(DECIMAL);
				}
				break;
			}
			State = 3511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				State = 3506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3505; Match(COMMA);
					}
				}

				State = 3508; Match(MAX_PROCESSES);
				State = 3509; Match(EQUAL);
				State = 3510; _localctx.max_processes = Match(DECIMAL);
				}
			}

			State = 3513; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_catalogContext : ParserRuleContext {
		public IdContext catalog_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_catalog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_catalogContext alter_fulltext_catalog() {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(Context, State);
		EnterRule(_localctx, 304, RULE_alter_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3515; Match(ALTER);
			State = 3516; Match(FULLTEXT);
			State = 3517; Match(CATALOG);
			State = 3518; _localctx.catalog_name = id();
			State = 3529;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REBUILD:
				{
				State = 3519; Match(REBUILD);
				State = 3524;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
				case 1:
					{
					State = 3520; Match(WITH);
					State = 3521; Match(ACCENT_SENSITIVITY);
					State = 3522; Match(EQUAL);
					State = 3523;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				{
				State = 3526; Match(REORGANIZE);
				}
				break;
			case AS:
				{
				State = 3527; Match(AS);
				State = 3528; Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_catalogContext : ParserRuleContext {
		public IdContext catalog_name;
		public IdContext filegroup;
		public IToken rootpath;
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_catalog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_catalog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_catalog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_fulltext_catalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_catalogContext create_fulltext_catalog() {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(Context, State);
		EnterRule(_localctx, 306, RULE_create_fulltext_catalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3531; Match(CREATE);
			State = 3532; Match(FULLTEXT);
			State = 3533; Match(CATALOG);
			State = 3534; _localctx.catalog_name = id();
			State = 3538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 3535; Match(ON);
				State = 3536; Match(FILEGROUP);
				State = 3537; _localctx.filegroup = id();
				}
			}

			State = 3543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 3540; Match(IN);
				State = 3541; Match(PATH);
				State = 3542; _localctx.rootpath = Match(STRING);
				}
			}

			State = 3549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
			case 1:
				{
				State = 3545; Match(WITH);
				State = 3546; Match(ACCENT_SENSITIVITY);
				State = 3547; Match(EQUAL);
				State = 3548;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 3553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3551; Match(AS);
				State = 3552; Match(DEFAULT);
				}
			}

			State = 3557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3555; Match(AUTHORIZATION);
				State = 3556; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_fulltext_stoplistContext : ParserRuleContext {
		public IdContext stoplist_name;
		public IToken stopword;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(TSqlParser.LANGUAGE, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_fulltext_stoplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(Context, State);
		EnterRule(_localctx, 308, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3559; Match(ALTER);
			State = 3560; Match(FULLTEXT);
			State = 3561; Match(STOPLIST);
			State = 3562; _localctx.stoplist_name = id();
			State = 3576;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				{
				State = 3563; Match(ADD);
				State = 3564; _localctx.stopword = Match(STRING);
				State = 3565; Match(LANGUAGE);
				State = 3566;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 794)) & ~0x3f) == 0 && ((1L << (_la - 794)) & ((1L << (DECIMAL - 794)) | (1L << (STRING - 794)) | (1L << (BINARY - 794)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DROP:
				{
				State = 3567; Match(DROP);
				State = 3574;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
				case 1:
					{
					State = 3568; _localctx.stopword = Match(STRING);
					State = 3569; Match(LANGUAGE);
					State = 3570;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 794)) & ~0x3f) == 0 && ((1L << (_la - 794)) & ((1L << (DECIMAL - 794)) | (1L << (STRING - 794)) | (1L << (BINARY - 794)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case 2:
					{
					State = 3571; Match(ALL);
					State = 3572;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 794)) & ~0x3f) == 0 && ((1L << (_la - 794)) & ((1L << (DECIMAL - 794)) | (1L << (STRING - 794)) | (1L << (BINARY - 794)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case 3:
					{
					State = 3573; Match(ALL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_fulltext_stoplistContext : ParserRuleContext {
		public IdContext stoplist_name;
		public IdContext database_name;
		public IdContext source_stoplist_name;
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode[] STOPLIST() { return GetTokens(TSqlParser.STOPLIST); }
		public ITerminalNode STOPLIST(int i) {
			return GetToken(TSqlParser.STOPLIST, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SYSTEM() { return GetToken(TSqlParser.SYSTEM, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_fulltext_stoplist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_fulltext_stoplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_fulltext_stoplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_fulltext_stoplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_fulltext_stoplistContext create_fulltext_stoplist() {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(Context, State);
		EnterRule(_localctx, 310, RULE_create_fulltext_stoplist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3578; Match(CREATE);
			State = 3579; Match(FULLTEXT);
			State = 3580; Match(STOPLIST);
			State = 3581; _localctx.stoplist_name = id();
			State = 3593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 3582; Match(FROM);
				State = 3591;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 3586;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
					case 1:
						{
						State = 3583; _localctx.database_name = id();
						State = 3584; Match(DOT);
						}
						break;
					}
					State = 3588; _localctx.source_stoplist_name = id();
					}
					break;
				case SYSTEM:
					{
					State = 3589; Match(SYSTEM);
					State = 3590; Match(STOPLIST);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 3597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3595; Match(AUTHORIZATION);
				State = 3596; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_sql_serverContext : ParserRuleContext {
		public IdContext login_name;
		public IToken password;
		public IToken password_hash;
		public IToken old_password;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_sql_serverContext alter_login_sql_server() {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(Context, State);
		EnterRule(_localctx, 312, RULE_alter_login_sql_server);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3599; Match(ALTER);
			State = 3600; Match(LOGIN);
			State = 3601; _localctx.login_name = id();
			State = 3669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
			case 1:
				{
				State = 3603;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
				case 1:
					{
					State = 3602;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3605; Match(WITH);
				State = 3619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSWORD) {
					{
					{
					State = 3606; Match(PASSWORD);
					State = 3607; Match(EQUAL);
					State = 3611;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
						{
						State = 3608; _localctx.password = Match(STRING);
						}
						break;
					case BINARY:
						{
						State = 3609; _localctx.password_hash = Match(BINARY);
						State = 3610; Match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3616;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						State = 3613;
						_la = TokenStream.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 3618;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 3630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OLD_PASSWORD) {
					{
					State = 3621; Match(OLD_PASSWORD);
					State = 3622; Match(EQUAL);
					State = 3623; _localctx.old_password = Match(STRING);
					State = 3627;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						State = 3624;
						_la = TokenStream.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 3629;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 3635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_DATABASE) {
					{
					State = 3632; Match(DEFAULT_DATABASE);
					State = 3633; Match(EQUAL);
					State = 3634; _localctx.default_database = id();
					}
				}

				State = 3640;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,359,Context) ) {
				case 1:
					{
					State = 3637; Match(DEFAULT_LANGUAGE);
					State = 3638; Match(EQUAL);
					State = 3639; _localctx.default_laguage = id();
					}
					break;
				}
				State = 3645;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,360,Context) ) {
				case 1:
					{
					State = 3642; Match(NAME);
					State = 3643; Match(EQUAL);
					State = 3644; _localctx.login_name = id();
					}
					break;
				}
				State = 3650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHECK_POLICY) {
					{
					State = 3647; Match(CHECK_POLICY);
					State = 3648; Match(EQUAL);
					State = 3649;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHECK_EXPIRATION) {
					{
					State = 3652; Match(CHECK_EXPIRATION);
					State = 3653; Match(EQUAL);
					State = 3654;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3660;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
				case 1:
					{
					State = 3657; Match(CREDENTIAL);
					State = 3658; Match(EQUAL);
					State = 3659; _localctx.credential_name = id();
					}
					break;
				}
				State = 3664;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
				case 1:
					{
					State = 3662; Match(NO);
					State = 3663; Match(CREDENTIAL);
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 3666;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3667; Match(CREDENTIAL);
				State = 3668; _localctx.credential_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_sql_serverContext : ParserRuleContext {
		public IdContext login_name;
		public IToken password;
		public IToken password_hash;
		public IToken sid;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public IToken default_language;
		public IdContext certname;
		public IdContext asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DEFAULT_DATABASE() { return GetToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode CHECK_EXPIRATION() { return GetToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode HASHED() { return GetToken(TSqlParser.HASHED, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_sql_serverContext create_login_sql_server() {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(Context, State);
		EnterRule(_localctx, 314, RULE_create_login_sql_server);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3671; Match(CREATE);
			State = 3672; Match(LOGIN);
			State = 3673; _localctx.login_name = id();
			State = 3764;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 3674; Match(WITH);
				State = 3688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSWORD) {
					{
					{
					State = 3675; Match(PASSWORD);
					State = 3676; Match(EQUAL);
					State = 3680;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
						{
						State = 3677; _localctx.password = Match(STRING);
						}
						break;
					case BINARY:
						{
						State = 3678; _localctx.password_hash = Match(BINARY);
						State = 3679; Match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3685;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						State = 3682;
						_la = TokenStream.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 3687;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 3696;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
				case 1:
					{
					State = 3691;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3690; Match(COMMA);
						}
					}

					State = 3693; Match(SID);
					State = 3694; Match(EQUAL);
					State = 3695; _localctx.sid = Match(BINARY);
					}
					break;
				}
				State = 3704;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
				case 1:
					{
					State = 3699;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3698; Match(COMMA);
						}
					}

					State = 3701; Match(DEFAULT_DATABASE);
					State = 3702; Match(EQUAL);
					State = 3703; _localctx.default_database = id();
					}
					break;
				}
				State = 3712;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,374,Context) ) {
				case 1:
					{
					State = 3707;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3706; Match(COMMA);
						}
					}

					State = 3709; Match(DEFAULT_LANGUAGE);
					State = 3710; Match(EQUAL);
					State = 3711; _localctx.default_laguage = id();
					}
					break;
				}
				State = 3720;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
				case 1:
					{
					State = 3715;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3714; Match(COMMA);
						}
					}

					State = 3717; Match(CHECK_EXPIRATION);
					State = 3718; Match(EQUAL);
					State = 3719;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3728;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,378,Context) ) {
				case 1:
					{
					State = 3723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3722; Match(COMMA);
						}
					}

					State = 3725; Match(CHECK_POLICY);
					State = 3726; Match(EQUAL);
					State = 3727;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 3736;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,380,Context) ) {
				case 1:
					{
					State = 3731;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3730; Match(COMMA);
						}
					}

					State = 3733; Match(CREDENTIAL);
					State = 3734; Match(EQUAL);
					State = 3735; _localctx.credential_name = id();
					}
					break;
				}
				}
				break;
			case FROM:
				{
				{
				State = 3738; Match(FROM);
				State = 3762;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WINDOWS:
					{
					State = 3739; Match(WINDOWS);
					{
					State = 3740; Match(WITH);
					State = 3747;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
					case 1:
						{
						State = 3742;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3741; Match(COMMA);
							}
						}

						State = 3744; Match(DEFAULT_DATABASE);
						State = 3745; Match(EQUAL);
						State = 3746; _localctx.default_database = id();
						}
						break;
					}
					State = 3755;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
					case 1:
						{
						State = 3750;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3749; Match(COMMA);
							}
						}

						State = 3752; Match(DEFAULT_LANGUAGE);
						State = 3753; Match(EQUAL);
						State = 3754; _localctx.default_language = Match(STRING);
						}
						break;
					}
					}
					}
					break;
				case CERTIFICATE:
					{
					State = 3757; Match(CERTIFICATE);
					State = 3758; _localctx.certname = id();
					}
					break;
				case ASYMMETRIC:
					{
					State = 3759; Match(ASYMMETRIC);
					State = 3760; Match(KEY);
					State = 3761; _localctx.asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sqlContext : ParserRuleContext {
		public IdContext login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sqlContext alter_login_azure_sql() {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(Context, State);
		EnterRule(_localctx, 316, RULE_alter_login_azure_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3766; Match(ALTER);
			State = 3767; Match(LOGIN);
			State = 3768; _localctx.login_name = id();
			State = 3786;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,390,Context) ) {
			case 1:
				{
				State = 3770;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,387,Context) ) {
				case 1:
					{
					State = 3769;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3772; Match(WITH);
				State = 3784;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PASSWORD:
					{
					State = 3773; Match(PASSWORD);
					State = 3774; Match(EQUAL);
					State = 3775; _localctx.password = Match(STRING);
					State = 3779;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OLD_PASSWORD) {
						{
						State = 3776; Match(OLD_PASSWORD);
						State = 3777; Match(EQUAL);
						State = 3778; _localctx.old_password = Match(STRING);
						}
					}

					}
					break;
				case NAME:
					{
					State = 3781; Match(NAME);
					State = 3782; Match(EQUAL);
					State = 3783; _localctx.login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_azure_sqlContext : ParserRuleContext {
		public IdContext login_name;
		public IToken sid;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_azure_sqlContext create_login_azure_sql() {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(Context, State);
		EnterRule(_localctx, 318, RULE_create_login_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3788; Match(CREATE);
			State = 3789; Match(LOGIN);
			State = 3790; _localctx.login_name = id();
			State = 3791; Match(WITH);
			State = 3792; Match(PASSWORD);
			State = 3793; Match(EQUAL);
			State = 3794; Match(STRING);
			State = 3798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,391,Context) ) {
			case 1:
				{
				State = 3795; Match(SID);
				State = 3796; Match(EQUAL);
				State = 3797; _localctx.sid = Match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_login_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public IdContext login_name;
		public IToken password;
		public IToken old_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode[] MUST_CHANGE() { return GetTokens(TSqlParser.MUST_CHANGE); }
		public ITerminalNode MUST_CHANGE(int i) {
			return GetToken(TSqlParser.MUST_CHANGE, i);
		}
		public ITerminalNode[] UNLOCK() { return GetTokens(TSqlParser.UNLOCK); }
		public ITerminalNode UNLOCK(int i) {
			return GetToken(TSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_login_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_login_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_login_azure_sql_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_login_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(Context, State);
		EnterRule(_localctx, 320, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3800; Match(ALTER);
			State = 3801; Match(LOGIN);
			State = 3802; _localctx.login_name = id();
			State = 3826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,396,Context) ) {
			case 1:
				{
				State = 3804;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,392,Context) ) {
				case 1:
					{
					State = 3803;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3806; Match(WITH);
				State = 3824;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PASSWORD:
					{
					State = 3807; Match(PASSWORD);
					State = 3808; Match(EQUAL);
					State = 3809; _localctx.password = Match(STRING);
					State = 3819;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OLD_PASSWORD) {
						{
						State = 3810; Match(OLD_PASSWORD);
						State = 3811; Match(EQUAL);
						State = 3812; _localctx.old_password = Match(STRING);
						State = 3816;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MUST_CHANGE || _la==UNLOCK) {
							{
							{
							State = 3813;
							_la = TokenStream.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							}
							State = 3818;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					}
					break;
				case NAME:
					{
					State = 3821; Match(NAME);
					State = 3822; Match(EQUAL);
					State = 3823; _localctx.login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_login_pdwContext : ParserRuleContext {
		public IdContext loginName;
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode MUST_CHANGE() { return GetToken(TSqlParser.MUST_CHANGE, 0); }
		public ITerminalNode CHECK_POLICY() { return GetToken(TSqlParser.CHECK_POLICY, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_login_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_login_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_login_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_login_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_login_pdwContext create_login_pdw() {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(Context, State);
		EnterRule(_localctx, 322, RULE_create_login_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3828; Match(CREATE);
			State = 3829; Match(LOGIN);
			State = 3830; _localctx.loginName = id();
			State = 3847;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 3831; Match(WITH);
				{
				State = 3832; Match(PASSWORD);
				State = 3833; Match(EQUAL);
				State = 3834; _localctx.password = Match(STRING);
				State = 3836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MUST_CHANGE) {
					{
					State = 3835; Match(MUST_CHANGE);
					}
				}

				State = 3843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHECK_POLICY) {
					{
					State = 3838; Match(CHECK_POLICY);
					State = 3839; Match(EQUAL);
					State = 3841;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OFF || _la==ON) {
						{
						State = 3840;
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
				}

				}
				}
				break;
			case FROM:
				{
				State = 3845; Match(FROM);
				State = 3846; Match(WINDOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_master_key_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(Context, State);
		EnterRule(_localctx, 324, RULE_alter_master_key_sql_server);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3849; Match(ALTER);
			State = 3850; Match(MASTER);
			State = 3851; Match(KEY);
			State = 3873;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				State = 3853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORCE) {
					{
					State = 3852; Match(FORCE);
					}
				}

				State = 3855; Match(REGENERATE);
				State = 3856; Match(WITH);
				State = 3857; Match(ENCRYPTION);
				State = 3858; Match(BY);
				State = 3859; Match(PASSWORD);
				State = 3860; Match(EQUAL);
				State = 3861; _localctx.password = Match(STRING);
				}
				break;
			case ADD:
			case DROP:
				{
				State = 3862;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3863; Match(ENCRYPTION);
				State = 3864; Match(BY);
				State = 3871;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SERVICE:
					{
					State = 3865; Match(SERVICE);
					State = 3866; Match(MASTER);
					State = 3867; Match(KEY);
					}
					break;
				case PASSWORD:
					{
					State = 3868; Match(PASSWORD);
					State = 3869; Match(EQUAL);
					State = 3870; _localctx.encryption_password = Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_sql_serverContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_sql_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_sql_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_sql_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_master_key_sql_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_sql_serverContext create_master_key_sql_server() {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(Context, State);
		EnterRule(_localctx, 326, RULE_create_master_key_sql_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3875; Match(CREATE);
			State = 3876; Match(MASTER);
			State = 3877; Match(KEY);
			State = 3878; Match(ENCRYPTION);
			State = 3879; Match(BY);
			State = 3880; Match(PASSWORD);
			State = 3881; Match(EQUAL);
			State = 3882; _localctx.password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public IToken encryption_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] MASTER() { return GetTokens(TSqlParser.MASTER); }
		public ITerminalNode MASTER(int i) {
			return GetToken(TSqlParser.MASTER, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_master_key_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_master_key_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(Context, State);
		EnterRule(_localctx, 328, RULE_alter_master_key_azure_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3884; Match(ALTER);
			State = 3885; Match(MASTER);
			State = 3886; Match(KEY);
			State = 3914;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				State = 3888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORCE) {
					{
					State = 3887; Match(FORCE);
					}
				}

				State = 3890; Match(REGENERATE);
				State = 3891; Match(WITH);
				State = 3892; Match(ENCRYPTION);
				State = 3893; Match(BY);
				State = 3894; Match(PASSWORD);
				State = 3895; Match(EQUAL);
				State = 3896; _localctx.password = Match(STRING);
				}
				break;
			case ADD:
				{
				State = 3897; Match(ADD);
				State = 3898; Match(ENCRYPTION);
				State = 3899; Match(BY);
				State = 3906;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SERVICE:
					{
					State = 3900; Match(SERVICE);
					State = 3901; Match(MASTER);
					State = 3902; Match(KEY);
					}
					break;
				case PASSWORD:
					{
					State = 3903; Match(PASSWORD);
					State = 3904; Match(EQUAL);
					State = 3905; _localctx.encryption_password = Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP:
				{
				State = 3908; Match(DROP);
				State = 3909; Match(ENCRYPTION);
				State = 3910; Match(BY);
				State = 3911; Match(PASSWORD);
				State = 3912; Match(EQUAL);
				State = 3913; _localctx.encryption_password = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_master_key_azure_sqlContext : ParserRuleContext {
		public IToken password;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_master_key_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_master_key_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_master_key_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_master_key_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(Context, State);
		EnterRule(_localctx, 330, RULE_create_master_key_azure_sql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3916; Match(CREATE);
			State = 3917; Match(MASTER);
			State = 3918; Match(KEY);
			State = 3924;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,407,Context) ) {
			case 1:
				{
				State = 3919; Match(ENCRYPTION);
				State = 3920; Match(BY);
				State = 3921; Match(PASSWORD);
				State = 3922; Match(EQUAL);
				State = 3923; _localctx.password = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_message_typeContext : ParserRuleContext {
		public IdContext message_type_name;
		public IdContext schema_collection_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_message_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_message_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_message_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_message_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_message_typeContext alter_message_type() {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(Context, State);
		EnterRule(_localctx, 332, RULE_alter_message_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3926; Match(ALTER);
			State = 3927; Match(MESSAGE);
			State = 3928; Match(TYPE);
			State = 3929; _localctx.message_type_name = id();
			State = 3930; Match(VALIDATION);
			State = 3931; Match(EQUAL);
			State = 3940;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NONE:
				{
				State = 3932; Match(NONE);
				}
				break;
			case EMPTY:
				{
				State = 3933; Match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				State = 3934; Match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				State = 3935; Match(VALID_XML);
				State = 3936; Match(WITH);
				State = 3937; Match(SCHEMA);
				State = 3938; Match(COLLECTION);
				State = 3939; _localctx.schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_functionContext : ParserRuleContext {
		public IdContext partition_function_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SPLIT() { return GetToken(TSqlParser.SPLIT, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_partition_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_functionContext alter_partition_function() {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(Context, State);
		EnterRule(_localctx, 334, RULE_alter_partition_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3942; Match(ALTER);
			State = 3943; Match(PARTITION);
			State = 3944; Match(FUNCTION);
			State = 3945; _localctx.partition_function_name = id();
			State = 3946; Match(LR_BRACKET);
			State = 3947; Match(RR_BRACKET);
			State = 3948;
			_la = TokenStream.LA(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3949; Match(RANGE);
			State = 3950; Match(LR_BRACKET);
			State = 3951; Match(DECIMAL);
			State = 3952; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_partition_schemeContext : ParserRuleContext {
		public IdContext partition_scheme_name;
		public IdContext file_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSqlParser.SCHEME, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode USED() { return GetToken(TSqlParser.USED, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_partition_scheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_partition_scheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_partition_scheme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_partition_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_partition_schemeContext alter_partition_scheme() {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(Context, State);
		EnterRule(_localctx, 336, RULE_alter_partition_scheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3954; Match(ALTER);
			State = 3955; Match(PARTITION);
			State = 3956; Match(SCHEME);
			State = 3957; _localctx.partition_scheme_name = id();
			State = 3958; Match(NEXT);
			State = 3959; Match(USED);
			State = 3961;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,409,Context) ) {
			case 1:
				{
				State = 3960; _localctx.file_group_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_remote_service_bindingContext : ParserRuleContext {
		public IdContext binding_name;
		public IdContext user_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_remote_service_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_remote_service_bindingContext alter_remote_service_binding() {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(Context, State);
		EnterRule(_localctx, 338, RULE_alter_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3963; Match(ALTER);
			State = 3964; Match(REMOTE);
			State = 3965; Match(SERVICE);
			State = 3966; Match(BINDING);
			State = 3967; _localctx.binding_name = id();
			State = 3968; Match(WITH);
			State = 3972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USER) {
				{
				State = 3969; Match(USER);
				State = 3970; Match(EQUAL);
				State = 3971; _localctx.user_name = id();
				}
			}

			State = 3978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3974; Match(COMMA);
				State = 3975; Match(ANONYMOUS);
				State = 3976; Match(EQUAL);
				State = 3977;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_remote_service_bindingContext : ParserRuleContext {
		public IdContext binding_name;
		public IdContext owner_name;
		public IToken remote_service_name;
		public IdContext user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode ANONYMOUS() { return GetToken(TSqlParser.ANONYMOUS, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_remote_service_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_remote_service_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_remote_service_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_remote_service_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_remote_service_bindingContext create_remote_service_binding() {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(Context, State);
		EnterRule(_localctx, 340, RULE_create_remote_service_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3980; Match(CREATE);
			State = 3981; Match(REMOTE);
			State = 3982; Match(SERVICE);
			State = 3983; Match(BINDING);
			State = 3984; _localctx.binding_name = id();
			State = 3987;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 3985; Match(AUTHORIZATION);
				State = 3986; _localctx.owner_name = id();
				}
			}

			State = 3989; Match(TO);
			State = 3990; Match(SERVICE);
			State = 3991; _localctx.remote_service_name = Match(STRING);
			State = 3992; Match(WITH);
			State = 3996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USER) {
				{
				State = 3993; Match(USER);
				State = 3994; Match(EQUAL);
				State = 3995; _localctx.user_name = id();
				}
			}

			State = 4002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3998; Match(COMMA);
				State = 3999; Match(ANONYMOUS);
				State = 4000; Match(EQUAL);
				State = 4001;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_resource_poolContext : ParserRuleContext {
		public IdContext pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(TSqlParser.SCHEDULER, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_resource_pool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_resource_pool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_resource_pool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_resource_pool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_resource_poolContext create_resource_pool() {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(Context, State);
		EnterRule(_localctx, 342, RULE_create_resource_pool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4004; Match(CREATE);
			State = 4005; Match(RESOURCE);
			State = 4006; Match(POOL);
			State = 4007; _localctx.pool_name = id();
			State = 4110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
			case 1:
				{
				State = 4008; Match(WITH);
				State = 4009; Match(LR_BRACKET);
				State = 4016;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,416,Context) ) {
				case 1:
					{
					State = 4011;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4010; Match(COMMA);
						}
					}

					State = 4013; Match(MIN_CPU_PERCENT);
					State = 4014; Match(EQUAL);
					State = 4015; Match(DECIMAL);
					}
					break;
				}
				State = 4024;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,418,Context) ) {
				case 1:
					{
					State = 4019;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4018; Match(COMMA);
						}
					}

					State = 4021; Match(MAX_CPU_PERCENT);
					State = 4022; Match(EQUAL);
					State = 4023; Match(DECIMAL);
					}
					break;
				}
				State = 4032;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,420,Context) ) {
				case 1:
					{
					State = 4027;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4026; Match(COMMA);
						}
					}

					State = 4029; Match(CAP_CPU_PERCENT);
					State = 4030; Match(EQUAL);
					State = 4031; Match(DECIMAL);
					}
					break;
				}
				State = 4075;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,429,Context) ) {
				case 1:
					{
					State = 4035;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4034; Match(COMMA);
						}
					}

					State = 4037; Match(AFFINITY);
					State = 4038; Match(SCHEDULER);
					State = 4039; Match(EQUAL);
					State = 4073;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AUTO:
						{
						State = 4040; Match(AUTO);
						}
						break;
					case LR_BRACKET:
						{
						State = 4041; Match(LR_BRACKET);
						State = 4051;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 4043;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4042; Match(COMMA);
								}
							}

							State = 4049;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
							case 1:
								{
								State = 4045; Match(DECIMAL);
								}
								break;
							case 2:
								{
								State = 4046; Match(DECIMAL);
								State = 4047; Match(TO);
								State = 4048; Match(DECIMAL);
								}
								break;
							}
							}
							}
							State = 4053;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						State = 4055; Match(RR_BRACKET);
						}
						break;
					case NUMANODE:
						{
						State = 4056; Match(NUMANODE);
						State = 4057; Match(EQUAL);
						State = 4058; Match(LR_BRACKET);
						State = 4068;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 4060;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4059; Match(COMMA);
								}
							}

							State = 4066;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,426,Context) ) {
							case 1:
								{
								State = 4062; Match(DECIMAL);
								}
								break;
							case 2:
								{
								State = 4063; Match(DECIMAL);
								State = 4064; Match(TO);
								State = 4065; Match(DECIMAL);
								}
								break;
							}
							}
							}
							State = 4070;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						State = 4072; Match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 4083;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,431,Context) ) {
				case 1:
					{
					State = 4078;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4077; Match(COMMA);
						}
					}

					State = 4080; Match(MIN_MEMORY_PERCENT);
					State = 4081; Match(EQUAL);
					State = 4082; Match(DECIMAL);
					}
					break;
				}
				State = 4091;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,433,Context) ) {
				case 1:
					{
					State = 4086;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4085; Match(COMMA);
						}
					}

					State = 4088; Match(MAX_MEMORY_PERCENT);
					State = 4089; Match(EQUAL);
					State = 4090; Match(DECIMAL);
					}
					break;
				}
				State = 4099;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,435,Context) ) {
				case 1:
					{
					State = 4094;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4093; Match(COMMA);
						}
					}

					State = 4096; Match(MIN_IOPS_PER_VOLUME);
					State = 4097; Match(EQUAL);
					State = 4098; Match(DECIMAL);
					}
					break;
				}
				State = 4107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MAX_IOPS_PER_VOLUME || _la==COMMA) {
					{
					State = 4102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4101; Match(COMMA);
						}
					}

					State = 4104; Match(MAX_IOPS_PER_VOLUME);
					State = 4105; Match(EQUAL);
					State = 4106; Match(DECIMAL);
					}
				}

				State = 4109; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_governorContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext function_name;
		public IToken max_outstanding_io_per_volume;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode GOVERNOR() { return GetToken(TSqlParser.GOVERNOR, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CLASSIFIER_FUNCTION() { return GetToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode RESET() { return GetToken(TSqlParser.RESET, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return GetToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode RECONFIGURE() { return GetToken(TSqlParser.RECONFIGURE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_governor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_resource_governor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_resource_governor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_resource_governor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_governorContext alter_resource_governor() {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(Context, State);
		EnterRule(_localctx, 344, RULE_alter_resource_governor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4112; Match(ALTER);
			State = 4113; Match(RESOURCE);
			State = 4114; Match(GOVERNOR);
			State = 4136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,440,Context) ) {
			case 1:
				{
				State = 4115;
				_la = TokenStream.LA(1);
				if ( !(_la==RECONFIGURE || _la==DISABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				State = 4116; Match(WITH);
				State = 4117; Match(LR_BRACKET);
				State = 4118; Match(CLASSIFIER_FUNCTION);
				State = 4119; Match(EQUAL);
				State = 4125;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 4120; _localctx.schema_name = id();
					State = 4121; Match(DOT);
					State = 4122; _localctx.function_name = id();
					}
					break;
				case NULL:
					{
					State = 4124; Match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4127; Match(RR_BRACKET);
				}
				break;
			case 3:
				{
				State = 4128; Match(RESET);
				State = 4129; Match(STATISTICS);
				}
				break;
			case 4:
				{
				State = 4130; Match(WITH);
				State = 4131; Match(LR_BRACKET);
				State = 4132; Match(MAX_OUTSTANDING_IO_PER_VOLUME);
				State = 4133; Match(EQUAL);
				State = 4134; _localctx.max_outstanding_io_per_volume = Match(DECIMAL);
				State = 4135; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_db_roleContext : ParserRuleContext {
		public IdContext role_name;
		public IdContext database_principal;
		public IdContext new_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_db_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_db_roleContext alter_db_role() {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(Context, State);
		EnterRule(_localctx, 346, RULE_alter_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4138; Match(ALTER);
			State = 4139; Match(ROLE);
			State = 4140; _localctx.role_name = id();
			State = 4148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case DROP:
				{
				State = 4141;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4142; Match(MEMBER);
				State = 4143; _localctx.database_principal = id();
				}
				break;
			case WITH:
				{
				State = 4144; Match(WITH);
				State = 4145; Match(NAME);
				State = 4146; Match(EQUAL);
				State = 4147; _localctx.new_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_db_roleContext : ParserRuleContext {
		public IdContext role_name;
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_db_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_db_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_db_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_db_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_db_roleContext create_db_role() {
		Create_db_roleContext _localctx = new Create_db_roleContext(Context, State);
		EnterRule(_localctx, 348, RULE_create_db_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4150; Match(CREATE);
			State = 4151; Match(ROLE);
			State = 4152; _localctx.role_name = id();
			State = 4155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4153; Match(AUTHORIZATION);
				State = 4154; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_routeContext : ParserRuleContext {
		public IdContext route_name;
		public IdContext owner_name;
		public IToken route_service_name;
		public IToken broker_instance_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] QUOTED_URL() { return GetTokens(TSqlParser.QUOTED_URL); }
		public ITerminalNode QUOTED_URL(int i) {
			return GetToken(TSqlParser.QUOTED_URL, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode SERVICE_NAME() { return GetToken(TSqlParser.SERVICE_NAME, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_route(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_route(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_route(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_routeContext create_route() {
		Create_routeContext _localctx = new Create_routeContext(Context, State);
		EnterRule(_localctx, 350, RULE_create_route);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4157; Match(CREATE);
			State = 4158; Match(ROUTE);
			State = 4159; _localctx.route_name = id();
			State = 4162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4160; Match(AUTHORIZATION);
				State = 4161; _localctx.owner_name = id();
				}
			}

			State = 4164; Match(WITH);
			State = 4171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,445,Context) ) {
			case 1:
				{
				State = 4166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4165; Match(COMMA);
					}
				}

				State = 4168; Match(SERVICE_NAME);
				State = 4169; Match(EQUAL);
				State = 4170; _localctx.route_service_name = Match(STRING);
				}
				break;
			}
			State = 4179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,447,Context) ) {
			case 1:
				{
				State = 4174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4173; Match(COMMA);
					}
				}

				State = 4176; Match(BROKER_INSTANCE);
				State = 4177; Match(EQUAL);
				State = 4178; _localctx.broker_instance_identifier = Match(STRING);
				}
				break;
			}
			State = 4187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
			case 1:
				{
				State = 4182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4181; Match(COMMA);
					}
				}

				State = 4184; Match(LIFETIME);
				State = 4185; Match(EQUAL);
				State = 4186; Match(DECIMAL);
				}
				break;
			}
			State = 4190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4189; Match(COMMA);
				}
			}

			State = 4192; Match(ADDRESS);
			State = 4193; Match(EQUAL);
			State = 4194;
			_la = TokenStream.LA(1);
			if ( !(_la==QUOTED_URL || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4195; Match(COMMA);
				State = 4196; Match(MIRROR_ADDRESS);
				State = 4197; Match(EQUAL);
				State = 4198;
				_la = TokenStream.LA(1);
				if ( !(_la==QUOTED_URL || _la==STRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_ruleContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext rule_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode RULE() { return GetToken(TSqlParser.RULE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_ruleContext create_rule() {
		Create_ruleContext _localctx = new Create_ruleContext(Context, State);
		EnterRule(_localctx, 352, RULE_create_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4201; Match(CREATE);
			State = 4202; Match(RULE);
			State = 4206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
			case 1:
				{
				State = 4203; _localctx.schema_name = id();
				State = 4204; Match(DOT);
				}
				break;
			}
			State = 4208; _localctx.rule_name = id();
			State = 4209; Match(AS);
			State = 4210; search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_sqlContext : ParserRuleContext {
		public IdContext schema_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(TSqlParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TSqlParser.COLON, i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_sqlContext alter_schema_sql() {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(Context, State);
		EnterRule(_localctx, 354, RULE_alter_schema_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4212; Match(ALTER);
			State = 4213; Match(SCHEMA);
			State = 4214; _localctx.schema_name = id();
			State = 4215; Match(TRANSFER);
			State = 4225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,454,Context) ) {
			case 1:
				{
				State = 4221;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OBJECT:
					{
					State = 4216; Match(OBJECT);
					}
					break;
				case TYPE:
					{
					State = 4217; Match(TYPE);
					}
					break;
				case XML:
					{
					State = 4218; Match(XML);
					State = 4219; Match(SCHEMA);
					State = 4220; Match(COLLECTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4223; Match(COLON);
				State = 4224; Match(COLON);
				}
				break;
			}
			State = 4227; id();
			State = 4230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 4228; Match(DOT);
				State = 4229; id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schemaContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext owner_name;
		public IdContext object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SCHEMA() { return GetTokens(TSqlParser.SCHEMA); }
		public ITerminalNode SCHEMA(int i) {
			return GetToken(TSqlParser.SCHEMA, i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Create_tableContext[] create_table() {
			return GetRuleContexts<Create_tableContext>();
		}
		public Create_tableContext create_table(int i) {
			return GetRuleContext<Create_tableContext>(i);
		}
		public Create_viewContext[] create_view() {
			return GetRuleContexts<Create_viewContext>();
		}
		public Create_viewContext create_view(int i) {
			return GetRuleContext<Create_viewContext>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public ITerminalNode[] REVOKE() { return GetTokens(TSqlParser.REVOKE); }
		public ITerminalNode REVOKE(int i) {
			return GetToken(TSqlParser.REVOKE, i);
		}
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode[] DENY() { return GetTokens(TSqlParser.DENY); }
		public ITerminalNode DENY(int i) {
			return GetToken(TSqlParser.DENY, i);
		}
		public ITerminalNode[] SELECT() { return GetTokens(TSqlParser.SELECT); }
		public ITerminalNode SELECT(int i) {
			return GetToken(TSqlParser.SELECT, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] COLON() { return GetTokens(TSqlParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TSqlParser.COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schemaContext create_schema() {
		Create_schemaContext _localctx = new Create_schemaContext(Context, State);
		EnterRule(_localctx, 356, RULE_create_schema);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4232; Match(CREATE);
			State = 4233; Match(SCHEMA);
			State = 4241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,456,Context) ) {
			case 1:
				{
				State = 4234; _localctx.schema_name = id();
				}
				break;
			case 2:
				{
				State = 4235; Match(AUTHORIZATION);
				State = 4236; _localctx.owner_name = id();
				}
				break;
			case 3:
				{
				State = 4237; _localctx.schema_name = id();
				State = 4238; Match(AUTHORIZATION);
				State = 4239; _localctx.owner_name = id();
				}
				break;
			}
			State = 4271;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,460,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 4269;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
					case 1:
						{
						State = 4243; create_table();
						}
						break;
					case 2:
						{
						State = 4244; create_view();
						}
						break;
					case 3:
						{
						State = 4245;
						_la = TokenStream.LA(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 4246;
						_la = TokenStream.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 4247; Match(ON);
						State = 4251;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SCHEMA) {
							{
							State = 4248; Match(SCHEMA);
							State = 4249; Match(COLON);
							State = 4250; Match(COLON);
							}
						}

						State = 4253; _localctx.object_name = id();
						State = 4254; Match(TO);
						State = 4255; _localctx.owner_name = id();
						}
						break;
					case 4:
						{
						State = 4257; Match(REVOKE);
						State = 4258;
						_la = TokenStream.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 4259; Match(ON);
						State = 4263;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SCHEMA) {
							{
							State = 4260; Match(SCHEMA);
							State = 4261; Match(COLON);
							State = 4262; Match(COLON);
							}
						}

						State = 4265; _localctx.object_name = id();
						State = 4266; Match(FROM);
						State = 4267; _localctx.owner_name = id();
						}
						break;
					}
					} 
				}
				State = 4273;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,460,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema_azure_sql_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(Context, State);
		EnterRule(_localctx, 358, RULE_create_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4274; Match(CREATE);
			State = 4275; Match(SCHEMA);
			State = 4276; _localctx.schema_name = id();
			State = 4279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4277; Match(AUTHORIZATION);
				State = 4278; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_azure_sql_dw_and_pdwContext : ParserRuleContext {
		public IdContext schema_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode TRANSFER() { return GetToken(TSqlParser.TRANSFER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode[] COLON() { return GetTokens(TSqlParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TSqlParser.COLON, i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_azure_sql_dw_and_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_azure_sql_dw_and_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_azure_sql_dw_and_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_azure_sql_dw_and_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(Context, State);
		EnterRule(_localctx, 360, RULE_alter_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4281; Match(ALTER);
			State = 4282; Match(SCHEMA);
			State = 4283; _localctx.schema_name = id();
			State = 4284; Match(TRANSFER);
			State = 4288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,462,Context) ) {
			case 1:
				{
				State = 4285; Match(OBJECT);
				State = 4286; Match(COLON);
				State = 4287; Match(COLON);
				}
				break;
			}
			State = 4290; id();
			State = 4293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 4291; Match(DOT);
				State = 4292; Match(ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_search_property_listContext : ParserRuleContext {
		public IdContext new_list_name;
		public IdContext database_name;
		public IdContext source_list_name;
		public IdContext owner_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_search_property_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_search_property_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_search_property_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_search_property_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_search_property_listContext create_search_property_list() {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(Context, State);
		EnterRule(_localctx, 362, RULE_create_search_property_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4295; Match(CREATE);
			State = 4296; Match(SEARCH);
			State = 4297; Match(PROPERTY);
			State = 4298; Match(LIST);
			State = 4299; _localctx.new_list_name = id();
			State = 4307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 4300; Match(FROM);
				State = 4304;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,464,Context) ) {
				case 1:
					{
					State = 4301; _localctx.database_name = id();
					State = 4302; Match(DOT);
					}
					break;
				}
				State = 4306; _localctx.source_list_name = id();
				}
			}

			State = 4311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4309; Match(AUTHORIZATION);
				State = 4310; _localctx.owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_security_policyContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext security_policy_name;
		public IdContext tvf_schema_name;
		public IdContext security_predicate_function_name;
		public IdContext column_name_or_arguments;
		public IdContext table_schema_name;
		public IdContext name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SECURITY() { return GetToken(TSqlParser.SECURITY, 0); }
		public ITerminalNode POLICY() { return GetToken(TSqlParser.POLICY, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] PREDICATE() { return GetTokens(TSqlParser.PREDICATE); }
		public ITerminalNode PREDICATE(int i) {
			return GetToken(TSqlParser.PREDICATE, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] AFTER() { return GetTokens(TSqlParser.AFTER); }
		public ITerminalNode AFTER(int i) {
			return GetToken(TSqlParser.AFTER, i);
		}
		public ITerminalNode[] BEFORE() { return GetTokens(TSqlParser.BEFORE); }
		public ITerminalNode BEFORE(int i) {
			return GetToken(TSqlParser.BEFORE, i);
		}
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode[] FILTER() { return GetTokens(TSqlParser.FILTER); }
		public ITerminalNode FILTER(int i) {
			return GetToken(TSqlParser.FILTER, i);
		}
		public ITerminalNode[] BLOCK() { return GetTokens(TSqlParser.BLOCK); }
		public ITerminalNode BLOCK(int i) {
			return GetToken(TSqlParser.BLOCK, i);
		}
		public ITerminalNode[] INSERT() { return GetTokens(TSqlParser.INSERT); }
		public ITerminalNode INSERT(int i) {
			return GetToken(TSqlParser.INSERT, i);
		}
		public ITerminalNode[] UPDATE() { return GetTokens(TSqlParser.UPDATE); }
		public ITerminalNode UPDATE(int i) {
			return GetToken(TSqlParser.UPDATE, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(TSqlParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(TSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_security_policy; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_security_policy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_security_policy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_security_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_security_policyContext create_security_policy() {
		Create_security_policyContext _localctx = new Create_security_policyContext(Context, State);
		EnterRule(_localctx, 364, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4313; Match(CREATE);
			State = 4314; Match(SECURITY);
			State = 4315; Match(POLICY);
			State = 4319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,467,Context) ) {
			case 1:
				{
				State = 4316; _localctx.schema_name = id();
				State = 4317; Match(DOT);
				}
				break;
			}
			State = 4321; _localctx.security_policy_name = id();
			State = 4362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4322; Match(COMMA);
					}
				}

				State = 4325; Match(ADD);
				State = 4327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BLOCK || _la==FILTER) {
					{
					State = 4326;
					_la = TokenStream.LA(1);
					if ( !(_la==BLOCK || _la==FILTER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 4329; Match(PREDICATE);
				State = 4330; _localctx.tvf_schema_name = id();
				State = 4331; Match(DOT);
				State = 4332; _localctx.security_predicate_function_name = id();
				State = 4333; Match(LR_BRACKET);
				State = 4338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4335;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4334; Match(COMMA);
						}
					}

					State = 4337; _localctx.column_name_or_arguments = id();
					}
					}
					State = 4340;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)) | (1L << (COMMA - 768)))) != 0) );
				State = 4342; Match(RR_BRACKET);
				State = 4343; Match(ON);
				State = 4344; _localctx.table_schema_name = id();
				State = 4345; Match(DOT);
				State = 4346; _localctx.name = id();
				State = 4359;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,475,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 4357;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,474,Context) ) {
						case 1:
							{
							State = 4348;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4347; Match(COMMA);
								}
							}

							State = 4350; Match(AFTER);
							State = 4351;
							_la = TokenStream.LA(1);
							if ( !(_la==INSERT || _la==UPDATE) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 2:
							{
							State = 4353;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4352; Match(COMMA);
								}
							}

							State = 4355; Match(BEFORE);
							State = 4356;
							_la = TokenStream.LA(1);
							if ( !(_la==DELETE || _la==UPDATE) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						}
						} 
					}
					State = 4361;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,475,Context);
				}
				}
				}
				State = 4364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ADD || _la==COMMA );
			State = 4376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,478,Context) ) {
			case 1:
				{
				State = 4366; Match(WITH);
				State = 4367; Match(LR_BRACKET);
				State = 4368; Match(STATE);
				State = 4369; Match(EQUAL);
				State = 4370;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SCHEMABINDING) {
					{
					State = 4371; Match(SCHEMABINDING);
					State = 4372;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 4375; Match(RR_BRACKET);
				}
				break;
			}
			State = 4381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 4378; Match(NOT);
				State = 4379; Match(FOR);
				State = 4380; Match(REPLICATION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequenceContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public IToken sequnce_increment;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode RESTART() { return GetToken(TSqlParser.RESTART, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_sequence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequenceContext alter_sequence() {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(Context, State);
		EnterRule(_localctx, 366, RULE_alter_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4383; Match(ALTER);
			State = 4384; Match(SEQUENCE);
			State = 4388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,480,Context) ) {
			case 1:
				{
				State = 4385; _localctx.schema_name = id();
				State = 4386; Match(DOT);
				}
				break;
			}
			State = 4390; _localctx.sequence_name = id();
			State = 4396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RESTART) {
				{
				State = 4391; Match(RESTART);
				State = 4394;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,481,Context) ) {
				case 1:
					{
					State = 4392; Match(WITH);
					State = 4393; Match(DECIMAL);
					}
					break;
				}
				}
			}

			State = 4401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INCREMENT) {
				{
				State = 4398; Match(INCREMENT);
				State = 4399; Match(BY);
				State = 4400; _localctx.sequnce_increment = Match(DECIMAL);
				}
			}

			State = 4407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,484,Context) ) {
			case 1:
				{
				State = 4403; Match(MINVALUE);
				State = 4404; Match(DECIMAL);
				}
				break;
			case 2:
				{
				State = 4405; Match(NO);
				State = 4406; Match(MINVALUE);
				}
				break;
			}
			State = 4413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,485,Context) ) {
			case 1:
				{
				State = 4409; Match(MAXVALUE);
				State = 4410; Match(DECIMAL);
				}
				break;
			case 2:
				{
				State = 4411; Match(NO);
				State = 4412; Match(MAXVALUE);
				}
				break;
			}
			State = 4418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,486,Context) ) {
			case 1:
				{
				State = 4415; Match(CYCLE);
				}
				break;
			case 2:
				{
				State = 4416; Match(NO);
				State = 4417; Match(CYCLE);
				}
				break;
			}
			State = 4424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,487,Context) ) {
			case 1:
				{
				State = 4420; Match(CACHE);
				State = 4421; Match(DECIMAL);
				}
				break;
			case 2:
				{
				State = 4422; Match(NO);
				State = 4423; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_sequenceContext : ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(TSqlParser.SEQUENCE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode INCREMENT() { return GetToken(TSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode MINVALUE() { return GetToken(TSqlParser.MINVALUE, 0); }
		public ITerminalNode[] NO() { return GetTokens(TSqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(TSqlParser.NO, i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(TSqlParser.MAXVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(TSqlParser.CYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(TSqlParser.CACHE, 0); }
		public ITerminalNode MINUS() { return GetToken(TSqlParser.MINUS, 0); }
		public Create_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_sequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_sequence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_sequenceContext create_sequence() {
		Create_sequenceContext _localctx = new Create_sequenceContext(Context, State);
		EnterRule(_localctx, 368, RULE_create_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4426; Match(CREATE);
			State = 4427; Match(SEQUENCE);
			State = 4431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,488,Context) ) {
			case 1:
				{
				State = 4428; _localctx.schema_name = id();
				State = 4429; Match(DOT);
				}
				break;
			}
			State = 4433; _localctx.sequence_name = id();
			State = 4436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 4434; Match(AS);
				State = 4435; data_type();
				}
			}

			State = 4441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,490,Context) ) {
			case 1:
				{
				State = 4438; Match(START);
				State = 4439; Match(WITH);
				State = 4440; Match(DECIMAL);
				}
				break;
			}
			State = 4449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INCREMENT) {
				{
				State = 4443; Match(INCREMENT);
				State = 4444; Match(BY);
				State = 4446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 4445; Match(MINUS);
					}
				}

				State = 4448; Match(DECIMAL);
				}
			}

			State = 4457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,494,Context) ) {
			case 1:
				{
				State = 4451; Match(MINVALUE);
				State = 4453;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,493,Context) ) {
				case 1:
					{
					State = 4452; Match(DECIMAL);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 4455; Match(NO);
				State = 4456; Match(MINVALUE);
				}
				break;
			}
			State = 4465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
			case 1:
				{
				State = 4459; Match(MAXVALUE);
				State = 4461;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,495,Context) ) {
				case 1:
					{
					State = 4460; Match(DECIMAL);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 4463; Match(NO);
				State = 4464; Match(MAXVALUE);
				}
				break;
			}
			State = 4470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,497,Context) ) {
			case 1:
				{
				State = 4467; Match(CYCLE);
				}
				break;
			case 2:
				{
				State = 4468; Match(NO);
				State = 4469; Match(CYCLE);
				}
				break;
			}
			State = 4478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,499,Context) ) {
			case 1:
				{
				State = 4472; Match(CACHE);
				State = 4474;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,498,Context) ) {
				case 1:
					{
					State = 4473; Match(DECIMAL);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 4476; Match(NO);
				State = 4477; Match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_auditContext : ParserRuleContext {
		public IdContext audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_auditContext alter_server_audit() {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(Context, State);
		EnterRule(_localctx, 370, RULE_alter_server_audit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4480; Match(ALTER);
			State = 4481; Match(SERVER);
			State = 4482; Match(AUDIT);
			State = 4483; _localctx.audit_name = id();
			State = 4615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,524,Context) ) {
			case 1:
				{
				State = 4531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 4484; Match(TO);
					State = 4529;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FILE:
						{
						State = 4485; Match(FILE);
						{
						State = 4486; Match(LR_BRACKET);
						State = 4523;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==FILEPATH || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (MAX_FILES - 580)) | (1L << (MAX_ROLLOVER_FILES - 580)) | (1L << (MAXSIZE - 580)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							State = 4521;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
							case 1:
								{
								State = 4488;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4487; Match(COMMA);
									}
								}

								State = 4490; Match(FILEPATH);
								State = 4491; Match(EQUAL);
								State = 4492; _localctx.filepath = Match(STRING);
								}
								break;
							case 2:
								{
								State = 4494;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4493; Match(COMMA);
									}
								}

								State = 4496; Match(MAXSIZE);
								State = 4497; Match(EQUAL);
								State = 4501;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case DECIMAL:
									{
									State = 4498; Match(DECIMAL);
									State = 4499;
									_la = TokenStream.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									ErrorHandler.RecoverInline(this);
									}
									else {
										ErrorHandler.ReportMatch(this);
									    Consume();
									}
									}
									break;
								case UNLIMITED:
									{
									State = 4500; Match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								State = 4504;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4503; Match(COMMA);
									}
								}

								State = 4506; Match(MAX_ROLLOVER_FILES);
								State = 4507; Match(EQUAL);
								State = 4508;
								_localctx.max_rollover_files = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									_localctx.max_rollover_files = ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							case 4:
								{
								State = 4510;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4509; Match(COMMA);
									}
								}

								State = 4512; Match(MAX_FILES);
								State = 4513; Match(EQUAL);
								State = 4514; _localctx.max_files = Match(DECIMAL);
								}
								break;
							case 5:
								{
								State = 4516;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4515; Match(COMMA);
									}
								}

								State = 4518; Match(RESERVE_DISK_SPACE);
								State = 4519; Match(EQUAL);
								State = 4520;
								_la = TokenStream.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							}
							}
							State = 4525;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 4526; Match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						State = 4527; Match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						State = 4528; Match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4559;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,515,Context) ) {
				case 1:
					{
					State = 4533; Match(WITH);
					State = 4534; Match(LR_BRACKET);
					State = 4555;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ON_FAILURE || _la==STATE || _la==QUEUE_DELAY || _la==COMMA) {
						{
						State = 4553;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,513,Context) ) {
						case 1:
							{
							State = 4536;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4535; Match(COMMA);
								}
							}

							State = 4538; Match(QUEUE_DELAY);
							State = 4539; Match(EQUAL);
							State = 4540; _localctx.queue_delay = Match(DECIMAL);
							}
							break;
						case 2:
							{
							State = 4542;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4541; Match(COMMA);
								}
							}

							State = 4544; Match(ON_FAILURE);
							State = 4545; Match(EQUAL);
							State = 4546;
							_la = TokenStream.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 3:
							{
							State = 4548;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4547; Match(COMMA);
								}
							}

							State = 4550; Match(STATE);
							State = 4551; Match(EQUAL);
							State = 4552;
							_la = TokenStream.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						}
						}
						State = 4557;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 4558; Match(RR_BRACKET);
					}
					break;
				}
				State = 4607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 4561; Match(WHERE);
					State = 4605;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,522,Context) ) {
					case 1:
						{
						State = 4563;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4562; Match(COMMA);
							}
						}

						{
						State = 4566;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 4565; Match(NOT);
							}
						}

						}
						State = 4568; _localctx.event_field_name = id();
						State = 4580;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,518,Context) ) {
						case 1:
							{
							State = 4569; Match(EQUAL);
							}
							break;
						case 2:
							{
							{
							State = 4570; Match(LESS);
							State = 4571; Match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							State = 4572; Match(EXCLAMATION);
							State = 4573; Match(EQUAL);
							}
							}
							break;
						case 4:
							{
							State = 4574; Match(GREATER);
							}
							break;
						case 5:
							{
							{
							State = 4575; Match(GREATER);
							State = 4576; Match(EQUAL);
							}
							}
							break;
						case 6:
							{
							State = 4577; Match(LESS);
							}
							break;
						case 7:
							{
							State = 4578; Match(LESS);
							State = 4579; Match(EQUAL);
							}
							break;
						}
						State = 4582;
						_la = TokenStream.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 4585;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4584; Match(COMMA);
							}
						}

						State = 4587;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 4589;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 4588; Match(NOT);
							}
						}

						State = 4602;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
						case 1:
							{
							State = 4591; Match(EQUAL);
							}
							break;
						case 2:
							{
							{
							State = 4592; Match(LESS);
							State = 4593; Match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							State = 4594; Match(EXCLAMATION);
							State = 4595; Match(EQUAL);
							}
							}
							break;
						case 4:
							{
							State = 4596; Match(GREATER);
							}
							break;
						case 5:
							{
							{
							State = 4597; Match(GREATER);
							State = 4598; Match(EQUAL);
							}
							}
							break;
						case 6:
							{
							State = 4599; Match(LESS);
							}
							break;
						case 7:
							{
							State = 4600; Match(LESS);
							State = 4601; Match(EQUAL);
							}
							break;
						}
						State = 4604;
						_la = TokenStream.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				State = 4609; Match(REMOVE);
				State = 4610; Match(WHERE);
				}
				break;
			case 3:
				{
				State = 4611; Match(MODIFY);
				State = 4612; Match(NAME);
				State = 4613; Match(EQUAL);
				State = 4614; _localctx.new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_auditContext : ParserRuleContext {
		public IdContext audit_name;
		public IToken filepath;
		public IToken max_rollover_files;
		public IToken max_files;
		public IToken queue_delay;
		public IdContext audit_guid;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode[] QUEUE_DELAY() { return GetTokens(TSqlParser.QUEUE_DELAY); }
		public ITerminalNode QUEUE_DELAY(int i) {
			return GetToken(TSqlParser.QUEUE_DELAY, i);
		}
		public ITerminalNode[] ON_FAILURE() { return GetTokens(TSqlParser.ON_FAILURE); }
		public ITerminalNode ON_FAILURE(int i) {
			return GetToken(TSqlParser.ON_FAILURE, i);
		}
		public ITerminalNode[] STATE() { return GetTokens(TSqlParser.STATE); }
		public ITerminalNode STATE(int i) {
			return GetToken(TSqlParser.STATE, i);
		}
		public ITerminalNode[] AUDIT_GUID() { return GetTokens(TSqlParser.AUDIT_GUID); }
		public ITerminalNode AUDIT_GUID(int i) {
			return GetToken(TSqlParser.AUDIT_GUID, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] CONTINUE() { return GetTokens(TSqlParser.CONTINUE); }
		public ITerminalNode CONTINUE(int i) {
			return GetToken(TSqlParser.CONTINUE, i);
		}
		public ITerminalNode[] SHUTDOWN() { return GetTokens(TSqlParser.SHUTDOWN); }
		public ITerminalNode SHUTDOWN(int i) {
			return GetToken(TSqlParser.SHUTDOWN, i);
		}
		public ITerminalNode[] FAIL_OPERATION() { return GetTokens(TSqlParser.FAIL_OPERATION); }
		public ITerminalNode FAIL_OPERATION(int i) {
			return GetToken(TSqlParser.FAIL_OPERATION, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public ITerminalNode[] FILEPATH() { return GetTokens(TSqlParser.FILEPATH); }
		public ITerminalNode FILEPATH(int i) {
			return GetToken(TSqlParser.FILEPATH, i);
		}
		public ITerminalNode[] MAXSIZE() { return GetTokens(TSqlParser.MAXSIZE); }
		public ITerminalNode MAXSIZE(int i) {
			return GetToken(TSqlParser.MAXSIZE, i);
		}
		public ITerminalNode[] MAX_ROLLOVER_FILES() { return GetTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public ITerminalNode MAX_ROLLOVER_FILES(int i) {
			return GetToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public ITerminalNode[] MAX_FILES() { return GetTokens(TSqlParser.MAX_FILES); }
		public ITerminalNode MAX_FILES(int i) {
			return GetToken(TSqlParser.MAX_FILES, i);
		}
		public ITerminalNode[] RESERVE_DISK_SPACE() { return GetTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public ITerminalNode RESERVE_DISK_SPACE(int i) {
			return GetToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(TSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(TSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] MB() { return GetTokens(TSqlParser.MB); }
		public ITerminalNode MB(int i) {
			return GetToken(TSqlParser.MB, i);
		}
		public ITerminalNode[] GB() { return GetTokens(TSqlParser.GB); }
		public ITerminalNode GB(int i) {
			return GetToken(TSqlParser.GB, i);
		}
		public ITerminalNode[] TB() { return GetTokens(TSqlParser.TB); }
		public ITerminalNode TB(int i) {
			return GetToken(TSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_audit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_auditContext create_server_audit() {
		Create_server_auditContext _localctx = new Create_server_auditContext(Context, State);
		EnterRule(_localctx, 372, RULE_create_server_audit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4617; Match(CREATE);
			State = 4618; Match(SERVER);
			State = 4619; Match(AUDIT);
			State = 4620; _localctx.audit_name = id();
			State = 4758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,550,Context) ) {
			case 1:
				{
				State = 4668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 4621; Match(TO);
					State = 4666;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FILE:
						{
						State = 4622; Match(FILE);
						{
						State = 4623; Match(LR_BRACKET);
						State = 4660;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==FILEPATH || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (MAX_FILES - 580)) | (1L << (MAX_ROLLOVER_FILES - 580)) | (1L << (MAXSIZE - 580)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							State = 4658;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
							case 1:
								{
								State = 4625;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4624; Match(COMMA);
									}
								}

								State = 4627; Match(FILEPATH);
								State = 4628; Match(EQUAL);
								State = 4629; _localctx.filepath = Match(STRING);
								}
								break;
							case 2:
								{
								State = 4631;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4630; Match(COMMA);
									}
								}

								State = 4633; Match(MAXSIZE);
								State = 4634; Match(EQUAL);
								State = 4638;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case DECIMAL:
									{
									State = 4635; Match(DECIMAL);
									State = 4636;
									_la = TokenStream.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									ErrorHandler.RecoverInline(this);
									}
									else {
										ErrorHandler.ReportMatch(this);
									    Consume();
									}
									}
									break;
								case UNLIMITED:
									{
									State = 4637; Match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								State = 4641;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4640; Match(COMMA);
									}
								}

								State = 4643; Match(MAX_ROLLOVER_FILES);
								State = 4644; Match(EQUAL);
								State = 4645;
								_localctx.max_rollover_files = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									_localctx.max_rollover_files = ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							case 4:
								{
								State = 4647;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4646; Match(COMMA);
									}
								}

								State = 4649; Match(MAX_FILES);
								State = 4650; Match(EQUAL);
								State = 4651; _localctx.max_files = Match(DECIMAL);
								}
								break;
							case 5:
								{
								State = 4653;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4652; Match(COMMA);
									}
								}

								State = 4655; Match(RESERVE_DISK_SPACE);
								State = 4656; Match(EQUAL);
								State = 4657;
								_la = TokenStream.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							}
							}
							State = 4662;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 4663; Match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						State = 4664; Match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						State = 4665; Match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4702;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,541,Context) ) {
				case 1:
					{
					State = 4670; Match(WITH);
					State = 4671; Match(LR_BRACKET);
					State = 4698;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==ON_FAILURE || _la==STATE || _la==AUDIT_GUID || _la==QUEUE_DELAY || _la==COMMA) {
						{
						State = 4696;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
						case 1:
							{
							State = 4673;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4672; Match(COMMA);
								}
							}

							State = 4675; Match(QUEUE_DELAY);
							State = 4676; Match(EQUAL);
							State = 4677; _localctx.queue_delay = Match(DECIMAL);
							}
							break;
						case 2:
							{
							State = 4679;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4678; Match(COMMA);
								}
							}

							State = 4681; Match(ON_FAILURE);
							State = 4682; Match(EQUAL);
							State = 4683;
							_la = TokenStream.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 3:
							{
							State = 4685;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4684; Match(COMMA);
								}
							}

							State = 4687; Match(STATE);
							State = 4688; Match(EQUAL);
							State = 4689;
							_la = TokenStream.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 4:
							{
							State = 4691;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4690; Match(COMMA);
								}
							}

							State = 4693; Match(AUDIT_GUID);
							State = 4694; Match(EQUAL);
							State = 4695; _localctx.audit_guid = id();
							}
							break;
						}
						}
						State = 4700;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 4701; Match(RR_BRACKET);
					}
					break;
				}
				State = 4750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 4704; Match(WHERE);
					State = 4748;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,548,Context) ) {
					case 1:
						{
						State = 4706;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4705; Match(COMMA);
							}
						}

						{
						State = 4709;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 4708; Match(NOT);
							}
						}

						}
						State = 4711; _localctx.event_field_name = id();
						State = 4723;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,544,Context) ) {
						case 1:
							{
							State = 4712; Match(EQUAL);
							}
							break;
						case 2:
							{
							{
							State = 4713; Match(LESS);
							State = 4714; Match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							State = 4715; Match(EXCLAMATION);
							State = 4716; Match(EQUAL);
							}
							}
							break;
						case 4:
							{
							State = 4717; Match(GREATER);
							}
							break;
						case 5:
							{
							{
							State = 4718; Match(GREATER);
							State = 4719; Match(EQUAL);
							}
							}
							break;
						case 6:
							{
							State = 4720; Match(LESS);
							}
							break;
						case 7:
							{
							State = 4721; Match(LESS);
							State = 4722; Match(EQUAL);
							}
							break;
						}
						State = 4725;
						_la = TokenStream.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 4728;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4727; Match(COMMA);
							}
						}

						State = 4730;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 4732;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 4731; Match(NOT);
							}
						}

						State = 4745;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,547,Context) ) {
						case 1:
							{
							State = 4734; Match(EQUAL);
							}
							break;
						case 2:
							{
							{
							State = 4735; Match(LESS);
							State = 4736; Match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							State = 4737; Match(EXCLAMATION);
							State = 4738; Match(EQUAL);
							}
							}
							break;
						case 4:
							{
							State = 4739; Match(GREATER);
							}
							break;
						case 5:
							{
							{
							State = 4740; Match(GREATER);
							State = 4741; Match(EQUAL);
							}
							}
							break;
						case 6:
							{
							State = 4742; Match(LESS);
							}
							break;
						case 7:
							{
							State = 4743; Match(LESS);
							State = 4744; Match(EQUAL);
							}
							break;
						}
						State = 4747;
						_la = TokenStream.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				State = 4752; Match(REMOVE);
				State = 4753; Match(WHERE);
				}
				break;
			case 3:
				{
				State = 4754; Match(MODIFY);
				State = 4755; Match(NAME);
				State = 4756; Match(EQUAL);
				State = 4757; _localctx.new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_audit_specificationContext : ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_audit_specificationContext alter_server_audit_specification() {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(Context, State);
		EnterRule(_localctx, 374, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4760; Match(ALTER);
			State = 4761; Match(SERVER);
			State = 4762; Match(AUDIT);
			State = 4763; Match(SPECIFICATION);
			State = 4764; _localctx.audit_specification_name = id();
			State = 4769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4765; Match(FOR);
				State = 4766; Match(SERVER);
				State = 4767; Match(AUDIT);
				State = 4768; _localctx.audit_name = id();
				}
			}

			State = 4778;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,552,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4771;
					_la = TokenStream.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4772; Match(LR_BRACKET);
					State = 4773; _localctx.audit_action_group_name = id();
					State = 4774; Match(RR_BRACKET);
					}
					} 
				}
				State = 4780;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,552,Context);
			}
			State = 4787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,553,Context) ) {
			case 1:
				{
				State = 4781; Match(WITH);
				State = 4782; Match(LR_BRACKET);
				State = 4783; Match(STATE);
				State = 4784; Match(EQUAL);
				State = 4785;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4786; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_audit_specificationContext : ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] AUDIT() { return GetTokens(TSqlParser.AUDIT); }
		public ITerminalNode AUDIT(int i) {
			return GetToken(TSqlParser.AUDIT, i);
		}
		public ITerminalNode SPECIFICATION() { return GetToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_audit_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_audit_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_audit_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_audit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_audit_specificationContext create_server_audit_specification() {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(Context, State);
		EnterRule(_localctx, 376, RULE_create_server_audit_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4789; Match(CREATE);
			State = 4790; Match(SERVER);
			State = 4791; Match(AUDIT);
			State = 4792; Match(SPECIFICATION);
			State = 4793; _localctx.audit_specification_name = id();
			State = 4798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4794; Match(FOR);
				State = 4795; Match(SERVER);
				State = 4796; Match(AUDIT);
				State = 4797; _localctx.audit_name = id();
				}
			}

			State = 4807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD) {
				{
				{
				State = 4800; Match(ADD);
				State = 4801; Match(LR_BRACKET);
				State = 4802; _localctx.audit_action_group_name = id();
				State = 4803; Match(RR_BRACKET);
				}
				}
				State = 4809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,556,Context) ) {
			case 1:
				{
				State = 4810; Match(WITH);
				State = 4811; Match(LR_BRACKET);
				State = 4812; Match(STATE);
				State = 4813; Match(EQUAL);
				State = 4814;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4815; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_configurationContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode CONFIGURATION() { return GetToken(TSqlParser.CONFIGURATION, 0); }
		public ITerminalNode[] SET() { return GetTokens(TSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(TSqlParser.SET, i);
		}
		public ITerminalNode PROCESS() { return GetToken(TSqlParser.PROCESS, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode DIAGNOSTICS() { return GetToken(TSqlParser.DIAGNOSTICS, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode CLUSTER() { return GetToken(TSqlParser.CLUSTER, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode CONTEXT() { return GetToken(TSqlParser.CONTEXT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode BUFFER() { return GetToken(TSqlParser.BUFFER, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode EXTENSION() { return GetToken(TSqlParser.EXTENSION, 0); }
		public ITerminalNode SOFTNUMA() { return GetToken(TSqlParser.SOFTNUMA, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(TSqlParser.MAX_SIZE, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode VERBOSELOGGING() { return GetToken(TSqlParser.VERBOSELOGGING, 0); }
		public ITerminalNode SQLDUMPERFLAGS() { return GetToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public ITerminalNode SQLDUMPERPATH() { return GetToken(TSqlParser.SQLDUMPERPATH, 0); }
		public ITerminalNode SQLDUMPERTIMEOUT() { return GetToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public ITerminalNode FAILURECONDITIONLEVEL() { return GetToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public ITerminalNode HEALTHCHECKTIMEOUT() { return GetToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_configuration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_configuration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_configuration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_configuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_configurationContext alter_server_configuration() {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(Context, State);
		EnterRule(_localctx, 378, RULE_alter_server_configuration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4818; Match(ALTER);
			State = 4819; Match(SERVER);
			State = 4820; Match(CONFIGURATION);
			State = 4821; Match(SET);
			{
			State = 4927;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCESS:
				{
				State = 4822; Match(PROCESS);
				State = 4823; Match(AFFINITY);
				State = 4859;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CPU:
					{
					State = 4824; Match(CPU);
					State = 4825; Match(EQUAL);
					State = 4841;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AUTO:
						{
						State = 4826; Match(AUTO);
						}
						break;
					case DECIMAL:
					case COMMA:
						{
						State = 4837;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								State = 4837;
								ErrorHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(TokenStream,559,Context) ) {
								case 1:
									{
									State = 4828;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 4827; Match(COMMA);
										}
									}

									State = 4830; Match(DECIMAL);
									}
									break;
								case 2:
									{
									State = 4832;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 4831; Match(COMMA);
										}
									}

									State = 4834; Match(DECIMAL);
									State = 4835; Match(TO);
									State = 4836; Match(DECIMAL);
									}
									break;
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 4839;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,560,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NUMANODE:
					{
					State = 4843; Match(NUMANODE);
					State = 4844; Match(EQUAL);
					State = 4855;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 4855;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,564,Context) ) {
							case 1:
								{
								State = 4846;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4845; Match(COMMA);
									}
								}

								State = 4848; Match(DECIMAL);
								}
								break;
							case 2:
								{
								State = 4850;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 4849; Match(COMMA);
									}
								}

								State = 4852; Match(DECIMAL);
								State = 4853; Match(TO);
								State = 4854; Match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 4857;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,565,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DIAGNOSTICS:
				{
				State = 4861; Match(DIAGNOSTICS);
				State = 4862; Match(LOG);
				State = 4878;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 4863; Match(ON);
					}
					break;
				case OFF:
					{
					State = 4864; Match(OFF);
					}
					break;
				case PATH:
					{
					State = 4865; Match(PATH);
					State = 4866; Match(EQUAL);
					State = 4867;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case MAX_SIZE:
					{
					State = 4868; Match(MAX_SIZE);
					State = 4869; Match(EQUAL);
					State = 4873;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DECIMAL:
						{
						State = 4870; Match(DECIMAL);
						State = 4871; Match(MB);
						}
						break;
					case DEFAULT:
						{
						State = 4872; Match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MAX_FILES:
					{
					State = 4875; Match(MAX_FILES);
					State = 4876; Match(EQUAL);
					State = 4877;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FAILOVER:
				{
				State = 4880; Match(FAILOVER);
				State = 4881; Match(CLUSTER);
				State = 4882; Match(PROPERTY);
				State = 4900;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VERBOSELOGGING:
					{
					State = 4883; Match(VERBOSELOGGING);
					State = 4884; Match(EQUAL);
					State = 4885;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case SQLDUMPERFLAGS:
					{
					State = 4886; Match(SQLDUMPERFLAGS);
					State = 4887; Match(EQUAL);
					State = 4888;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case SQLDUMPERPATH:
					{
					State = 4889; Match(SQLDUMPERPATH);
					State = 4890; Match(EQUAL);
					State = 4891;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case SQLDUMPERTIMEOUT:
					{
					State = 4892; Match(SQLDUMPERTIMEOUT);
					State = 4893;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case FAILURECONDITIONLEVEL:
					{
					State = 4894; Match(FAILURECONDITIONLEVEL);
					State = 4895; Match(EQUAL);
					State = 4896;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case HEALTHCHECKTIMEOUT:
					{
					State = 4897; Match(HEALTHCHECKTIMEOUT);
					State = 4898; Match(EQUAL);
					State = 4899;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case HADR:
				{
				State = 4902; Match(HADR);
				State = 4903; Match(CLUSTER);
				State = 4904; Match(CONTEXT);
				State = 4905; Match(EQUAL);
				State = 4906;
				_la = TokenStream.LA(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case BUFFER:
				{
				State = 4907; Match(BUFFER);
				State = 4908; Match(POOL);
				State = 4909; Match(EXTENSION);
				State = 4922;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 4910; Match(ON);
					State = 4911; Match(LR_BRACKET);
					State = 4912; Match(FILENAME);
					State = 4913; Match(EQUAL);
					State = 4914; Match(STRING);
					State = 4915; Match(COMMA);
					State = 4916; Match(SIZE);
					State = 4917; Match(EQUAL);
					State = 4918; Match(DECIMAL);
					State = 4919;
					_la = TokenStream.LA(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4920; Match(RR_BRACKET);
					}
					break;
				case OFF:
					{
					State = 4921; Match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SET:
				{
				State = 4924; Match(SET);
				State = 4925; Match(SOFTNUMA);
				State = 4926;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_roleContext : ParserRuleContext {
		public IdContext server_role_name;
		public IdContext server_principal;
		public IdContext new_server_role_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_roleContext alter_server_role() {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(Context, State);
		EnterRule(_localctx, 380, RULE_alter_server_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4929; Match(ALTER);
			State = 4930; Match(SERVER);
			State = 4931; Match(ROLE);
			State = 4932; _localctx.server_role_name = id();
			State = 4940;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case DROP:
				{
				State = 4933;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4934; Match(MEMBER);
				State = 4935; _localctx.server_principal = id();
				}
				break;
			case WITH:
				{
				State = 4936; Match(WITH);
				State = 4937; Match(NAME);
				State = 4938; Match(EQUAL);
				State = 4939; _localctx.new_server_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_server_roleContext : ParserRuleContext {
		public IdContext server_role;
		public IdContext server_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_server_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_server_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_server_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_server_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_server_roleContext create_server_role() {
		Create_server_roleContext _localctx = new Create_server_roleContext(Context, State);
		EnterRule(_localctx, 382, RULE_create_server_role);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4942; Match(CREATE);
			State = 4943; Match(SERVER);
			State = 4944; Match(ROLE);
			State = 4945; _localctx.server_role = id();
			State = 4948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4946; Match(AUTHORIZATION);
				State = 4947; _localctx.server_principal = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_server_role_pdwContext : ParserRuleContext {
		public IdContext server_role_name;
		public IdContext login;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode MEMBER() { return GetToken(TSqlParser.MEMBER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_server_role_pdw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_server_role_pdw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_server_role_pdw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_server_role_pdw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_server_role_pdwContext alter_server_role_pdw() {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(Context, State);
		EnterRule(_localctx, 384, RULE_alter_server_role_pdw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4950; Match(ALTER);
			State = 4951; Match(SERVER);
			State = 4952; Match(ROLE);
			State = 4953; _localctx.server_role_name = id();
			State = 4954;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4955; Match(MEMBER);
			State = 4956; _localctx.login = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_serviceContext : ParserRuleContext {
		public IdContext modified_service_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public IdContext modified_contract_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode[] ADD() { return GetTokens(TSqlParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(TSqlParser.ADD, i);
		}
		public ITerminalNode[] DROP() { return GetTokens(TSqlParser.DROP); }
		public ITerminalNode DROP(int i) {
			return GetToken(TSqlParser.DROP, i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_serviceContext alter_service() {
		Alter_serviceContext _localctx = new Alter_serviceContext(Context, State);
		EnterRule(_localctx, 386, RULE_alter_service);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4958; Match(ALTER);
			State = 4959; Match(SERVICE);
			State = 4960; _localctx.modified_service_name = id();
			State = 4968;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 4961; Match(ON);
				State = 4962; Match(QUEUE);
				{
				State = 4963; _localctx.schema_name = id();
				State = 4964; Match(DOT);
				}
				State = 4966; _localctx.queue_name = id();
				}
			}

			State = 4977;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,576,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4971;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4970; Match(COMMA);
						}
					}

					State = 4973;
					_la = TokenStream.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4974; _localctx.modified_contract_name = id();
					}
					} 
				}
				State = 4979;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,576,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_serviceContext : ParserRuleContext {
		public IdContext create_service_name;
		public IdContext owner_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_service; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_service(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_service(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_serviceContext create_service() {
		Create_serviceContext _localctx = new Create_serviceContext(Context, State);
		EnterRule(_localctx, 388, RULE_create_service);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4980; Match(CREATE);
			State = 4981; Match(SERVICE);
			State = 4982; _localctx.create_service_name = id();
			State = 4985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 4983; Match(AUTHORIZATION);
				State = 4984; _localctx.owner_name = id();
				}
			}

			State = 4987; Match(ON);
			State = 4988; Match(QUEUE);
			State = 4992;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,578,Context) ) {
			case 1:
				{
				State = 4989; _localctx.schema_name = id();
				State = 4990; Match(DOT);
				}
				break;
			}
			State = 4994; _localctx.queue_name = id();
			State = 5008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,582,Context) ) {
			case 1:
				{
				State = 4995; Match(LR_BRACKET);
				State = 5003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4997;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4996; Match(COMMA);
						}
					}

					State = 5001;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 4999; id();
						}
						break;
					case DEFAULT:
						{
						State = 5000; Match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 5005;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (DEFAULT - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)) | (1L << (COMMA - 768)))) != 0) );
				State = 5007; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_service_master_keyContext : ParserRuleContext {
		public IToken acold_account_name;
		public IToken old_password;
		public IToken new_account_name;
		public IToken new_password;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REGENERATE() { return GetToken(TSqlParser.REGENERATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(TSqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_service_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_service_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_service_master_keyContext alter_service_master_key() {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(Context, State);
		EnterRule(_localctx, 390, RULE_alter_service_master_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5010; Match(ALTER);
			State = 5011; Match(SERVICE);
			State = 5012; Match(MASTER);
			State = 5013; Match(KEY);
			State = 5035;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				State = 5015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORCE) {
					{
					State = 5014; Match(FORCE);
					}
				}

				State = 5017; Match(REGENERATE);
				}
				break;
			case WITH:
				{
				{
				State = 5018; Match(WITH);
				State = 5033;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,584,Context) ) {
				case 1:
					{
					State = 5019; Match(OLD_ACCOUNT);
					State = 5020; Match(EQUAL);
					State = 5021; _localctx.acold_account_name = Match(STRING);
					State = 5022; Match(COMMA);
					State = 5023; Match(OLD_PASSWORD);
					State = 5024; Match(EQUAL);
					State = 5025; _localctx.old_password = Match(STRING);
					}
					break;
				case 2:
					{
					State = 5026; Match(NEW_ACCOUNT);
					State = 5027; Match(EQUAL);
					State = 5028; _localctx.new_account_name = Match(STRING);
					State = 5029; Match(COMMA);
					State = 5030; Match(NEW_PASSWORD);
					State = 5031; Match(EQUAL);
					State = 5032; _localctx.new_password = Match(STRING);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_symmetric_keyContext : ParserRuleContext {
		public IdContext key_name;
		public IdContext certificate_name;
		public IToken password;
		public IdContext symmetric_key_name;
		public IdContext Asym_key_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SYMMETRIC() { return GetTokens(TSqlParser.SYMMETRIC); }
		public ITerminalNode SYMMETRIC(int i) {
			return GetToken(TSqlParser.SYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_symmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_symmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_symmetric_keyContext alter_symmetric_key() {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(Context, State);
		EnterRule(_localctx, 392, RULE_alter_symmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5037; Match(ALTER);
			State = 5038; Match(SYMMETRIC);
			State = 5039; Match(KEY);
			State = 5040; _localctx.key_name = id();
			{
			State = 5041;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5042; Match(ENCRYPTION);
			State = 5043; Match(BY);
			State = 5055;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CERTIFICATE:
				{
				State = 5044; Match(CERTIFICATE);
				State = 5045; _localctx.certificate_name = id();
				}
				break;
			case PASSWORD:
				{
				State = 5046; Match(PASSWORD);
				State = 5047; Match(EQUAL);
				State = 5048; _localctx.password = Match(STRING);
				}
				break;
			case SYMMETRIC:
				{
				State = 5049; Match(SYMMETRIC);
				State = 5050; Match(KEY);
				State = 5051; _localctx.symmetric_key_name = id();
				}
				break;
			case ASYMMETRIC:
				{
				State = 5052; Match(ASYMMETRIC);
				State = 5053; Match(KEY);
				State = 5054; _localctx.Asym_key_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_symmetric_keyContext : ParserRuleContext {
		public IdContext key_name;
		public IdContext owner_name;
		public IdContext provider_name;
		public IToken key_pass_phrase;
		public IToken identity_phrase;
		public IToken provider_key_name;
		public IdContext certificate_name;
		public IToken password;
		public IdContext symmetric_key_name;
		public IdContext asym_key_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] SYMMETRIC() { return GetTokens(TSqlParser.SYMMETRIC); }
		public ITerminalNode SYMMETRIC(int i) {
			return GetToken(TSqlParser.SYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_symmetric_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_symmetric_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_symmetric_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_symmetric_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_symmetric_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_symmetric_keyContext create_symmetric_key() {
		Create_symmetric_keyContext _localctx = new Create_symmetric_keyContext(Context, State);
		EnterRule(_localctx, 394, RULE_create_symmetric_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5057; Match(ALTER);
			State = 5058; Match(SYMMETRIC);
			State = 5059; Match(KEY);
			State = 5060; _localctx.key_name = id();
			State = 5063;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5061; Match(AUTHORIZATION);
				State = 5062; _localctx.owner_name = id();
				}
			}

			State = 5068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 5065; Match(FROM);
				State = 5066; Match(PROVIDER);
				State = 5067; _localctx.provider_name = id();
				}
			}

			{
			State = 5070; Match(WITH);
			State = 5103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALGORITHM:
			case CREATION_DISPOSITION:
			case IDENTITY_VALUE:
			case KEY_SOURCE:
			case PROVIDER_KEY_NAME:
				{
				State = 5086;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KEY_SOURCE:
					{
					State = 5071; Match(KEY_SOURCE);
					State = 5072; Match(EQUAL);
					State = 5073; _localctx.key_pass_phrase = Match(STRING);
					}
					break;
				case ALGORITHM:
					{
					State = 5074; Match(ALGORITHM);
					State = 5075; Match(EQUAL);
					State = 5076;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (AES_128 - 390)) | (1L << (AES_192 - 390)) | (1L << (AES_256 - 390)))) != 0) || _la==DES || _la==DESX || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (RC2 - 664)) | (1L << (RC4 - 664)) | (1L << (RC4_128 - 664)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case IDENTITY_VALUE:
					{
					State = 5077; Match(IDENTITY_VALUE);
					State = 5078; Match(EQUAL);
					State = 5079; _localctx.identity_phrase = Match(STRING);
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					State = 5080; Match(PROVIDER_KEY_NAME);
					State = 5081; Match(EQUAL);
					State = 5082; _localctx.provider_key_name = Match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					State = 5083; Match(CREATION_DISPOSITION);
					State = 5084; Match(EQUAL);
					State = 5085;
					_la = TokenStream.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTION:
				{
				State = 5088; Match(ENCRYPTION);
				State = 5089; Match(BY);
				State = 5101;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CERTIFICATE:
					{
					State = 5090; Match(CERTIFICATE);
					State = 5091; _localctx.certificate_name = id();
					}
					break;
				case PASSWORD:
					{
					State = 5092; Match(PASSWORD);
					State = 5093; Match(EQUAL);
					State = 5094; _localctx.password = Match(STRING);
					}
					break;
				case SYMMETRIC:
					{
					State = 5095; Match(SYMMETRIC);
					State = 5096; Match(KEY);
					State = 5097; _localctx.symmetric_key_name = id();
					}
					break;
				case ASYMMETRIC:
					{
					State = 5098; Match(ASYMMETRIC);
					State = 5099; Match(KEY);
					State = 5100; _localctx.asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_synonymContext : ParserRuleContext {
		public IdContext schema_name_1;
		public IdContext synonym_name;
		public IdContext server_name;
		public IdContext database_name;
		public IdContext schema_name_2;
		public IdContext object_name;
		public IdContext database_or_schema2;
		public IdContext schema_id_2_or_object_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_synonym; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_synonym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_synonym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_synonym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_synonymContext create_synonym() {
		Create_synonymContext _localctx = new Create_synonymContext(Context, State);
		EnterRule(_localctx, 396, RULE_create_synonym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5105; Match(CREATE);
			State = 5106; Match(SYNONYM);
			State = 5110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,592,Context) ) {
			case 1:
				{
				State = 5107; _localctx.schema_name_1 = id();
				State = 5108; Match(DOT);
				}
				break;
			}
			State = 5112; _localctx.synonym_name = id();
			State = 5113; Match(FOR);
			State = 5140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,598,Context) ) {
			case 1:
				{
				State = 5117;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,593,Context) ) {
				case 1:
					{
					State = 5114; _localctx.server_name = id();
					State = 5115; Match(DOT);
					}
					break;
				}
				State = 5122;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,594,Context) ) {
				case 1:
					{
					State = 5119; _localctx.database_name = id();
					State = 5120; Match(DOT);
					}
					break;
				}
				State = 5127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,595,Context) ) {
				case 1:
					{
					State = 5124; _localctx.schema_name_2 = id();
					State = 5125; Match(DOT);
					}
					break;
				}
				State = 5129; _localctx.object_name = id();
				}
				break;
			case 2:
				{
				State = 5133;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,596,Context) ) {
				case 1:
					{
					State = 5130; _localctx.database_or_schema2 = id();
					State = 5131; Match(DOT);
					}
					break;
				}
				State = 5138;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,597,Context) ) {
				case 1:
					{
					State = 5135; _localctx.schema_id_2_or_object_name = id();
					State = 5136; Match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_userContext : ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext schema_name;
		public IdContext loginame;
		public IToken lcid;
		public IdContext language_name_or_alias;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] NULL() { return GetTokens(TSqlParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(TSqlParser.NULL, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] OLD_PASSWORD() { return GetTokens(TSqlParser.OLD_PASSWORD); }
		public ITerminalNode OLD_PASSWORD(int i) {
			return GetToken(TSqlParser.OLD_PASSWORD, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_userContext alter_user() {
		Alter_userContext _localctx = new Alter_userContext(Context, State);
		EnterRule(_localctx, 398, RULE_alter_user);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5142; Match(ALTER);
			State = 5143; Match(USER);
			State = 5144; _localctx.username = id();
			State = 5145; Match(WITH);
			State = 5196;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5196;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,608,Context) ) {
					case 1:
						{
						State = 5147;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5146; Match(COMMA);
							}
						}

						State = 5149; Match(NAME);
						State = 5150; Match(EQUAL);
						State = 5151; _localctx.newusername = id();
						}
						break;
					case 2:
						{
						State = 5153;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5152; Match(COMMA);
							}
						}

						State = 5155; Match(DEFAULT_SCHEMA);
						State = 5156; Match(EQUAL);
						State = 5159;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROWCOUNT:
						case SAFETY:
						case SERVER:
						case SID:
						case SOURCE:
						case STATE:
						case START:
						case TARGET:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							State = 5157; _localctx.schema_name = id();
							}
							break;
						case NULL:
							{
							State = 5158; Match(NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						State = 5162;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5161; Match(COMMA);
							}
						}

						State = 5164; Match(LOGIN);
						State = 5165; Match(EQUAL);
						State = 5166; _localctx.loginame = id();
						}
						break;
					case 4:
						{
						State = 5168;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5167; Match(COMMA);
							}
						}

						State = 5170; Match(PASSWORD);
						State = 5171; Match(EQUAL);
						State = 5172; Match(STRING);
						State = 5176;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 5173; Match(OLD_PASSWORD);
							State = 5174; Match(EQUAL);
							State = 5175; Match(STRING);
							}
							}
							State = 5178;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==OLD_PASSWORD );
						}
						break;
					case 5:
						{
						State = 5181;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5180; Match(COMMA);
							}
						}

						State = 5183; Match(DEFAULT_LANGUAGE);
						State = 5184; Match(EQUAL);
						State = 5188;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NONE:
							{
							State = 5185; Match(NONE);
							}
							break;
						case DECIMAL:
							{
							State = 5186; _localctx.lcid = Match(DECIMAL);
							}
							break;
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROWCOUNT:
						case SAFETY:
						case SERVER:
						case SID:
						case SOURCE:
						case STATE:
						case START:
						case TARGET:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							State = 5187; _localctx.language_name_or_alias = id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 6:
						{
						State = 5191;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5190; Match(COMMA);
							}
						}

						State = 5193; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5194; Match(EQUAL);
						State = 5195;
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,609,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_userContext : ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext schema_name;
		public IdContext windows_principal;
		public IdContext language_name_or_alias;
		public IToken password;
		public IdContext Azure_Active_Directory_principal;
		public IdContext cert_name;
		public IdContext asym_key_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] DEFAULT_LANGUAGE() { return GetTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public ITerminalNode DEFAULT_LANGUAGE(int i) {
			return GetToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public ITerminalNode[] SID() { return GetTokens(TSqlParser.SID); }
		public ITerminalNode SID(int i) {
			return GetToken(TSqlParser.SID, i);
		}
		public ITerminalNode[] BINARY() { return GetTokens(TSqlParser.BINARY); }
		public ITerminalNode BINARY(int i) {
			return GetToken(TSqlParser.BINARY, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(TSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(TSqlParser.NONE, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_userContext create_user() {
		Create_userContext _localctx = new Create_userContext(Context, State);
		EnterRule(_localctx, 400, RULE_create_user);
		int _la;
		try {
			int _alt;
			State = 5346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,637,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5200; Match(CREATE);
				State = 5201; Match(USER);
				State = 5202; _localctx.user_name = id();
				State = 5206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==FROM) {
					{
					State = 5203;
					_la = TokenStream.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5204; Match(LOGIN);
					State = 5205; _localctx.login_name = id();
					}
				}

				State = 5226;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,615,Context) ) {
				case 1:
					{
					State = 5208; Match(WITH);
					State = 5223;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,614,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 5221;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,613,Context) ) {
							case 1:
								{
								State = 5210;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5209; Match(COMMA);
									}
								}

								State = 5212; Match(DEFAULT_SCHEMA);
								State = 5213; Match(EQUAL);
								State = 5214; _localctx.schema_name = id();
								}
								break;
							case 2:
								{
								State = 5216;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5215; Match(COMMA);
									}
								}

								State = 5218; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5219; Match(EQUAL);
								State = 5220;
								_la = TokenStream.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5225;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,614,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5228; Match(CREATE);
				State = 5229; Match(USER);
				State = 5310;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,631,Context) ) {
				case 1:
					{
					State = 5230; _localctx.windows_principal = id();
					State = 5265;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,623,Context) ) {
					case 1:
						{
						State = 5231; Match(WITH);
						State = 5262;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,622,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								State = 5260;
								ErrorHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(TokenStream,621,Context) ) {
								case 1:
									{
									State = 5233;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 5232; Match(COMMA);
										}
									}

									State = 5235; Match(DEFAULT_SCHEMA);
									State = 5236; Match(EQUAL);
									State = 5237; _localctx.schema_name = id();
									}
									break;
								case 2:
									{
									State = 5239;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 5238; Match(COMMA);
										}
									}

									State = 5241; Match(DEFAULT_LANGUAGE);
									State = 5242; Match(EQUAL);
									State = 5246;
									ErrorHandler.Sync(this);
									switch (TokenStream.LA(1)) {
									case NONE:
										{
										State = 5243; Match(NONE);
										}
										break;
									case DECIMAL:
										{
										State = 5244; Match(DECIMAL);
										}
										break;
									case CALLED:
									case DATA_COMPRESSION:
									case EVENTDATA:
									case FILENAME:
									case FILLFACTOR:
									case FORCESEEK:
									case INIT:
									case KEY:
									case MASTER:
									case MAX_MEMORY:
									case OFFSETS:
									case PAGE:
									case PUBLIC:
									case R:
									case RAW:
									case RETURN:
									case RETURNS:
									case ROWCOUNT:
									case SAFETY:
									case SERVER:
									case SID:
									case SOURCE:
									case STATE:
									case START:
									case TARGET:
									case ABSOLUTE:
									case ACCENT_SENSITIVITY:
									case ACTION:
									case ACTIVATION:
									case ACTIVE:
									case ADDRESS:
									case AES_128:
									case AES_192:
									case AES_256:
									case AFFINITY:
									case AFTER:
									case AGGREGATE:
									case ALGORITHM:
									case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
									case ALLOW_SNAPSHOT_ISOLATION:
									case ALLOWED:
									case ANSI_NULL_DEFAULT:
									case ANSI_NULLS:
									case ANSI_PADDING:
									case ANSI_WARNINGS:
									case APPLICATION_LOG:
									case APPLY:
									case ARITHABORT:
									case ASSEMBLY:
									case AUDIT:
									case AUDIT_GUID:
									case AUTO:
									case AUTO_CLEANUP:
									case AUTO_CLOSE:
									case AUTO_CREATE_STATISTICS:
									case AUTO_SHRINK:
									case AUTO_UPDATE_STATISTICS:
									case AUTO_UPDATE_STATISTICS_ASYNC:
									case AVAILABILITY:
									case AVG:
									case BACKUP_PRIORITY:
									case BEGIN_DIALOG:
									case BIGINT:
									case BINARY_BASE64:
									case BINARY_CHECKSUM:
									case BINDING:
									case BLOB_STORAGE:
									case BROKER:
									case BROKER_INSTANCE:
									case BULK_LOGGED:
									case CALLER:
									case CAP_CPU_PERCENT:
									case CAST:
									case CATALOG:
									case CATCH:
									case CHANGE_RETENTION:
									case CHANGE_TRACKING:
									case CHECKSUM:
									case CHECKSUM_AGG:
									case CLEANUP:
									case COLLECTION:
									case COLUMN_MASTER_KEY:
									case COMMITTED:
									case COMPATIBILITY_LEVEL:
									case CONCAT:
									case CONCAT_NULL_YIELDS_NULL:
									case CONTENT:
									case CONTROL:
									case COOKIE:
									case COUNT:
									case COUNT_BIG:
									case COUNTER:
									case CPU:
									case CREATE_NEW:
									case CREATION_DISPOSITION:
									case CREDENTIAL:
									case CRYPTOGRAPHIC:
									case CURSOR_CLOSE_ON_COMMIT:
									case CURSOR_DEFAULT:
									case DATE_CORRELATION_OPTIMIZATION:
									case DATEADD:
									case DATEDIFF:
									case DATENAME:
									case DATEPART:
									case DAYS:
									case DB_CHAINING:
									case DB_FAILOVER:
									case DECRYPTION:
									case DEFAULT_DOUBLE_QUOTE:
									case DEFAULT_FULLTEXT_LANGUAGE:
									case DEFAULT_LANGUAGE:
									case DELAY:
									case DELAYED_DURABILITY:
									case DELETED:
									case DENSE_RANK:
									case DEPENDENTS:
									case DES:
									case DESCRIPTION:
									case DESX:
									case DHCP:
									case DIALOG:
									case DIRECTORY_NAME:
									case DISABLE:
									case DISABLE_BROKER:
									case DISABLED:
									case DISK_DRIVE:
									case DOCUMENT:
									case DYNAMIC:
									case EMERGENCY:
									case EMPTY:
									case ENABLE:
									case ENABLE_BROKER:
									case ENCRYPTED_VALUE:
									case ENCRYPTION:
									case ENDPOINT_URL:
									case ERROR_BROKER_CONVERSATIONS:
									case EXCLUSIVE:
									case EXECUTABLE:
									case EXIST:
									case EXPAND:
									case EXPIRY_DATE:
									case EXPLICIT:
									case FAIL_OPERATION:
									case FAILOVER_MODE:
									case FAILURE:
									case FAILURE_CONDITION_LEVEL:
									case FAST:
									case FAST_FORWARD:
									case FILEGROUP:
									case FILEGROWTH:
									case FILEPATH:
									case FILESTREAM:
									case FILTER:
									case FIRST:
									case FIRST_VALUE:
									case FOLLOWING:
									case FORCE:
									case FORCE_FAILOVER_ALLOW_DATA_LOSS:
									case FORCED:
									case FORMAT:
									case FORWARD_ONLY:
									case FULLSCAN:
									case FULLTEXT:
									case GB:
									case GETDATE:
									case GETUTCDATE:
									case GLOBAL:
									case GO:
									case GROUP_MAX_REQUESTS:
									case GROUPING:
									case GROUPING_ID:
									case HADR:
									case HASH:
									case HEALTH_CHECK_TIMEOUT:
									case HIGH:
									case HONOR_BROKER_PRIORITY:
									case HOURS:
									case IDENTITY_VALUE:
									case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
									case IMMEDIATE:
									case IMPERSONATE:
									case IMPORTANCE:
									case INCREMENTAL:
									case INITIATOR:
									case INPUT:
									case INSENSITIVE:
									case INSERTED:
									case INT:
									case IP:
									case ISOLATION:
									case KB:
									case KEEP:
									case KEEPFIXED:
									case KEY_SOURCE:
									case KEYS:
									case KEYSET:
									case LAG:
									case LAST:
									case LAST_VALUE:
									case LEAD:
									case LEVEL:
									case LIST:
									case LISTENER:
									case LISTENER_URL:
									case LOB_COMPACTION:
									case LOCAL:
									case LOCATION:
									case LOCK:
									case LOCK_ESCALATION:
									case LOGIN:
									case LOOP:
									case LOW:
									case MANUAL:
									case MARK:
									case MATERIALIZED:
									case MAX:
									case MAX_CPU_PERCENT:
									case MAX_DOP:
									case MAX_FILES:
									case MAX_IOPS_PER_VOLUME:
									case MAX_MEMORY_PERCENT:
									case MAX_PROCESSES:
									case MAX_QUEUE_READERS:
									case MAX_ROLLOVER_FILES:
									case MAXDOP:
									case MAXRECURSION:
									case MAXSIZE:
									case MB:
									case MEDIUM:
									case MEMORY_OPTIMIZED_DATA:
									case MESSAGE:
									case MIN:
									case MIN_ACTIVE_ROWVERSION:
									case MIN_CPU_PERCENT:
									case MIN_IOPS_PER_VOLUME:
									case MIN_MEMORY_PERCENT:
									case MINUTES:
									case MIRROR_ADDRESS:
									case MIXED_PAGE_ALLOCATION:
									case MODE:
									case MODIFY:
									case MOVE:
									case MULTI_USER:
									case NAME:
									case NESTED_TRIGGERS:
									case NEW_ACCOUNT:
									case NEW_BROKER:
									case NEW_PASSWORD:
									case NEXT:
									case NO:
									case NO_TRUNCATE:
									case NO_WAIT:
									case NOCOUNT:
									case NODES:
									case NOEXPAND:
									case NON_TRANSACTED_ACCESS:
									case NORECOMPUTE:
									case NORECOVERY:
									case NOWAIT:
									case NTILE:
									case NUMANODE:
									case NUMBER:
									case NUMERIC_ROUNDABORT:
									case OBJECT:
									case OFFLINE:
									case OFFSET:
									case OLD_ACCOUNT:
									case ONLINE:
									case ONLY:
									case OPEN_EXISTING:
									case OPTIMISTIC:
									case OPTIMIZE:
									case OUT:
									case OUTPUT:
									case OWNER:
									case PAGE_VERIFY:
									case PARAMETERIZATION:
									case PARTITION:
									case PARTITIONS:
									case PARTNER:
									case PATH:
									case POISON_MESSAGE_HANDLING:
									case POOL:
									case PORT:
									case PRECEDING:
									case PRIMARY_ROLE:
									case PRIOR:
									case PRIORITY:
									case PRIORITY_LEVEL:
									case PRIVATE:
									case PRIVATE_KEY:
									case PRIVILEGES:
									case PROCEDURE_NAME:
									case PROPERTY:
									case PROVIDER:
									case PROVIDER_KEY_NAME:
									case QUERY:
									case QUEUE:
									case QUEUE_DELAY:
									case QUOTED_IDENTIFIER:
									case RANGE:
									case RANK:
									case RC2:
									case RC4:
									case RC4_128:
									case READ_COMMITTED_SNAPSHOT:
									case READ_ONLY:
									case READ_ONLY_ROUTING_LIST:
									case READ_WRITE:
									case READONLY:
									case REBUILD:
									case RECEIVE:
									case RECOMPILE:
									case RECOVERY:
									case RECURSIVE_TRIGGERS:
									case RELATIVE:
									case REMOTE:
									case REMOTE_SERVICE_NAME:
									case REMOVE:
									case REORGANIZE:
									case REPEATABLE:
									case REPLICA:
									case REQUEST_MAX_CPU_TIME_SEC:
									case REQUEST_MAX_MEMORY_GRANT_PERCENT:
									case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
									case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
									case RESERVE_DISK_SPACE:
									case RESOURCE:
									case RESOURCE_MANAGER_LOCATION:
									case RESTRICTED_USER:
									case RETENTION:
									case ROBUST:
									case ROOT:
									case ROUTE:
									case ROW:
									case ROW_NUMBER:
									case ROWGUID:
									case ROWS:
									case SAMPLE:
									case SCHEMABINDING:
									case SCOPED:
									case SCROLL:
									case SCROLL_LOCKS:
									case SEARCH:
									case SECONDARY:
									case SECONDARY_ONLY:
									case SECONDARY_ROLE:
									case SECONDS:
									case SECRET:
									case SECURITY_LOG:
									case SEEDING_MODE:
									case SELF:
									case SEMI_SENSITIVE:
									case SEND:
									case SENT:
									case SERIALIZABLE:
									case SESSION_TIMEOUT:
									case SETERROR:
									case SHARE:
									case SHOWPLAN:
									case SIGNATURE:
									case SIMPLE:
									case SINGLE_USER:
									case SIZE:
									case SMALLINT:
									case SNAPSHOT:
									case SPATIAL_WINDOW_MAX_CELLS:
									case STANDBY:
									case START_DATE:
									case STATIC:
									case STATS_STREAM:
									case STATUS:
									case STDEV:
									case STDEVP:
									case STOPLIST:
									case STUFF:
									case SUBJECT:
									case SUM:
									case SUSPEND:
									case SYMMETRIC:
									case SYNCHRONOUS_COMMIT:
									case SYNONYM:
									case TAKE:
									case TARGET_RECOVERY_TIME:
									case TB:
									case TEXTIMAGE_ON:
									case THROW:
									case TIES:
									case TIME:
									case TIMEOUT:
									case TIMER:
									case TINYINT:
									case TORN_PAGE_DETECTION:
									case TRANSFORM_NOISE_WORDS:
									case TRIPLE_DES:
									case TRIPLE_DES_3KEY:
									case TRUSTWORTHY:
									case TRY:
									case TSQL:
									case TWO_DIGIT_YEAR_CUTOFF:
									case TYPE:
									case TYPE_WARNING:
									case UNBOUNDED:
									case UNCOMMITTED:
									case UNKNOWN:
									case UNLIMITED:
									case USING:
									case VALID_XML:
									case VALIDATION:
									case VALUE:
									case VAR:
									case VARP:
									case VIEW_METADATA:
									case VIEWS:
									case WAIT:
									case WELL_FORMED_XML:
									case WORK:
									case WORKLOAD:
									case XML:
									case XMLNAMESPACES:
									case DOUBLE_QUOTE_ID:
									case SQUARE_BRACKET_ID:
									case ID:
										{
										State = 5245; _localctx.language_name_or_alias = id();
										}
										break;
									default:
										throw new NoViableAltException(this);
									}
									}
									break;
								case 3:
									{
									State = 5249;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 5248; Match(COMMA);
										}
									}

									State = 5251; Match(SID);
									State = 5252; Match(EQUAL);
									State = 5253; Match(BINARY);
									}
									break;
								case 4:
									{
									State = 5255;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
									if (_la==COMMA) {
										{
										State = 5254; Match(COMMA);
										}
									}

									State = 5257; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									State = 5258; Match(EQUAL);
									State = 5259;
									_la = TokenStream.LA(1);
									if ( !(_la==OFF || _la==ON) ) {
									ErrorHandler.RecoverInline(this);
									}
									else {
										ErrorHandler.ReportMatch(this);
									    Consume();
									}
									}
									break;
								}
								} 
							}
							State = 5264;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,622,Context);
						}
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 5267; _localctx.user_name = id();
					State = 5268; Match(WITH);
					State = 5269; Match(PASSWORD);
					State = 5270; Match(EQUAL);
					State = 5271; _localctx.password = Match(STRING);
					State = 5302;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,630,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 5300;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,629,Context) ) {
							case 1:
								{
								State = 5273;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5272; Match(COMMA);
									}
								}

								State = 5275; Match(DEFAULT_SCHEMA);
								State = 5276; Match(EQUAL);
								State = 5277; _localctx.schema_name = id();
								}
								break;
							case 2:
								{
								State = 5279;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5278; Match(COMMA);
									}
								}

								State = 5281; Match(DEFAULT_LANGUAGE);
								State = 5282; Match(EQUAL);
								State = 5286;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case NONE:
									{
									State = 5283; Match(NONE);
									}
									break;
								case DECIMAL:
									{
									State = 5284; Match(DECIMAL);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROWCOUNT:
								case SAFETY:
								case SERVER:
								case SID:
								case SOURCE:
								case STATE:
								case START:
								case TARGET:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									State = 5285; _localctx.language_name_or_alias = id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								State = 5289;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5288; Match(COMMA);
									}
								}

								State = 5291; Match(SID);
								State = 5292; Match(EQUAL);
								State = 5293; Match(BINARY);
								}
								break;
							case 4:
								{
								State = 5295;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5294; Match(COMMA);
									}
								}

								State = 5297; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5298; Match(EQUAL);
								State = 5299;
								_la = TokenStream.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5304;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,630,Context);
					}
					}
					break;
				case 3:
					{
					State = 5305; _localctx.Azure_Active_Directory_principal = id();
					State = 5306; Match(FROM);
					State = 5307; Match(EXTERNAL);
					State = 5308; Match(PROVIDER);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5312; Match(CREATE);
				State = 5313; Match(USER);
				State = 5314; _localctx.user_name = id();
				State = 5341;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,636,Context) ) {
				case 1:
					{
					State = 5315; Match(WITHOUT);
					State = 5316; Match(LOGIN);
					State = 5331;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,635,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 5329;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,634,Context) ) {
							case 1:
								{
								State = 5318;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5317; Match(COMMA);
									}
								}

								State = 5320; Match(DEFAULT_SCHEMA);
								State = 5321; Match(EQUAL);
								State = 5322; _localctx.schema_name = id();
								}
								break;
							case 2:
								{
								State = 5324;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 5323; Match(COMMA);
									}
								}

								State = 5326; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								State = 5327; Match(EQUAL);
								State = 5328;
								_la = TokenStream.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							}
							} 
						}
						State = 5333;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,635,Context);
					}
					}
					break;
				case 2:
					{
					State = 5334;
					_la = TokenStream.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5335; Match(CERTIFICATE);
					State = 5336; _localctx.cert_name = id();
					}
					break;
				case 3:
					{
					State = 5337;
					_la = TokenStream.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5338; Match(ASYMMETRIC);
					State = 5339; Match(KEY);
					State = 5340; _localctx.asym_key_name = id();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5343; Match(CREATE);
				State = 5344; Match(USER);
				State = 5345; _localctx.user_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_user_azure_sql_dwContext : ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext schema_name;
		public IdContext Azure_Active_Directory_principal;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode WITHOUT() { return GetToken(TSqlParser.WITHOUT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode DEFAULT_SCHEMA() { return GetToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user_azure_sql_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_user_azure_sql_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_user_azure_sql_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_user_azure_sql_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(Context, State);
		EnterRule(_localctx, 402, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			State = 5376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,641,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5348; Match(CREATE);
				State = 5349; Match(USER);
				State = 5350; _localctx.user_name = id();
				State = 5356;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
				case FROM:
					{
					State = 5351;
					_la = TokenStream.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5352; Match(LOGIN);
					State = 5353; _localctx.login_name = id();
					}
					break;
				case WITHOUT:
					{
					State = 5354; Match(WITHOUT);
					State = 5355; Match(LOGIN);
					}
					break;
				case Eof:
				case ALTER:
				case BACKUP:
				case BEGIN:
				case BLOCKING_HIERARCHY:
				case BREAK:
				case CALLED:
				case CASE:
				case CLOSE:
				case COALESCE:
				case COMMIT:
				case CONTINUE:
				case CONVERT:
				case CREATE:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DBCC:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DROP:
				case ELSE:
				case END:
				case EVENTDATA:
				case EXECUTE:
				case FETCH:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case GET:
				case GOTO:
				case GRANT:
				case IDENTITY:
				case IF:
				case IIF:
				case INIT:
				case INSERT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case MERGE:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OPEN:
				case OVER:
				case PAGE:
				case PRINT:
				case PUBLIC:
				case R:
				case RAISERROR:
				case RAW:
				case RETURN:
				case RETURNS:
				case REVERT:
				case RIGHT:
				case ROLLBACK:
				case ROWCOUNT:
				case SAFETY:
				case SAVE:
				case SELECT:
				case SERVER:
				case SESSION_USER:
				case SET:
				case SETUSER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case SYSTEM_USER:
				case TARGET:
				case TRUNCATE:
				case UPDATE:
				case USE:
				case WAITFOR:
				case WHILE:
				case WITH:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case SEMI:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					break;
				default:
					break;
				}
				State = 5362;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,639,Context) ) {
				case 1:
					{
					State = 5358; Match(WITH);
					State = 5359; Match(DEFAULT_SCHEMA);
					State = 5360; Match(EQUAL);
					State = 5361; _localctx.schema_name = id();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5364; Match(CREATE);
				State = 5365; Match(USER);
				State = 5366; _localctx.Azure_Active_Directory_principal = id();
				State = 5367; Match(FROM);
				State = 5368; Match(EXTERNAL);
				State = 5369; Match(PROVIDER);
				State = 5374;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,640,Context) ) {
				case 1:
					{
					State = 5370; Match(WITH);
					State = 5371; Match(DEFAULT_SCHEMA);
					State = 5372; Match(EQUAL);
					State = 5373; _localctx.schema_name = id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_azure_sqlContext : ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext schema_name;
		public IdContext loginame;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DEFAULT_SCHEMA() { return GetTokens(TSqlParser.DEFAULT_SCHEMA); }
		public ITerminalNode DEFAULT_SCHEMA(int i) {
			return GetToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public ITerminalNode[] LOGIN() { return GetTokens(TSqlParser.LOGIN); }
		public ITerminalNode LOGIN(int i) {
			return GetToken(TSqlParser.LOGIN, i);
		}
		public ITerminalNode[] ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_azure_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_user_azure_sql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_user_azure_sql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user_azure_sql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_azure_sqlContext alter_user_azure_sql() {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(Context, State);
		EnterRule(_localctx, 404, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5378; Match(ALTER);
			State = 5379; Match(USER);
			State = 5380; _localctx.username = id();
			State = 5381; Match(WITH);
			State = 5406;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5406;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,646,Context) ) {
					case 1:
						{
						State = 5383;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5382; Match(COMMA);
							}
						}

						State = 5385; Match(NAME);
						State = 5386; Match(EQUAL);
						State = 5387; _localctx.newusername = id();
						}
						break;
					case 2:
						{
						State = 5389;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5388; Match(COMMA);
							}
						}

						State = 5391; Match(DEFAULT_SCHEMA);
						State = 5392; Match(EQUAL);
						State = 5393; _localctx.schema_name = id();
						}
						break;
					case 3:
						{
						State = 5395;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5394; Match(COMMA);
							}
						}

						State = 5397; Match(LOGIN);
						State = 5398; Match(EQUAL);
						State = 5399; _localctx.loginame = id();
						}
						break;
					case 4:
						{
						State = 5401;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5400; Match(COMMA);
							}
						}

						State = 5403; Match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						State = 5404; Match(EQUAL);
						State = 5405;
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5408;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,647,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_workload_groupContext : ParserRuleContext {
		public IdContext workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public IdContext workload_group_pool_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_workload_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_workload_groupContext alter_workload_group() {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(Context, State);
		EnterRule(_localctx, 406, RULE_alter_workload_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5410; Match(ALTER);
			State = 5411; Match(WORKLOAD);
			State = 5412; Match(GROUP);
			State = 5415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,648,Context) ) {
			case 1:
				{
				State = 5413; _localctx.workload_group_group_name = id();
				}
				break;
			case 2:
				{
				State = 5414; Match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			State = 5448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,653,Context) ) {
			case 1:
				{
				State = 5417; Match(WITH);
				State = 5418; Match(LR_BRACKET);
				State = 5443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 5443;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,651,Context) ) {
					case 1:
						{
						State = 5419; Match(IMPORTANCE);
						State = 5420; Match(EQUAL);
						State = 5421;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (HIGH - 534)) | (1L << (LOW - 534)) | (1L << (MEDIUM - 534)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 5423;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5422; Match(COMMA);
							}
						}

						State = 5425; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						State = 5426; Match(EQUAL);
						State = 5427; _localctx.request_max_memory_grant = Match(DECIMAL);
						}
						break;
					case 3:
						{
						State = 5429;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5428; Match(COMMA);
							}
						}

						State = 5431; Match(REQUEST_MAX_CPU_TIME_SEC);
						State = 5432; Match(EQUAL);
						State = 5433; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
						}
						break;
					case 4:
						{
						State = 5434; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						State = 5435; Match(EQUAL);
						State = 5436; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
						}
						break;
					case 5:
						{
						State = 5437; Match(MAX_DOP);
						State = 5438; Match(EQUAL);
						State = 5439; _localctx.max_dop = Match(DECIMAL);
						}
						break;
					case 6:
						{
						State = 5440; Match(GROUP_MAX_REQUESTS);
						State = 5441; Match(EQUAL);
						State = 5442; _localctx.group_max_requests = Match(DECIMAL);
						}
						break;
					}
					}
					State = 5445;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (GROUP_MAX_REQUESTS - 528)) | (1L << (IMPORTANCE - 528)) | (1L << (MAX_DOP - 528)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 684)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 684)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 684)))) != 0) || _la==COMMA );
				State = 5447; Match(RR_BRACKET);
				}
				break;
			}
			State = 5455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,655,Context) ) {
			case 1:
				{
				State = 5450; Match(USING);
				State = 5453;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,654,Context) ) {
				case 1:
					{
					State = 5451; _localctx.workload_group_pool_name = id();
					}
					break;
				case 2:
					{
					State = 5452; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_workload_groupContext : ParserRuleContext {
		public IdContext workload_group_group_name;
		public IToken request_max_memory_grant;
		public IToken request_max_cpu_time_sec;
		public IToken request_memory_grant_timeout_sec;
		public IToken max_dop;
		public IToken group_max_requests;
		public IdContext workload_group_pool_name;
		public IdContext external_pool_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode[] IMPORTANCE() { return GetTokens(TSqlParser.IMPORTANCE); }
		public ITerminalNode IMPORTANCE(int i) {
			return GetToken(TSqlParser.IMPORTANCE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public ITerminalNode[] REQUEST_MAX_CPU_TIME_SEC() { return GetTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public ITerminalNode[] REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public ITerminalNode[] MAX_DOP() { return GetTokens(TSqlParser.MAX_DOP); }
		public ITerminalNode MAX_DOP(int i) {
			return GetToken(TSqlParser.MAX_DOP, i);
		}
		public ITerminalNode[] GROUP_MAX_REQUESTS() { return GetTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public ITerminalNode GROUP_MAX_REQUESTS(int i) {
			return GetToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public ITerminalNode[] DEFAULT_DOUBLE_QUOTE() { return GetTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public ITerminalNode EXTERNAL() { return GetToken(TSqlParser.EXTERNAL, 0); }
		public ITerminalNode[] LOW() { return GetTokens(TSqlParser.LOW); }
		public ITerminalNode LOW(int i) {
			return GetToken(TSqlParser.LOW, i);
		}
		public ITerminalNode[] MEDIUM() { return GetTokens(TSqlParser.MEDIUM); }
		public ITerminalNode MEDIUM(int i) {
			return GetToken(TSqlParser.MEDIUM, i);
		}
		public ITerminalNode[] HIGH() { return GetTokens(TSqlParser.HIGH); }
		public ITerminalNode HIGH(int i) {
			return GetToken(TSqlParser.HIGH, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_workload_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_workload_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_workload_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_workload_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_workload_groupContext create_workload_group() {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(Context, State);
		EnterRule(_localctx, 408, RULE_create_workload_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5457; Match(CREATE);
			State = 5458; Match(WORKLOAD);
			State = 5459; Match(GROUP);
			State = 5460; _localctx.workload_group_group_name = id();
			State = 5492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,660,Context) ) {
			case 1:
				{
				State = 5461; Match(WITH);
				State = 5462; Match(LR_BRACKET);
				State = 5487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 5487;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,658,Context) ) {
					case 1:
						{
						State = 5463; Match(IMPORTANCE);
						State = 5464; Match(EQUAL);
						State = 5465;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (HIGH - 534)) | (1L << (LOW - 534)) | (1L << (MEDIUM - 534)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 5467;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5466; Match(COMMA);
							}
						}

						State = 5469; Match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						State = 5470; Match(EQUAL);
						State = 5471; _localctx.request_max_memory_grant = Match(DECIMAL);
						}
						break;
					case 3:
						{
						State = 5473;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5472; Match(COMMA);
							}
						}

						State = 5475; Match(REQUEST_MAX_CPU_TIME_SEC);
						State = 5476; Match(EQUAL);
						State = 5477; _localctx.request_max_cpu_time_sec = Match(DECIMAL);
						}
						break;
					case 4:
						{
						State = 5478; Match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						State = 5479; Match(EQUAL);
						State = 5480; _localctx.request_memory_grant_timeout_sec = Match(DECIMAL);
						}
						break;
					case 5:
						{
						State = 5481; Match(MAX_DOP);
						State = 5482; Match(EQUAL);
						State = 5483; _localctx.max_dop = Match(DECIMAL);
						}
						break;
					case 6:
						{
						State = 5484; Match(GROUP_MAX_REQUESTS);
						State = 5485; Match(EQUAL);
						State = 5486; _localctx.group_max_requests = Match(DECIMAL);
						}
						break;
					}
					}
					State = 5489;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (GROUP_MAX_REQUESTS - 528)) | (1L << (IMPORTANCE - 528)) | (1L << (MAX_DOP - 528)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 684)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 684)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 684)))) != 0) || _la==COMMA );
				State = 5491; Match(RR_BRACKET);
				}
				break;
			}
			State = 5507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,664,Context) ) {
			case 1:
				{
				State = 5494; Match(USING);
				State = 5497;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,661,Context) ) {
				case 1:
					{
					State = 5495; _localctx.workload_group_pool_name = id();
					}
					break;
				case 2:
					{
					State = 5496; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				State = 5505;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,663,Context) ) {
				case 1:
					{
					State = 5500;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 5499; Match(COMMA);
						}
					}

					State = 5502; Match(EXTERNAL);
					State = 5503; _localctx.external_pool_name = id();
					}
					break;
				case 2:
					{
					State = 5504; Match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_xml_schema_collectionContext : ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_xml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_xml_schema_collection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_xml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_xml_schema_collectionContext create_xml_schema_collection() {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(Context, State);
		EnterRule(_localctx, 410, RULE_create_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5509; Match(CREATE);
			State = 5510; Match(XML);
			State = 5511; Match(SCHEMA);
			State = 5512; Match(COLLECTION);
			State = 5516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,665,Context) ) {
			case 1:
				{
				State = 5513; _localctx.relational_schema = id();
				State = 5514; Match(DOT);
				}
				break;
			}
			State = 5518; _localctx.sql_identifier = id();
			State = 5519; Match(AS);
			State = 5523;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 5520; Match(STRING);
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 5521; id();
				}
				break;
			case LOCAL_ID:
				{
				State = 5522; Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_queueContext : ParserRuleContext {
		public IdContext queue_name;
		public IdContext filegroup;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_queue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_queueContext create_queue() {
		Create_queueContext _localctx = new Create_queueContext(Context, State);
		EnterRule(_localctx, 412, RULE_create_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5525; Match(CREATE);
			State = 5526; Match(QUEUE);
			State = 5529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,667,Context) ) {
			case 1:
				{
				State = 5527; full_table_name();
				}
				break;
			case 2:
				{
				State = 5528; _localctx.queue_name = id();
				}
				break;
			}
			State = 5532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,668,Context) ) {
			case 1:
				{
				State = 5531; queue_settings();
				}
				break;
			}
			State = 5537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,669,Context) ) {
			case 1:
				{
				State = 5534; Match(ON);
				State = 5535; _localctx.filegroup = id();
				}
				break;
			case 2:
				{
				State = 5536; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_settingsContext : ParserRuleContext {
		public IToken max_readers;
		public IToken user_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] STATUS() { return GetTokens(TSqlParser.STATUS); }
		public ITerminalNode STATUS(int i) {
			return GetToken(TSqlParser.STATUS, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode[] OFF() { return GetTokens(TSqlParser.OFF); }
		public ITerminalNode OFF(int i) {
			return GetToken(TSqlParser.OFF, i);
		}
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_settings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_settings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_settings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_settings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_settingsContext queue_settings() {
		Queue_settingsContext _localctx = new Queue_settingsContext(Context, State);
		EnterRule(_localctx, 414, RULE_queue_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5539; Match(WITH);
			State = 5546;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,671,Context) ) {
			case 1:
				{
				State = 5540; Match(STATUS);
				State = 5541; Match(EQUAL);
				State = 5542;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5543; Match(COMMA);
					}
				}

				}
				break;
			}
			State = 5554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,673,Context) ) {
			case 1:
				{
				State = 5548; Match(RETENTION);
				State = 5549; Match(EQUAL);
				State = 5550;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5551; Match(COMMA);
					}
				}

				}
				break;
			}
			State = 5601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,685,Context) ) {
			case 1:
				{
				State = 5556; Match(ACTIVATION);
				State = 5557; Match(LR_BRACKET);
				State = 5595;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXECUTE:
				case MAX_QUEUE_READERS:
				case PROCEDURE_NAME:
				case STATUS:
				case RR_BRACKET:
					{
					{
					State = 5564;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STATUS) {
						{
						State = 5558; Match(STATUS);
						State = 5559; Match(EQUAL);
						State = 5560;
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5562;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5561; Match(COMMA);
							}
						}

						}
					}

					State = 5572;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PROCEDURE_NAME) {
						{
						State = 5566; Match(PROCEDURE_NAME);
						State = 5567; Match(EQUAL);
						State = 5568; func_proc_name_database_schema();
						State = 5570;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5569; Match(COMMA);
							}
						}

						}
					}

					State = 5580;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MAX_QUEUE_READERS) {
						{
						State = 5574; Match(MAX_QUEUE_READERS);
						State = 5575; Match(EQUAL);
						State = 5576; _localctx.max_readers = Match(DECIMAL);
						State = 5578;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5577; Match(COMMA);
							}
						}

						}
					}

					State = 5592;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==EXECUTE) {
						{
						State = 5582; Match(EXECUTE);
						State = 5583; Match(AS);
						State = 5587;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case SELF:
							{
							State = 5584; Match(SELF);
							}
							break;
						case STRING:
							{
							State = 5585; _localctx.user_name = Match(STRING);
							}
							break;
						case OWNER:
							{
							State = 5586; Match(OWNER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 5590;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5589; Match(COMMA);
							}
						}

						}
					}

					}
					}
					break;
				case DROP:
					{
					State = 5594; Match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5597; Match(RR_BRACKET);
				State = 5599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5598; Match(COMMA);
					}
				}

				}
				break;
			}
			State = 5610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,686,Context) ) {
			case 1:
				{
				State = 5603; Match(POISON_MESSAGE_HANDLING);
				State = 5604; Match(LR_BRACKET);
				{
				State = 5605; Match(STATUS);
				State = 5606; Match(EQUAL);
				State = 5607;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				State = 5609; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_queueContext : ParserRuleContext {
		public IdContext queue_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Queue_settingsContext queue_settings() {
			return GetRuleContext<Queue_settingsContext>(0);
		}
		public Queue_actionContext queue_action() {
			return GetRuleContext<Queue_actionContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_queue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_queue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_queue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_queue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_queueContext alter_queue() {
		Alter_queueContext _localctx = new Alter_queueContext(Context, State);
		EnterRule(_localctx, 416, RULE_alter_queue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5612; Match(ALTER);
			State = 5613; Match(QUEUE);
			State = 5616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,687,Context) ) {
			case 1:
				{
				State = 5614; full_table_name();
				}
				break;
			case 2:
				{
				State = 5615; _localctx.queue_name = id();
				}
				break;
			}
			State = 5620;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 5618; queue_settings();
				}
				break;
			case MOVE:
			case REBUILD:
			case REORGANIZE:
				{
				State = 5619; queue_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_actionContext : ParserRuleContext {
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return GetRuleContext<Queue_rebuild_optionsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_action(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_action(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_action(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_actionContext queue_action() {
		Queue_actionContext _localctx = new Queue_actionContext(Context, State);
		EnterRule(_localctx, 418, RULE_queue_action);
		int _la;
		try {
			State = 5643;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REBUILD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5622; Match(REBUILD);
				State = 5628;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,689,Context) ) {
				case 1:
					{
					State = 5623; Match(WITH);
					State = 5624; Match(LR_BRACKET);
					State = 5625; queue_rebuild_options();
					State = 5626; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5630; Match(REORGANIZE);
				State = 5635;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,690,Context) ) {
				case 1:
					{
					State = 5631; Match(WITH);
					State = 5632; Match(LOB_COMPACTION);
					State = 5633; Match(EQUAL);
					State = 5634;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5637; Match(MOVE);
				State = 5638; Match(TO);
				State = 5641;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 5639; id();
					}
					break;
				case DEFAULT:
					{
					State = 5640; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_rebuild_optionsContext : ParserRuleContext {
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_rebuild_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_rebuild_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_rebuild_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_rebuild_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_rebuild_optionsContext queue_rebuild_options() {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(Context, State);
		EnterRule(_localctx, 420, RULE_queue_rebuild_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5645; Match(MAXDOP);
			State = 5646; Match(EQUAL);
			State = 5647; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_contractContext : ParserRuleContext {
		public IdContext owner_name;
		public IdContext message_type_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode[] SENT() { return GetTokens(TSqlParser.SENT); }
		public ITerminalNode SENT(int i) {
			return GetToken(TSqlParser.SENT, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] INITIATOR() { return GetTokens(TSqlParser.INITIATOR); }
		public ITerminalNode INITIATOR(int i) {
			return GetToken(TSqlParser.INITIATOR, i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSqlParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSqlParser.TARGET, i);
		}
		public ITerminalNode[] ANY() { return GetTokens(TSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(TSqlParser.ANY, i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_contract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_contract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_contract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_contract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_contractContext create_contract() {
		Create_contractContext _localctx = new Create_contractContext(Context, State);
		EnterRule(_localctx, 422, RULE_create_contract);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5649; Match(CREATE);
			State = 5650; Match(CONTRACT);
			State = 5651; contract_name();
			State = 5654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5652; Match(AUTHORIZATION);
				State = 5653; _localctx.owner_name = id();
				}
			}

			State = 5656; Match(LR_BRACKET);
			State = 5667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5659;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 5657; _localctx.message_type_name = id();
					}
					break;
				case DEFAULT:
					{
					State = 5658; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5661; Match(SENT);
				State = 5662; Match(BY);
				State = 5663;
				_la = TokenStream.LA(1);
				if ( !(_la==ANY || _la==TARGET || _la==INITIATOR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5664; Match(COMMA);
					}
				}

				}
				}
				State = 5669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (DEFAULT - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)))) != 0) );
			State = 5671; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversation_statementContext : ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return GetRuleContext<Begin_conversation_timerContext>(0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return GetRuleContext<Begin_conversation_dialogContext>(0);
		}
		public End_conversationContext end_conversation() {
			return GetRuleContext<End_conversationContext>(0);
		}
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public Send_conversationContext send_conversation() {
			return GetRuleContext<Send_conversationContext>(0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return GetRuleContext<Waitfor_conversationContext>(0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversation_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConversation_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConversation_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversation_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conversation_statementContext conversation_statement() {
		Conversation_statementContext _localctx = new Conversation_statementContext(Context, State);
		EnterRule(_localctx, 424, RULE_conversation_statement);
		try {
			State = 5679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,697,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5673; begin_conversation_timer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5674; begin_conversation_dialog();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5675; end_conversation();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5676; get_conversation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5677; send_conversation();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5678; waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_statementContext : ParserRuleContext {
		public IdContext message_type_name;
		public IdContext owner_name;
		public IdContext schema_collection_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SCHEMA() { return GetToken(TSqlParser.SCHEMA, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMessage_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMessage_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Message_statementContext message_statement() {
		Message_statementContext _localctx = new Message_statementContext(Context, State);
		EnterRule(_localctx, 426, RULE_message_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5681; Match(CREATE);
			State = 5682; Match(MESSAGE);
			State = 5683; Match(TYPE);
			State = 5684; _localctx.message_type_name = id();
			State = 5687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 5685; Match(AUTHORIZATION);
				State = 5686; _localctx.owner_name = id();
				}
			}

			{
			State = 5689; Match(VALIDATION);
			State = 5690; Match(EQUAL);
			State = 5699;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NONE:
				{
				State = 5691; Match(NONE);
				}
				break;
			case EMPTY:
				{
				State = 5692; Match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				State = 5693; Match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				State = 5694; Match(VALID_XML);
				State = 5695; Match(WITH);
				State = 5696; Match(SCHEMA);
				State = 5697; Match(COLLECTION);
				State = 5698; _localctx.schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_statementContext : ParserRuleContext {
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public ITerminalNode[] WHEN() { return GetTokens(TSqlParser.WHEN); }
		public ITerminalNode WHEN(int i) {
			return GetToken(TSqlParser.WHEN, i);
		}
		public ITerminalNode[] MATCHED() { return GetTokens(TSqlParser.MATCHED); }
		public ITerminalNode MATCHED(int i) {
			return GetToken(TSqlParser.MATCHED, i);
		}
		public ITerminalNode[] THEN() { return GetTokens(TSqlParser.THEN); }
		public ITerminalNode THEN(int i) {
			return GetToken(TSqlParser.THEN, i);
		}
		public Merge_matchedContext[] merge_matched() {
			return GetRuleContexts<Merge_matchedContext>();
		}
		public Merge_matchedContext merge_matched(int i) {
			return GetRuleContext<Merge_matchedContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return GetRuleContext<Merge_not_matchedContext>(0);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] SOURCE() { return GetTokens(TSqlParser.SOURCE); }
		public ITerminalNode SOURCE(int i) {
			return GetToken(TSqlParser.SOURCE, i);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_statementContext merge_statement() {
		Merge_statementContext _localctx = new Merge_statementContext(Context, State);
		EnterRule(_localctx, 428, RULE_merge_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5701; with_expression();
				}
			}

			State = 5704; Match(MERGE);
			State = 5712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 5705; Match(TOP);
				State = 5706; Match(LR_BRACKET);
				State = 5707; expression(0);
				State = 5708; Match(RR_BRACKET);
				State = 5710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 5709; Match(PERCENT);
					}
				}

				}
			}

			State = 5715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 5714; Match(INTO);
				}
			}

			State = 5717; ddl_object();
			State = 5719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5718; insert_with_table_hints();
				}
			}

			State = 5722;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,705,Context) ) {
			case 1:
				{
				State = 5721; as_table_alias();
				}
				break;
			}
			State = 5724; Match(USING);
			State = 5725; table_sources();
			State = 5726; Match(ON);
			State = 5727; search_condition();
			State = 5738;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,707,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5728; Match(WHEN);
					State = 5729; Match(MATCHED);
					State = 5732;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND) {
						{
						State = 5730; Match(AND);
						State = 5731; search_condition();
						}
					}

					State = 5734; Match(THEN);
					State = 5735; merge_matched();
					}
					} 
				}
				State = 5740;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,707,Context);
			}
			State = 5754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,710,Context) ) {
			case 1:
				{
				State = 5741; Match(WHEN);
				State = 5742; Match(NOT);
				State = 5743; Match(MATCHED);
				State = 5746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY) {
					{
					State = 5744; Match(BY);
					State = 5745; Match(TARGET);
					}
				}

				State = 5750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 5748; Match(AND);
					State = 5749; search_condition();
					}
				}

				State = 5752; Match(THEN);
				State = 5753; merge_not_matched();
				}
				break;
			}
			State = 5769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHEN) {
				{
				{
				State = 5756; Match(WHEN);
				State = 5757; Match(NOT);
				State = 5758; Match(MATCHED);
				State = 5759; Match(BY);
				State = 5760; Match(SOURCE);
				State = 5763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 5761; Match(AND);
					State = 5762; search_condition();
					}
				}

				State = 5765; Match(THEN);
				State = 5766; merge_matched();
				}
				}
				State = 5771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTPUT) {
				{
				State = 5772; output_clause();
				}
			}

			State = 5776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 5775; option_clause();
				}
			}

			State = 5778; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_matchedContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_matched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_matched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_matchedContext merge_matched() {
		Merge_matchedContext _localctx = new Merge_matchedContext(Context, State);
		EnterRule(_localctx, 430, RULE_merge_matched);
		int _la;
		try {
			State = 5791;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5780; Match(UPDATE);
				State = 5781; Match(SET);
				State = 5782; update_elem();
				State = 5787;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5783; Match(COMMA);
					State = 5784; update_elem();
					}
					}
					State = 5789;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5790; Match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_not_matchedContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_not_matched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_not_matched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_not_matched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_not_matched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_not_matchedContext merge_not_matched() {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(Context, State);
		EnterRule(_localctx, 432, RULE_merge_not_matched);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5793; Match(INSERT);
			State = 5798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 5794; Match(LR_BRACKET);
				State = 5795; column_name_list();
				State = 5796; Match(RR_BRACKET);
				}
			}

			State = 5803;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				{
				State = 5800; table_value_constructor();
				}
				break;
			case DEFAULT:
				{
				State = 5801; Match(DEFAULT);
				State = 5802; Match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return GetRuleContext<Delete_statement_fromContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] FROM() { return GetTokens(TSqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(TSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(Context, State);
		EnterRule(_localctx, 434, RULE_delete_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5805; with_expression();
				}
			}

			State = 5808; Match(DELETE);
			State = 5818;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,721,Context) ) {
			case 1:
				{
				State = 5809; Match(TOP);
				State = 5810; Match(LR_BRACKET);
				State = 5811; expression(0);
				State = 5812; Match(RR_BRACKET);
				State = 5814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 5813; Match(PERCENT);
					}
				}

				}
				break;
			case 2:
				{
				State = 5816; Match(TOP);
				State = 5817; Match(DECIMAL);
				}
				break;
			}
			State = 5821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 5820; Match(FROM);
				}
			}

			State = 5823; delete_statement_from();
			State = 5825;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,723,Context) ) {
			case 1:
				{
				State = 5824; insert_with_table_hints();
				}
				break;
			}
			State = 5828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,724,Context) ) {
			case 1:
				{
				State = 5827; output_clause();
				}
				break;
			}
			State = 5832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 5830; Match(FROM);
				State = 5831; table_sources();
				}
			}

			State = 5847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 5834; Match(WHERE);
				State = 5845;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 5835; search_condition();
					}
					break;
				case CURRENT:
					{
					State = 5836; Match(CURRENT);
					State = 5837; Match(OF);
					State = 5843;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,727,Context) ) {
					case 1:
						{
						State = 5839;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,726,Context) ) {
						case 1:
							{
							State = 5838; Match(GLOBAL);
							}
							break;
						}
						State = 5841; cursor_name();
						}
						break;
					case 2:
						{
						State = 5842; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 5850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 5849; for_clause();
				}
			}

			State = 5853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 5852; option_clause();
				}
			}

			State = 5856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,732,Context) ) {
			case 1:
				{
				State = 5855; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statement_fromContext : ParserRuleContext {
		public IToken table_var;
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement_from; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement_from(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement_from(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement_from(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statement_fromContext delete_statement_from() {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(Context, State);
		EnterRule(_localctx, 436, RULE_delete_statement_from);
		try {
			State = 5862;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,733,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5858; ddl_object();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5859; table_alias();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5860; rowset_function_limited();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5861; _localctx.table_var = Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return GetRuleContext<Insert_statement_valueContext>(0);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 438, RULE_insert_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5864; with_expression();
				}
			}

			State = 5867; Match(INSERT);
			State = 5875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 5868; Match(TOP);
				State = 5869; Match(LR_BRACKET);
				State = 5870; expression(0);
				State = 5871; Match(RR_BRACKET);
				State = 5873;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 5872; Match(PERCENT);
					}
				}

				}
			}

			State = 5878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 5877; Match(INTO);
				}
			}

			State = 5882;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				State = 5880; ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 5881; rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,739,Context) ) {
			case 1:
				{
				State = 5884; insert_with_table_hints();
				}
				break;
			}
			State = 5891;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,740,Context) ) {
			case 1:
				{
				State = 5887; Match(LR_BRACKET);
				State = 5888; column_name_list();
				State = 5889; Match(RR_BRACKET);
				}
				break;
			}
			State = 5894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTPUT) {
				{
				State = 5893; output_clause();
				}
			}

			State = 5896; insert_statement_value();
			State = 5898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 5897; for_clause();
				}
			}

			State = 5901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 5900; option_clause();
				}
			}

			State = 5904;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,744,Context) ) {
			case 1:
				{
				State = 5903; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statement_valueContext : ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statement_valueContext insert_statement_value() {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(Context, State);
		EnterRule(_localctx, 440, RULE_insert_statement_value);
		try {
			State = 5911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,745,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5906; table_value_constructor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5907; derived_table();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5908; execute_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5909; Match(DEFAULT);
				State = 5910; Match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Receive_statementContext : ParserRuleContext {
		public IdContext table_variable;
		public Search_conditionContext where;
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receive_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterReceive_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitReceive_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceive_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Receive_statementContext receive_statement() {
		Receive_statementContext _localctx = new Receive_statementContext(Context, State);
		EnterRule(_localctx, 442, RULE_receive_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 5913; Match(LR_BRACKET);
				}
			}

			State = 5916; Match(RECEIVE);
			State = 5921;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 5917; Match(ALL);
				}
				break;
			case DISTINCT:
				{
				State = 5918; Match(DISTINCT);
				}
				break;
			case TOP:
				{
				State = 5919; top_clause();
				}
				break;
			case STAR:
				{
				State = 5920; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOCAL_ID) {
				{
				{
				State = 5923; Match(LOCAL_ID);
				State = 5924; Match(EQUAL);
				State = 5925; expression(0);
				State = 5927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5926; Match(COMMA);
					}
				}

				}
				}
				State = 5933;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5934; Match(FROM);
			State = 5935; full_table_name();
			State = 5941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 5936; Match(INTO);
				State = 5937; _localctx.table_variable = id();
				{
				State = 5938; Match(WHERE);
				State = 5939; _localctx.where = search_condition();
				}
				}
			}

			State = 5944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RR_BRACKET) {
				{
				State = 5943; Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 444, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5946; with_expression();
				}
			}

			State = 5949; query_expression();
			State = 5951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,753,Context) ) {
			case 1:
				{
				State = 5950; order_by_clause();
				}
				break;
			}
			State = 5954;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,754,Context) ) {
			case 1:
				{
				State = 5953; for_clause();
				}
				break;
			}
			State = 5957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,755,Context) ) {
			case 1:
				{
				State = 5956; option_clause();
				}
				break;
			}
			State = 5960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,756,Context) ) {
			case 1:
				{
				State = 5959; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(Context, State);
		EnterRule(_localctx, 446, RULE_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5964;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				{
				State = 5962; Match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				State = 5963; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Search_condition_listContext search_condition_list() {
			return GetRuleContext<Search_condition_listContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(Context, State);
		EnterRule(_localctx, 448, RULE_update_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5966; with_expression();
				}
			}

			State = 5969; Match(UPDATE);
			State = 5977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 5970; Match(TOP);
				State = 5971; Match(LR_BRACKET);
				State = 5972; expression(0);
				State = 5973; Match(RR_BRACKET);
				State = 5975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 5974; Match(PERCENT);
					}
				}

				}
			}

			State = 5981;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				State = 5979; ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 5980; rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				State = 5983; with_table_hints();
				}
			}

			State = 5986; Match(SET);
			State = 5987; update_elem();
			State = 5992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5988; Match(COMMA);
				State = 5989; update_elem();
				}
				}
				State = 5994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,764,Context) ) {
			case 1:
				{
				State = 5995; output_clause();
				}
				break;
			}
			State = 6000;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 5998; Match(FROM);
				State = 5999; table_sources();
				}
			}

			State = 6015;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 6002; Match(WHERE);
				State = 6013;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 6003; search_condition_list();
					}
					break;
				case CURRENT:
					{
					State = 6004; Match(CURRENT);
					State = 6005; Match(OF);
					State = 6011;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,767,Context) ) {
					case 1:
						{
						State = 6007;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,766,Context) ) {
						case 1:
							{
							State = 6006; Match(GLOBAL);
							}
							break;
						}
						State = 6009; cursor_name();
						}
						break;
					case 2:
						{
						State = 6010; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 6018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 6017; for_clause();
				}
			}

			State = 6021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 6020; option_clause();
				}
			}

			State = 6024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,772,Context) ) {
			case 1:
				{
				State = 6023; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_clauseContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public Output_dml_list_elemContext[] output_dml_list_elem() {
			return GetRuleContexts<Output_dml_list_elemContext>();
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return GetRuleContext<Output_dml_list_elemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Output_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_clauseContext output_clause() {
		Output_clauseContext _localctx = new Output_clauseContext(Context, State);
		EnterRule(_localctx, 450, RULE_output_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6026; Match(OUTPUT);
			State = 6027; output_dml_list_elem();
			State = 6032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6028; Match(COMMA);
				State = 6029; output_dml_list_elem();
				}
				}
				State = 6034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6046;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 6035; Match(INTO);
				State = 6038;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LOCAL_ID:
					{
					State = 6036; Match(LOCAL_ID);
					}
					break;
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 6037; table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6044;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,775,Context) ) {
				case 1:
					{
					State = 6040; Match(LR_BRACKET);
					State = 6041; column_name_list();
					State = 6042; Match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_dml_list_elemContext : ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return GetRuleContext<Output_column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_dml_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_dml_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_dml_list_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_dml_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_dml_list_elemContext output_dml_list_elem() {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(Context, State);
		EnterRule(_localctx, 452, RULE_output_dml_list_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,777,Context) ) {
			case 1:
				{
				State = 6048; output_column_name();
				}
				break;
			case 2:
				{
				State = 6049; expression(0);
				}
				break;
			}
			State = 6053;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,778,Context) ) {
			case 1:
				{
				State = 6052; as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_column_nameContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DOLLAR_ACTION() { return GetToken(TSqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOutput_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOutput_column_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_column_nameContext output_column_name() {
		Output_column_nameContext _localctx = new Output_column_nameContext(Context, State);
		EnterRule(_localctx, 454, RULE_output_column_name);
		try {
			State = 6066;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6058;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,779,Context) ) {
				case 1:
					{
					State = 6055; Match(DELETED);
					}
					break;
				case 2:
					{
					State = 6056; Match(INSERTED);
					}
					break;
				case 3:
					{
					State = 6057; table_name();
					}
					break;
				}
				State = 6060; Match(DOT);
				State = 6063;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 6061; Match(STAR);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 6062; id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOLLAR_ACTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6065; Match(DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_databaseContext : ParserRuleContext {
		public IdContext database;
		public IdContext collation_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Database_file_specContext[] database_file_spec() {
			return GetRuleContexts<Database_file_specContext>();
		}
		public Database_file_specContext database_file_spec(int i) {
			return GetRuleContext<Database_file_specContext>(i);
		}
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Create_database_optionContext[] create_database_option() {
			return GetRuleContexts<Create_database_optionContext>();
		}
		public Create_database_optionContext create_database_option(int i) {
			return GetRuleContext<Create_database_optionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_databaseContext create_database() {
		Create_databaseContext _localctx = new Create_databaseContext(Context, State);
		EnterRule(_localctx, 456, RULE_create_database);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6068; Match(CREATE);
			State = 6069; Match(DATABASE);
			{
			State = 6070; _localctx.database = id();
			}
			State = 6074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINMENT) {
				{
				State = 6071; Match(CONTAINMENT);
				State = 6072; Match(EQUAL);
				State = 6073;
				_la = TokenStream.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 6076; Match(ON);
				State = 6078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY) {
					{
					State = 6077; Match(PRIMARY);
					}
				}

				State = 6080; database_file_spec();
				State = 6085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6081; Match(COMMA);
					State = 6082; database_file_spec();
					}
					}
					State = 6087;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOG) {
				{
				State = 6090; Match(LOG);
				State = 6091; Match(ON);
				State = 6092; database_file_spec();
				State = 6097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6093; Match(COMMA);
					State = 6094; database_file_spec();
					}
					}
					State = 6099;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 6102; Match(COLLATE);
				State = 6103; _localctx.collation_name = id();
				}
			}

			State = 6115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,790,Context) ) {
			case 1:
				{
				State = 6106; Match(WITH);
				State = 6107; create_database_option();
				State = 6112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6108; Match(COMMA);
					State = 6109; create_database_option();
					}
					}
					State = 6114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public Search_conditionContext where;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public ITerminalNode INCLUDE() { return GetToken(TSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(Context, State);
		EnterRule(_localctx, 458, RULE_create_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6117; Match(CREATE);
			State = 6119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 6118; Match(UNIQUE);
				}
			}

			State = 6122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				State = 6121; clustered();
				}
			}

			State = 6124; Match(INDEX);
			State = 6125; id();
			State = 6126; Match(ON);
			State = 6127; table_name_with_hint();
			State = 6128; Match(LR_BRACKET);
			State = 6129; column_name_list_with_order();
			State = 6130; Match(RR_BRACKET);
			State = 6136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INCLUDE) {
				{
				State = 6131; Match(INCLUDE);
				State = 6132; Match(LR_BRACKET);
				State = 6133; column_name_list();
				State = 6134; Match(RR_BRACKET);
				}
			}

			State = 6140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 6138; Match(WHERE);
				State = 6139; _localctx.where = search_condition();
				}
			}

			State = 6143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,795,Context) ) {
			case 1:
				{
				State = 6142; index_options();
				}
				break;
			}
			State = 6147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 6145; Match(ON);
				State = 6146; id();
				}
			}

			State = 6150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,797,Context) ) {
			case 1:
				{
				State = 6149; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_procedureContext : ParserRuleContext {
		public IToken proc;
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Procedure_optionContext[] procedure_option() {
			return GetRuleContexts<Procedure_optionContext>();
		}
		public Procedure_optionContext procedure_option(int i) {
			return GetRuleContext<Procedure_optionContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_procedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_procedureContext create_or_alter_procedure() {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(Context, State);
		EnterRule(_localctx, 460, RULE_create_or_alter_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				{
				State = 6152; Match(CREATE);
				State = 6155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 6153; Match(OR);
					State = 6154; Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6157; Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6160;
			_localctx.proc = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6161; func_proc_name_schema();
			State = 6164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 6162; Match(SEMI);
				State = 6163; Match(DECIMAL);
				}
			}

			State = 6180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				State = 6167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6166; Match(LR_BRACKET);
					}
				}

				State = 6169; procedure_param();
				State = 6174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6170; Match(COMMA);
					State = 6171; procedure_param();
					}
					}
					State = 6176;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 6178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RR_BRACKET) {
					{
					State = 6177; Match(RR_BRACKET);
					}
				}

				}
			}

			State = 6191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6182; Match(WITH);
				State = 6183; procedure_option();
				State = 6188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6184; Match(COMMA);
					State = 6185; procedure_option();
					}
					}
					State = 6190;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 6193; Match(FOR);
				State = 6194; Match(REPLICATION);
				}
			}

			State = 6197; Match(AS);
			State = 6198; sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_triggerContext : ParserRuleContext {
		public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return GetRuleContext<Create_or_alter_dml_triggerContext>(0);
		}
		public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return GetRuleContext<Create_or_alter_ddl_triggerContext>(0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_triggerContext create_or_alter_trigger() {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(Context, State);
		EnterRule(_localctx, 462, RULE_create_or_alter_trigger);
		try {
			State = 6202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,808,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6200; create_or_alter_dml_trigger();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6201; create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_dml_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Dml_trigger_operationContext[] dml_trigger_operation() {
			return GetRuleContexts<Dml_trigger_operationContext>();
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return GetRuleContext<Dml_trigger_operationContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode INSTEAD() { return GetToken(TSqlParser.INSTEAD, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode APPEND() { return GetToken(TSqlParser.APPEND, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_dml_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(Context, State);
		EnterRule(_localctx, 464, RULE_create_or_alter_dml_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				{
				State = 6204; Match(CREATE);
				State = 6207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 6205; Match(OR);
					State = 6206; Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6209; Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6212; Match(TRIGGER);
			State = 6213; simple_name();
			State = 6214; Match(ON);
			State = 6215; table_name();
			State = 6225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6216; Match(WITH);
				State = 6217; dml_trigger_option();
				State = 6222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6218; Match(COMMA);
					State = 6219; dml_trigger_option();
					}
					}
					State = 6224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				{
				State = 6227; Match(FOR);
				}
				break;
			case AFTER:
				{
				State = 6228; Match(AFTER);
				}
				break;
			case INSTEAD:
				{
				State = 6229; Match(INSTEAD);
				State = 6230; Match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6233; dml_trigger_operation();
			State = 6238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6234; Match(COMMA);
				State = 6235; dml_trigger_operation();
				}
				}
				State = 6240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6241; Match(WITH);
				State = 6242; Match(APPEND);
				}
			}

			State = 6248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 6245; Match(NOT);
				State = 6246; Match(FOR);
				State = 6247; Match(REPLICATION);
				}
			}

			State = 6250; Match(AS);
			State = 6251; sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_trigger_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_optionContext dml_trigger_option() {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(Context, State);
		EnterRule(_localctx, 466, RULE_dml_trigger_option);
		try {
			State = 6255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6253; Match(ENCRYPTION);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6254; execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_trigger_operationContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDml_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDml_trigger_operation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_trigger_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_trigger_operationContext dml_trigger_operation() {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(Context, State);
		EnterRule(_localctx, 468, RULE_dml_trigger_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6257;
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Ddl_trigger_operationContext ddl_trigger_operation() {
			return GetRuleContext<Ddl_trigger_operationContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dml_trigger_optionContext[] dml_trigger_option() {
			return GetRuleContexts<Dml_trigger_optionContext>();
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return GetRuleContext<Dml_trigger_optionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Dml_trigger_operationContext[] dml_trigger_operation() {
			return GetRuleContexts<Dml_trigger_operationContext>();
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return GetRuleContext<Dml_trigger_operationContext>(i);
		}
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_ddl_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_ddl_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(Context, State);
		EnterRule(_localctx, 470, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				{
				State = 6259; Match(CREATE);
				State = 6262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 6260; Match(OR);
					State = 6261; Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6264; Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6267; Match(TRIGGER);
			State = 6268; simple_id();
			State = 6269; Match(ON);
			State = 6273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 6270; Match(ALL);
				State = 6271; Match(SERVER);
				}
				break;
			case DATABASE:
				{
				State = 6272; Match(DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6275; Match(WITH);
				State = 6276; dml_trigger_option();
				State = 6281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6277; Match(COMMA);
					State = 6278; dml_trigger_option();
					}
					}
					State = 6283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6286;
			_la = TokenStream.LA(1);
			if ( !(_la==FOR || _la==AFTER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6287; ddl_trigger_operation();
			State = 6292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6288; Match(COMMA);
				State = 6289; dml_trigger_operation();
				}
				}
				State = 6294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6295; Match(AS);
			State = 6296; sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_trigger_operationContext : ParserRuleContext {
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_trigger_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_trigger_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_trigger_operation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_trigger_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_trigger_operationContext ddl_trigger_operation() {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(Context, State);
		EnterRule(_localctx, 472, RULE_ddl_trigger_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6298; simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_functionContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return GetRuleContext<Func_body_returns_selectContext>(0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return GetRuleContext<Func_body_returns_tableContext>(0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return GetRuleContext<Func_body_returns_scalarContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TSqlParser.OR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_functionContext create_or_alter_function() {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(Context, State);
		EnterRule(_localctx, 474, RULE_create_or_alter_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				{
				State = 6300; Match(CREATE);
				State = 6303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 6301; Match(OR);
					State = 6302; Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 6305; Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6308; Match(FUNCTION);
			State = 6309; func_proc_name_schema();
			State = 6323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,827,Context) ) {
			case 1:
				{
				{
				State = 6310; Match(LR_BRACKET);
				State = 6311; procedure_param();
				State = 6316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6312; Match(COMMA);
					State = 6313; procedure_param();
					}
					}
					State = 6318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 6319; Match(RR_BRACKET);
				}
				}
				break;
			case 2:
				{
				State = 6321; Match(LR_BRACKET);
				State = 6322; Match(RR_BRACKET);
				}
				break;
			}
			State = 6328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,828,Context) ) {
			case 1:
				{
				State = 6325; func_body_returns_select();
				}
				break;
			case 2:
				{
				State = 6326; func_body_returns_table();
				}
				break;
			case 3:
				{
				State = 6327; func_body_returns_scalar();
				}
				break;
			}
			State = 6331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,829,Context) ) {
			case 1:
				{
				State = 6330; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_selectContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_select(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_select(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_selectContext func_body_returns_select() {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(Context, State);
		EnterRule(_localctx, 476, RULE_func_body_returns_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6333; Match(RETURNS);
			State = 6334; Match(TABLE);
			State = 6344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6335; Match(WITH);
				State = 6336; function_option();
				State = 6341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6337; Match(COMMA);
					State = 6338; function_option();
					}
					}
					State = 6343;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 6346; Match(AS);
				}
			}

			State = 6349; Match(RETURN);
			State = 6355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,833,Context) ) {
			case 1:
				{
				State = 6350; Match(LR_BRACKET);
				State = 6351; select_statement();
				State = 6352; Match(RR_BRACKET);
				}
				break;
			case 2:
				{
				State = 6354; select_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_tableContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(TSqlParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(TSqlParser.SEMI, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_tableContext func_body_returns_table() {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(Context, State);
		EnterRule(_localctx, 478, RULE_func_body_returns_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6357; Match(RETURNS);
			State = 6358; Match(LOCAL_ID);
			State = 6359; table_type_definition();
			State = 6369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6360; Match(WITH);
				State = 6361; function_option();
				State = 6366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6362; Match(COMMA);
					State = 6363; function_option();
					}
					}
					State = 6368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 6371; Match(AS);
				}
			}

			State = 6374; Match(BEGIN);
			State = 6378;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,837,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6375; sql_clause();
					}
					} 
				}
				State = 6380;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,837,Context);
			}
			State = 6381; Match(RETURN);
			State = 6383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 6382; Match(SEMI);
				}
			}

			State = 6385; Match(END);
			State = 6387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,839,Context) ) {
			case 1:
				{
				State = 6386; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_scalarContext : ParserRuleContext {
		public ExpressionContext ret;
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_scalar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_scalar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_scalar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_scalar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_scalarContext func_body_returns_scalar() {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(Context, State);
		EnterRule(_localctx, 480, RULE_func_body_returns_scalar);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6389; Match(RETURNS);
			State = 6390; data_type();
			State = 6400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6391; Match(WITH);
				State = 6392; function_option();
				State = 6397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6393; Match(COMMA);
					State = 6394; function_option();
					}
					}
					State = 6399;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 6402; Match(AS);
				}
			}

			State = 6405; Match(BEGIN);
			State = 6409;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,843,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6406; sql_clause();
					}
					} 
				}
				State = 6411;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,843,Context);
			}
			State = 6412; Match(RETURN);
			State = 6413; _localctx.ret = expression(0);
			State = 6415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 6414; Match(SEMI);
				}
			}

			State = 6417; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_paramContext : ParserRuleContext {
		public Default_valueContext default_val;
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode VARYING() { return GetToken(TSqlParser.VARYING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_param(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_paramContext procedure_param() {
		Procedure_paramContext _localctx = new Procedure_paramContext(Context, State);
		EnterRule(_localctx, 482, RULE_procedure_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6419; Match(LOCAL_ID);
			State = 6423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,845,Context) ) {
			case 1:
				{
				State = 6420; id();
				State = 6421; Match(DOT);
				}
				break;
			}
			State = 6426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 6425; Match(AS);
				}
			}

			State = 6428; data_type();
			State = 6430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARYING) {
				{
				State = 6429; Match(VARYING);
				}
			}

			State = 6434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 6432; Match(EQUAL);
				State = 6433; _localctx.default_val = default_value();
				}
			}

			State = 6437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & ((1L << (OUT - 634)) | (1L << (OUTPUT - 634)) | (1L << (READONLY - 634)))) != 0)) {
				{
				State = 6436;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & ((1L << (OUT - 634)) | (1L << (OUTPUT - 634)) | (1L << (READONLY - 634)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterProcedure_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitProcedure_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_optionContext procedure_option() {
		Procedure_optionContext _localctx = new Procedure_optionContext(Context, State);
		EnterRule(_localctx, 484, RULE_procedure_option);
		try {
			State = 6442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6439; Match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6440; Match(RECOMPILE);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6441; execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode[] NULL() { return GetTokens(TSqlParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(TSqlParser.NULL, i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunction_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunction_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_optionContext function_option() {
		Function_optionContext _localctx = new Function_optionContext(Context, State);
		EnterRule(_localctx, 486, RULE_function_option);
		try {
			State = 6456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6444; Match(ENCRYPTION);
				}
				break;
			case SCHEMABINDING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6445; Match(SCHEMABINDING);
				}
				break;
			case RETURNS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6446; Match(RETURNS);
				State = 6447; Match(NULL);
				State = 6448; Match(ON);
				State = 6449; Match(NULL);
				State = 6450; Match(INPUT);
				}
				break;
			case CALLED:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6451; Match(CALLED);
				State = 6452; Match(ON);
				State = 6453; Match(NULL);
				State = 6454; Match(INPUT);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6455; execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_statisticsContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_statistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_statisticsContext create_statistics() {
		Create_statisticsContext _localctx = new Create_statisticsContext(Context, State);
		EnterRule(_localctx, 488, RULE_create_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6458; Match(CREATE);
			State = 6459; Match(STATISTICS);
			State = 6460; id();
			State = 6461; Match(ON);
			State = 6462; table_name_with_hint();
			State = 6463; Match(LR_BRACKET);
			State = 6464; column_name_list();
			State = 6465; Match(RR_BRACKET);
			State = 6484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,855,Context) ) {
			case 1:
				{
				State = 6466; Match(WITH);
				State = 6472;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FULLSCAN:
					{
					State = 6467; Match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					State = 6468; Match(SAMPLE);
					State = 6469; Match(DECIMAL);
					State = 6470;
					_la = TokenStream.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					State = 6471; Match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6476;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,853,Context) ) {
				case 1:
					{
					State = 6474; Match(COMMA);
					State = 6475; Match(NORECOMPUTE);
					}
					break;
				}
				State = 6482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6478; Match(COMMA);
					State = 6479; Match(INCREMENTAL);
					State = 6480; Match(EQUAL);
					State = 6481; on_off();
					}
				}

				}
				break;
			}
			State = 6487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,856,Context) ) {
			case 1:
				{
				State = 6486; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statisticsContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Update_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statisticsContext update_statistics() {
		Update_statisticsContext _localctx = new Update_statisticsContext(Context, State);
		EnterRule(_localctx, 490, RULE_update_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6489; Match(UPDATE);
			State = 6491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==INDEX) {
				{
				State = 6490;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==INDEX) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6493; Match(STATISTICS);
			State = 6494; full_table_name();
			State = 6496;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,858,Context) ) {
			case 1:
				{
				State = 6495; id();
				}
				break;
			}
			State = 6501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,859,Context) ) {
			case 1:
				{
				State = 6498; Match(USING);
				State = 6499; Match(DECIMAL);
				State = 6500; Match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public Table_optionsContext[] table_options() {
			return GetRuleContexts<Table_optionsContext>();
		}
		public Table_optionsContext table_options(int i) {
			return GetRuleContext<Table_optionsContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(TSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(TSqlParser.DEFAULT, i);
		}
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 492, RULE_create_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6503; Match(CREATE);
			State = 6504; Match(TABLE);
			State = 6505; table_name();
			State = 6506; Match(LR_BRACKET);
			State = 6507; column_def_table_constraints();
			State = 6509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6508; Match(COMMA);
				}
			}

			State = 6511; Match(RR_BRACKET);
			State = 6514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,861,Context) ) {
			case 1:
				{
				State = 6512; Match(LOCK);
				State = 6513; simple_id();
				}
				break;
			}
			State = 6519;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,862,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6516; table_options();
					}
					} 
				}
				State = 6521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,862,Context);
			}
			State = 6525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,863,Context) ) {
			case 1:
				{
				State = 6522; Match(ON);
				State = 6523; id();
				}
				break;
			case 2:
				{
				State = 6524; Match(DEFAULT);
				}
				break;
			}
			State = 6530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,864,Context) ) {
			case 1:
				{
				State = 6527; Match(TEXTIMAGE_ON);
				State = 6528; id();
				}
				break;
			case 2:
				{
				State = 6529; Match(DEFAULT);
				}
				break;
			}
			State = 6533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,865,Context) ) {
			case 1:
				{
				State = 6532; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_optionsContext table_options() {
		Table_optionsContext _localctx = new Table_optionsContext(Context, State);
		EnterRule(_localctx, 494, RULE_table_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6535; Match(WITH);
			State = 6555;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_BRACKET:
				{
				State = 6536; Match(LR_BRACKET);
				State = 6537; index_option();
				State = 6542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6538; Match(COMMA);
					State = 6539; index_option();
					}
					}
					State = 6544;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 6545; Match(RR_BRACKET);
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				State = 6547; index_option();
				State = 6552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6548; Match(COMMA);
					State = 6549; index_option();
					}
					}
					State = 6554;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] WITH() { return GetTokens(TSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(TSqlParser.WITH, i);
		}
		public View_attributeContext[] view_attribute() {
			return GetRuleContexts<View_attributeContext>();
		}
		public View_attributeContext view_attribute(int i) {
			return GetRuleContext<View_attributeContext>(i);
		}
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 496, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6557; Match(CREATE);
			State = 6558; Match(VIEW);
			State = 6559; simple_name();
			State = 6564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 6560; Match(LR_BRACKET);
				State = 6561; column_name_list();
				State = 6562; Match(RR_BRACKET);
				}
			}

			State = 6575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 6566; Match(WITH);
				State = 6567; view_attribute();
				State = 6572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6568; Match(COMMA);
					State = 6569; view_attribute();
					}
					}
					State = 6574;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 6577; Match(AS);
			State = 6578; select_statement();
			State = 6582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,872,Context) ) {
			case 1:
				{
				State = 6579; Match(WITH);
				State = 6580; Match(CHECK);
				State = 6581; Match(OPTION);
				}
				break;
			}
			State = 6585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,873,Context) ) {
			case 1:
				{
				State = 6584; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_attributeContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterView_attribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitView_attribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_attributeContext view_attribute() {
		View_attributeContext _localctx = new View_attributeContext(Context, State);
		EnterRule(_localctx, 498, RULE_view_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6587;
			_la = TokenStream.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public ITerminalNode[] ALTER() { return GetTokens(TSqlParser.ALTER); }
		public ITerminalNode ALTER(int i) {
			return GetToken(TSqlParser.ALTER, i);
		}
		public ITerminalNode[] TABLE() { return GetTokens(TSqlParser.TABLE); }
		public ITerminalNode TABLE(int i) {
			return GetToken(TSqlParser.TABLE, i);
		}
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode ADD() { return GetToken(TSqlParser.ADD, 0); }
		public Column_def_table_constraintContext column_def_table_constraint() {
			return GetRuleContext<Column_def_table_constraintContext>(0);
		}
		public ITerminalNode COLUMN() { return GetToken(TSqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return GetRuleContext<Table_optionsContext>(0);
		}
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(Context, State);
		EnterRule(_localctx, 500, RULE_alter_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6589; Match(ALTER);
			State = 6590; Match(TABLE);
			State = 6591; table_name();
			State = 6635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,875,Context) ) {
			case 1:
				{
				State = 6592; Match(SET);
				State = 6593; Match(LR_BRACKET);
				State = 6594; Match(LOCK_ESCALATION);
				State = 6595; Match(EQUAL);
				State = 6596;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6597; Match(RR_BRACKET);
				}
				break;
			case 2:
				{
				State = 6598; Match(ADD);
				State = 6599; column_def_table_constraint();
				}
				break;
			case 3:
				{
				State = 6600; Match(ALTER);
				State = 6601; Match(COLUMN);
				State = 6602; column_definition();
				}
				break;
			case 4:
				{
				State = 6603; Match(DROP);
				State = 6604; Match(COLUMN);
				State = 6605; id();
				}
				break;
			case 5:
				{
				State = 6606; Match(DROP);
				State = 6607; Match(CONSTRAINT);
				State = 6608; _localctx.constraint = id();
				}
				break;
			case 6:
				{
				State = 6609; Match(WITH);
				State = 6610; Match(CHECK);
				State = 6611; Match(ADD);
				State = 6612; Match(CONSTRAINT);
				State = 6613; _localctx.constraint = id();
				State = 6614; Match(FOREIGN);
				State = 6615; Match(KEY);
				State = 6616; Match(LR_BRACKET);
				State = 6617; _localctx.fk = column_name_list();
				State = 6618; Match(RR_BRACKET);
				State = 6619; Match(REFERENCES);
				State = 6620; table_name();
				State = 6621; Match(LR_BRACKET);
				State = 6622; _localctx.pk = column_name_list();
				State = 6623; Match(RR_BRACKET);
				}
				break;
			case 7:
				{
				State = 6625; Match(CHECK);
				State = 6626; Match(CONSTRAINT);
				State = 6627; _localctx.constraint = id();
				}
				break;
			case 8:
				{
				State = 6628;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6629; Match(TRIGGER);
				State = 6631;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,874,Context) ) {
				case 1:
					{
					State = 6630; id();
					}
					break;
				}
				}
				break;
			case 9:
				{
				State = 6633; Match(REBUILD);
				State = 6634; table_options();
				}
				break;
			}
			State = 6638;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,876,Context) ) {
			case 1:
				{
				State = 6637; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_databaseContext : ParserRuleContext {
		public IdContext database;
		public IdContext new_name;
		public IdContext collation;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return GetRuleContext<Database_optionspecContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_databaseContext alter_database() {
		Alter_databaseContext _localctx = new Alter_databaseContext(Context, State);
		EnterRule(_localctx, 502, RULE_alter_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6640; Match(ALTER);
			State = 6641; Match(DATABASE);
			State = 6644;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 6642; _localctx.database = id();
				}
				break;
			case CURRENT:
				{
				State = 6643; Match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6658;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODIFY:
				{
				State = 6646; Match(MODIFY);
				State = 6647; Match(NAME);
				State = 6648; Match(EQUAL);
				State = 6649; _localctx.new_name = id();
				}
				break;
			case COLLATE:
				{
				State = 6650; Match(COLLATE);
				State = 6651; _localctx.collation = id();
				}
				break;
			case SET:
				{
				State = 6652; Match(SET);
				State = 6653; database_optionspec();
				State = 6656;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,878,Context) ) {
				case 1:
					{
					State = 6654; Match(WITH);
					State = 6655; termination();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6661;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,880,Context) ) {
			case 1:
				{
				State = 6660; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_optionspecContext : ParserRuleContext {
		public Auto_optionContext auto_option() {
			return GetRuleContext<Auto_optionContext>(0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return GetRuleContext<Change_tracking_optionContext>(0);
		}
		public Containment_optionContext containment_option() {
			return GetRuleContext<Containment_optionContext>(0);
		}
		public Cursor_optionContext cursor_option() {
			return GetRuleContext<Cursor_optionContext>(0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return GetRuleContext<Database_mirroring_optionContext>(0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return GetRuleContext<Date_correlation_optimization_optionContext>(0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return GetRuleContext<Db_encryption_optionContext>(0);
		}
		public Db_state_optionContext db_state_option() {
			return GetRuleContext<Db_state_optionContext>(0);
		}
		public Db_update_optionContext db_update_option() {
			return GetRuleContext<Db_update_optionContext>(0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return GetRuleContext<Db_user_access_optionContext>(0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return GetRuleContext<Delayed_durability_optionContext>(0);
		}
		public External_access_optionContext external_access_option() {
			return GetRuleContext<External_access_optionContext>(0);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return GetRuleContext<Database_filestream_optionContext>(0);
		}
		public Hadr_optionsContext hadr_options() {
			return GetRuleContext<Hadr_optionsContext>(0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return GetRuleContext<Mixed_page_allocation_optionContext>(0);
		}
		public Parameterization_optionContext parameterization_option() {
			return GetRuleContext<Parameterization_optionContext>(0);
		}
		public Recovery_optionContext recovery_option() {
			return GetRuleContext<Recovery_optionContext>(0);
		}
		public Service_broker_optionContext service_broker_option() {
			return GetRuleContext<Service_broker_optionContext>(0);
		}
		public Snapshot_optionContext snapshot_option() {
			return GetRuleContext<Snapshot_optionContext>(0);
		}
		public Sql_optionContext sql_option() {
			return GetRuleContext<Sql_optionContext>(0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return GetRuleContext<Target_recovery_time_optionContext>(0);
		}
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_optionspec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_optionspec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_optionspec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_optionspec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_optionspecContext database_optionspec() {
		Database_optionspecContext _localctx = new Database_optionspecContext(Context, State);
		EnterRule(_localctx, 504, RULE_database_optionspec);
		try {
			State = 6686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,881,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6663; auto_option();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6664; change_tracking_option();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6665; containment_option();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6666; cursor_option();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6667; database_mirroring_option();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6668; date_correlation_optimization_option();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6669; db_encryption_option();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6670; db_state_option();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6671; db_update_option();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6672; db_user_access_option();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6673; delayed_durability_option();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6674; external_access_option();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6675; Match(FILESTREAM);
				State = 6676; database_filestream_option();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6677; hadr_options();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6678; mixed_page_allocation_option();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6679; parameterization_option();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6680; recovery_option();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6681; service_broker_option();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6682; snapshot_option();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6683; sql_option();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6684; target_recovery_time_option();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6685; termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auto_optionContext : ParserRuleContext {
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auto_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAuto_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAuto_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuto_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Auto_optionContext auto_option() {
		Auto_optionContext _localctx = new Auto_optionContext(Context, State);
		EnterRule(_localctx, 506, RULE_auto_option);
		int _la;
		try {
			State = 6705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO_CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6688; Match(AUTO_CLOSE);
				State = 6689; on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6690; Match(AUTO_CREATE_STATISTICS);
				State = 6691; Match(OFF);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6692; Match(ON);
				State = 6697;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INCREMENTAL:
					{
					State = 6693; Match(INCREMENTAL);
					State = 6694; Match(EQUAL);
					State = 6695; Match(ON);
					}
					break;
				case OFF:
					{
					State = 6696; Match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6699; Match(AUTO_SHRINK);
				State = 6700; on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6701; Match(AUTO_UPDATE_STATISTICS);
				State = 6702; on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6703; Match(AUTO_UPDATE_STATISTICS_ASYNC);
				State = 6704;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_optionContext : ParserRuleContext {
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Change_tracking_option_listContext[] change_tracking_option_list() {
			return GetRuleContexts<Change_tracking_option_listContext>();
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return GetRuleContext<Change_tracking_option_listContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_tracking_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_optionContext change_tracking_option() {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(Context, State);
		EnterRule(_localctx, 508, RULE_change_tracking_option);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6707; Match(CHANGE_TRACKING);
			State = 6708; Match(EQUAL);
			State = 6724;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OFF:
				{
				State = 6709; Match(OFF);
				}
				break;
			case ON:
				{
				State = 6710; Match(ON);
				State = 6721;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,885,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6711; change_tracking_option_list();
						State = 6716;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 6712; Match(COMMA);
							State = 6713; change_tracking_option_list();
							}
							}
							State = 6718;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						} 
					}
					State = 6723;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,885,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_option_listContext : ParserRuleContext {
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_tracking_option_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_option_listContext change_tracking_option_list() {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(Context, State);
		EnterRule(_localctx, 510, RULE_change_tracking_option_list);
		int _la;
		try {
			State = 6732;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO_CLEANUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6726; Match(AUTO_CLEANUP);
				State = 6727; Match(EQUAL);
				State = 6728; on_off();
				}
				break;
			case CHANGE_RETENTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6729; Match(CHANGE_RETENTION);
				State = 6730; Match(EQUAL);
				State = 6731;
				_la = TokenStream.LA(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Containment_optionContext : ParserRuleContext {
		public ITerminalNode CONTAINMENT() { return GetToken(TSqlParser.CONTAINMENT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(TSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containment_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContainment_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContainment_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainment_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Containment_optionContext containment_option() {
		Containment_optionContext _localctx = new Containment_optionContext(Context, State);
		EnterRule(_localctx, 512, RULE_containment_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6734; Match(CONTAINMENT);
			State = 6735; Match(EQUAL);
			State = 6736;
			_la = TokenStream.LA(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionContext : ParserRuleContext {
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionContext cursor_option() {
		Cursor_optionContext _localctx = new Cursor_optionContext(Context, State);
		EnterRule(_localctx, 514, RULE_cursor_option);
		int _la;
		try {
			State = 6742;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6738; Match(CURSOR_CLOSE_ON_COMMIT);
				State = 6739; on_off();
				}
				break;
			case CURSOR_DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6740; Match(CURSOR_DEFAULT);
				State = 6741;
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_endpointContext : ParserRuleContext {
		public IdContext endpointname;
		public IdContext login;
		public IToken state;
		public IToken port;
		public IdContext cert_name;
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(TSqlParser.ENDPOINT, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode LISTENER_PORT() { return GetToken(TSqlParser.LISTENER_PORT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode SERVICE_BROKER() { return GetToken(TSqlParser.SERVICE_BROKER, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(TSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode DATABASE_MIRRORING() { return GetToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public ITerminalNode ROLE() { return GetToken(TSqlParser.ROLE, 0); }
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LISTENER_IP() { return GetToken(TSqlParser.LISTENER_IP, 0); }
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode IPV4_ADDR() { return GetToken(TSqlParser.IPV4_ADDR, 0); }
		public ITerminalNode IPV6_ADDR() { return GetToken(TSqlParser.IPV6_ADDR, 0); }
		public ITerminalNode WINDOWS() { return GetToken(TSqlParser.WINDOWS, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode MESSAGE_FORWARDING() { return GetToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public ITerminalNode MESSAGE_FORWARD_SIZE() { return GetToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public ITerminalNode STARTED() { return GetToken(TSqlParser.STARTED, 0); }
		public ITerminalNode STOPPED() { return GetToken(TSqlParser.STOPPED, 0); }
		public ITerminalNode[] DISABLED() { return GetTokens(TSqlParser.DISABLED); }
		public ITerminalNode DISABLED(int i) {
			return GetToken(TSqlParser.DISABLED, i);
		}
		public ITerminalNode SUPPORTED() { return GetToken(TSqlParser.SUPPORTED, 0); }
		public ITerminalNode REQUIRED() { return GetToken(TSqlParser.REQUIRED, 0); }
		public ITerminalNode ENABLED() { return GetToken(TSqlParser.ENABLED, 0); }
		public ITerminalNode NTLM() { return GetToken(TSqlParser.NTLM, 0); }
		public ITerminalNode KERBEROS() { return GetToken(TSqlParser.KERBEROS, 0); }
		public ITerminalNode NEGOTIATE() { return GetToken(TSqlParser.NEGOTIATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode AES() { return GetToken(TSqlParser.AES, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_endpoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlter_endpoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlter_endpoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_endpoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_endpointContext alter_endpoint() {
		Alter_endpointContext _localctx = new Alter_endpointContext(Context, State);
		EnterRule(_localctx, 516, RULE_alter_endpoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6744; Match(ALTER);
			State = 6745; Match(ENDPOINT);
			State = 6746; _localctx.endpointname = id();
			State = 6749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 6747; Match(AUTHORIZATION);
				State = 6748; _localctx.login = id();
				}
			}

			State = 6758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATE) {
				{
				State = 6751; Match(STATE);
				State = 6752; Match(EQUAL);
				State = 6756;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STARTED:
					{
					State = 6753; _localctx.state = Match(STARTED);
					}
					break;
				case STOPPED:
					{
					State = 6754; _localctx.state = Match(STOPPED);
					}
					break;
				case DISABLED:
					{
					State = 6755; _localctx.state = Match(DISABLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 6760; Match(AS);
			State = 6761; Match(TCP);
			State = 6762; Match(LR_BRACKET);
			State = 6763; Match(LISTENER_PORT);
			State = 6764; Match(EQUAL);
			State = 6765; _localctx.port = Match(DECIMAL);
			State = 6770;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6766; Match(COMMA);
				State = 6767; Match(LISTENER_IP);
				State = 6768; Match(EQUAL);
				State = 6769;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==IPV4_ADDR || _la==IPV6_ADDR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6772; Match(RR_BRACKET);
			State = 6882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,916,Context) ) {
			case 1:
				{
				State = 6773; Match(TSQL);
				}
				break;
			case 2:
				{
				State = 6774; Match(FOR);
				State = 6775; Match(SERVICE_BROKER);
				State = 6776; Match(LR_BRACKET);
				State = 6777; Match(AUTHENTICATION);
				State = 6778; Match(EQUAL);
				State = 6795;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WINDOWS:
					{
					State = 6779; Match(WINDOWS);
					State = 6781;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (KERBEROS - 170)) | (1L << (NEGOTIATE - 170)) | (1L << (NTLM - 170)))) != 0)) {
						{
						State = 6780;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (KERBEROS - 170)) | (1L << (NEGOTIATE - 170)) | (1L << (NTLM - 170)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 6785;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CERTIFICATE) {
						{
						State = 6783; Match(CERTIFICATE);
						State = 6784; _localctx.cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					State = 6787; Match(CERTIFICATE);
					State = 6788; _localctx.cert_name = id();
					State = 6790;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WINDOWS) {
						{
						State = 6789; Match(WINDOWS);
						}
					}

					State = 6793;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (KERBEROS - 170)) | (1L << (NEGOTIATE - 170)) | (1L << (NTLM - 170)))) != 0)) {
						{
						State = 6792;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (KERBEROS - 170)) | (1L << (NEGOTIATE - 170)) | (1L << (NTLM - 170)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6814;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,901,Context) ) {
				case 1:
					{
					State = 6798;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6797; Match(COMMA);
						}
					}

					State = 6800; Match(ENCRYPTION);
					State = 6801; Match(EQUAL);
					State = 6802;
					_la = TokenStream.LA(1);
					if ( !(_la==REQUIRED || _la==SUPPORTED || _la==DISABLED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 6812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALGORITHM) {
						{
						State = 6803; Match(ALGORITHM);
						State = 6810;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,899,Context) ) {
						case 1:
							{
							State = 6804; Match(AES);
							}
							break;
						case 2:
							{
							State = 6805; Match(RC4);
							}
							break;
						case 3:
							{
							State = 6806; Match(AES);
							State = 6807; Match(RC4);
							}
							break;
						case 4:
							{
							State = 6808; Match(RC4);
							State = 6809; Match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				State = 6822;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,903,Context) ) {
				case 1:
					{
					State = 6817;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6816; Match(COMMA);
						}
					}

					State = 6819; Match(MESSAGE_FORWARDING);
					State = 6820; Match(EQUAL);
					State = 6821;
					_la = TokenStream.LA(1);
					if ( !(_la==ENABLED || _la==DISABLED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 6830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MESSAGE_FORWARD_SIZE || _la==COMMA) {
					{
					State = 6825;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6824; Match(COMMA);
						}
					}

					State = 6827; Match(MESSAGE_FORWARD_SIZE);
					State = 6828; Match(EQUAL);
					State = 6829; Match(DECIMAL);
					}
				}

				State = 6832; Match(RR_BRACKET);
				}
				break;
			case 3:
				{
				State = 6833; Match(FOR);
				State = 6834; Match(DATABASE_MIRRORING);
				State = 6835; Match(LR_BRACKET);
				State = 6836; Match(AUTHENTICATION);
				State = 6837; Match(EQUAL);
				State = 6854;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WINDOWS:
					{
					State = 6838; Match(WINDOWS);
					State = 6840;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (KERBEROS - 170)) | (1L << (NEGOTIATE - 170)) | (1L << (NTLM - 170)))) != 0)) {
						{
						State = 6839;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (KERBEROS - 170)) | (1L << (NEGOTIATE - 170)) | (1L << (NTLM - 170)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 6844;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CERTIFICATE) {
						{
						State = 6842; Match(CERTIFICATE);
						State = 6843; _localctx.cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					State = 6846; Match(CERTIFICATE);
					State = 6847; _localctx.cert_name = id();
					State = 6849;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WINDOWS) {
						{
						State = 6848; Match(WINDOWS);
						}
					}

					State = 6852;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (KERBEROS - 170)) | (1L << (NEGOTIATE - 170)) | (1L << (NTLM - 170)))) != 0)) {
						{
						State = 6851;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (KERBEROS - 170)) | (1L << (NEGOTIATE - 170)) | (1L << (NTLM - 170)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6873;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,914,Context) ) {
				case 1:
					{
					State = 6857;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6856; Match(COMMA);
						}
					}

					State = 6859; Match(ENCRYPTION);
					State = 6860; Match(EQUAL);
					State = 6861;
					_la = TokenStream.LA(1);
					if ( !(_la==REQUIRED || _la==SUPPORTED || _la==DISABLED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 6871;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALGORITHM) {
						{
						State = 6862; Match(ALGORITHM);
						State = 6869;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,912,Context) ) {
						case 1:
							{
							State = 6863; Match(AES);
							}
							break;
						case 2:
							{
							State = 6864; Match(RC4);
							}
							break;
						case 3:
							{
							State = 6865; Match(AES);
							State = 6866; Match(RC4);
							}
							break;
						case 4:
							{
							State = 6867; Match(RC4);
							State = 6868; Match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				State = 6876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6875; Match(COMMA);
					}
				}

				State = 6878; Match(ROLE);
				State = 6879; Match(EQUAL);
				State = 6880;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==WITNESS || _la==PARTNER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6881; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_mirroring_optionContext : ParserRuleContext {
		public Mirroring_set_optionContext mirroring_set_option() {
			return GetRuleContext<Mirroring_set_optionContext>(0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_mirroring_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_mirroring_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_mirroring_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_mirroring_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_mirroring_optionContext database_mirroring_option() {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(Context, State);
		EnterRule(_localctx, 518, RULE_database_mirroring_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6884; mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_set_optionContext : ParserRuleContext {
		public Mirroring_partnerContext mirroring_partner() {
			return GetRuleContext<Mirroring_partnerContext>(0);
		}
		public Partner_optionContext partner_option() {
			return GetRuleContext<Partner_optionContext>(0);
		}
		public Mirroring_witnessContext mirroring_witness() {
			return GetRuleContext<Mirroring_witnessContext>(0);
		}
		public Witness_optionContext witness_option() {
			return GetRuleContext<Witness_optionContext>(0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_set_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_set_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_set_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_set_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_set_optionContext mirroring_set_option() {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(Context, State);
		EnterRule(_localctx, 520, RULE_mirroring_set_option);
		try {
			State = 6892;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARTNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6886; mirroring_partner();
				State = 6887; partner_option();
				}
				break;
			case WITNESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6889; mirroring_witness();
				State = 6890; witness_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_partnerContext : ParserRuleContext {
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_partner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_partner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_partner(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_partner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_partnerContext mirroring_partner() {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(Context, State);
		EnterRule(_localctx, 522, RULE_mirroring_partner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6894; Match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_witnessContext : ParserRuleContext {
		public ITerminalNode WITNESS() { return GetToken(TSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_witness; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_witness(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_witness(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_witness(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_witnessContext mirroring_witness() {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(Context, State);
		EnterRule(_localctx, 524, RULE_mirroring_witness);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6896; Match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_partner_equalContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_partner_equal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_partner_equal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_partner_equal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_partner_equal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_partner_equalContext witness_partner_equal() {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(Context, State);
		EnterRule(_localctx, 526, RULE_witness_partner_equal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6898; Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public ITerminalNode FAILOVER() { return GetToken(TSqlParser.FAILOVER, 0); }
		public ITerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_optionContext partner_option() {
		Partner_optionContext _localctx = new Partner_optionContext(Context, State);
		EnterRule(_localctx, 528, RULE_partner_option);
		int _la;
		try {
			State = 6912;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6900; witness_partner_equal();
				State = 6901; partner_server();
				}
				break;
			case FAILOVER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6903; Match(FAILOVER);
				}
				break;
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6904; Match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;
			case OFF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6905; Match(OFF);
				}
				break;
			case RESUME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6906; Match(RESUME);
				}
				break;
			case SAFETY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6907; Match(SAFETY);
				State = 6908;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==OFF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SUSPEND:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6909; Match(SUSPEND);
				}
				break;
			case TIMEOUT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6910; Match(TIMEOUT);
				State = 6911; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_optionContext : ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return GetRuleContext<Witness_partner_equalContext>(0);
		}
		public Witness_serverContext witness_server() {
			return GetRuleContext<Witness_serverContext>(0);
		}
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_optionContext witness_option() {
		Witness_optionContext _localctx = new Witness_optionContext(Context, State);
		EnterRule(_localctx, 530, RULE_witness_option);
		try {
			State = 6918;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6914; witness_partner_equal();
				State = 6915; witness_server();
				}
				break;
			case OFF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6917; Match(OFF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Witness_serverContext : ParserRuleContext {
		public Partner_serverContext partner_server() {
			return GetRuleContext<Partner_serverContext>(0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWitness_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWitness_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Witness_serverContext witness_server() {
		Witness_serverContext _localctx = new Witness_serverContext(Context, State);
		EnterRule(_localctx, 532, RULE_witness_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6920; partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_serverContext : ParserRuleContext {
		public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return GetRuleContext<Partner_server_tcp_prefixContext>(0);
		}
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return GetRuleContext<Mirroring_host_port_seperatorContext>(0);
		}
		public Port_numberContext port_number() {
			return GetRuleContext<Port_numberContext>(0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_server(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_serverContext partner_server() {
		Partner_serverContext _localctx = new Partner_serverContext(Context, State);
		EnterRule(_localctx, 534, RULE_partner_server);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6922; partner_server_tcp_prefix();
			State = 6923; host();
			State = 6924; mirroring_host_port_seperator();
			State = 6925; port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mirroring_host_port_seperatorContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mirroring_host_port_seperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMirroring_host_port_seperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMirroring_host_port_seperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirroring_host_port_seperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(Context, State);
		EnterRule(_localctx, 536, RULE_mirroring_host_port_seperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6927; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partner_server_tcp_prefixContext : ParserRuleContext {
		public ITerminalNode TCP() { return GetToken(TSqlParser.TCP, 0); }
		public ITerminalNode COLON() { return GetToken(TSqlParser.COLON, 0); }
		public ITerminalNode DOUBLE_FORWARD_SLASH() { return GetToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partner_server_tcp_prefix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPartner_server_tcp_prefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPartner_server_tcp_prefix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartner_server_tcp_prefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(Context, State);
		EnterRule(_localctx, 538, RULE_partner_server_tcp_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6929; Match(TCP);
			State = 6930; Match(COLON);
			State = 6931; Match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_numberContext : ParserRuleContext {
		public IToken port;
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPort_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPort_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPort_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Port_numberContext port_number() {
		Port_numberContext _localctx = new Port_numberContext(Context, State);
		EnterRule(_localctx, 540, RULE_port_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6933; _localctx.port = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		public HostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_host; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHost(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHost(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HostContext host() {
		HostContext _localctx = new HostContext(Context, State);
		EnterRule(_localctx, 542, RULE_host);
		try {
			State = 6945;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6935; id();
				State = 6936; Match(DOT);
				State = 6937; host();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6943;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,920,Context) ) {
				case 1:
					{
					State = 6939; id();
					State = 6940; Match(DOT);
					}
					break;
				case 2:
					{
					State = 6942; id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_correlation_optimization_optionContext : ParserRuleContext {
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_correlation_optimization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_correlation_optimization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_correlation_optimization_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_correlation_optimization_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(Context, State);
		EnterRule(_localctx, 544, RULE_date_correlation_optimization_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6947; Match(DATE_CORRELATION_OPTIMIZATION);
			State = 6948; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_encryption_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_encryption_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_encryption_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_encryption_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_encryption_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_encryption_optionContext db_encryption_option() {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(Context, State);
		EnterRule(_localctx, 546, RULE_db_encryption_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6950; Match(ENCRYPTION);
			State = 6951; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_state_optionContext : ParserRuleContext {
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_state_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_state_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_state_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_state_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_state_optionContext db_state_option() {
		Db_state_optionContext _localctx = new Db_state_optionContext(Context, State);
		EnterRule(_localctx, 548, RULE_db_state_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6953;
			_la = TokenStream.LA(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_update_optionContext : ParserRuleContext {
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_update_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_update_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_update_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_update_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_update_optionContext db_update_option() {
		Db_update_optionContext _localctx = new Db_update_optionContext(Context, State);
		EnterRule(_localctx, 550, RULE_db_update_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6955;
			_la = TokenStream.LA(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_user_access_optionContext : ParserRuleContext {
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_user_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDb_user_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDb_user_access_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_user_access_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_user_access_optionContext db_user_access_option() {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(Context, State);
		EnterRule(_localctx, 552, RULE_db_user_access_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6957;
			_la = TokenStream.LA(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delayed_durability_optionContext : ParserRuleContext {
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayed_durability_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDelayed_durability_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDelayed_durability_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelayed_durability_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delayed_durability_optionContext delayed_durability_option() {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(Context, State);
		EnterRule(_localctx, 554, RULE_delayed_durability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6959; Match(DELAYED_DURABILITY);
			State = 6960; Match(EQUAL);
			State = 6961;
			_la = TokenStream.LA(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_access_optionContext : ParserRuleContext {
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExternal_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExternal_access_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_access_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_access_optionContext external_access_option() {
		External_access_optionContext _localctx = new External_access_optionContext(Context, State);
		EnterRule(_localctx, 556, RULE_external_access_option);
		int _la;
		try {
			State = 6988;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DB_CHAINING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6963; Match(DB_CHAINING);
				State = 6964; on_off();
				}
				break;
			case TRUSTWORTHY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6965; Match(TRUSTWORTHY);
				State = 6966; on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6967; Match(DEFAULT_LANGUAGE);
				State = 6968; Match(EQUAL);
				State = 6971;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 6969; id();
					}
					break;
				case STRING:
					{
					State = 6970; Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6973; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 6974; Match(EQUAL);
				State = 6977;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 6975; id();
					}
					break;
				case STRING:
					{
					State = 6976; Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6979; Match(NESTED_TRIGGERS);
				State = 6980; Match(EQUAL);
				State = 6981;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6982; Match(TRANSFORM_NOISE_WORDS);
				State = 6983; Match(EQUAL);
				State = 6984;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6985; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 6986; Match(EQUAL);
				State = 6987; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hadr_optionsContext : ParserRuleContext {
		public IdContext availability_group_name;
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode RESUME() { return GetToken(TSqlParser.RESUME, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hadr_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterHadr_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitHadr_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHadr_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hadr_optionsContext hadr_options() {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(Context, State);
		EnterRule(_localctx, 558, RULE_hadr_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6990; Match(HADR);
			State = 6999;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OFF:
			case AVAILABILITY:
				{
				State = 6996;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AVAILABILITY:
					{
					State = 6991; Match(AVAILABILITY);
					State = 6992; Match(GROUP);
					State = 6993; Match(EQUAL);
					State = 6994; _localctx.availability_group_name = id();
					}
					break;
				case OFF:
					{
					State = 6995; Match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RESUME:
			case SUSPEND:
				{
				State = 6998;
				_la = TokenStream.LA(1);
				if ( !(_la==RESUME || _la==SUSPEND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixed_page_allocation_optionContext : ParserRuleContext {
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixed_page_allocation_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMixed_page_allocation_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMixed_page_allocation_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixed_page_allocation_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(Context, State);
		EnterRule(_localctx, 560, RULE_mixed_page_allocation_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7001; Match(MIXED_PAGE_ALLOCATION);
			State = 7002;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterization_optionContext : ParserRuleContext {
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterParameterization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitParameterization_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterization_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameterization_optionContext parameterization_option() {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(Context, State);
		EnterRule(_localctx, 562, RULE_parameterization_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7004; Match(PARAMETERIZATION);
			State = 7005;
			_la = TokenStream.LA(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recovery_optionContext : ParserRuleContext {
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode NONE() { return GetToken(TSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recovery_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRecovery_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRecovery_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecovery_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recovery_optionContext recovery_option() {
		Recovery_optionContext _localctx = new Recovery_optionContext(Context, State);
		EnterRule(_localctx, 564, RULE_recovery_option);
		int _la;
		try {
			State = 7013;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RECOVERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7007; Match(RECOVERY);
				State = 7008;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7009; Match(TORN_PAGE_DETECTION);
				State = 7010; on_off();
				}
				break;
			case PAGE_VERIFY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7011; Match(PAGE_VERIFY);
				State = 7012;
				_la = TokenStream.LA(1);
				if ( !(_la==NONE || _la==CHECKSUM || _la==TORN_PAGE_DETECTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_broker_optionContext : ParserRuleContext {
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_broker_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_broker_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_broker_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitService_broker_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Service_broker_optionContext service_broker_option() {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(Context, State);
		EnterRule(_localctx, 566, RULE_service_broker_option);
		try {
			State = 7021;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_BROKER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7015; Match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7016; Match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7017; Match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7018; Match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7019; Match(HONOR_BROKER_PRIORITY);
				State = 7020; on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Snapshot_optionContext : ParserRuleContext {
		public IToken MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snapshot_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSnapshot_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSnapshot_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSnapshot_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Snapshot_optionContext snapshot_option() {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(Context, State);
		EnterRule(_localctx, 568, RULE_snapshot_option);
		int _la;
		try {
			State = 7028;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7023; Match(ALLOW_SNAPSHOT_ISOLATION);
				State = 7024; on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7025; Match(READ_COMMITTED_SNAPSHOT);
				State = 7026;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case OFF:
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7027;
				_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
					_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_optionContext : ParserRuleContext {
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_optionContext sql_option() {
		Sql_optionContext _localctx = new Sql_optionContext(Context, State);
		EnterRule(_localctx, 570, RULE_sql_option);
		try {
			State = 7051;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANSI_NULL_DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7030; Match(ANSI_NULL_DEFAULT);
				State = 7031; on_off();
				}
				break;
			case ANSI_NULLS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7032; Match(ANSI_NULLS);
				State = 7033; on_off();
				}
				break;
			case ANSI_PADDING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7034; Match(ANSI_PADDING);
				State = 7035; on_off();
				}
				break;
			case ANSI_WARNINGS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7036; Match(ANSI_WARNINGS);
				State = 7037; on_off();
				}
				break;
			case ARITHABORT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7038; Match(ARITHABORT);
				State = 7039; on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7040; Match(COMPATIBILITY_LEVEL);
				State = 7041; Match(EQUAL);
				State = 7042; Match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7043; Match(CONCAT_NULL_YIELDS_NULL);
				State = 7044; on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7045; Match(NUMERIC_ROUNDABORT);
				State = 7046; on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7047; Match(QUOTED_IDENTIFIER);
				State = 7048; on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7049; Match(RECURSIVE_TRIGGERS);
				State = 7050; on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_recovery_time_optionContext : ParserRuleContext {
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_recovery_time_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTarget_recovery_time_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTarget_recovery_time_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget_recovery_time_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target_recovery_time_optionContext target_recovery_time_option() {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(Context, State);
		EnterRule(_localctx, 572, RULE_target_recovery_time_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7053; Match(TARGET_RECOVERY_TIME);
			State = 7054; Match(EQUAL);
			State = 7055; Match(DECIMAL);
			State = 7056;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminationContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termination; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTermination(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTermination(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminationContext termination() {
		TerminationContext _localctx = new TerminationContext(Context, State);
		EnterRule(_localctx, 574, RULE_termination);
		try {
			State = 7064;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,931,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7058; Match(ROLLBACK);
				State = 7059; Match(AFTER);
				State = 7060; _localctx.seconds = Match(DECIMAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7061; Match(ROLLBACK);
				State = 7062; Match(IMMEDIATE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7063; Match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public Drop_relational_or_xml_or_spatial_indexContext[] drop_relational_or_xml_or_spatial_index() {
			return GetRuleContexts<Drop_relational_or_xml_or_spatial_indexContext>();
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return GetRuleContext<Drop_relational_or_xml_or_spatial_indexContext>(i);
		}
		public Drop_backward_compatible_indexContext[] drop_backward_compatible_index() {
			return GetRuleContexts<Drop_backward_compatible_indexContext>();
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return GetRuleContext<Drop_backward_compatible_indexContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(Context, State);
		EnterRule(_localctx, 576, RULE_drop_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7066; Match(DROP);
			State = 7067; Match(INDEX);
			State = 7070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7068; Match(IF);
				State = 7069; Match(EXISTS);
				}
			}

			State = 7088;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,935,Context) ) {
			case 1:
				{
				State = 7072; drop_relational_or_xml_or_spatial_index();
				State = 7077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7073; Match(COMMA);
					State = 7074; drop_relational_or_xml_or_spatial_index();
					}
					}
					State = 7079;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 7080; drop_backward_compatible_index();
				State = 7085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7081; Match(COMMA);
					State = 7082; drop_backward_compatible_index();
					}
					}
					State = 7087;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 7091;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,936,Context) ) {
			case 1:
				{
				State = 7090; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_relational_or_xml_or_spatial_indexContext : ParserRuleContext {
		public IdContext index_name;
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_relational_or_xml_or_spatial_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_relational_or_xml_or_spatial_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_relational_or_xml_or_spatial_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_relational_or_xml_or_spatial_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(Context, State);
		EnterRule(_localctx, 578, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7093; _localctx.index_name = id();
			State = 7094; Match(ON);
			State = 7095; full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_backward_compatible_indexContext : ParserRuleContext {
		public IdContext owner_name;
		public IdContext table_or_view_name;
		public IdContext index_name;
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_backward_compatible_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_backward_compatible_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_backward_compatible_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_backward_compatible_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_backward_compatible_indexContext drop_backward_compatible_index() {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(Context, State);
		EnterRule(_localctx, 580, RULE_drop_backward_compatible_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,937,Context) ) {
			case 1:
				{
				State = 7097; _localctx.owner_name = id();
				State = 7098; Match(DOT);
				}
				break;
			}
			State = 7102; _localctx.table_or_view_name = id();
			State = 7103; Match(DOT);
			State = 7104; _localctx.index_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public IToken proc;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode PROC() { return GetToken(TSqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSqlParser.PROCEDURE, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 582, RULE_drop_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7106; Match(DROP);
			State = 7107;
			_localctx.proc = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7108; Match(IF);
				State = 7109; Match(EXISTS);
				}
			}

			State = 7112; func_proc_name_schema();
			State = 7117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7113; Match(COMMA);
				State = 7114; func_proc_name_schema();
				}
				}
				State = 7119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,940,Context) ) {
			case 1:
				{
				State = 7120; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_triggerContext : ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return GetRuleContext<Drop_dml_triggerContext>(0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return GetRuleContext<Drop_ddl_triggerContext>(0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_triggerContext drop_trigger() {
		Drop_triggerContext _localctx = new Drop_triggerContext(Context, State);
		EnterRule(_localctx, 584, RULE_drop_trigger);
		try {
			State = 7125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,941,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7123; drop_dml_trigger();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7124; drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_dml_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_dml_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_dml_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_dml_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_dml_triggerContext drop_dml_trigger() {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(Context, State);
		EnterRule(_localctx, 586, RULE_drop_dml_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7127; Match(DROP);
			State = 7128; Match(TRIGGER);
			State = 7131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7129; Match(IF);
				State = 7130; Match(EXISTS);
				}
			}

			State = 7133; simple_name();
			State = 7138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7134; Match(COMMA);
				State = 7135; simple_name();
				}
				}
				State = 7140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,944,Context) ) {
			case 1:
				{
				State = 7141; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_ddl_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_ddl_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_ddl_trigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_ddl_trigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_ddl_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_ddl_triggerContext drop_ddl_trigger() {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(Context, State);
		EnterRule(_localctx, 588, RULE_drop_ddl_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7144; Match(DROP);
			State = 7145; Match(TRIGGER);
			State = 7148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7146; Match(IF);
				State = 7147; Match(EXISTS);
				}
			}

			State = 7150; simple_name();
			State = 7155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7151; Match(COMMA);
				State = 7152; simple_name();
				}
				}
				State = 7157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7158; Match(ON);
			State = 7162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
				{
				State = 7159; Match(DATABASE);
				}
				break;
			case ALL:
				{
				State = 7160; Match(ALL);
				State = 7161; Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,948,Context) ) {
			case 1:
				{
				State = 7164; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext[] func_proc_name_schema() {
			return GetRuleContexts<Func_proc_name_schemaContext>();
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return GetRuleContext<Func_proc_name_schemaContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(Context, State);
		EnterRule(_localctx, 590, RULE_drop_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7167; Match(DROP);
			State = 7168; Match(FUNCTION);
			State = 7171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7169; Match(IF);
				State = 7170; Match(EXISTS);
				}
			}

			State = 7173; func_proc_name_schema();
			State = 7178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7174; Match(COMMA);
				State = 7175; func_proc_name_schema();
				}
				}
				State = 7180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,951,Context) ) {
			case 1:
				{
				State = 7181; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statisticsContext : ParserRuleContext {
		public IdContext name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSqlParser.STATISTICS, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_statistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statisticsContext drop_statistics() {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(Context, State);
		EnterRule(_localctx, 592, RULE_drop_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7184; Match(DROP);
			State = 7185; Match(STATISTICS);
			State = 7195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 7187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7186; Match(COMMA);
					}
				}

				State = 7192;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,953,Context) ) {
				case 1:
					{
					State = 7189; table_name();
					State = 7190; Match(DOT);
					}
					break;
				}
				State = 7194; _localctx.name = id();
				}
				}
				State = 7197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BLOCKING_HIERARCHY || _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)) | (1L << (COMMA - 768)))) != 0) );
			State = 7199; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 594, RULE_drop_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7201; Match(DROP);
			State = 7202; Match(TABLE);
			State = 7205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7203; Match(IF);
				State = 7204; Match(EXISTS);
				}
			}

			State = 7207; table_name();
			State = 7209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,956,Context) ) {
			case 1:
				{
				State = 7208; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(Context, State);
		EnterRule(_localctx, 596, RULE_drop_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7211; Match(DROP);
			State = 7212; Match(VIEW);
			State = 7215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7213; Match(IF);
				State = 7214; Match(EXISTS);
				}
			}

			State = 7217; simple_name();
			State = 7222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7218; Match(COMMA);
				State = 7219; simple_name();
				}
				}
				State = 7224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,959,Context) ) {
			case 1:
				{
				State = 7225; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(Context, State);
		EnterRule(_localctx, 598, RULE_create_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7228; Match(CREATE);
			State = 7229; Match(TYPE);
			State = 7230; _localctx.name = simple_name();
			State = 7235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 7231; Match(FROM);
				State = 7232; data_type();
				State = 7233; default_value();
				}
			}

			State = 7243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 7237; Match(AS);
				State = 7238; Match(TABLE);
				State = 7239; Match(LR_BRACKET);
				State = 7240; column_def_table_constraints();
				State = 7241; Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode DROP() { return GetToken(TSqlParser.DROP, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TSqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(Context, State);
		EnterRule(_localctx, 600, RULE_drop_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7245; Match(DROP);
			State = 7246; Match(TYPE);
			State = 7249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 7247; Match(IF);
				State = 7248; Match(EXISTS);
				}
			}

			State = 7251; _localctx.name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_function_limitedContext : ParserRuleContext {
		public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		public OpendatasourceContext opendatasource() {
			return GetRuleContext<OpendatasourceContext>(0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_function_limitedContext rowset_function_limited() {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(Context, State);
		EnterRule(_localctx, 602, RULE_rowset_function_limited);
		try {
			State = 7255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPENQUERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7253; openquery();
				}
				break;
			case OPENDATASOURCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7254; opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenqueryContext : ParserRuleContext {
		public IdContext linked_server;
		public IToken query;
		public ITerminalNode OPENQUERY() { return GetToken(TSqlParser.OPENQUERY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpenquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpenquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenqueryContext openquery() {
		OpenqueryContext _localctx = new OpenqueryContext(Context, State);
		EnterRule(_localctx, 604, RULE_openquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7257; Match(OPENQUERY);
			State = 7258; Match(LR_BRACKET);
			State = 7259; _localctx.linked_server = id();
			State = 7260; Match(COMMA);
			State = 7261; _localctx.query = Match(STRING);
			State = 7262; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpendatasourceContext : ParserRuleContext {
		public IToken provider;
		public IToken init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public ITerminalNode OPENDATASOURCE() { return GetToken(TSqlParser.OPENDATASOURCE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opendatasource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpendatasource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpendatasource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpendatasource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpendatasourceContext opendatasource() {
		OpendatasourceContext _localctx = new OpendatasourceContext(Context, State);
		EnterRule(_localctx, 606, RULE_opendatasource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7264; Match(OPENDATASOURCE);
			State = 7265; Match(LR_BRACKET);
			State = 7266; _localctx.provider = Match(STRING);
			State = 7267; Match(COMMA);
			State = 7268; _localctx.init = Match(STRING);
			State = 7269; Match(RR_BRACKET);
			State = 7270; Match(DOT);
			State = 7272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)))) != 0)) {
				{
				State = 7271; _localctx.database = id();
				}
			}

			State = 7274; Match(DOT);
			State = 7276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)))) != 0)) {
				{
				State = 7275; _localctx.scheme = id();
				}
			}

			State = 7278; Match(DOT);
			{
			State = 7279; _localctx.table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public IToken xml_namespace_uri;
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Declare_localContext[] declare_local() {
			return GetRuleContexts<Declare_localContext>();
		}
		public Declare_localContext declare_local(int i) {
			return GetRuleContext<Declare_localContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return GetRuleContext<Xml_type_definitionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(Context, State);
		EnterRule(_localctx, 608, RULE_declare_statement);
		int _la;
		try {
			State = 7324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,974,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7281; Match(DECLARE);
				State = 7282; Match(LOCAL_ID);
				State = 7284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 7283; Match(AS);
					}
				}

				State = 7286; table_type_definition();
				State = 7288;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,967,Context) ) {
				case 1:
					{
					State = 7287; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7290; Match(DECLARE);
				State = 7291; declare_local();
				State = 7296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7292; Match(COMMA);
					State = 7293; declare_local();
					}
					}
					State = 7298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7300;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,969,Context) ) {
				case 1:
					{
					State = 7299; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7302; Match(DECLARE);
				State = 7303; Match(LOCAL_ID);
				State = 7305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 7304; Match(AS);
					}
				}

				State = 7307; xml_type_definition();
				State = 7309;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,971,Context) ) {
				case 1:
					{
					State = 7308; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7311; Match(WITH);
				State = 7312; Match(XMLNAMESPACES);
				State = 7313; Match(LR_BRACKET);
				State = 7314; _localctx.xml_namespace_uri = Match(STRING);
				State = 7316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7315; Match(COMMA);
					}
				}

				State = 7318; Match(AS);
				State = 7319; id();
				State = 7320; Match(RR_BRACKET);
				State = 7322;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,973,Context) ) {
				case 1:
					{
					State = 7321; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_statementContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(TSqlParser.DEALLOCATE, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_cursorContext declare_cursor() {
			return GetRuleContext<Declare_cursorContext>(0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return GetRuleContext<Fetch_cursorContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_statementContext cursor_statement() {
		Cursor_statementContext _localctx = new Cursor_statementContext(Context, State);
		EnterRule(_localctx, 610, RULE_cursor_statement);
		int _la;
		try {
			State = 7355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7326; Match(CLOSE);
				State = 7328;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,975,Context) ) {
				case 1:
					{
					State = 7327; Match(GLOBAL);
					}
					break;
				}
				State = 7330; cursor_name();
				State = 7332;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,976,Context) ) {
				case 1:
					{
					State = 7331; Match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7334; Match(DEALLOCATE);
				State = 7336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,977,Context) ) {
				case 1:
					{
					State = 7335; Match(GLOBAL);
					}
					break;
				}
				State = 7339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CURSOR) {
					{
					State = 7338; Match(CURSOR);
					}
				}

				State = 7341; cursor_name();
				State = 7343;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,979,Context) ) {
				case 1:
					{
					State = 7342; Match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7345; declare_cursor();
				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7346; fetch_cursor();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7347; Match(OPEN);
				State = 7349;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,980,Context) ) {
				case 1:
					{
					State = 7348; Match(GLOBAL);
					}
					break;
				}
				State = 7351; cursor_name();
				State = 7353;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,981,Context) ) {
				case 1:
					{
					State = 7352; Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_databaseContext : ParserRuleContext {
		public IdContext database_name;
		public IToken file_or_filegroup;
		public IdContext logical_device_name;
		public IdContext backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public IdContext encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode READ_WRITE_FILEGROUPS() { return GetToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] FILEGROUP() { return GetTokens(TSqlParser.FILEGROUP); }
		public ITerminalNode FILEGROUP(int i) {
			return GetToken(TSqlParser.FILEGROUP, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_databaseContext backup_database() {
		Backup_databaseContext _localctx = new Backup_databaseContext(Context, State);
		EnterRule(_localctx, 612, RULE_backup_database);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7357; Match(BACKUP);
			State = 7358; Match(DATABASE);
			{
			State = 7359; _localctx.database_name = id();
			}
			State = 7372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READ_WRITE_FILEGROUPS) {
				{
				State = 7360; Match(READ_WRITE_FILEGROUPS);
				State = 7369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,984,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7362;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7361; Match(COMMA);
							}
						}

						State = 7364;
						_la = TokenStream.LA(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 7365; Match(EQUAL);
						State = 7366; _localctx.file_or_filegroup = Match(STRING);
						}
						} 
					}
					State = 7371;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,984,Context);
				}
				}
			}

			State = 7382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FILE || _la==FILEGROUP || _la==COMMA) {
				{
				{
				State = 7375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7374; Match(COMMA);
					}
				}

				State = 7377;
				_la = TokenStream.LA(1);
				if ( !(_la==FILE || _la==FILEGROUP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7378; Match(EQUAL);
				State = 7379; _localctx.file_or_filegroup = Match(STRING);
				}
				}
				State = 7384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,993,Context) ) {
			case 1:
				{
				State = 7385; Match(TO);
				State = 7390;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7387;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7386; Match(COMMA);
							}
						}

						State = 7389; _localctx.logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7392;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,989,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 7394; Match(TO);
				State = 7404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7396;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 7395; Match(COMMA);
						}
					}

					State = 7398;
					_la = TokenStream.LA(1);
					if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 7399; Match(EQUAL);
					State = 7402;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
						{
						State = 7400; Match(STRING);
						}
						break;
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 7401; id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 7406;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
				}
				break;
			}
			State = 7443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1001,Context) ) {
			case 1:
				{
				State = 7420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7410; Match(MIRROR);
					State = 7411; Match(TO);
					State = 7416;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 7413;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7412; Match(COMMA);
								}
							}

							State = 7415; _localctx.logical_device_name = id();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 7418;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,995,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					State = 7422;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			case 2:
				{
				State = 7439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7424; Match(MIRROR);
					State = 7425; Match(TO);
					State = 7435;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 7427;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7426; Match(COMMA);
							}
						}

						State = 7429;
						_la = TokenStream.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 7430; Match(EQUAL);
						State = 7433;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STRING:
							{
							State = 7431; Match(STRING);
							}
							break;
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROWCOUNT:
						case SAFETY:
						case SERVER:
						case SID:
						case SOURCE:
						case STATE:
						case START:
						case TARGET:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							State = 7432; id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						State = 7437;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
					}
					}
					State = 7441;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			}
			State = 7605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1037,Context) ) {
			case 1:
				{
				State = 7445; Match(WITH);
				State = 7602;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1036,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 7600;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1035,Context) ) {
						case 1:
							{
							State = 7447;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7446; Match(COMMA);
								}
							}

							State = 7449; Match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							State = 7451;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7450; Match(COMMA);
								}
							}

							State = 7453; Match(COPY_ONLY);
							}
							break;
						case 3:
							{
							State = 7455;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7454; Match(COMMA);
								}
							}

							State = 7457;
							_la = TokenStream.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 4:
							{
							State = 7459;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7458; Match(COMMA);
								}
							}

							State = 7461; Match(DESCRIPTION);
							State = 7462; Match(EQUAL);
							State = 7465;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
								{
								State = 7463; Match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 7464; id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							State = 7468;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7467; Match(COMMA);
								}
							}

							State = 7470; Match(NAME);
							State = 7471; Match(EQUAL);
							State = 7472; _localctx.backup_set_name = id();
							}
							break;
						case 6:
							{
							State = 7474;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7473; Match(COMMA);
								}
							}

							State = 7476; Match(CREDENTIAL);
							}
							break;
						case 7:
							{
							State = 7478;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7477; Match(COMMA);
								}
							}

							State = 7480; Match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							State = 7482;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7481; Match(COMMA);
								}
							}

							State = 7496;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case EXPIREDATE:
								{
								State = 7484; Match(EXPIREDATE);
								State = 7485; Match(EQUAL);
								State = 7488;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case STRING:
									{
									State = 7486; Match(STRING);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROWCOUNT:
								case SAFETY:
								case SERVER:
								case SID:
								case SOURCE:
								case STATE:
								case START:
								case TARGET:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									State = 7487; id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								State = 7490; Match(RETAINDAYS);
								State = 7491; Match(EQUAL);
								State = 7494;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case DECIMAL:
									{
									State = 7492; Match(DECIMAL);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROWCOUNT:
								case SAFETY:
								case SERVER:
								case SID:
								case SOURCE:
								case STATE:
								case START:
								case TARGET:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									State = 7493; id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							State = 7499;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7498; Match(COMMA);
								}
							}

							State = 7501;
							_la = TokenStream.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 10:
							{
							State = 7503;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7502; Match(COMMA);
								}
							}

							State = 7505;
							_la = TokenStream.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 11:
							{
							State = 7507;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7506; Match(COMMA);
								}
							}

							State = 7509;
							_la = TokenStream.LA(1);
							if ( !(_la==NOFORMAT || _la==FORMAT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 12:
							{
							State = 7511;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7510; Match(COMMA);
								}
							}

							State = 7513; Match(MEDIADESCRIPTION);
							State = 7514; Match(EQUAL);
							State = 7517;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
								{
								State = 7515; Match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 7516; id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							State = 7520;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7519; Match(COMMA);
								}
							}

							State = 7522; Match(MEDIANAME);
							State = 7523; Match(EQUAL);
							{
							State = 7524; _localctx.medianame = Match(STRING);
							}
							}
							break;
						case 14:
							{
							State = 7526;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7525; Match(COMMA);
								}
							}

							State = 7528; Match(BLOCKSIZE);
							State = 7529; Match(EQUAL);
							State = 7532;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 7530; Match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 7531; id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							State = 7535;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7534; Match(COMMA);
								}
							}

							State = 7537; Match(BUFFERCOUNT);
							State = 7538; Match(EQUAL);
							State = 7541;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 7539; Match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 7540; id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							State = 7544;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7543; Match(COMMA);
								}
							}

							State = 7546; Match(MAXTRANSFER);
							State = 7547; Match(EQUAL);
							State = 7550;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 7548; Match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 7549; id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							State = 7553;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7552; Match(COMMA);
								}
							}

							State = 7555;
							_la = TokenStream.LA(1);
							if ( !(_la==NO_CHECKSUM || _la==CHECKSUM) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 18:
							{
							State = 7557;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7556; Match(COMMA);
								}
							}

							State = 7559;
							_la = TokenStream.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 19:
							{
							State = 7561;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7560; Match(COMMA);
								}
							}

							State = 7563; Match(RESTART);
							}
							break;
						case 20:
							{
							State = 7565;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7564; Match(COMMA);
								}
							}

							State = 7567; Match(STATS);
							State = 7570;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==EQUAL) {
								{
								State = 7568; Match(EQUAL);
								State = 7569; _localctx.stats_percent = Match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							State = 7573;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7572; Match(COMMA);
								}
							}

							State = 7575;
							_la = TokenStream.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 22:
							{
							State = 7577;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7576; Match(COMMA);
								}
							}

							State = 7579;
							_la = TokenStream.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 23:
							{
							State = 7581;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7580; Match(COMMA);
								}
							}

							State = 7583; Match(ENCRYPTION);
							State = 7584; Match(LR_BRACKET);
							State = 7585; Match(ALGORITHM);
							State = 7586; Match(EQUAL);
							State = 7587;
							_la = TokenStream.LA(1);
							if ( !(((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (AES_128 - 390)) | (1L << (AES_192 - 390)) | (1L << (AES_256 - 390)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							State = 7588; Match(COMMA);
							State = 7589; Match(SERVER);
							State = 7590; Match(CERTIFICATE);
							State = 7591; Match(EQUAL);
							State = 7598;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,1034,Context) ) {
							case 1:
								{
								State = 7592; _localctx.encryptor_name = id();
								}
								break;
							case 2:
								{
								State = 7593; Match(SERVER);
								State = 7594; Match(ASYMMETRIC);
								State = 7595; Match(KEY);
								State = 7596; Match(EQUAL);
								State = 7597; _localctx.encryptor_name = id();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 7604;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1036,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_logContext : ParserRuleContext {
		public IdContext database_name;
		public IdContext logical_device_name;
		public IdContext backup_set_name;
		public IToken medianame;
		public IToken stats_percent;
		public IToken undo_file_name;
		public IdContext encryptor_name;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode LOG() { return GetToken(TSqlParser.LOG, 0); }
		public ITerminalNode[] TO() { return GetTokens(TSqlParser.TO); }
		public ITerminalNode TO(int i) {
			return GetToken(TSqlParser.TO, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] DISK() { return GetTokens(TSqlParser.DISK); }
		public ITerminalNode DISK(int i) {
			return GetToken(TSqlParser.DISK, i);
		}
		public ITerminalNode[] TAPE() { return GetTokens(TSqlParser.TAPE); }
		public ITerminalNode TAPE(int i) {
			return GetToken(TSqlParser.TAPE, i);
		}
		public ITerminalNode[] URL() { return GetTokens(TSqlParser.URL); }
		public ITerminalNode URL(int i) {
			return GetToken(TSqlParser.URL, i);
		}
		public ITerminalNode[] MIRROR() { return GetTokens(TSqlParser.MIRROR); }
		public ITerminalNode MIRROR(int i) {
			return GetToken(TSqlParser.MIRROR, i);
		}
		public ITerminalNode[] DIFFERENTIAL() { return GetTokens(TSqlParser.DIFFERENTIAL); }
		public ITerminalNode DIFFERENTIAL(int i) {
			return GetToken(TSqlParser.DIFFERENTIAL, i);
		}
		public ITerminalNode[] COPY_ONLY() { return GetTokens(TSqlParser.COPY_ONLY); }
		public ITerminalNode COPY_ONLY(int i) {
			return GetToken(TSqlParser.COPY_ONLY, i);
		}
		public ITerminalNode[] DESCRIPTION() { return GetTokens(TSqlParser.DESCRIPTION); }
		public ITerminalNode DESCRIPTION(int i) {
			return GetToken(TSqlParser.DESCRIPTION, i);
		}
		public ITerminalNode[] NAME() { return GetTokens(TSqlParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(TSqlParser.NAME, i);
		}
		public ITerminalNode[] CREDENTIAL() { return GetTokens(TSqlParser.CREDENTIAL); }
		public ITerminalNode CREDENTIAL(int i) {
			return GetToken(TSqlParser.CREDENTIAL, i);
		}
		public ITerminalNode[] FILE_SNAPSHOT() { return GetTokens(TSqlParser.FILE_SNAPSHOT); }
		public ITerminalNode FILE_SNAPSHOT(int i) {
			return GetToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public ITerminalNode[] MEDIADESCRIPTION() { return GetTokens(TSqlParser.MEDIADESCRIPTION); }
		public ITerminalNode MEDIADESCRIPTION(int i) {
			return GetToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public ITerminalNode[] MEDIANAME() { return GetTokens(TSqlParser.MEDIANAME); }
		public ITerminalNode MEDIANAME(int i) {
			return GetToken(TSqlParser.MEDIANAME, i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(TSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(TSqlParser.BLOCKSIZE, i);
		}
		public ITerminalNode[] BUFFERCOUNT() { return GetTokens(TSqlParser.BUFFERCOUNT); }
		public ITerminalNode BUFFERCOUNT(int i) {
			return GetToken(TSqlParser.BUFFERCOUNT, i);
		}
		public ITerminalNode[] MAXTRANSFER() { return GetTokens(TSqlParser.MAXTRANSFER); }
		public ITerminalNode MAXTRANSFER(int i) {
			return GetToken(TSqlParser.MAXTRANSFER, i);
		}
		public ITerminalNode[] RESTART() { return GetTokens(TSqlParser.RESTART); }
		public ITerminalNode RESTART(int i) {
			return GetToken(TSqlParser.RESTART, i);
		}
		public ITerminalNode[] STATS() { return GetTokens(TSqlParser.STATS); }
		public ITerminalNode STATS(int i) {
			return GetToken(TSqlParser.STATS, i);
		}
		public ITerminalNode[] NO_TRUNCATE() { return GetTokens(TSqlParser.NO_TRUNCATE); }
		public ITerminalNode NO_TRUNCATE(int i) {
			return GetToken(TSqlParser.NO_TRUNCATE, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] ALGORITHM() { return GetTokens(TSqlParser.ALGORITHM); }
		public ITerminalNode ALGORITHM(int i) {
			return GetToken(TSqlParser.ALGORITHM, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] SERVER() { return GetTokens(TSqlParser.SERVER); }
		public ITerminalNode SERVER(int i) {
			return GetToken(TSqlParser.SERVER, i);
		}
		public ITerminalNode[] CERTIFICATE() { return GetTokens(TSqlParser.CERTIFICATE); }
		public ITerminalNode CERTIFICATE(int i) {
			return GetToken(TSqlParser.CERTIFICATE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] COMPRESSION() { return GetTokens(TSqlParser.COMPRESSION); }
		public ITerminalNode COMPRESSION(int i) {
			return GetToken(TSqlParser.COMPRESSION, i);
		}
		public ITerminalNode[] NO_COMPRESSION() { return GetTokens(TSqlParser.NO_COMPRESSION); }
		public ITerminalNode NO_COMPRESSION(int i) {
			return GetToken(TSqlParser.NO_COMPRESSION, i);
		}
		public ITerminalNode[] NOINIT() { return GetTokens(TSqlParser.NOINIT); }
		public ITerminalNode NOINIT(int i) {
			return GetToken(TSqlParser.NOINIT, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(TSqlParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(TSqlParser.INIT, i);
		}
		public ITerminalNode[] NOSKIP() { return GetTokens(TSqlParser.NOSKIP); }
		public ITerminalNode NOSKIP(int i) {
			return GetToken(TSqlParser.NOSKIP, i);
		}
		public ITerminalNode[] SKIP_KEYWORD() { return GetTokens(TSqlParser.SKIP_KEYWORD); }
		public ITerminalNode SKIP_KEYWORD(int i) {
			return GetToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public ITerminalNode[] NOFORMAT() { return GetTokens(TSqlParser.NOFORMAT); }
		public ITerminalNode NOFORMAT(int i) {
			return GetToken(TSqlParser.NOFORMAT, i);
		}
		public ITerminalNode[] FORMAT() { return GetTokens(TSqlParser.FORMAT); }
		public ITerminalNode FORMAT(int i) {
			return GetToken(TSqlParser.FORMAT, i);
		}
		public ITerminalNode[] NO_CHECKSUM() { return GetTokens(TSqlParser.NO_CHECKSUM); }
		public ITerminalNode NO_CHECKSUM(int i) {
			return GetToken(TSqlParser.NO_CHECKSUM, i);
		}
		public ITerminalNode[] CHECKSUM() { return GetTokens(TSqlParser.CHECKSUM); }
		public ITerminalNode CHECKSUM(int i) {
			return GetToken(TSqlParser.CHECKSUM, i);
		}
		public ITerminalNode[] STOP_ON_ERROR() { return GetTokens(TSqlParser.STOP_ON_ERROR); }
		public ITerminalNode STOP_ON_ERROR(int i) {
			return GetToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public ITerminalNode[] CONTINUE_AFTER_ERROR() { return GetTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public ITerminalNode CONTINUE_AFTER_ERROR(int i) {
			return GetToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public ITerminalNode[] REWIND() { return GetTokens(TSqlParser.REWIND); }
		public ITerminalNode REWIND(int i) {
			return GetToken(TSqlParser.REWIND, i);
		}
		public ITerminalNode[] NOREWIND() { return GetTokens(TSqlParser.NOREWIND); }
		public ITerminalNode NOREWIND(int i) {
			return GetToken(TSqlParser.NOREWIND, i);
		}
		public ITerminalNode[] LOAD() { return GetTokens(TSqlParser.LOAD); }
		public ITerminalNode LOAD(int i) {
			return GetToken(TSqlParser.LOAD, i);
		}
		public ITerminalNode[] NOUNLOAD() { return GetTokens(TSqlParser.NOUNLOAD); }
		public ITerminalNode NOUNLOAD(int i) {
			return GetToken(TSqlParser.NOUNLOAD, i);
		}
		public ITerminalNode[] AES_128() { return GetTokens(TSqlParser.AES_128); }
		public ITerminalNode AES_128(int i) {
			return GetToken(TSqlParser.AES_128, i);
		}
		public ITerminalNode[] AES_192() { return GetTokens(TSqlParser.AES_192); }
		public ITerminalNode AES_192(int i) {
			return GetToken(TSqlParser.AES_192, i);
		}
		public ITerminalNode[] AES_256() { return GetTokens(TSqlParser.AES_256); }
		public ITerminalNode AES_256(int i) {
			return GetToken(TSqlParser.AES_256, i);
		}
		public ITerminalNode[] TRIPLE_DES_3KEY() { return GetTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public ITerminalNode TRIPLE_DES_3KEY(int i) {
			return GetToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public ITerminalNode[] EXPIREDATE() { return GetTokens(TSqlParser.EXPIREDATE); }
		public ITerminalNode EXPIREDATE(int i) {
			return GetToken(TSqlParser.EXPIREDATE, i);
		}
		public ITerminalNode[] RETAINDAYS() { return GetTokens(TSqlParser.RETAINDAYS); }
		public ITerminalNode RETAINDAYS(int i) {
			return GetToken(TSqlParser.RETAINDAYS, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode[] NORECOVERY() { return GetTokens(TSqlParser.NORECOVERY); }
		public ITerminalNode NORECOVERY(int i) {
			return GetToken(TSqlParser.NORECOVERY, i);
		}
		public ITerminalNode[] STANDBY() { return GetTokens(TSqlParser.STANDBY); }
		public ITerminalNode STANDBY(int i) {
			return GetToken(TSqlParser.STANDBY, i);
		}
		public ITerminalNode[] ASYMMETRIC() { return GetTokens(TSqlParser.ASYMMETRIC); }
		public ITerminalNode ASYMMETRIC(int i) {
			return GetToken(TSqlParser.ASYMMETRIC, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(TSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(TSqlParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_log; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_log(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_log(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_log(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_logContext backup_log() {
		Backup_logContext _localctx = new Backup_logContext(Context, State);
		EnterRule(_localctx, 614, RULE_backup_log);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7607; Match(BACKUP);
			State = 7608; Match(LOG);
			{
			State = 7609; _localctx.database_name = id();
			}
			State = 7633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1043,Context) ) {
			case 1:
				{
				State = 7610; Match(TO);
				State = 7615;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7612;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7611; Match(COMMA);
							}
						}

						State = 7614; _localctx.logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7617;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1039,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 7619; Match(TO);
				State = 7629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7621;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 7620; Match(COMMA);
						}
					}

					State = 7623;
					_la = TokenStream.LA(1);
					if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 7624; Match(EQUAL);
					State = 7627;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
						{
						State = 7625; Match(STRING);
						}
						break;
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 7626; id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 7631;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
				}
				break;
			}
			State = 7668;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1051,Context) ) {
			case 1:
				{
				State = 7645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7635; Match(MIRROR);
					State = 7636; Match(TO);
					State = 7641;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 7638;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7637; Match(COMMA);
								}
							}

							State = 7640; _localctx.logical_device_name = id();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 7643;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,1045,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					State = 7647;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			case 2:
				{
				State = 7664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7649; Match(MIRROR);
					State = 7650; Match(TO);
					State = 7660;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 7652;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7651; Match(COMMA);
							}
						}

						State = 7654;
						_la = TokenStream.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 7655; Match(EQUAL);
						State = 7658;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STRING:
							{
							State = 7656; Match(STRING);
							}
							break;
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROWCOUNT:
						case SAFETY:
						case SERVER:
						case SID:
						case SOURCE:
						case STATE:
						case START:
						case TARGET:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							State = 7657; id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						State = 7662;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
					}
					}
					State = 7666;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			}
			State = 7843;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1090,Context) ) {
			case 1:
				{
				State = 7670; Match(WITH);
				State = 7840;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1089,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 7838;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1088,Context) ) {
						case 1:
							{
							State = 7672;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7671; Match(COMMA);
								}
							}

							State = 7674; Match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							State = 7676;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7675; Match(COMMA);
								}
							}

							State = 7678; Match(COPY_ONLY);
							}
							break;
						case 3:
							{
							State = 7680;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7679; Match(COMMA);
								}
							}

							State = 7682;
							_la = TokenStream.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 4:
							{
							State = 7684;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7683; Match(COMMA);
								}
							}

							State = 7686; Match(DESCRIPTION);
							State = 7687; Match(EQUAL);
							State = 7690;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
								{
								State = 7688; Match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 7689; id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							State = 7693;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7692; Match(COMMA);
								}
							}

							State = 7695; Match(NAME);
							State = 7696; Match(EQUAL);
							State = 7697; _localctx.backup_set_name = id();
							}
							break;
						case 6:
							{
							State = 7699;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7698; Match(COMMA);
								}
							}

							State = 7701; Match(CREDENTIAL);
							}
							break;
						case 7:
							{
							State = 7703;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7702; Match(COMMA);
								}
							}

							State = 7705; Match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							State = 7707;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7706; Match(COMMA);
								}
							}

							State = 7721;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case EXPIREDATE:
								{
								State = 7709; Match(EXPIREDATE);
								State = 7710; Match(EQUAL);
								State = 7713;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case STRING:
									{
									State = 7711; Match(STRING);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROWCOUNT:
								case SAFETY:
								case SERVER:
								case SID:
								case SOURCE:
								case STATE:
								case START:
								case TARGET:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									State = 7712; id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								State = 7715; Match(RETAINDAYS);
								State = 7716; Match(EQUAL);
								State = 7719;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case DECIMAL:
									{
									State = 7717; Match(DECIMAL);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROWCOUNT:
								case SAFETY:
								case SERVER:
								case SID:
								case SOURCE:
								case STATE:
								case START:
								case TARGET:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									State = 7718; id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							State = 7724;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7723; Match(COMMA);
								}
							}

							State = 7726;
							_la = TokenStream.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 10:
							{
							State = 7728;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7727; Match(COMMA);
								}
							}

							State = 7730;
							_la = TokenStream.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 11:
							{
							State = 7732;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7731; Match(COMMA);
								}
							}

							State = 7734;
							_la = TokenStream.LA(1);
							if ( !(_la==NOFORMAT || _la==FORMAT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 12:
							{
							State = 7736;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7735; Match(COMMA);
								}
							}

							State = 7738; Match(MEDIADESCRIPTION);
							State = 7739; Match(EQUAL);
							State = 7742;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
								{
								State = 7740; Match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 7741; id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							State = 7745;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7744; Match(COMMA);
								}
							}

							State = 7747; Match(MEDIANAME);
							State = 7748; Match(EQUAL);
							{
							State = 7749; _localctx.medianame = Match(STRING);
							}
							}
							break;
						case 14:
							{
							State = 7751;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7750; Match(COMMA);
								}
							}

							State = 7753; Match(BLOCKSIZE);
							State = 7754; Match(EQUAL);
							State = 7757;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 7755; Match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 7756; id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							State = 7760;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7759; Match(COMMA);
								}
							}

							State = 7762; Match(BUFFERCOUNT);
							State = 7763; Match(EQUAL);
							State = 7766;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 7764; Match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 7765; id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							State = 7769;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7768; Match(COMMA);
								}
							}

							State = 7771; Match(MAXTRANSFER);
							State = 7772; Match(EQUAL);
							State = 7775;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case DECIMAL:
								{
								State = 7773; Match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								State = 7774; id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							State = 7778;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7777; Match(COMMA);
								}
							}

							State = 7780;
							_la = TokenStream.LA(1);
							if ( !(_la==NO_CHECKSUM || _la==CHECKSUM) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 18:
							{
							State = 7782;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7781; Match(COMMA);
								}
							}

							State = 7784;
							_la = TokenStream.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 19:
							{
							State = 7786;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7785; Match(COMMA);
								}
							}

							State = 7788; Match(RESTART);
							}
							break;
						case 20:
							{
							State = 7790;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7789; Match(COMMA);
								}
							}

							State = 7792; Match(STATS);
							State = 7795;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==EQUAL) {
								{
								State = 7793; Match(EQUAL);
								State = 7794; _localctx.stats_percent = Match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							State = 7798;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7797; Match(COMMA);
								}
							}

							State = 7800;
							_la = TokenStream.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 22:
							{
							State = 7802;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7801; Match(COMMA);
								}
							}

							State = 7804;
							_la = TokenStream.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case 23:
							{
							State = 7806;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7805; Match(COMMA);
								}
							}

							State = 7812;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case NORECOVERY:
								{
								State = 7808; Match(NORECOVERY);
								}
								break;
							case STANDBY:
								{
								State = 7809; Match(STANDBY);
								State = 7810; Match(EQUAL);
								State = 7811; _localctx.undo_file_name = Match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 24:
							{
							State = 7815;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7814; Match(COMMA);
								}
							}

							State = 7817; Match(NO_TRUNCATE);
							}
							break;
						case 25:
							{
							State = 7819;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 7818; Match(COMMA);
								}
							}

							State = 7821; Match(ENCRYPTION);
							State = 7822; Match(LR_BRACKET);
							State = 7823; Match(ALGORITHM);
							State = 7824; Match(EQUAL);
							State = 7825;
							_la = TokenStream.LA(1);
							if ( !(((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (AES_128 - 390)) | (1L << (AES_192 - 390)) | (1L << (AES_256 - 390)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							State = 7826; Match(COMMA);
							State = 7827; Match(SERVER);
							State = 7828; Match(CERTIFICATE);
							State = 7829; Match(EQUAL);
							State = 7836;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,1087,Context) ) {
							case 1:
								{
								State = 7830; _localctx.encryptor_name = id();
								}
								break;
							case 2:
								{
								State = 7831; Match(SERVER);
								State = 7832; Match(ASYMMETRIC);
								State = 7833; Match(KEY);
								State = 7834; Match(EQUAL);
								State = 7835; _localctx.encryptor_name = id();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					State = 7842;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1089,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_certificateContext : ParserRuleContext {
		public IdContext certname;
		public IToken cert_file;
		public IToken private_key_file;
		public IToken encryption_password;
		public IToken decryption_pasword;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode[] FILE() { return GetTokens(TSqlParser.FILE); }
		public ITerminalNode FILE(int i) {
			return GetToken(TSqlParser.FILE, i);
		}
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode[] PASSWORD() { return GetTokens(TSqlParser.PASSWORD); }
		public ITerminalNode PASSWORD(int i) {
			return GetToken(TSqlParser.PASSWORD, i);
		}
		public ITerminalNode[] DECRYPTION() { return GetTokens(TSqlParser.DECRYPTION); }
		public ITerminalNode DECRYPTION(int i) {
			return GetToken(TSqlParser.DECRYPTION, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_certificateContext backup_certificate() {
		Backup_certificateContext _localctx = new Backup_certificateContext(Context, State);
		EnterRule(_localctx, 616, RULE_backup_certificate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7845; Match(BACKUP);
			State = 7846; Match(CERTIFICATE);
			State = 7847; _localctx.certname = id();
			State = 7848; Match(TO);
			State = 7849; Match(FILE);
			State = 7850; Match(EQUAL);
			State = 7851; _localctx.cert_file = Match(STRING);
			State = 7883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1096,Context) ) {
			case 1:
				{
				State = 7852; Match(WITH);
				State = 7853; Match(PRIVATE);
				State = 7854; Match(KEY);
				State = 7855; Match(LR_BRACKET);
				State = 7878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 7878;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1094,Context) ) {
					case 1:
						{
						State = 7857;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7856; Match(COMMA);
							}
						}

						State = 7859; Match(FILE);
						State = 7860; Match(EQUAL);
						State = 7861; _localctx.private_key_file = Match(STRING);
						}
						break;
					case 2:
						{
						State = 7863;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7862; Match(COMMA);
							}
						}

						State = 7865; Match(ENCRYPTION);
						State = 7866; Match(BY);
						State = 7867; Match(PASSWORD);
						State = 7868; Match(EQUAL);
						State = 7869; _localctx.encryption_password = Match(STRING);
						}
						break;
					case 3:
						{
						State = 7871;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7870; Match(COMMA);
							}
						}

						State = 7873; Match(DECRYPTION);
						State = 7874; Match(BY);
						State = 7875; Match(PASSWORD);
						State = 7876; Match(EQUAL);
						State = 7877; _localctx.decryption_pasword = Match(STRING);
						}
						break;
					}
					}
					State = 7880;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION || _la==COMMA );
				State = 7882; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_master_keyContext : ParserRuleContext {
		public IToken master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_master_keyContext backup_master_key() {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(Context, State);
		EnterRule(_localctx, 618, RULE_backup_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7885; Match(BACKUP);
			State = 7886; Match(MASTER);
			State = 7887; Match(KEY);
			State = 7888; Match(TO);
			State = 7889; Match(FILE);
			State = 7890; Match(EQUAL);
			State = 7891; _localctx.master_key_backup_file = Match(STRING);
			State = 7892; Match(ENCRYPTION);
			State = 7893; Match(BY);
			State = 7894; Match(PASSWORD);
			State = 7895; Match(EQUAL);
			State = 7896; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_service_master_keyContext : ParserRuleContext {
		public IToken service_master_key_backup_file;
		public IToken encryption_password;
		public ITerminalNode BACKUP() { return GetToken(TSqlParser.BACKUP, 0); }
		public ITerminalNode SERVICE() { return GetToken(TSqlParser.SERVICE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_service_master_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBackup_service_master_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBackup_service_master_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackup_service_master_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Backup_service_master_keyContext backup_service_master_key() {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(Context, State);
		EnterRule(_localctx, 620, RULE_backup_service_master_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7898; Match(BACKUP);
			State = 7899; Match(SERVICE);
			State = 7900; Match(MASTER);
			State = 7901; Match(KEY);
			State = 7902; Match(TO);
			State = 7903; Match(FILE);
			State = 7904; Match(EQUAL);
			State = 7905; _localctx.service_master_key_backup_file = Match(STRING);
			State = 7906; Match(ENCRYPTION);
			State = 7907; Match(BY);
			State = 7908; Match(PASSWORD);
			State = 7909; Match(EQUAL);
			State = 7910; _localctx.encryption_password = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statementContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return GetRuleContext<Execute_bodyContext>(0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statementContext execute_statement() {
		Execute_statementContext _localctx = new Execute_statementContext(Context, State);
		EnterRule(_localctx, 622, RULE_execute_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7912; Match(EXECUTE);
			State = 7913; execute_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_bodyContext : ParserRuleContext {
		public IToken return_status;
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] PLUS() { return GetTokens(TSqlParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(TSqlParser.PLUS, i);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode USER() { return GetToken(TSqlParser.USER, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_bodyContext execute_body() {
		Execute_bodyContext _localctx = new Execute_bodyContext(Context, State);
		EnterRule(_localctx, 624, RULE_execute_body);
		int _la;
		try {
			State = 7957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7917;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1097,Context) ) {
				case 1:
					{
					State = 7915; _localctx.return_status = Match(LOCAL_ID);
					State = 7916; Match(EQUAL);
					}
					break;
				}
				State = 7921;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1098,Context) ) {
				case 1:
					{
					State = 7919; func_proc_name_server_database_schema();
					}
					break;
				case 2:
					{
					State = 7920; expression(0);
					}
					break;
				}
				State = 7931;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1100,Context) ) {
				case 1:
					{
					State = 7923; execute_statement_arg();
					State = 7928;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 7924; Match(COMMA);
						State = 7925; execute_statement_arg();
						}
						}
						State = 7930;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 7934;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1101,Context) ) {
				case 1:
					{
					State = 7933; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7936; Match(LR_BRACKET);
				State = 7937; execute_var_string();
				State = 7942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS) {
					{
					{
					State = 7938; Match(PLUS);
					State = 7939; execute_var_string();
					}
					}
					State = 7944;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7945; Match(RR_BRACKET);
				State = 7952;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1104,Context) ) {
				case 1:
					{
					State = 7947;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 7946; Match(AS);
						}
					}

					State = 7949;
					_la = TokenStream.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 7950; Match(EQUAL);
					State = 7951; Match(STRING);
					}
					break;
				}
				State = 7955;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1105,Context) ) {
				case 1:
					{
					State = 7954; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_argContext : ParserRuleContext {
		public IToken parameter;
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_argContext execute_statement_arg() {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(Context, State);
		EnterRule(_localctx, 626, RULE_execute_statement_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7961;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1107,Context) ) {
			case 1:
				{
				State = 7959; _localctx.parameter = Match(LOCAL_ID);
				State = 7960; Match(EQUAL);
				}
				break;
			}
			State = 7972;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				State = 7965;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					State = 7963; constant_LOCAL_ID();
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 7964; id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7968;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1109,Context) ) {
				case 1:
					{
					State = 7967;
					_la = TokenStream.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case DEFAULT:
				{
				State = 7970; Match(DEFAULT);
				}
				break;
			case NULL:
				{
				State = 7971; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_var_stringContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_var_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_var_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_var_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_var_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_var_stringContext execute_var_string() {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(Context, State);
		EnterRule(_localctx, 628, RULE_execute_var_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7974;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_statementContext : ParserRuleContext {
		public Table_nameContext on_id;
		public IdContext _id;
		public IList<IdContext> _to_principal = new List<IdContext>();
		public IdContext as_principal;
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode[] GRANT() { return GetTokens(TSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(TSqlParser.GRANT, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return GetRuleContext<Grant_permissionContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode REVERT() { return GetToken(TSqlParser.REVERT, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return GetRuleContext<Open_keyContext>(0);
		}
		public Close_keyContext close_key() {
			return GetRuleContext<Close_keyContext>(0);
		}
		public Create_keyContext create_key() {
			return GetRuleContext<Create_keyContext>(0);
		}
		public Create_certificateContext create_certificate() {
			return GetRuleContext<Create_certificateContext>(0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSecurity_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSecurity_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecurity_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Security_statementContext security_statement() {
		Security_statementContext _localctx = new Security_statementContext(Context, State);
		EnterRule(_localctx, 630, RULE_security_statement);
		int _la;
		try {
			State = 8035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7976; execute_clause();
				State = 7978;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1111,Context) ) {
				case 1:
					{
					State = 7977; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7980; Match(GRANT);
				State = 7992;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALL:
					{
					State = 7981; Match(ALL);
					State = 7983;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PRIVILEGES) {
						{
						State = 7982; Match(PRIVILEGES);
						}
					}

					}
					break;
				case ALTER:
				case CREATE:
				case EXECUTE:
				case INSERT:
				case REFERENCES:
				case SELECT:
				case VIEW:
				case CONTROL:
				case IMPERSONATE:
				case SHOWPLAN:
				case TAKE:
					{
					State = 7985; grant_permission();
					State = 7990;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LR_BRACKET) {
						{
						State = 7986; Match(LR_BRACKET);
						State = 7987; column_name_list();
						State = 7988; Match(RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 7994; Match(ON);
					State = 7995; _localctx.on_id = table_name();
					}
				}

				State = 7998; Match(TO);
				{
				State = 7999; _localctx._id = id();
				_localctx._to_principal.Add(_localctx._id);
				}
				State = 8004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 8000; Match(COMMA);
					State = 8001; _localctx._id = id();
					_localctx._to_principal.Add(_localctx._id);
					}
					}
					State = 8006;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 8010;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1117,Context) ) {
				case 1:
					{
					State = 8007; Match(WITH);
					State = 8008; Match(GRANT);
					State = 8009; Match(OPTION);
					}
					break;
				}
				State = 8014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 8012; Match(AS);
					State = 8013; _localctx.as_principal = id();
					}
				}

				State = 8017;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1119,Context) ) {
				case 1:
					{
					State = 8016; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8019; Match(REVERT);
				State = 8026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1120,Context) ) {
				case 1:
					{
					State = 8020; Match(LR_BRACKET);
					State = 8021; Match(WITH);
					State = 8022; Match(COOKIE);
					State = 8023; Match(EQUAL);
					State = 8024; Match(LOCAL_ID);
					State = 8025; Match(RR_BRACKET);
					}
					break;
				}
				State = 8029;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1121,Context) ) {
				case 1:
					{
					State = 8028; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8031; open_key();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8032; close_key();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8033; create_key();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8034; create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_certificateContext : ParserRuleContext {
		public IdContext certificate_name;
		public IdContext user_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return GetRuleContext<Existing_keysContext>(0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return GetRuleContext<Generate_new_keysContext>(0);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Create_certificateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_certificate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_certificate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_certificate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_certificate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_certificateContext create_certificate() {
		Create_certificateContext _localctx = new Create_certificateContext(Context, State);
		EnterRule(_localctx, 632, RULE_create_certificate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8037; Match(CREATE);
			State = 8038; Match(CERTIFICATE);
			State = 8039; _localctx.certificate_name = id();
			State = 8042;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHORIZATION) {
				{
				State = 8040; Match(AUTHORIZATION);
				State = 8041; _localctx.user_name = id();
				}
			}

			State = 8047;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				{
				State = 8044; Match(FROM);
				State = 8045; existing_keys();
				}
				break;
			case WITH:
			case ENCRYPTION:
				{
				State = 8046; generate_new_keys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1125,Context) ) {
			case 1:
				{
				State = 8049; Match(ACTIVE);
				State = 8050; Match(FOR);
				State = 8051; Match(BEGIN);
				State = 8052; Match(DIALOG);
				State = 8053; Match(EQUAL);
				State = 8054;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Existing_keysContext : ParserRuleContext {
		public IdContext assembly_name;
		public IToken path_to_file;
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Private_key_optionsContext private_key_options() {
			return GetRuleContext<Private_key_optionsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Existing_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existing_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExisting_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExisting_keys(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExisting_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Existing_keysContext existing_keys() {
		Existing_keysContext _localctx = new Existing_keysContext(Context, State);
		EnterRule(_localctx, 634, RULE_existing_keys);
		int _la;
		try {
			State = 8074;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSEMBLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8057; Match(ASSEMBLY);
				State = 8058; _localctx.assembly_name = id();
				}
				break;
			case FILE:
			case EXECUTABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXECUTABLE) {
					{
					State = 8059; Match(EXECUTABLE);
					}
				}

				State = 8062; Match(FILE);
				State = 8063; Match(EQUAL);
				State = 8064; _localctx.path_to_file = Match(STRING);
				State = 8072;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1127,Context) ) {
				case 1:
					{
					State = 8065; Match(WITH);
					State = 8066; Match(PRIVATE);
					State = 8067; Match(KEY);
					State = 8068; Match(LR_BRACKET);
					State = 8069; private_key_options();
					State = 8070; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Private_key_optionsContext : ParserRuleContext {
		public IToken path;
		public IToken password;
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FILE() { return GetToken(TSqlParser.FILE, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_private_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrivate_key_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrivate_key_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivate_key_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Private_key_optionsContext private_key_options() {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(Context, State);
		EnterRule(_localctx, 636, RULE_private_key_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8076;
			_la = TokenStream.LA(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8077; Match(EQUAL);
			State = 8078; _localctx.path = Match(STRING);
			State = 8085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 8079; Match(COMMA);
				State = 8080;
				_la = TokenStream.LA(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8081; Match(BY);
				State = 8082; Match(PASSWORD);
				State = 8083; Match(EQUAL);
				State = 8084; _localctx.password = Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_new_keysContext : ParserRuleContext {
		public IToken password;
		public IToken certificate_subject_name;
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Date_optionsContext[] date_options() {
			return GetRuleContexts<Date_optionsContext>();
		}
		public Date_optionsContext date_options(int i) {
			return GetRuleContext<Date_optionsContext>(i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_new_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGenerate_new_keys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGenerate_new_keys(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenerate_new_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generate_new_keysContext generate_new_keys() {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(Context, State);
		EnterRule(_localctx, 638, RULE_generate_new_keys);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8092;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENCRYPTION) {
				{
				State = 8087; Match(ENCRYPTION);
				State = 8088; Match(BY);
				State = 8089; Match(PASSWORD);
				State = 8090; Match(EQUAL);
				State = 8091; _localctx.password = Match(STRING);
				}
			}

			State = 8094; Match(WITH);
			State = 8095; Match(SUBJECT);
			State = 8096; Match(EQUAL);
			State = 8097; _localctx.certificate_subject_name = Match(STRING);
			State = 8102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8098; Match(COMMA);
				State = 8099; date_options();
				}
				}
				State = 8104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_optionsContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDate_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDate_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_optionsContext date_options() {
		Date_optionsContext _localctx = new Date_optionsContext(Context, State);
		EnterRule(_localctx, 640, RULE_date_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8105;
			_la = TokenStream.LA(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8106; Match(EQUAL);
			State = 8107; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_keyContext : ParserRuleContext {
		public IdContext key_name;
		public IToken password;
		public ITerminalNode OPEN() { return GetToken(TSqlParser.OPEN, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return GetRuleContext<Decryption_mechanismContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_keyContext open_key() {
		Open_keyContext _localctx = new Open_keyContext(Context, State);
		EnterRule(_localctx, 642, RULE_open_key);
		try {
			State = 8125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1132,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8109; Match(OPEN);
				State = 8110; Match(SYMMETRIC);
				State = 8111; Match(KEY);
				State = 8112; _localctx.key_name = id();
				State = 8113; Match(DECRYPTION);
				State = 8114; Match(BY);
				State = 8115; decryption_mechanism();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8117; Match(OPEN);
				State = 8118; Match(MASTER);
				State = 8119; Match(KEY);
				State = 8120; Match(DECRYPTION);
				State = 8121; Match(BY);
				State = 8122; Match(PASSWORD);
				State = 8123; Match(EQUAL);
				State = 8124; _localctx.password = Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_keyContext : ParserRuleContext {
		public IdContext key_name;
		public ITerminalNode CLOSE() { return GetToken(TSqlParser.CLOSE, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClose_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClose_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClose_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Close_keyContext close_key() {
		Close_keyContext _localctx = new Close_keyContext(Context, State);
		EnterRule(_localctx, 644, RULE_close_key);
		try {
			State = 8138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8127; Match(CLOSE);
				State = 8128; Match(SYMMETRIC);
				State = 8129; Match(KEY);
				State = 8130; _localctx.key_name = id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8131; Match(CLOSE);
				State = 8132; Match(ALL);
				State = 8133; Match(SYMMETRIC);
				State = 8134; Match(KEYS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8135; Match(CLOSE);
				State = 8136; Match(MASTER);
				State = 8137; Match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_keyContext : ParserRuleContext {
		public IToken password;
		public IdContext key_name;
		public IdContext user_name;
		public IdContext provider_name;
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode[] ENCRYPTION() { return GetTokens(TSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(TSqlParser.ENCRYPTION, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSqlParser.BY, i);
		}
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode AUTHORIZATION() { return GetToken(TSqlParser.AUTHORIZATION, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public Key_optionsContext[] key_options() {
			return GetRuleContexts<Key_optionsContext>();
		}
		public Key_optionsContext key_options(int i) {
			return GetRuleContext<Key_optionsContext>(i);
		}
		public Encryption_mechanismContext[] encryption_mechanism() {
			return GetRuleContexts<Encryption_mechanismContext>();
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return GetRuleContext<Encryption_mechanismContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_keyContext create_key() {
		Create_keyContext _localctx = new Create_keyContext(Context, State);
		EnterRule(_localctx, 646, RULE_create_key);
		int _la;
		try {
			int _alt;
			State = 8175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1139,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8140; Match(CREATE);
				State = 8141; Match(MASTER);
				State = 8142; Match(KEY);
				State = 8143; Match(ENCRYPTION);
				State = 8144; Match(BY);
				State = 8145; Match(PASSWORD);
				State = 8146; Match(EQUAL);
				State = 8147; _localctx.password = Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8148; Match(CREATE);
				State = 8149; Match(SYMMETRIC);
				State = 8150; Match(KEY);
				State = 8151; _localctx.key_name = id();
				State = 8154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTHORIZATION) {
					{
					State = 8152; Match(AUTHORIZATION);
					State = 8153; _localctx.user_name = id();
					}
				}

				State = 8159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 8156; Match(FROM);
					State = 8157; Match(PROVIDER);
					State = 8158; _localctx.provider_name = id();
					}
				}

				State = 8161; Match(WITH);
				State = 8171;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 8166;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ALGORITHM:
						case CREATION_DISPOSITION:
						case IDENTITY_VALUE:
						case KEY_SOURCE:
						case PROVIDER_KEY_NAME:
							{
							State = 8162; key_options();
							}
							break;
						case ENCRYPTION:
							{
							State = 8163; Match(ENCRYPTION);
							State = 8164; Match(BY);
							State = 8165; encryption_mechanism();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 8169;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 8168; Match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8173;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1138,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_optionsContext : ParserRuleContext {
		public IToken pass_phrase;
		public IToken identity_phrase;
		public IToken key_name_in_provider;
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return GetRuleContext<AlgorithmContext>(0);
		}
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterKey_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitKey_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_optionsContext key_options() {
		Key_optionsContext _localctx = new Key_optionsContext(Context, State);
		EnterRule(_localctx, 648, RULE_key_options);
		int _la;
		try {
			State = 8192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEY_SOURCE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8177; Match(KEY_SOURCE);
				State = 8178; Match(EQUAL);
				State = 8179; _localctx.pass_phrase = Match(STRING);
				}
				break;
			case ALGORITHM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8180; Match(ALGORITHM);
				State = 8181; Match(EQUAL);
				State = 8182; algorithm();
				}
				break;
			case IDENTITY_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8183; Match(IDENTITY_VALUE);
				State = 8184; Match(EQUAL);
				State = 8185; _localctx.identity_phrase = Match(STRING);
				}
				break;
			case PROVIDER_KEY_NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8186; Match(PROVIDER_KEY_NAME);
				State = 8187; Match(EQUAL);
				State = 8188; _localctx.key_name_in_provider = Match(STRING);
				}
				break;
			case CREATION_DISPOSITION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8189; Match(CREATION_DISPOSITION);
				State = 8190; Match(EQUAL);
				State = 8191;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlgorithmContext : ParserRuleContext {
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_algorithm; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlgorithmContext algorithm() {
		AlgorithmContext _localctx = new AlgorithmContext(Context, State);
		EnterRule(_localctx, 650, RULE_algorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8194;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (AES_128 - 390)) | (1L << (AES_192 - 390)) | (1L << (AES_256 - 390)))) != 0) || _la==DES || _la==DESX || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (RC2 - 664)) | (1L << (RC4 - 664)) | (1L << (RC4_128 - 664)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encryption_mechanismContext : ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEncryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEncryption_mechanism(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncryption_mechanism(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Encryption_mechanismContext encryption_mechanism() {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(Context, State);
		EnterRule(_localctx, 652, RULE_encryption_mechanism);
		try {
			State = 8207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CERTIFICATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8196; Match(CERTIFICATE);
				State = 8197; _localctx.certificate_name = id();
				}
				break;
			case ASYMMETRIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8198; Match(ASYMMETRIC);
				State = 8199; Match(KEY);
				State = 8200; _localctx.asym_key_name = id();
				}
				break;
			case SYMMETRIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8201; Match(SYMMETRIC);
				State = 8202; Match(KEY);
				State = 8203; _localctx.decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8204; Match(PASSWORD);
				State = 8205; Match(EQUAL);
				State = 8206; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decryption_mechanismContext : ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public ITerminalNode CERTIFICATE() { return GetToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode PASSWORD() { return GetToken(TSqlParser.PASSWORD, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(TSqlParser.ASYMMETRIC, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decryption_mechanism; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDecryption_mechanism(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDecryption_mechanism(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecryption_mechanism(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decryption_mechanismContext decryption_mechanism() {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(Context, State);
		EnterRule(_localctx, 654, RULE_decryption_mechanism);
		try {
			State = 8232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CERTIFICATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8209; Match(CERTIFICATE);
				State = 8210; _localctx.certificate_name = id();
				State = 8215;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1142,Context) ) {
				case 1:
					{
					State = 8211; Match(WITH);
					State = 8212; Match(PASSWORD);
					State = 8213; Match(EQUAL);
					State = 8214; Match(STRING);
					}
					break;
				}
				}
				break;
			case ASYMMETRIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8217; Match(ASYMMETRIC);
				State = 8218; Match(KEY);
				State = 8219; _localctx.asym_key_name = id();
				State = 8224;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1143,Context) ) {
				case 1:
					{
					State = 8220; Match(WITH);
					State = 8221; Match(PASSWORD);
					State = 8222; Match(EQUAL);
					State = 8223; Match(STRING);
					}
					break;
				}
				}
				break;
			case SYMMETRIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8226; Match(SYMMETRIC);
				State = 8227; Match(KEY);
				State = 8228; _localctx.decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8229; Match(PASSWORD);
				State = 8230; Match(EQUAL);
				State = 8231; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_permissionContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode VIEW() { return GetToken(TSqlParser.VIEW, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode CREATE() { return GetToken(TSqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public ITerminalNode INSERT() { return GetToken(TSqlParser.INSERT, 0); }
		public ITerminalNode ALTER() { return GetToken(TSqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSqlParser.DATABASE, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_permission; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGrant_permission(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGrant_permission(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_permission(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_permissionContext grant_permission() {
		Grant_permissionContext _localctx = new Grant_permissionContext(Context, State);
		EnterRule(_localctx, 656, RULE_grant_permission);
		int _la;
		try {
			State = 8260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXECUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8234; Match(EXECUTE);
				}
				break;
			case VIEW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8235; Match(VIEW);
				State = 8236; id();
				}
				break;
			case TAKE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8237; Match(TAKE);
				State = 8238; id();
				}
				break;
			case CONTROL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8239; Match(CONTROL);
				State = 8241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)))) != 0)) {
					{
					State = 8240; id();
					}
				}

				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8243; Match(CREATE);
				State = 8244;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SHOWPLAN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8245; Match(SHOWPLAN);
				}
				break;
			case IMPERSONATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8246; Match(IMPERSONATE);
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8247; Match(SELECT);
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8248; Match(REFERENCES);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8249; Match(INSERT);
				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8250; Match(ALTER);
				State = 8258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY || _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (DATABASE - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)))) != 0)) {
					{
					State = 8252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ANY) {
						{
						State = 8251; Match(ANY);
						}
					}

					State = 8256;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 8254; id();
						}
						break;
					case DATABASE:
						{
						State = 8255; Match(DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public IdContext member_name;
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Set_specialContext set_special() {
			return GetRuleContext<Set_specialContext>(0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(Context, State);
		EnterRule(_localctx, 658, RULE_set_statement);
		int _la;
		try {
			State = 8301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8262; Match(SET);
				State = 8263; Match(LOCAL_ID);
				State = 8266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 8264; Match(DOT);
					State = 8265; _localctx.member_name = id();
					}
				}

				State = 8268; Match(EQUAL);
				State = 8269; expression(0);
				State = 8271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1151,Context) ) {
				case 1:
					{
					State = 8270; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8273; Match(SET);
				State = 8274; Match(LOCAL_ID);
				State = 8275; assignment_operator();
				State = 8276; expression(0);
				State = 8278;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1152,Context) ) {
				case 1:
					{
					State = 8277; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8280; Match(SET);
				State = 8281; Match(LOCAL_ID);
				State = 8282; Match(EQUAL);
				State = 8283; Match(CURSOR);
				State = 8284; declare_set_cursor_common();
				State = 8295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 8285; Match(FOR);
					State = 8293;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case READ:
						{
						State = 8286; Match(READ);
						State = 8287; Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 8288; Match(UPDATE);
						State = 8291;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==OF) {
							{
							State = 8289; Match(OF);
							State = 8290; column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 8298;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1156,Context) ) {
				case 1:
					{
					State = 8297; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8300; set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DISTRIBUTED() { return GetToken(TSqlParser.DISTRIBUTED, 0); }
		public ITerminalNode TRAN() { return GetToken(TSqlParser.TRAN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSqlParser.COMMIT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSqlParser.ROLLBACK, 0); }
		public ITerminalNode SAVE() { return GetToken(TSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTransaction_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTransaction_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_statementContext transaction_statement() {
		Transaction_statementContext _localctx = new Transaction_statementContext(Context, State);
		EnterRule(_localctx, 660, RULE_transaction_statement);
		int _la;
		try {
			State = 8384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8303; Match(BEGIN);
				State = 8304; Match(DISTRIBUTED);
				State = 8305;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8308;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1158,Context) ) {
				case 1:
					{
					State = 8306; id();
					}
					break;
				case 2:
					{
					State = 8307; Match(LOCAL_ID);
					}
					break;
				}
				State = 8311;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1159,Context) ) {
				case 1:
					{
					State = 8310; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8313; Match(BEGIN);
				State = 8314;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8324;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1162,Context) ) {
				case 1:
					{
					State = 8317;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 8315; id();
						}
						break;
					case LOCAL_ID:
						{
						State = 8316; Match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8322;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1161,Context) ) {
					case 1:
						{
						State = 8319; Match(WITH);
						State = 8320; Match(MARK);
						State = 8321; Match(STRING);
						}
						break;
					}
					}
					break;
				}
				State = 8327;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1163,Context) ) {
				case 1:
					{
					State = 8326; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8329; Match(COMMIT);
				State = 8330;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8343;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1166,Context) ) {
				case 1:
					{
					State = 8333;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 8331; id();
						}
						break;
					case LOCAL_ID:
						{
						State = 8332; Match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8341;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1165,Context) ) {
					case 1:
						{
						State = 8335; Match(WITH);
						State = 8336; Match(LR_BRACKET);
						State = 8337; Match(DELAYED_DURABILITY);
						State = 8338; Match(EQUAL);
						State = 8339;
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 8340; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 8346;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1167,Context) ) {
				case 1:
					{
					State = 8345; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8348; Match(COMMIT);
				State = 8350;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1168,Context) ) {
				case 1:
					{
					State = 8349; Match(WORK);
					}
					break;
				}
				State = 8353;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1169,Context) ) {
				case 1:
					{
					State = 8352; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8355; Match(COMMIT);
				State = 8356; id();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8357; Match(ROLLBACK);
				State = 8358; id();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8359; Match(ROLLBACK);
				State = 8360;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8363;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1170,Context) ) {
				case 1:
					{
					State = 8361; id();
					}
					break;
				case 2:
					{
					State = 8362; Match(LOCAL_ID);
					}
					break;
				}
				State = 8366;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1171,Context) ) {
				case 1:
					{
					State = 8365; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8368; Match(ROLLBACK);
				State = 8370;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1172,Context) ) {
				case 1:
					{
					State = 8369; Match(WORK);
					}
					break;
				}
				State = 8373;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1173,Context) ) {
				case 1:
					{
					State = 8372; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8375; Match(SAVE);
				State = 8376;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8379;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1174,Context) ) {
				case 1:
					{
					State = 8377; id();
					}
					break;
				case 2:
					{
					State = 8378; Match(LOCAL_ID);
					}
					break;
				}
				State = 8382;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1175,Context) ) {
				case 1:
					{
					State = 8381; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_statementContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGo_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGo_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Go_statementContext go_statement() {
		Go_statementContext _localctx = new Go_statementContext(Context, State);
		EnterRule(_localctx, 662, RULE_go_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8386; Match(GO);
			State = 8388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1177,Context) ) {
			case 1:
				{
				State = 8387; _localctx.count = Match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_statementContext : ParserRuleContext {
		public IdContext database;
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Use_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUse_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Use_statementContext use_statement() {
		Use_statementContext _localctx = new Use_statementContext(Context, State);
		EnterRule(_localctx, 664, RULE_use_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8390; Match(USE);
			State = 8391; _localctx.database = id();
			State = 8393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1178,Context) ) {
			case 1:
				{
				State = 8392; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setuser_statementContext : ParserRuleContext {
		public IToken user;
		public ITerminalNode SETUSER() { return GetToken(TSqlParser.SETUSER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setuser_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSetuser_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSetuser_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetuser_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Setuser_statementContext setuser_statement() {
		Setuser_statementContext _localctx = new Setuser_statementContext(Context, State);
		EnterRule(_localctx, 666, RULE_setuser_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8395; Match(SETUSER);
			State = 8397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1179,Context) ) {
			case 1:
				{
				State = 8396; _localctx.user = Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_clauseContext : ParserRuleContext {
		public Simple_idContext name;
		public ITerminalNode DBCC() { return GetToken(TSqlParser.DBCC, 0); }
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Dbcc_optionsContext dbcc_options() {
			return GetRuleContext<Dbcc_optionsContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_clauseContext dbcc_clause() {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(Context, State);
		EnterRule(_localctx, 668, RULE_dbcc_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8399; Match(DBCC);
			State = 8400; _localctx.name = simple_id();
			State = 8405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1180,Context) ) {
			case 1:
				{
				State = 8401; Match(LR_BRACKET);
				State = 8402; expression_list();
				State = 8403; Match(RR_BRACKET);
				}
				break;
			}
			State = 8409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1181,Context) ) {
			case 1:
				{
				State = 8407; Match(WITH);
				State = 8408; dbcc_options();
				}
				break;
			}
			State = 8412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1182,Context) ) {
			case 1:
				{
				State = 8411; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dbcc_optionsContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Dbcc_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbcc_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDbcc_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDbcc_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbcc_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dbcc_optionsContext dbcc_options() {
		Dbcc_optionsContext _localctx = new Dbcc_optionsContext(Context, State);
		EnterRule(_localctx, 670, RULE_dbcc_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8414; simple_id();
			State = 8417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 8415; Match(COMMA);
				State = 8416; simple_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_clauseContext : ParserRuleContext {
		public IToken clause;
		public ITerminalNode EXECUTE() { return GetToken(TSqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExecute_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExecute_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_clauseContext execute_clause() {
		Execute_clauseContext _localctx = new Execute_clauseContext(Context, State);
		EnterRule(_localctx, 672, RULE_execute_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8419; Match(EXECUTE);
			State = 8420; Match(AS);
			State = 8421;
			_localctx.clause = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				_localctx.clause = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_localContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_local; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_local(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_local(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_local(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_localContext declare_local() {
		Declare_localContext _localctx = new Declare_localContext(Context, State);
		EnterRule(_localctx, 674, RULE_declare_local);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8423; Match(LOCAL_ID);
			State = 8425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 8424; Match(AS);
				}
			}

			State = 8427; data_type();
			State = 8430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 8428; Match(EQUAL);
				State = 8429; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_definitionContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(TSqlParser.TABLE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_type_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_definitionContext table_type_definition() {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(Context, State);
		EnterRule(_localctx, 676, RULE_table_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8432; Match(TABLE);
			State = 8433; Match(LR_BRACKET);
			State = 8434; column_def_table_constraints();
			State = 8435; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_type_definitionContext : ParserRuleContext {
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return GetRuleContext<Xml_schema_collectionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_type_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_type_definitionContext xml_type_definition() {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(Context, State);
		EnterRule(_localctx, 678, RULE_xml_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8437; Match(XML);
			State = 8438; Match(LR_BRACKET);
			State = 8440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTENT || _la==DOCUMENT) {
				{
				State = 8439;
				_la = TokenStream.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 8442; xml_schema_collection();
			State = 8443; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_schema_collectionContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_schema_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_schema_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_schema_collection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_schema_collection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_schema_collectionContext xml_schema_collection() {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(Context, State);
		EnterRule(_localctx, 680, RULE_xml_schema_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8445; Match(ID);
			State = 8446; Match(DOT);
			State = 8447; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintsContext : ParserRuleContext {
		public Column_def_table_constraintContext[] column_def_table_constraint() {
			return GetRuleContexts<Column_def_table_constraintContext>();
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return GetRuleContext<Column_def_table_constraintContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintsContext column_def_table_constraints() {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(Context, State);
		EnterRule(_localctx, 682, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8449; column_def_table_constraint();
			State = 8456;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1188,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8451;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 8450; Match(COMMA);
						}
					}

					State = 8453; column_def_table_constraint();
					}
					} 
				}
				State = 8458;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1188,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintContext : ParserRuleContext {
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return GetRuleContext<Materialized_column_definitionContext>(0);
		}
		public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintContext column_def_table_constraint() {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(Context, State);
		EnterRule(_localctx, 684, RULE_column_def_table_constraint);
		try {
			State = 8462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1189,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8459; column_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8460; materialized_column_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8461; table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public IdContext constraint;
		public IToken seed;
		public IToken increment;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Null_or_defaultContext[] null_or_default() {
			return GetRuleContexts<Null_or_defaultContext>();
		}
		public Null_or_defaultContext null_or_default(int i) {
			return GetRuleContext<Null_or_defaultContext>(i);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUIDCOL() { return GetToken(TSqlParser.ROWGUIDCOL, 0); }
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 686, RULE_column_definition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8464; id();
			State = 8468;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case DOUBLE:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 8465; data_type();
				}
				break;
			case AS:
				{
				State = 8466; Match(AS);
				State = 8467; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 8470; Match(COLLATE);
				State = 8471; id();
				}
			}

			State = 8475;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1192,Context) ) {
			case 1:
				{
				State = 8474; null_notnull();
				}
				break;
			}
			State = 8498;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1197,Context) ) {
			case 1:
				{
				State = 8479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 8477; Match(CONSTRAINT);
					State = 8478; _localctx.constraint = id();
					}
				}

				State = 8481; null_or_default();
				State = 8483;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1194,Context) ) {
				case 1:
					{
					State = 8482; null_or_default();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 8485; Match(IDENTITY);
				State = 8491;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1195,Context) ) {
				case 1:
					{
					State = 8486; Match(LR_BRACKET);
					State = 8487; _localctx.seed = Match(DECIMAL);
					State = 8488; Match(COMMA);
					State = 8489; _localctx.increment = Match(DECIMAL);
					State = 8490; Match(RR_BRACKET);
					}
					break;
				}
				State = 8496;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1196,Context) ) {
				case 1:
					{
					State = 8493; Match(NOT);
					State = 8494; Match(FOR);
					State = 8495; Match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			State = 8501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				State = 8500; Match(ROWGUIDCOL);
				}
			}

			State = 8506;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1199,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8503; column_constraint();
					}
					} 
				}
				State = 8508;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1199,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Materialized_column_definitionContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMPUTE() { return GetToken(TSqlParser.COMPUTE, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialized_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMaterialized_column_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMaterialized_column_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialized_column_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Materialized_column_definitionContext materialized_column_definition() {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(Context, State);
		EnterRule(_localctx, 688, RULE_materialized_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8509; id();
			State = 8510;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8511; expression(0);
			State = 8515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1200,Context) ) {
			case 1:
				{
				State = 8512; Match(MATERIALIZED);
				}
				break;
			case 2:
				{
				State = 8513; Match(NOT);
				State = 8514; Match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext pk;
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 690, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 8517; Match(CONSTRAINT);
				State = 8518; _localctx.constraint = id();
				}
			}

			State = 8558;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 8524;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 8521; Match(PRIMARY);
					State = 8522; Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 8523; Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 8526; clustered();
					}
				}

				State = 8530;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1204,Context) ) {
				case 1:
					{
					State = 8529; index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				State = 8532; Match(CHECK);
				State = 8536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 8533; Match(NOT);
					State = 8534; Match(FOR);
					State = 8535; Match(REPLICATION);
					}
				}

				State = 8538; Match(LR_BRACKET);
				State = 8539; search_condition();
				State = 8540; Match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				State = 8544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOREIGN) {
					{
					State = 8542; Match(FOREIGN);
					State = 8543; Match(KEY);
					}
				}

				State = 8546; Match(REFERENCES);
				State = 8547; table_name();
				State = 8548; Match(LR_BRACKET);
				State = 8549; _localctx.pk = column_name_list();
				State = 8550; Match(RR_BRACKET);
				State = 8552;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1207,Context) ) {
				case 1:
					{
					State = 8551; on_delete();
					}
					break;
				}
				State = 8555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 8554; on_update();
					}
				}

				}
				break;
			case NOT:
			case NULL:
				{
				State = 8557; null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return GetRuleContext<Column_name_list_with_orderContext>(0);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode CHECK() { return GetToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FOREIGN() { return GetToken(TSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSqlParser.PRIMARY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSqlParser.REPLICATION, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(TSqlParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(TSqlParser.PLUS, i);
		}
		public Function_callContext[] function_call() {
			return GetRuleContexts<Function_callContext>();
		}
		public Function_callContext function_call(int i) {
			return GetRuleContext<Function_callContext>(i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public On_deleteContext on_delete() {
			return GetRuleContext<On_deleteContext>(0);
		}
		public On_updateContext on_update() {
			return GetRuleContext<On_updateContext>(0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 692, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 8560; Match(CONSTRAINT);
				State = 8561; _localctx.constraint = id();
				}
			}

			State = 8628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 8567;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 8564; Match(PRIMARY);
					State = 8565; Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 8566; Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 8569; clustered();
					}
				}

				State = 8572; Match(LR_BRACKET);
				State = 8573; column_name_list_with_order();
				State = 8574; Match(RR_BRACKET);
				State = 8576;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1213,Context) ) {
				case 1:
					{
					State = 8575; index_options();
					}
					break;
				}
				State = 8580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 8578; Match(ON);
					State = 8579; id();
					}
				}

				}
				break;
			case CHECK:
				{
				State = 8582; Match(CHECK);
				State = 8586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 8583; Match(NOT);
					State = 8584; Match(FOR);
					State = 8585; Match(REPLICATION);
					}
				}

				State = 8588; Match(LR_BRACKET);
				State = 8589; search_condition();
				State = 8590; Match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				{
				State = 8592; Match(DEFAULT);
				State = 8594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 8593; Match(LR_BRACKET);
					}
				}

				State = 8600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 8600;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
						{
						State = 8596; Match(STRING);
						}
						break;
					case PLUS:
						{
						State = 8597; Match(PLUS);
						}
						break;
					case CALLED:
					case COALESCE:
					case CONVERT:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case IDENTITY:
					case IIF:
					case INIT:
					case ISNULL:
					case KEY:
					case LEFT:
					case MASTER:
					case MAX_MEMORY:
					case NULLIF:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case RIGHT:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SESSION_USER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case SYSTEM_USER:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case ID:
						{
						State = 8598; function_call();
						}
						break;
					case DECIMAL:
						{
						State = 8599; Match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 8602;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CALLED || _la==COALESCE || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CONVERT - 69)) | (1L << (CURRENT_TIMESTAMP - 69)) | (1L << (CURRENT_USER - 69)) | (1L << (DATA_COMPRESSION - 69)) | (1L << (EVENTDATA - 69)) | (1L << (FILENAME - 69)) | (1L << (FILLFACTOR - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (FORCESEEK - 133)) | (1L << (IDENTITY - 133)) | (1L << (IIF - 133)) | (1L << (INIT - 133)) | (1L << (ISNULL - 133)) | (1L << (KEY - 133)) | (1L << (LEFT - 133)) | (1L << (MASTER - 133)) | (1L << (MAX_MEMORY - 133)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (NULLIF - 223)) | (1L << (OFFSETS - 223)) | (1L << (PAGE - 223)) | (1L << (PUBLIC - 223)) | (1L << (R - 223)) | (1L << (RAW - 223)) | (1L << (RETURN - 223)) | (1L << (RETURNS - 223)) | (1L << (RIGHT - 223)))) != 0) || ((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & ((1L << (ROWCOUNT - 289)) | (1L << (SAFETY - 289)) | (1L << (SERVER - 289)) | (1L << (SESSION_USER - 289)) | (1L << (SID - 289)) | (1L << (SOURCE - 289)) | (1L << (STATE - 289)) | (1L << (START - 289)) | (1L << (SYSTEM_USER - 289)) | (1L << (TARGET - 289)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (LOCAL_ID - 768)) | (1L << (DECIMAL - 768)) | (1L << (ID - 768)) | (1L << (STRING - 768)) | (1L << (PLUS - 768)))) != 0) );
				State = 8605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RR_BRACKET) {
					{
					State = 8604; Match(RR_BRACKET);
					}
				}

				State = 8607; Match(FOR);
				State = 8608; id();
				}
				break;
			case FOREIGN:
				{
				State = 8609; Match(FOREIGN);
				State = 8610; Match(KEY);
				State = 8611; Match(LR_BRACKET);
				State = 8612; _localctx.fk = column_name_list();
				State = 8613; Match(RR_BRACKET);
				State = 8614; Match(REFERENCES);
				State = 8615; table_name();
				State = 8620;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1220,Context) ) {
				case 1:
					{
					State = 8616; Match(LR_BRACKET);
					State = 8617; _localctx.pk = column_name_list();
					State = 8618; Match(RR_BRACKET);
					}
					break;
				}
				State = 8623;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1221,Context) ) {
				case 1:
					{
					State = 8622; on_delete();
					}
					break;
				}
				State = 8626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 8625; on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_deleteContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode DELETE() { return GetToken(TSqlParser.DELETE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_delete; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_delete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_delete(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_delete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_deleteContext on_delete() {
		On_deleteContext _localctx = new On_deleteContext(Context, State);
		EnterRule(_localctx, 694, RULE_on_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8630; Match(ON);
			State = 8631; Match(DELETE);
			State = 8639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1224,Context) ) {
			case 1:
				{
				State = 8632; Match(NO);
				State = 8633; Match(ACTION);
				}
				break;
			case 2:
				{
				State = 8634; Match(CASCADE);
				}
				break;
			case 3:
				{
				State = 8635; Match(SET);
				State = 8636; Match(NULL);
				}
				break;
			case 4:
				{
				State = 8637; Match(SET);
				State = 8638; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_updateContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode CASCADE() { return GetToken(TSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_update; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_update(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_update(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_update(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_updateContext on_update() {
		On_updateContext _localctx = new On_updateContext(Context, State);
		EnterRule(_localctx, 696, RULE_on_update);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8641; Match(ON);
			State = 8642; Match(UPDATE);
			State = 8650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1225,Context) ) {
			case 1:
				{
				State = 8643; Match(NO);
				State = 8644; Match(ACTION);
				}
				break;
			case 2:
				{
				State = 8645; Match(CASCADE);
				}
				break;
			case 3:
				{
				State = 8646; Match(SET);
				State = 8647; Match(NULL);
				}
				break;
			case 4:
				{
				State = 8648; Match(SET);
				State = 8649; Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionsContext index_options() {
		Index_optionsContext _localctx = new Index_optionsContext(Context, State);
		EnterRule(_localctx, 698, RULE_index_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8652; Match(WITH);
			State = 8653; Match(LR_BRACKET);
			State = 8654; index_option();
			State = 8659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8655; Match(COMMA);
				State = 8656; index_option();
				}
				}
				State = 8661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8662; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionContext index_option() {
		Index_optionContext _localctx = new Index_optionContext(Context, State);
		EnterRule(_localctx, 700, RULE_index_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8664; simple_id();
			State = 8665; Match(EQUAL);
			State = 8669;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				State = 8666; simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				State = 8667; on_off();
				}
				break;
			case DECIMAL:
				{
				State = 8668; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_cursorContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(TSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSqlParser.CURSOR, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSqlParser.FOR, i);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_cursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_cursorContext declare_cursor() {
		Declare_cursorContext _localctx = new Declare_cursorContext(Context, State);
		EnterRule(_localctx, 702, RULE_declare_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8671; Match(DECLARE);
			State = 8672; cursor_name();
			State = 8704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1235,Context) ) {
			case 1:
				{
				State = 8673; Match(CURSOR);
				State = 8683;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1230,Context) ) {
				case 1:
					{
					State = 8674; declare_set_cursor_common();
					State = 8681;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FOR) {
						{
						State = 8675; Match(FOR);
						State = 8676; Match(UPDATE);
						State = 8679;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==OF) {
							{
							State = 8677; Match(OF);
							State = 8678; column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 8686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INSENSITIVE || _la==SEMI_SENSITIVE) {
					{
					State = 8685;
					_la = TokenStream.LA(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 8689;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SCROLL) {
					{
					State = 8688; Match(SCROLL);
					}
				}

				State = 8691; Match(CURSOR);
				State = 8692; Match(FOR);
				State = 8693; select_statement();
				State = 8702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 8694; Match(FOR);
					State = 8700;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case READ:
						{
						State = 8695; Match(READ);
						State = 8696; Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 8697; Match(UPDATE);
						}
						break;
					case OF:
						{
						{
						State = 8698; Match(OF);
						State = 8699; column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			State = 8707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1236,Context) ) {
			case 1:
				{
				State = 8706; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_commonContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Declare_set_cursor_common_partialContext[] declare_set_cursor_common_partial() {
			return GetRuleContexts<Declare_set_cursor_common_partialContext>();
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return GetRuleContext<Declare_set_cursor_common_partialContext>(i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_set_cursor_common(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_commonContext declare_set_cursor_common() {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(Context, State);
		EnterRule(_localctx, 704, RULE_declare_set_cursor_common);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 486)) & ~0x3f) == 0 && ((1L << (_la - 486)) & ((1L << (DYNAMIC - 486)) | (1L << (FAST_FORWARD - 486)) | (1L << (FORWARD_ONLY - 486)) | (1L << (GLOBAL - 486)))) != 0) || _la==KEYSET || _la==LOCAL || _la==OPTIMISTIC || _la==READ_ONLY || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL - 703)) | (1L << (SCROLL_LOCKS - 703)) | (1L << (STATIC - 703)) | (1L << (TYPE_WARNING - 703)))) != 0)) {
				{
				{
				State = 8709; declare_set_cursor_common_partial();
				}
				}
				State = 8714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8715; Match(FOR);
			State = 8716; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_common_partialContext : ParserRuleContext {
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common_partial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common_partial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common_partial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_set_cursor_common_partial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(Context, State);
		EnterRule(_localctx, 706, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			State = 8723;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL:
			case LOCAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8718;
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case FORWARD_ONLY:
			case SCROLL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8719;
				_la = TokenStream.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DYNAMIC:
			case FAST_FORWARD:
			case KEYSET:
			case STATIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8720;
				_la = TokenStream.LA(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case OPTIMISTIC:
			case READ_ONLY:
			case SCROLL_LOCKS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8721;
				_la = TokenStream.LA(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TYPE_WARNING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8722; Match(TYPE_WARNING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_cursorContext : ParserRuleContext {
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFetch_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFetch_cursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetch_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_cursorContext fetch_cursor() {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(Context, State);
		EnterRule(_localctx, 708, RULE_fetch_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8725; Match(FETCH);
			State = 8735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1240,Context) ) {
			case 1:
				{
				State = 8732;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NEXT:
					{
					State = 8726; Match(NEXT);
					}
					break;
				case PRIOR:
					{
					State = 8727; Match(PRIOR);
					}
					break;
				case FIRST:
					{
					State = 8728; Match(FIRST);
					}
					break;
				case LAST:
					{
					State = 8729; Match(LAST);
					}
					break;
				case ABSOLUTE:
				case RELATIVE:
					{
					State = 8730;
					_la = TokenStream.LA(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 8731; expression(0);
					}
					break;
				case FROM:
					break;
				default:
					break;
				}
				State = 8734; Match(FROM);
				}
				break;
			}
			State = 8738;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1241,Context) ) {
			case 1:
				{
				State = 8737; Match(GLOBAL);
				}
				break;
			}
			State = 8740; cursor_name();
			State = 8750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 8741; Match(INTO);
				State = 8742; Match(LOCAL_ID);
				State = 8747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 8743; Match(COMMA);
					State = 8744; Match(LOCAL_ID);
					}
					}
					State = 8749;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 8753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1244,Context) ) {
			case 1:
				{
				State = 8752; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_specialContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TSqlParser.SET, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSqlParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode READ() { return GetToken(TSqlParser.READ, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode IDENTITY_INSERT() { return GetToken(TSqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSet_special(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSet_special(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_special(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_specialContext set_special() {
		Set_specialContext _localctx = new Set_specialContext(Context, State);
		EnterRule(_localctx, 710, RULE_set_special);
		try {
			State = 8804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1250,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8755; Match(SET);
				State = 8756; id();
				State = 8760;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 8757; id();
					}
					break;
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					State = 8758; constant_LOCAL_ID();
					}
					break;
				case OFF:
				case ON:
					{
					State = 8759; on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8763;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1246,Context) ) {
				case 1:
					{
					State = 8762; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8765; Match(SET);
				State = 8766; Match(TRANSACTION);
				State = 8767; Match(ISOLATION);
				State = 8768; Match(LEVEL);
				State = 8778;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1247,Context) ) {
				case 1:
					{
					State = 8769; Match(READ);
					State = 8770; Match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					State = 8771; Match(READ);
					State = 8772; Match(COMMITTED);
					}
					break;
				case 3:
					{
					State = 8773; Match(REPEATABLE);
					State = 8774; Match(READ);
					}
					break;
				case 4:
					{
					State = 8775; Match(SNAPSHOT);
					}
					break;
				case 5:
					{
					State = 8776; Match(SERIALIZABLE);
					}
					break;
				case 6:
					{
					State = 8777; Match(DECIMAL);
					}
					break;
				}
				State = 8781;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1248,Context) ) {
				case 1:
					{
					State = 8780; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8783; Match(SET);
				State = 8784; Match(IDENTITY_INSERT);
				State = 8785; table_name();
				State = 8786; on_off();
				State = 8788;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1249,Context) ) {
				case 1:
					{
					State = 8787; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8790; Match(SET);
				State = 8791; Match(ANSI_NULLS);
				State = 8792; on_off();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8793; Match(SET);
				State = 8794; Match(QUOTED_IDENTIFIER);
				State = 8795; on_off();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8796; Match(SET);
				State = 8797; Match(ANSI_PADDING);
				State = 8798; on_off();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8799; Match(SET);
				State = 8800; Match(ANSI_WARNINGS);
				State = 8801; on_off();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8802; Match(SET);
				State = 8803; modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_LOCAL_IDContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_LOCAL_ID; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_LOCAL_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_LOCAL_ID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_LOCAL_ID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_LOCAL_IDContext constant_LOCAL_ID() {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(Context, State);
		EnterRule(_localctx, 712, RULE_constant_LOCAL_ID);
		try {
			State = 8808;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8806; constant();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8807; Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken op;
		public Primitive_expressionContext primitive_expression() {
			return GetRuleContext<Primitive_expressionContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Bracket_expressionContext bracket_expression() {
			return GetRuleContext<Bracket_expressionContext>(0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return GetRuleContext<Unary_operator_expressionContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		public ITerminalNode DIVIDE() { return GetToken(TSqlParser.DIVIDE, 0); }
		public ITerminalNode MODULE() { return GetToken(TSqlParser.MODULE, 0); }
		public ITerminalNode PLUS() { return GetToken(TSqlParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(TSqlParser.MINUS, 0); }
		public ITerminalNode BIT_AND() { return GetToken(TSqlParser.BIT_AND, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(TSqlParser.BIT_XOR, 0); }
		public ITerminalNode BIT_OR() { return GetToken(TSqlParser.BIT_OR, 0); }
		public ITerminalNode DOUBLE_BAR() { return GetToken(TSqlParser.DOUBLE_BAR, 0); }
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(TSqlParser.COLLATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 714;
		EnterRecursionRule(_localctx, 714, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8818;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1252,Context) ) {
			case 1:
				{
				State = 8811; primitive_expression();
				}
				break;
			case 2:
				{
				State = 8812; function_call();
				}
				break;
			case 3:
				{
				State = 8813; case_expression();
				}
				break;
			case 4:
				{
				State = 8814; full_column_name();
				}
				break;
			case 5:
				{
				State = 8815; bracket_expression();
				}
				break;
			case 6:
				{
				State = 8816; unary_operator_expression();
				}
				break;
			case 7:
				{
				State = 8817; over_clause();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 8839;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1254,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 8837;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1253,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 8820;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 8821;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 825)) & ~0x3f) == 0 && ((1L << (_la - 825)) & ((1L << (STAR - 825)) | (1L << (DIVIDE - 825)) | (1L << (MODULE - 825)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 8822; expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 8823;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 8824;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 814)) & ~0x3f) == 0 && ((1L << (_la - 814)) & ((1L << (DOUBLE_BAR - 814)) | (1L << (PLUS - 814)) | (1L << (MINUS - 814)) | (1L << (BIT_OR - 814)) | (1L << (BIT_AND - 814)) | (1L << (BIT_XOR - 814)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 8825; expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 8826;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 8827; comparison_operator();
						State = 8828; expression(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 8830;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 8831; assignment_operator();
						State = 8832; expression(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 8834;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 8835; Match(COLLATE);
						State = 8836; id();
						}
						break;
					}
					} 
				}
				State = 8841;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1254,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primitive_expressionContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_expressionContext primitive_expression() {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(Context, State);
		EnterRule(_localctx, 716, RULE_primitive_expression);
		try {
			State = 8846;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8842; Match(DEFAULT);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8843; Match(NULL);
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8844; Match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8845; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public ITerminalNode CASE() { return GetToken(TSqlParser.CASE, 0); }
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TSqlParser.ELSE, 0); }
		public Switch_search_condition_sectionContext[] switch_search_condition_section() {
			return GetRuleContexts<Switch_search_condition_sectionContext>();
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return GetRuleContext<Switch_search_condition_sectionContext>(i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(Context, State);
		EnterRule(_localctx, 718, RULE_case_expression);
		int _la;
		try {
			State = 8873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1260,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8848; Match(CASE);
				State = 8849; _localctx.caseExpr = expression(0);
				State = 8851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 8850; switch_section();
					}
					}
					State = 8853;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 8857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 8855; Match(ELSE);
					State = 8856; _localctx.elseExpr = expression(0);
					}
				}

				State = 8859; Match(END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8861; Match(CASE);
				State = 8863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 8862; switch_search_condition_section();
					}
					}
					State = 8865;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 8869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 8867; Match(ELSE);
					State = 8868; _localctx.elseExpr = expression(0);
					}
				}

				State = 8871; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_expressionContext : ParserRuleContext {
		public IToken op;
		public ITerminalNode BIT_NOT() { return GetToken(TSqlParser.BIT_NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(TSqlParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(TSqlParser.MINUS, 0); }
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_expressionContext unary_operator_expression() {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(Context, State);
		EnterRule(_localctx, 720, RULE_unary_operator_expression);
		int _la;
		try {
			State = 8879;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIT_NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8875; Match(BIT_NOT);
				State = 8876; expression(0);
				}
				break;
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8877;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8878; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(Context, State);
		EnterRule(_localctx, 722, RULE_bracket_expression);
		try {
			State = 8889;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1262,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8881; Match(LR_BRACKET);
				State = 8882; expression(0);
				State = 8883; Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8885; Match(LR_BRACKET);
				State = 8886; subquery();
				State = 8887; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(Context, State);
		EnterRule(_localctx, 724, RULE_constant_expression);
		try {
			State = 8899;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1263,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8891; Match(NULL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8892; constant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8893; function_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8894; Match(LOCAL_ID);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8895; Match(LR_BRACKET);
				State = 8896; constant_expression();
				State = 8897; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 726, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8901; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(Context, State);
		EnterRule(_localctx, 728, RULE_with_expression);
		int _la;
		try {
			State = 8929;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1267,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8903; Match(WITH);
				State = 8906;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1264,Context) ) {
				case 1:
					{
					State = 8904; Match(XMLNAMESPACES);
					State = 8905; Match(COMMA);
					}
					break;
				}
				State = 8908; common_table_expression();
				State = 8913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 8909; Match(COMMA);
					State = 8910; common_table_expression();
					}
					}
					State = 8915;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8916; Match(WITH);
				State = 8917; Match(BLOCKING_HIERARCHY);
				State = 8922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 8918; Match(LR_BRACKET);
					State = 8919; full_column_name_list();
					State = 8920; Match(RR_BRACKET);
					}
				}

				State = 8924; Match(AS);
				State = 8925; Match(LR_BRACKET);
				State = 8926; select_statement();
				State = 8927; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public IdContext expression_name;
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(Context, State);
		EnterRule(_localctx, 730, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8931; _localctx.expression_name = id();
			State = 8936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 8932; Match(LR_BRACKET);
				State = 8933; column_name_list();
				State = 8934; Match(RR_BRACKET);
				}
			}

			State = 8938; Match(AS);
			State = 8939; Match(LR_BRACKET);
			State = 8940; select_statement();
			State = 8941; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elemContext : ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_elemContext update_elem() {
		Update_elemContext _localctx = new Update_elemContext(Context, State);
		EnterRule(_localctx, 732, RULE_update_elem);
		try {
			State = 8959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1271,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8945;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 8943; full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					State = 8944; Match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8949;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EQUAL:
					{
					State = 8947; Match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					State = 8948; assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8951; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8952; _localctx.udt_column_name = id();
				State = 8953; Match(DOT);
				State = 8954; _localctx.method_name = id();
				State = 8955; Match(LR_BRACKET);
				State = 8956; expression_list();
				State = 8957; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_listContext : ParserRuleContext {
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_listContext search_condition_list() {
		Search_condition_listContext _localctx = new Search_condition_listContext(Context, State);
		EnterRule(_localctx, 734, RULE_search_condition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8961; search_condition();
			State = 8966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8962; Match(COMMA);
				State = 8963; search_condition();
				}
				}
				State = 8968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		public Search_condition_andContext[] search_condition_and() {
			return GetRuleContexts<Search_condition_andContext>();
		}
		public Search_condition_andContext search_condition_and(int i) {
			return GetRuleContext<Search_condition_andContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(TSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(TSqlParser.OR, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		Search_conditionContext _localctx = new Search_conditionContext(Context, State);
		EnterRule(_localctx, 736, RULE_search_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8969; search_condition_and();
			State = 8974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 8970; Match(OR);
				State = 8971; search_condition_and();
				}
				}
				State = 8976;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_andContext : ParserRuleContext {
		public Search_condition_notContext[] search_condition_not() {
			return GetRuleContexts<Search_condition_notContext>();
		}
		public Search_condition_notContext search_condition_not(int i) {
			return GetRuleContext<Search_condition_notContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(TSqlParser.AND, i);
		}
		public Search_condition_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_and; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition_and(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition_and(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_andContext search_condition_and() {
		Search_condition_andContext _localctx = new Search_condition_andContext(Context, State);
		EnterRule(_localctx, 738, RULE_search_condition_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8977; search_condition_not();
			State = 8982;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 8978; Match(AND);
				State = 8979; search_condition_not();
				}
				}
				State = 8984;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_notContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_not; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition_not(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition_not(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition_not(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_notContext search_condition_not() {
		Search_condition_notContext _localctx = new Search_condition_notContext(Context, State);
		EnterRule(_localctx, 740, RULE_search_condition_not);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8986;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 8985; Match(NOT);
				}
			}

			State = 8988; predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(TSqlParser.EXISTS, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode SOME() { return GetToken(TSqlParser.SOME, 0); }
		public ITerminalNode ANY() { return GetToken(TSqlParser.ANY, 0); }
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(TSqlParser.LIKE, 0); }
		public ITerminalNode ESCAPE() { return GetToken(TSqlParser.ESCAPE, 0); }
		public ITerminalNode IS() { return GetToken(TSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 742, RULE_predicate);
		int _la;
		try {
			State = 9045;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1281,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8990; Match(EXISTS);
				State = 8991; Match(LR_BRACKET);
				State = 8992; subquery();
				State = 8993; Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8995; expression(0);
				State = 8996; comparison_operator();
				State = 8997; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8999; expression(0);
				State = 9000; comparison_operator();
				State = 9001;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9002; Match(LR_BRACKET);
				State = 9003; subquery();
				State = 9004; Match(RR_BRACKET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9006; expression(0);
				State = 9008;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 9007; Match(NOT);
					}
				}

				State = 9010; Match(BETWEEN);
				State = 9011; expression(0);
				State = 9012; Match(AND);
				State = 9013; expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9015; expression(0);
				State = 9017;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 9016; Match(NOT);
					}
				}

				State = 9019; Match(IN);
				State = 9020; Match(LR_BRACKET);
				State = 9023;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1278,Context) ) {
				case 1:
					{
					State = 9021; subquery();
					}
					break;
				case 2:
					{
					State = 9022; expression_list();
					}
					break;
				}
				State = 9025; Match(RR_BRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9027; expression(0);
				State = 9029;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 9028; Match(NOT);
					}
				}

				State = 9031; Match(LIKE);
				State = 9032; expression(0);
				State = 9035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ESCAPE) {
					{
					State = 9033; Match(ESCAPE);
					State = 9034; expression(0);
					}
				}

				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9037; expression(0);
				State = 9038; Match(IS);
				State = 9039; null_notnull();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9041; Match(LR_BRACKET);
				State = 9042; search_condition();
				State = 9043; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Sql_unionContext[] sql_union() {
			return GetRuleContexts<Sql_unionContext>();
		}
		public Sql_unionContext sql_union(int i) {
			return GetRuleContext<Sql_unionContext>(i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(Context, State);
		EnterRule(_localctx, 744, RULE_query_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9052;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 9047; query_specification();
				}
				break;
			case LR_BRACKET:
				{
				State = 9048; Match(LR_BRACKET);
				State = 9049; query_expression();
				State = 9050; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 9057;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1283,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9054; sql_union();
					}
					} 
				}
				State = 9059;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1283,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_unionContext : ParserRuleContext {
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode EXCEPT() { return GetToken(TSqlParser.EXCEPT, 0); }
		public ITerminalNode INTERSECT() { return GetToken(TSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public Sql_unionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSql_union(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSql_union(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_union(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_unionContext sql_union() {
		Sql_unionContext _localctx = new Sql_unionContext(Context, State);
		EnterRule(_localctx, 746, RULE_sql_union);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9066;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				{
				State = 9060; Match(UNION);
				State = 9062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 9061; Match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				State = 9064; Match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				State = 9065; Match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 9073;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 9068; query_specification();
				}
				break;
			case LR_BRACKET:
				{
				{
				State = 9069; Match(LR_BRACKET);
				State = 9070; query_expression();
				State = 9071; Match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_specificationContext : ParserRuleContext {
		public Search_conditionContext where;
		public Search_conditionContext having;
		public ITerminalNode SELECT() { return GetToken(TSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSqlParser.INTO, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSqlParser.WHERE, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		public ITerminalNode HAVING() { return GetToken(TSqlParser.HAVING, 0); }
		public ITerminalNode[] ALL() { return GetTokens(TSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSqlParser.ALL, i);
		}
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_specificationContext query_specification() {
		Query_specificationContext _localctx = new Query_specificationContext(Context, State);
		EnterRule(_localctx, 748, RULE_query_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9075; Match(SELECT);
			State = 9077;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 9076;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 9080;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 9079; top_clause();
				}
			}

			State = 9082; select_list();
			State = 9085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 9083; Match(INTO);
				State = 9084; table_name();
				}
			}

			State = 9089;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 9087; Match(FROM);
				State = 9088; table_sources();
				}
			}

			State = 9093;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1291,Context) ) {
			case 1:
				{
				State = 9091; Match(WHERE);
				State = 9092; _localctx.where = search_condition();
				}
				break;
			}
			State = 9108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1294,Context) ) {
			case 1:
				{
				State = 9095; Match(GROUP);
				State = 9096; Match(BY);
				State = 9098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 9097; Match(ALL);
					}
				}

				State = 9100; group_by_item();
				State = 9105;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1293,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 9101; Match(COMMA);
						State = 9102; group_by_item();
						}
						} 
					}
					State = 9107;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1293,Context);
				}
				}
				break;
			}
			State = 9112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1295,Context) ) {
			case 1:
				{
				State = 9110; Match(HAVING);
				State = 9111; _localctx.having = search_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_clauseContext : ParserRuleContext {
		public ITerminalNode TOP() { return GetToken(TSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return GetRuleContext<Top_percentContext>(0);
		}
		public Top_countContext top_count() {
			return GetRuleContext<Top_countContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_clauseContext top_clause() {
		Top_clauseContext _localctx = new Top_clauseContext(Context, State);
		EnterRule(_localctx, 750, RULE_top_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9114; Match(TOP);
			State = 9117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1296,Context) ) {
			case 1:
				{
				State = 9115; top_percent();
				}
				break;
			case 2:
				{
				State = 9116; top_count();
				}
				break;
			}
			State = 9121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 9119; Match(WITH);
				State = 9120; Match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_percentContext : ParserRuleContext {
		public ITerminalNode PERCENT() { return GetToken(TSqlParser.PERCENT, 0); }
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Top_percentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_percent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_percent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_percent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_percent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_percentContext top_percent() {
		Top_percentContext _localctx = new Top_percentContext(Context, State);
		EnterRule(_localctx, 752, RULE_top_percent);
		int _la;
		try {
			State = 9130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOAT:
			case REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9123;
				_la = TokenStream.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9124; Match(PERCENT);
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9125; Match(LR_BRACKET);
				State = 9126; expression(0);
				State = 9127; Match(RR_BRACKET);
				State = 9128; Match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_countContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Top_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTop_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTop_count(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_countContext top_count() {
		Top_countContext _localctx = new Top_countContext(Context, State);
		EnterRule(_localctx, 754, RULE_top_count);
		try {
			State = 9137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9132; Match(DECIMAL);
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9133; Match(LR_BRACKET);
				State = 9134; expression(0);
				State = 9135; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Order_by_expressionContext[] order_by_expression() {
			return GetRuleContexts<Order_by_expressionContext>();
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return GetRuleContext<Order_by_expressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] ROW() { return GetTokens(TSqlParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(TSqlParser.ROW, i);
		}
		public ITerminalNode[] ROWS() { return GetTokens(TSqlParser.ROWS); }
		public ITerminalNode ROWS(int i) {
			return GetToken(TSqlParser.ROWS, i);
		}
		public ITerminalNode FETCH() { return GetToken(TSqlParser.FETCH, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 756, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9139; Match(ORDER);
			State = 9140; Match(BY);
			State = 9141; order_by_expression();
			State = 9146;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1300,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9142; Match(COMMA);
					State = 9143; order_by_expression();
					}
					} 
				}
				State = 9148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1300,Context);
			}
			State = 9160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1302,Context) ) {
			case 1:
				{
				State = 9149; Match(OFFSET);
				State = 9150; expression(0);
				State = 9151;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9158;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1301,Context) ) {
				case 1:
					{
					State = 9152; Match(FETCH);
					State = 9153;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 9154; expression(0);
					State = 9155;
					_la = TokenStream.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 9156; Match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode BROWSE() { return GetToken(TSqlParser.BROWSE, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode RAW() { return GetToken(TSqlParser.RAW, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public Xml_common_directivesContext[] xml_common_directives() {
			return GetRuleContexts<Xml_common_directivesContext>();
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return GetRuleContext<Xml_common_directivesContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode ELEMENTS() { return GetToken(TSqlParser.ELEMENTS, 0); }
		public ITerminalNode XSINIL() { return GetToken(TSqlParser.XSINIL, 0); }
		public ITerminalNode ABSENT() { return GetToken(TSqlParser.ABSENT, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode XMLDATA() { return GetToken(TSqlParser.XMLDATA, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(TSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode JSON() { return GetToken(TSqlParser.JSON, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode INCLUDE_NULL_VALUES() { return GetToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public ITerminalNode WITHOUT_ARRAY_WRAPPER() { return GetToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFor_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFor_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(Context, State);
		EnterRule(_localctx, 758, RULE_for_clause);
		int _la;
		try {
			int _alt;
			State = 9250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1319,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9162; Match(FOR);
				State = 9163; Match(BROWSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9164; Match(FOR);
				State = 9165; Match(XML);
				State = 9173;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RAW:
					{
					State = 9166; Match(RAW);
					State = 9170;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1303,Context) ) {
					case 1:
						{
						State = 9167; Match(LR_BRACKET);
						State = 9168; Match(STRING);
						State = 9169; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				case AUTO:
					{
					State = 9172; Match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1305,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 9175; xml_common_directives();
						}
						} 
					}
					State = 9180;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1305,Context);
				}
				State = 9191;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1308,Context) ) {
				case 1:
					{
					State = 9181; Match(COMMA);
					State = 9189;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case XMLDATA:
						{
						State = 9182; Match(XMLDATA);
						}
						break;
					case XMLSCHEMA:
						{
						State = 9183; Match(XMLSCHEMA);
						State = 9187;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1306,Context) ) {
						case 1:
							{
							State = 9184; Match(LR_BRACKET);
							State = 9185; Match(STRING);
							State = 9186; Match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 9196;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1309,Context) ) {
				case 1:
					{
					State = 9193; Match(COMMA);
					State = 9194; Match(ELEMENTS);
					State = 9195;
					_la = TokenStream.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9198; Match(FOR);
				State = 9199; Match(XML);
				State = 9200; Match(EXPLICIT);
				State = 9204;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1310,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 9201; xml_common_directives();
						}
						} 
					}
					State = 9206;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1310,Context);
				}
				State = 9209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1311,Context) ) {
				case 1:
					{
					State = 9207; Match(COMMA);
					State = 9208; Match(XMLDATA);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9211; Match(FOR);
				State = 9212; Match(XML);
				State = 9213; Match(PATH);
				State = 9217;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1312,Context) ) {
				case 1:
					{
					State = 9214; Match(LR_BRACKET);
					State = 9215; Match(STRING);
					State = 9216; Match(RR_BRACKET);
					}
					break;
				}
				State = 9222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1313,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 9219; xml_common_directives();
						}
						} 
					}
					State = 9224;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1313,Context);
				}
				State = 9228;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1314,Context) ) {
				case 1:
					{
					State = 9225; Match(COMMA);
					State = 9226; Match(ELEMENTS);
					State = 9227;
					_la = TokenStream.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9230; Match(FOR);
				State = 9231; Match(JSON);
				State = 9232;
				_la = TokenStream.LA(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1316,Context) ) {
				case 1:
					{
					State = 9233; Match(COMMA);
					State = 9234; Match(ROOT);
					State = 9238;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1315,Context) ) {
					case 1:
						{
						State = 9235; Match(LR_BRACKET);
						State = 9236; Match(STRING);
						State = 9237; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 9244;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1317,Context) ) {
				case 1:
					{
					State = 9242; Match(COMMA);
					State = 9243; Match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				State = 9248;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1318,Context) ) {
				case 1:
					{
					State = 9246; Match(COMMA);
					State = 9247; Match(WITHOUT_ARRAY_WRAPPER);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_common_directivesContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_common_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_common_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_common_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_common_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_common_directivesContext xml_common_directives() {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(Context, State);
		EnterRule(_localctx, 760, RULE_xml_common_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9252; Match(COMMA);
			State = 9253;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY_BASE64 || _la==ROOT || _la==TYPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(TSqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expressionContext order_by_expression() {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(Context, State);
		EnterRule(_localctx, 762, RULE_order_by_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9255; expression(0);
			State = 9257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 9256;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(Context, State);
		EnterRule(_localctx, 764, RULE_group_by_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9259; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_clauseContext : ParserRuleContext {
		public ITerminalNode OPTION() { return GetToken(TSqlParser.OPTION, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_clauseContext option_clause() {
		Option_clauseContext _localctx = new Option_clauseContext(Context, State);
		EnterRule(_localctx, 766, RULE_option_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9261; Match(OPTION);
			State = 9262; Match(LR_BRACKET);
			State = 9263; option();
			State = 9268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9264; Match(COMMA);
				State = 9265; option();
				}
				}
				State = 9270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 9271; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IToken number_rows;
		public IToken number_of_processors;
		public IToken number_recursion;
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode ORDER() { return GetToken(TSqlParser.ORDER, 0); }
		public ITerminalNode UNION() { return GetToken(TSqlParser.UNION, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode PLAN() { return GetToken(TSqlParser.PLAN, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Optimize_for_argContext[] optimize_for_arg() {
			return GetRuleContexts<Optimize_for_argContext>();
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return GetRuleContext<Optimize_for_argContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode USE() { return GetToken(TSqlParser.USE, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 768, RULE_option);
		int _la;
		try {
			State = 9318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1323,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9273; Match(FAST);
				State = 9274; _localctx.number_rows = Match(DECIMAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9275;
				_la = TokenStream.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9276; Match(GROUP);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9277;
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9278; Match(UNION);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9279;
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9280; Match(JOIN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9281; Match(EXPAND);
				State = 9282; Match(VIEWS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9283; Match(FORCE);
				State = 9284; Match(ORDER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9285; Match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9286; Match(KEEP);
				State = 9287; Match(PLAN);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9288; Match(KEEPFIXED);
				State = 9289; Match(PLAN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9290; Match(MAXDOP);
				State = 9291; _localctx.number_of_processors = Match(DECIMAL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9292; Match(MAXRECURSION);
				State = 9293; _localctx.number_recursion = Match(DECIMAL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9294; Match(OPTIMIZE);
				State = 9295; Match(FOR);
				State = 9296; Match(LR_BRACKET);
				State = 9297; optimize_for_arg();
				State = 9302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 9298; Match(COMMA);
					State = 9299; optimize_for_arg();
					}
					}
					State = 9304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 9305; Match(RR_BRACKET);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9307; Match(OPTIMIZE);
				State = 9308; Match(FOR);
				State = 9309; Match(UNKNOWN);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 9310; Match(PARAMETERIZATION);
				State = 9311;
				_la = TokenStream.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 9312; Match(RECOMPILE);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 9313; Match(ROBUST);
				State = 9314; Match(PLAN);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 9315; Match(USE);
				State = 9316; Match(PLAN);
				State = 9317; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optimize_for_argContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimize_for_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOptimize_for_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOptimize_for_arg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptimize_for_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optimize_for_argContext optimize_for_arg() {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(Context, State);
		EnterRule(_localctx, 770, RULE_optimize_for_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9320; Match(LOCAL_ID);
			State = 9327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNKNOWN:
				{
				State = 9321; Match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				State = 9322; Match(EQUAL);
				State = 9325;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					State = 9323; constant();
					}
					break;
				case NULL:
					{
					State = 9324; Match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		public Select_list_elemContext[] select_list_elem() {
			return GetRuleContexts<Select_list_elemContext>();
		}
		public Select_list_elemContext select_list_elem(int i) {
			return GetRuleContext<Select_list_elemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(Context, State);
		EnterRule(_localctx, 772, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9329; select_list_elem();
			State = 9334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1326,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9330; Match(COMMA);
					State = 9331; select_list_elem();
					}
					} 
				}
				State = 9336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1326,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_method_argumentsContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_method_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_method_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_method_arguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdt_method_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Udt_method_argumentsContext udt_method_arguments() {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(Context, State);
		EnterRule(_localctx, 774, RULE_udt_method_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9337; Match(LR_BRACKET);
			State = 9338; execute_var_string();
			State = 9343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9339; Match(COMMA);
				State = 9340; execute_var_string();
				}
				}
				State = 9345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 9346; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsteriskContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public AsteriskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asterisk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAsterisk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAsterisk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsterisk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsteriskContext asterisk() {
		AsteriskContext _localctx = new AsteriskContext(Context, State);
		EnterRule(_localctx, 776, RULE_asterisk);
		try {
			State = 9353;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9348; Match(STAR);
				}
				break;
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9349; table_name();
				State = 9350; Match(DOT);
				State = 9351; asterisk();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_elemContext : ParserRuleContext {
		public IdContext column_name;
		public ITerminalNode DOLLAR() { return GetToken(TSqlParser.DOLLAR, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_elemContext column_elem() {
		Column_elemContext _localctx = new Column_elemContext(Context, State);
		EnterRule(_localctx, 778, RULE_column_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1329,Context) ) {
			case 1:
				{
				State = 9355; table_name();
				State = 9356; Match(DOT);
				}
				break;
			}
			State = 9365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1330,Context) ) {
			case 1:
				{
				State = 9360; _localctx.column_name = id();
				}
				break;
			case 2:
				{
				State = 9361; Match(DOLLAR);
				State = 9362; Match(IDENTITY);
				}
				break;
			case 3:
				{
				State = 9363; Match(DOLLAR);
				State = 9364; Match(ROWGUID);
				}
				break;
			}
			State = 9368;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1331,Context) ) {
			case 1:
				{
				State = 9367; as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Udt_elemContext : ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext non_static_attr;
		public IdContext static_attr;
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Udt_method_argumentsContext udt_method_arguments() {
			return GetRuleContext<Udt_method_argumentsContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public ITerminalNode[] COLON() { return GetTokens(TSqlParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TSqlParser.COLON, i);
		}
		public Udt_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udt_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUdt_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUdt_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdt_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Udt_elemContext udt_elem() {
		Udt_elemContext _localctx = new Udt_elemContext(Context, State);
		EnterRule(_localctx, 780, RULE_udt_elem);
		try {
			State = 9387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1335,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9370; _localctx.udt_column_name = id();
				State = 9371; Match(DOT);
				State = 9372; _localctx.non_static_attr = id();
				State = 9373; udt_method_arguments();
				State = 9375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1332,Context) ) {
				case 1:
					{
					State = 9374; as_column_alias();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9377; _localctx.udt_column_name = id();
				State = 9378; Match(COLON);
				State = 9379; Match(COLON);
				State = 9380; _localctx.static_attr = id();
				State = 9382;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1333,Context) ) {
				case 1:
					{
					State = 9381; udt_method_arguments();
					}
					break;
				}
				State = 9385;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1334,Context) ) {
				case 1:
					{
					State = 9384; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_elemContext : ParserRuleContext {
		public IToken eq;
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_elemContext expression_elem() {
		Expression_elemContext _localctx = new Expression_elemContext(Context, State);
		EnterRule(_localctx, 782, RULE_expression_elem);
		try {
			State = 9397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1337,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9389; column_alias();
				State = 9390; _localctx.eq = Match(EQUAL);
				State = 9391; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9393; expression(0);
				State = 9395;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1336,Context) ) {
				case 1:
					{
					State = 9394; as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elemContext : ParserRuleContext {
		public AsteriskContext asterisk() {
			return GetRuleContext<AsteriskContext>(0);
		}
		public Column_elemContext column_elem() {
			return GetRuleContext<Column_elemContext>(0);
		}
		public Udt_elemContext udt_elem() {
			return GetRuleContext<Udt_elemContext>(0);
		}
		public Expression_elemContext expression_elem() {
			return GetRuleContext<Expression_elemContext>(0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elemContext select_list_elem() {
		Select_list_elemContext _localctx = new Select_list_elemContext(Context, State);
		EnterRule(_localctx, 784, RULE_select_list_elem);
		try {
			State = 9403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1338,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9399; asterisk();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9400; column_elem();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9401; udt_elem();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9402; expression_elem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourcesContext : ParserRuleContext {
		public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_sources; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_sources(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_sources(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_sources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourcesContext table_sources() {
		Table_sourcesContext _localctx = new Table_sourcesContext(Context, State);
		EnterRule(_localctx, 786, RULE_table_sources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9405; table_source();
			State = 9410;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1339,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9406; Match(COMMA);
					State = 9407; table_source();
					}
					} 
				}
				State = 9412;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1339,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourceContext : ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Table_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourceContext table_source() {
		Table_sourceContext _localctx = new Table_sourceContext(Context, State);
		EnterRule(_localctx, 788, RULE_table_source);
		try {
			State = 9418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1340,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9413; table_source_item_joined();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9414; Match(LR_BRACKET);
				State = 9415; table_source_item_joined();
				State = 9416; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_item_joinedContext : ParserRuleContext {
		public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		public Join_partContext[] join_part() {
			return GetRuleContexts<Join_partContext>();
		}
		public Join_partContext join_part(int i) {
			return GetRuleContext<Join_partContext>(i);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item_joined; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item_joined(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item_joined(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item_joined(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_item_joinedContext table_source_item_joined() {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(Context, State);
		EnterRule(_localctx, 790, RULE_table_source_item_joined);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9420; table_source_item();
			State = 9424;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1341,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9421; join_part();
					}
					} 
				}
				State = 9426;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1341,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_itemContext : ParserRuleContext {
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public Rowset_functionContext rowset_function() {
			return GetRuleContext<Rowset_functionContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Change_tableContext change_table() {
			return GetRuleContext<Change_tableContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Open_xmlContext open_xml() {
			return GetRuleContext<Open_xmlContext>(0);
		}
		public ITerminalNode[] COLON() { return GetTokens(TSqlParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TSqlParser.COLON, i);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_source_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_source_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_itemContext table_source_item() {
		Table_source_itemContext _localctx = new Table_source_itemContext(Context, State);
		EnterRule(_localctx, 792, RULE_table_source_item);
		try {
			State = 9473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1352,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9427; table_name_with_hint();
				State = 9429;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1342,Context) ) {
				case 1:
					{
					State = 9428; as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9431; full_table_name();
				State = 9433;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1343,Context) ) {
				case 1:
					{
					State = 9432; as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9435; rowset_function();
				State = 9437;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1344,Context) ) {
				case 1:
					{
					State = 9436; as_table_alias();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9439; derived_table();
				State = 9444;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1346,Context) ) {
				case 1:
					{
					State = 9440; as_table_alias();
					State = 9442;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1345,Context) ) {
					case 1:
						{
						State = 9441; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9446; change_table();
				State = 9447; as_table_alias();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9449; function_call();
				State = 9451;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1347,Context) ) {
				case 1:
					{
					State = 9450; as_table_alias();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9453; Match(LOCAL_ID);
				State = 9455;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1348,Context) ) {
				case 1:
					{
					State = 9454; as_table_alias();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9457; Match(LOCAL_ID);
				State = 9458; Match(DOT);
				State = 9459; function_call();
				State = 9464;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1350,Context) ) {
				case 1:
					{
					State = 9460; as_table_alias();
					State = 9462;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1349,Context) ) {
					case 1:
						{
						State = 9461; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9466; open_xml();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9467; Match(COLON);
				State = 9468; Match(COLON);
				State = 9469; function_call();
				State = 9471;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1351,Context) ) {
				case 1:
					{
					State = 9470; as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_xmlContext : ParserRuleContext {
		public ITerminalNode OPENXML() { return GetToken(TSqlParser.OPENXML, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return GetRuleContext<Schema_declarationContext>(0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_xml; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOpen_xml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOpen_xml(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_xml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_xmlContext open_xml() {
		Open_xmlContext _localctx = new Open_xmlContext(Context, State);
		EnterRule(_localctx, 794, RULE_open_xml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9475; Match(OPENXML);
			State = 9476; Match(LR_BRACKET);
			State = 9477; expression(0);
			State = 9478; Match(COMMA);
			State = 9479; expression(0);
			State = 9482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 9480; Match(COMMA);
				State = 9481; expression(0);
				}
			}

			State = 9484; Match(RR_BRACKET);
			State = 9490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1354,Context) ) {
			case 1:
				{
				State = 9485; Match(WITH);
				State = 9486; Match(LR_BRACKET);
				State = 9487; schema_declaration();
				State = 9488; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_declarationContext : ParserRuleContext {
		public Column_declarationContext[] column_declaration() {
			return GetRuleContexts<Column_declarationContext>();
		}
		public Column_declarationContext column_declaration(int i) {
			return GetRuleContext<Column_declarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSchema_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSchema_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_declarationContext schema_declaration() {
		Schema_declarationContext _localctx = new Schema_declarationContext(Context, State);
		EnterRule(_localctx, 796, RULE_schema_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9492; column_declaration();
			State = 9497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9493; Match(COMMA);
				State = 9494; column_declaration();
				}
				}
				State = 9499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationContext column_declaration() {
		Column_declarationContext _localctx = new Column_declarationContext(Context, State);
		EnterRule(_localctx, 798, RULE_column_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9500; Match(ID);
			State = 9501; data_type();
			State = 9503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 9502; Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tableContext : ParserRuleContext {
		public ITerminalNode CHANGETABLE() { return GetToken(TSqlParser.CHANGETABLE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode CHANGES() { return GetToken(TSqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterChange_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitChange_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tableContext change_table() {
		Change_tableContext _localctx = new Change_tableContext(Context, State);
		EnterRule(_localctx, 800, RULE_change_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9505; Match(CHANGETABLE);
			State = 9506; Match(LR_BRACKET);
			State = 9507; Match(CHANGES);
			State = 9508; table_name();
			State = 9509; Match(COMMA);
			State = 9510;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 9511; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_partContext : ParserRuleContext {
		public IToken join_type;
		public IToken join_hint;
		public ITerminalNode JOIN() { return GetToken(TSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public ITerminalNode INNER() { return GetToken(TSqlParser.INNER, 0); }
		public ITerminalNode OUTER() { return GetToken(TSqlParser.OUTER, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode MERGE() { return GetToken(TSqlParser.MERGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode CROSS() { return GetToken(TSqlParser.CROSS, 0); }
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public ITerminalNode PIVOT() { return GetToken(TSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public ITerminalNode UNPIVOT() { return GetToken(TSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_partContext join_part() {
		Join_partContext _localctx = new Join_partContext(Context, State);
		EnterRule(_localctx, 802, RULE_join_part);
		int _la;
		try {
			State = 9547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1361,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9520;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INNER:
				case JOIN:
				case MERGE:
				case HASH:
				case LOOP:
				case REMOTE:
					{
					State = 9514;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==INNER) {
						{
						State = 9513; Match(INNER);
						}
					}

					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					State = 9516;
					_localctx.join_type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_localctx.join_type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 9518;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 9517; Match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
					{
					State = 9522;
					_localctx.join_hint = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
						_localctx.join_hint = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 9525; Match(JOIN);
				State = 9526; table_source();
				State = 9527; Match(ON);
				State = 9528; search_condition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9530; Match(CROSS);
				State = 9531; Match(JOIN);
				State = 9532; table_source();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9533; Match(CROSS);
				State = 9534; Match(APPLY);
				State = 9535; table_source();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9536; Match(OUTER);
				State = 9537; Match(APPLY);
				State = 9538; table_source();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9539; Match(PIVOT);
				State = 9540; pivot_clause();
				State = 9541; as_table_alias();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9543; Match(UNPIVOT);
				State = 9544; unpivot_clause();
				State = 9545; as_table_alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_clauseContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterPivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitPivot_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_clauseContext pivot_clause() {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(Context, State);
		EnterRule(_localctx, 804, RULE_pivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9549; Match(LR_BRACKET);
			State = 9550; aggregate_windowed_function();
			State = 9551; Match(FOR);
			State = 9552; full_column_name();
			State = 9553; Match(IN);
			State = 9554; column_alias_list();
			State = 9555; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_clauseContext : ParserRuleContext {
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return GetRuleContext<Full_column_name_listContext>(0);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterUnpivot_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitUnpivot_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_clauseContext unpivot_clause() {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(Context, State);
		EnterRule(_localctx, 806, RULE_unpivot_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9557; Match(LR_BRACKET);
			State = 9558; expression(0);
			State = 9559; Match(FOR);
			State = 9560; full_column_name();
			State = 9561; Match(IN);
			State = 9562; Match(LR_BRACKET);
			State = 9563; full_column_name_list();
			State = 9564; Match(RR_BRACKET);
			State = 9565; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_name_listContext : ParserRuleContext {
		public Full_column_nameContext[] full_column_name() {
			return GetRuleContexts<Full_column_nameContext>();
		}
		public Full_column_nameContext full_column_name(int i) {
			return GetRuleContext<Full_column_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_column_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_name_listContext full_column_name_list() {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(Context, State);
		EnterRule(_localctx, 808, RULE_full_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9567; full_column_name();
			State = 9572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9568; Match(COMMA);
				State = 9569; full_column_name();
				}
				}
				State = 9574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_name_with_hintContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name_with_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name_with_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name_with_hint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name_with_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_name_with_hintContext table_name_with_hint() {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(Context, State);
		EnterRule(_localctx, 810, RULE_table_name_with_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9575; table_name();
			State = 9577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1363,Context) ) {
			case 1:
				{
				State = 9576; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_functionContext : ParserRuleContext {
		public IToken provider_name;
		public IToken connectionString;
		public IToken sql;
		public IToken data_file;
		public ITerminalNode OPENROWSET() { return GetToken(TSqlParser.OPENROWSET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode BULK() { return GetToken(TSqlParser.BULK, 0); }
		public Bulk_optionContext[] bulk_option() {
			return GetRuleContexts<Bulk_optionContext>();
		}
		public Bulk_optionContext bulk_option(int i) {
			return GetRuleContext<Bulk_optionContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRowset_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRowset_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_functionContext rowset_function() {
		Rowset_functionContext _localctx = new Rowset_functionContext(Context, State);
		EnterRule(_localctx, 812, RULE_rowset_function);
		int _la;
		try {
			State = 9605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1366,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 9579; Match(OPENROWSET);
				State = 9580; Match(LR_BRACKET);
				State = 9581; _localctx.provider_name = Match(STRING);
				State = 9582; Match(COMMA);
				State = 9583; _localctx.connectionString = Match(STRING);
				State = 9584; Match(COMMA);
				State = 9585; _localctx.sql = Match(STRING);
				State = 9586; Match(RR_BRACKET);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 9587; Match(OPENROWSET);
				State = 9588; Match(LR_BRACKET);
				State = 9589; Match(BULK);
				State = 9590; _localctx.data_file = Match(STRING);
				State = 9591; Match(COMMA);
				State = 9601;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1365,Context) ) {
				case 1:
					{
					State = 9592; bulk_option();
					State = 9597;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 9593; Match(COMMA);
						State = 9594; bulk_option();
						}
						}
						State = 9599;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 9600; id();
					}
					break;
				}
				State = 9603; Match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bulk_optionContext : ParserRuleContext {
		public IToken bulk_option_value;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bulk_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBulk_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBulk_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBulk_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bulk_optionContext bulk_option() {
		Bulk_optionContext _localctx = new Bulk_optionContext(Context, State);
		EnterRule(_localctx, 814, RULE_bulk_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9607; id();
			State = 9608; Match(EQUAL);
			State = 9609;
			_localctx.bulk_option_value = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				_localctx.bulk_option_value = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerived_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(Context, State);
		EnterRule(_localctx, 816, RULE_derived_table);
		try {
			State = 9621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1367,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9611; subquery();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9612; Match(LR_BRACKET);
				State = 9613; subquery();
				State = 9614; Match(RR_BRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9616; table_value_constructor();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9617; Match(LR_BRACKET);
				State = 9618; table_value_constructor();
				State = 9619; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	 
		public Function_callContext() { }
		public virtual void CopyFrom(Function_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CURRENT_USERContext : Function_callContext {
		public ITerminalNode CURRENT_USER() { return GetToken(TSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_USER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCURRENT_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEADDContext : Function_callContext {
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public DATEADDContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEADD(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEADD(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEADD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CHECKSUMContext : Function_callContext {
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public CHECKSUMContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCHECKSUM(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCHECKSUM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CURRENT_TIMESTAMPContext : Function_callContext {
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCURRENT_TIMESTAMP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCURRENT_TIMESTAMP(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCURRENT_TIMESTAMP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BINARY_CHECKSUMContext : Function_callContext {
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public BINARY_CHECKSUMContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBINARY_CHECKSUM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBINARY_CHECKSUM(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBINARY_CHECKSUM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IFFContext : Function_callContext {
		public ITerminalNode IIF() { return GetToken(TSqlParser.IIF, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public IFFContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIFF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIFF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SYSTEM_USERContext : Function_callContext {
		public ITerminalNode SYSTEM_USER() { return GetToken(TSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSYSTEM_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSYSTEM_USER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSYSTEM_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NULLIFContext : Function_callContext {
		public ITerminalNode NULLIF() { return GetToken(TSqlParser.NULLIF, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public NULLIFContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNULLIF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNULLIF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNULLIF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SESSION_USERContext : Function_callContext {
		public ITerminalNode SESSION_USER() { return GetToken(TSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSESSION_USER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSESSION_USER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSESSION_USER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CONVERTContext : Function_callContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public ITerminalNode CONVERT() { return GetToken(TSqlParser.CONVERT, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CONVERTContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCONVERT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCONVERT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCONVERT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XML_DATA_TYPE_FUNCContext : Function_callContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return GetRuleContext<Xml_data_type_methodsContext>(0);
		}
		public XML_DATA_TYPE_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXML_DATA_TYPE_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXML_DATA_TYPE_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXML_DATA_TYPE_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class COALESCEContext : Function_callContext {
		public ITerminalNode COALESCE() { return GetToken(TSqlParser.COALESCE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public COALESCEContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCOALESCE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCOALESCE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOALESCE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CASTContext : Function_callContext {
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public CASTContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MIN_ACTIVE_ROWVERSIONContext : Function_callContext {
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterMIN_ACTIVE_ROWVERSION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitMIN_ACTIVE_ROWVERSION(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMIN_ACTIVE_ROWVERSION(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SCALAR_FUNCTIONContext : Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return GetRuleContext<Scalar_function_nameContext>(0);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSCALAR_FUNCTION(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSCALAR_FUNCTION(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSCALAR_FUNCTION(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEPARTContext : Function_callContext {
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public DATEPARTContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEPART(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEPART(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEPART(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STUFFContext : Function_callContext {
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public STUFFContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSTUFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSTUFF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTUFF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AGGREGATE_WINDOWED_FUNCContext : Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAGGREGATE_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAGGREGATE_WINDOWED_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAGGREGATE_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDENTITYContext : Function_callContext {
		public IToken seed;
		public IToken increment;
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIDENTITY(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIDENTITY(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIDENTITY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RANKING_WINDOWED_FUNCContext : Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return GetRuleContext<Ranking_windowed_functionContext>(0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRANKING_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRANKING_WINDOWED_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRANKING_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATENAMEContext : Function_callContext {
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public DATENAMEContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATENAME(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATENAME(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATENAME(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GETUTCDATEContext : Function_callContext {
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public GETUTCDATEContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETUTCDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETUTCDATE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGETUTCDATE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ANALYTIC_WINDOWED_FUNCContext : Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return GetRuleContext<Analytic_windowed_functionContext>(0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterANALYTIC_WINDOWED_FUNC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitANALYTIC_WINDOWED_FUNC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitANALYTIC_WINDOWED_FUNC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ISNULLContext : Function_callContext {
		public ITerminalNode ISNULL() { return GetToken(TSqlParser.ISNULL, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ISNULLContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterISNULL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitISNULL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitISNULL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATEDIFFContext : Function_callContext {
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public DATEDIFFContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDATEDIFF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDATEDIFF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATEDIFF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GETDATEContext : Function_callContext {
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public GETDATEContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGETDATE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGETDATE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGETDATE(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 818, RULE_function_call);
		int _la;
		try {
			State = 9755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1372,Context) ) {
			case 1:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9623; ranking_windowed_function();
				}
				break;
			case 2:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9624; aggregate_windowed_function();
				}
				break;
			case 3:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 9625; analytic_windowed_function();
				}
				break;
			case 4:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 9626; scalar_function_name();
				State = 9627; Match(LR_BRACKET);
				State = 9629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BLOCKING_HIERARCHY) | (1L << CALLED) | (1L << CASE) | (1L << COALESCE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CONVERT - 69)) | (1L << (CURRENT_TIMESTAMP - 69)) | (1L << (CURRENT_USER - 69)) | (1L << (DATA_COMPRESSION - 69)) | (1L << (DEFAULT - 69)) | (1L << (EVENTDATA - 69)) | (1L << (FILENAME - 69)) | (1L << (FILLFACTOR - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (FORCESEEK - 133)) | (1L << (IDENTITY - 133)) | (1L << (IIF - 133)) | (1L << (INIT - 133)) | (1L << (ISNULL - 133)) | (1L << (KEY - 133)) | (1L << (LEFT - 133)) | (1L << (MASTER - 133)) | (1L << (MAX_MEMORY - 133)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (NULL - 222)) | (1L << (NULLIF - 222)) | (1L << (OFFSETS - 222)) | (1L << (OVER - 222)) | (1L << (PAGE - 222)) | (1L << (PUBLIC - 222)) | (1L << (R - 222)) | (1L << (RAW - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (RIGHT - 286)) | (1L << (ROWCOUNT - 286)) | (1L << (SAFETY - 286)) | (1L << (SERVER - 286)) | (1L << (SESSION_USER - 286)) | (1L << (SID - 286)) | (1L << (SOURCE - 286)) | (1L << (STATE - 286)) | (1L << (START - 286)) | (1L << (SYSTEM_USER - 286)) | (1L << (TARGET - 286)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (LOCAL_ID - 768)) | (1L << (DECIMAL - 768)) | (1L << (ID - 768)) | (1L << (STRING - 768)) | (1L << (BINARY - 768)) | (1L << (FLOAT - 768)) | (1L << (REAL - 768)) | (1L << (DOLLAR - 768)) | (1L << (LR_BRACKET - 768)) | (1L << (PLUS - 768)) | (1L << (MINUS - 768)) | (1L << (BIT_NOT - 768)))) != 0)) {
					{
					State = 9628; expression_list();
					}
				}

				State = 9631; Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 9633; Match(BINARY_CHECKSUM);
				State = 9634; Match(LR_BRACKET);
				State = 9635; Match(STAR);
				State = 9636; Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 9637; Match(CAST);
				State = 9638; Match(LR_BRACKET);
				State = 9639; expression(0);
				State = 9640; Match(AS);
				State = 9641; data_type();
				State = 9642; Match(RR_BRACKET);
				}
				break;
			case 7:
				_localctx = new CONVERTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 9644; Match(CONVERT);
				State = 9645; Match(LR_BRACKET);
				State = 9646; ((CONVERTContext)_localctx).convert_data_type = data_type();
				State = 9647; Match(COMMA);
				State = 9648; ((CONVERTContext)_localctx).convert_expression = expression(0);
				State = 9651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9649; Match(COMMA);
					State = 9650; ((CONVERTContext)_localctx).style = expression(0);
					}
				}

				State = 9653; Match(RR_BRACKET);
				}
				break;
			case 8:
				_localctx = new CHECKSUMContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 9655; Match(CHECKSUM);
				State = 9656; Match(LR_BRACKET);
				State = 9657; Match(STAR);
				State = 9658; Match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new COALESCEContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 9659; Match(COALESCE);
				State = 9660; Match(LR_BRACKET);
				State = 9661; expression_list();
				State = 9662; Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 9664; Match(CURRENT_TIMESTAMP);
				}
				break;
			case 11:
				_localctx = new CURRENT_USERContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 9665; Match(CURRENT_USER);
				}
				break;
			case 12:
				_localctx = new DATEADDContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 9666; Match(DATEADD);
				State = 9667; Match(LR_BRACKET);
				State = 9668; Match(ID);
				State = 9669; Match(COMMA);
				State = 9670; expression(0);
				State = 9671; Match(COMMA);
				State = 9672; expression(0);
				State = 9673; Match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new DATEDIFFContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 9675; Match(DATEDIFF);
				State = 9676; Match(LR_BRACKET);
				State = 9677; Match(ID);
				State = 9678; Match(COMMA);
				State = 9679; expression(0);
				State = 9680; Match(COMMA);
				State = 9681; expression(0);
				State = 9682; Match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new DATENAMEContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 9684; Match(DATENAME);
				State = 9685; Match(LR_BRACKET);
				State = 9686; Match(ID);
				State = 9687; Match(COMMA);
				State = 9688; expression(0);
				State = 9689; Match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new DATEPARTContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 9691; Match(DATEPART);
				State = 9692; Match(LR_BRACKET);
				State = 9693; Match(ID);
				State = 9694; Match(COMMA);
				State = 9695; expression(0);
				State = 9696; Match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new GETDATEContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 9698; Match(GETDATE);
				State = 9699; Match(LR_BRACKET);
				State = 9700; Match(RR_BRACKET);
				}
				break;
			case 17:
				_localctx = new GETUTCDATEContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 9701; Match(GETUTCDATE);
				State = 9702; Match(LR_BRACKET);
				State = 9703; Match(RR_BRACKET);
				}
				break;
			case 18:
				_localctx = new IDENTITYContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 9704; Match(IDENTITY);
				State = 9705; Match(LR_BRACKET);
				State = 9706; data_type();
				State = 9709;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1370,Context) ) {
				case 1:
					{
					State = 9707; Match(COMMA);
					State = 9708; ((IDENTITYContext)_localctx).seed = Match(DECIMAL);
					}
					break;
				}
				State = 9713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9711; Match(COMMA);
					State = 9712; ((IDENTITYContext)_localctx).increment = Match(DECIMAL);
					}
				}

				State = 9715; Match(RR_BRACKET);
				}
				break;
			case 19:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 9717; Match(MIN_ACTIVE_ROWVERSION);
				}
				break;
			case 20:
				_localctx = new NULLIFContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 9718; Match(NULLIF);
				State = 9719; Match(LR_BRACKET);
				State = 9720; expression(0);
				State = 9721; Match(COMMA);
				State = 9722; expression(0);
				State = 9723; Match(RR_BRACKET);
				}
				break;
			case 21:
				_localctx = new STUFFContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 9725; Match(STUFF);
				State = 9726; Match(LR_BRACKET);
				State = 9727; expression(0);
				State = 9728; Match(COMMA);
				State = 9729; Match(DECIMAL);
				State = 9730; Match(COMMA);
				State = 9731; Match(DECIMAL);
				State = 9732; Match(COMMA);
				State = 9733; expression(0);
				State = 9734; Match(RR_BRACKET);
				}
				break;
			case 22:
				_localctx = new SESSION_USERContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 9736; Match(SESSION_USER);
				}
				break;
			case 23:
				_localctx = new SYSTEM_USERContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 9737; Match(SYSTEM_USER);
				}
				break;
			case 24:
				_localctx = new ISNULLContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 9738; Match(ISNULL);
				State = 9739; Match(LR_BRACKET);
				State = 9740; expression(0);
				State = 9741; Match(COMMA);
				State = 9742; expression(0);
				State = 9743; Match(RR_BRACKET);
				}
				break;
			case 25:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 9745; xml_data_type_methods();
				}
				break;
			case 26:
				_localctx = new IFFContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 9746; Match(IIF);
				State = 9747; Match(LR_BRACKET);
				State = 9748; search_condition();
				State = 9749; Match(COMMA);
				State = 9750; expression(0);
				State = 9751; Match(COMMA);
				State = 9752; expression(0);
				State = 9753; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_data_type_methodsContext : ParserRuleContext {
		public Value_methodContext value_method() {
			return GetRuleContext<Value_methodContext>(0);
		}
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public Exist_methodContext exist_method() {
			return GetRuleContext<Exist_methodContext>(0);
		}
		public Modify_methodContext modify_method() {
			return GetRuleContext<Modify_methodContext>(0);
		}
		public Nodes_methodContext nodes_method() {
			return GetRuleContext<Nodes_methodContext>(0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_data_type_methods; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterXml_data_type_methods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitXml_data_type_methods(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_data_type_methods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_data_type_methodsContext xml_data_type_methods() {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(Context, State);
		EnterRule(_localctx, 820, RULE_xml_data_type_methods);
		try {
			State = 9762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1373,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9757; value_method();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9758; query_method();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9759; exist_method();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9760; modify_method();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9761; nodes_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_methodContext : ParserRuleContext {
		public IToken xquery;
		public IToken sqltype;
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return GetRuleContext<Query_methodContext>(0);
		}
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode PARAM_NODE() { return GetToken(TSqlParser.PARAM_NODE, 0); }
		public Value_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_methodContext value_method() {
		Value_methodContext _localctx = new Value_methodContext(Context, State);
		EnterRule(_localctx, 822, RULE_value_method);
		try {
			State = 9807;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1377,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9768;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1374,Context) ) {
				case 1:
					{
					State = 9764; Match(LOCAL_ID);
					}
					break;
				case 2:
					{
					State = 9765; Match(ID);
					}
					break;
				case 3:
					{
					State = 9766; Match(EVENTDATA);
					}
					break;
				case 4:
					{
					State = 9767; query_method();
					}
					break;
				}
				State = 9770; Match(DOT);
				State = 9771; Match(VALUE);
				State = 9772; Match(LR_BRACKET);
				State = 9773; _localctx.xquery = Match(STRING);
				State = 9774; Match(COMMA);
				State = 9775; _localctx.sqltype = Match(STRING);
				State = 9776; Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9781;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1375,Context) ) {
				case 1:
					{
					State = 9777; Match(LOCAL_ID);
					}
					break;
				case 2:
					{
					State = 9778; Match(ID);
					}
					break;
				case 3:
					{
					State = 9779; Match(EVENTDATA);
					}
					break;
				case 4:
					{
					State = 9780; query_method();
					}
					break;
				}
				State = 9783; Match(DOT);
				State = 9784; Match(ROW);
				State = 9785; Match(DOT);
				State = 9786; Match(VALUE);
				State = 9787; Match(LR_BRACKET);
				State = 9788; _localctx.xquery = Match(STRING);
				State = 9789; Match(COMMA);
				State = 9790; _localctx.sqltype = Match(STRING);
				State = 9791; Match(RR_BRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9796;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1376,Context) ) {
				case 1:
					{
					State = 9792; Match(LOCAL_ID);
					}
					break;
				case 2:
					{
					State = 9793; Match(ID);
					}
					break;
				case 3:
					{
					State = 9794; Match(EVENTDATA);
					}
					break;
				case 4:
					{
					State = 9795; query_method();
					}
					break;
				}
				State = 9798; Match(DOT);
				State = 9799; Match(PARAM_NODE);
				State = 9800; Match(DOT);
				State = 9801; Match(VALUE);
				State = 9802; Match(LR_BRACKET);
				State = 9803; _localctx.xquery = Match(STRING);
				State = 9804; Match(COMMA);
				State = 9805; _localctx.sqltype = Match(STRING);
				State = 9806; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_methodContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public Query_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_methodContext query_method() {
		Query_methodContext _localctx = new Query_methodContext(Context, State);
		EnterRule(_localctx, 824, RULE_query_method);
		try {
			State = 9831;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1380,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9812;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1378,Context) ) {
				case 1:
					{
					State = 9809; Match(LOCAL_ID);
					}
					break;
				case 2:
					{
					State = 9810; Match(ID);
					}
					break;
				case 3:
					{
					State = 9811; full_table_name();
					}
					break;
				}
				State = 9814; Match(DOT);
				State = 9815; Match(QUERY);
				State = 9816; Match(LR_BRACKET);
				State = 9817; _localctx.xquery = Match(STRING);
				State = 9818; Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9822;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1379,Context) ) {
				case 1:
					{
					State = 9819; Match(LOCAL_ID);
					}
					break;
				case 2:
					{
					State = 9820; Match(ID);
					}
					break;
				case 3:
					{
					State = 9821; full_table_name();
					}
					break;
				}
				State = 9824; Match(DOT);
				State = 9825; Match(ROW);
				State = 9826; Match(DOT);
				State = 9827; Match(QUERY);
				State = 9828; Match(LR_BRACKET);
				State = 9829; _localctx.xquery = Match(STRING);
				State = 9830; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exist_methodContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Exist_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exist_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExist_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExist_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExist_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exist_methodContext exist_method() {
		Exist_methodContext _localctx = new Exist_methodContext(Context, State);
		EnterRule(_localctx, 826, RULE_exist_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9833;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 9834; Match(DOT);
			State = 9835; Match(EXIST);
			State = 9836; Match(LR_BRACKET);
			State = 9837; _localctx.xquery = Match(STRING);
			State = 9838; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modify_methodContext : ParserRuleContext {
		public IToken xml_dml;
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Modify_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterModify_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitModify_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModify_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Modify_methodContext modify_method() {
		Modify_methodContext _localctx = new Modify_methodContext(Context, State);
		EnterRule(_localctx, 828, RULE_modify_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9840;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 9841; Match(DOT);
			State = 9842; Match(MODIFY);
			State = 9843; Match(LR_BRACKET);
			State = 9844; _localctx.xml_dml = Match(STRING);
			State = 9845; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nodes_methodContext : ParserRuleContext {
		public IToken xquery;
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Nodes_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodes_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNodes_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNodes_method(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodes_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nodes_methodContext nodes_method() {
		Nodes_methodContext _localctx = new Nodes_methodContext(Context, State);
		EnterRule(_localctx, 830, RULE_nodes_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9847;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 9848; Match(DOT);
			State = 9849; Match(NODES);
			State = 9850; Match(LR_BRACKET);
			State = 9851; _localctx.xquery = Match(STRING);
			State = 9852; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(Context, State);
		EnterRule(_localctx, 832, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9854; Match(WHEN);
			State = 9855; expression(0);
			State = 9856; Match(THEN);
			State = 9857; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_search_condition_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(TSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(TSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_search_condition_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSwitch_search_condition_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSwitch_search_condition_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_search_condition_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_search_condition_sectionContext switch_search_condition_section() {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(Context, State);
		EnterRule(_localctx, 834, RULE_switch_search_condition_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9859; Match(WHEN);
			State = 9860; search_condition();
			State = 9861; Match(THEN);
			State = 9862; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_aliasContext : ParserRuleContext {
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_column_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_column_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_aliasContext as_column_alias() {
		As_column_aliasContext _localctx = new As_column_aliasContext(Context, State);
		EnterRule(_localctx, 836, RULE_as_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 9864; Match(AS);
				}
			}

			State = 9867; column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_table_aliasContext : ParserRuleContext {
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAs_table_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAs_table_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_table_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_table_aliasContext as_table_alias() {
		As_table_aliasContext _localctx = new As_table_aliasContext(Context, State);
		EnterRule(_localctx, 838, RULE_as_table_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 9869; Match(AS);
				}
			}

			State = 9872; table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 840, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9874; id();
			State = 9876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1383,Context) ) {
			case 1:
				{
				State = 9875; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_hintsContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public With_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_table_hints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_table_hintsContext with_table_hints() {
		With_table_hintsContext _localctx = new With_table_hintsContext(Context, State);
		EnterRule(_localctx, 842, RULE_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 9878; Match(WITH);
				}
			}

			State = 9881; Match(LR_BRACKET);
			State = 9882; table_hint();
			State = 9889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & ((1L << (SERIALIZABLE - 717)) | (1L << (SNAPSHOT - 717)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 717)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				State = 9884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9883; Match(COMMA);
					}
				}

				State = 9886; table_hint();
				}
				}
				State = 9891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 9892; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_with_table_hintsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_with_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_with_table_hints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_with_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_with_table_hintsContext insert_with_table_hints() {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(Context, State);
		EnterRule(_localctx, 844, RULE_insert_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9894; Match(WITH);
			State = 9895; Match(LR_BRACKET);
			State = 9896; table_hint();
			State = 9903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & ((1L << (SERIALIZABLE - 717)) | (1L << (SNAPSHOT - 717)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 717)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				State = 9898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9897; Match(COMMA);
					}
				}

				State = 9900; table_hint();
				}
				}
				State = 9905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 9906; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSqlParser.INDEX, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public Index_valueContext[] index_value() {
			return GetRuleContexts<Index_valueContext>();
		}
		public Index_valueContext index_value(int i) {
			return GetRuleContext<Index_valueContext>(i);
		}
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode[] ID() { return GetTokens(TSqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TSqlParser.ID, i);
		}
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(Context, State);
		EnterRule(_localctx, 846, RULE_table_hint);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOEXPAND) {
				{
				State = 9908; Match(NOEXPAND);
				}
			}

			State = 9959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1395,Context) ) {
			case 1:
				{
				State = 9911; Match(INDEX);
				State = 9931;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 9912; Match(LR_BRACKET);
					State = 9913; index_value();
					State = 9918;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 9914; Match(COMMA);
						State = 9915; index_value();
						}
						}
						State = 9920;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 9921; Match(RR_BRACKET);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case DECIMAL:
				case ID:
					{
					State = 9923; index_value();
					State = 9928;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1391,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 9924; Match(COMMA);
							State = 9925; index_value();
							}
							} 
						}
						State = 9930;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,1391,Context);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 9933; Match(INDEX);
				State = 9934; Match(EQUAL);
				State = 9935; index_value();
				}
				break;
			case 3:
				{
				State = 9936; Match(FORCESEEK);
				State = 9951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 9937; Match(LR_BRACKET);
					State = 9938; index_value();
					State = 9939; Match(LR_BRACKET);
					State = 9940; Match(ID);
					State = 9945;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 9941; Match(COMMA);
						State = 9942; Match(ID);
						}
						}
						State = 9947;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 9948; Match(RR_BRACKET);
					State = 9949; Match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				State = 9953; Match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				State = 9954; Match(SNAPSHOT);
				}
				break;
			case 6:
				{
				State = 9955; Match(SPATIAL_WINDOW_MAX_CELLS);
				State = 9956; Match(EQUAL);
				State = 9957; Match(DECIMAL);
				}
				break;
			case 7:
				{
				State = 9958; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_valueContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_valueContext index_value() {
		Index_valueContext _localctx = new Index_valueContext(Context, State);
		EnterRule(_localctx, 848, RULE_index_value);
		try {
			State = 9963;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9961; id();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9962; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_alias_listContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_alias_listContext column_alias_list() {
		Column_alias_listContext _localctx = new Column_alias_listContext(Context, State);
		EnterRule(_localctx, 850, RULE_column_alias_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9965; Match(LR_BRACKET);
			State = 9966; column_alias();
			State = 9971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9967; Match(COMMA);
				State = 9968; column_alias();
				}
				}
				State = 9973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 9974; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 852, RULE_column_alias);
		try {
			State = 9978;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9976; id();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9977; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_value_constructorContext : ParserRuleContext {
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public ITerminalNode[] LR_BRACKET() { return GetTokens(TSqlParser.LR_BRACKET); }
		public ITerminalNode LR_BRACKET(int i) {
			return GetToken(TSqlParser.LR_BRACKET, i);
		}
		public Expression_listContext[] expression_list() {
			return GetRuleContexts<Expression_listContext>();
		}
		public Expression_listContext expression_list(int i) {
			return GetRuleContext<Expression_listContext>(i);
		}
		public ITerminalNode[] RR_BRACKET() { return GetTokens(TSqlParser.RR_BRACKET); }
		public ITerminalNode RR_BRACKET(int i) {
			return GetToken(TSqlParser.RR_BRACKET, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_value_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_value_constructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_value_constructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_value_constructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_value_constructorContext table_value_constructor() {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(Context, State);
		EnterRule(_localctx, 854, RULE_table_value_constructor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9980; Match(VALUES);
			State = 9981; Match(LR_BRACKET);
			State = 9982; expression_list();
			State = 9983; Match(RR_BRACKET);
			State = 9991;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1399,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9984; Match(COMMA);
					State = 9985; Match(LR_BRACKET);
					State = 9986; expression_list();
					State = 9987; Match(RR_BRACKET);
					}
					} 
				}
				State = 9993;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1399,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 856, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9994; expression(0);
			State = 9999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9995; Match(COMMA);
				State = 9996; expression(0);
				}
				}
				State = 10001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ranking_windowed_functionContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranking_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRanking_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRanking_windowed_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRanking_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ranking_windowed_functionContext ranking_windowed_function() {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(Context, State);
		EnterRule(_localctx, 858, RULE_ranking_windowed_function);
		int _la;
		try {
			State = 10012;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10002;
				_la = TokenStream.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10003; Match(LR_BRACKET);
				State = 10004; Match(RR_BRACKET);
				State = 10005; over_clause();
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10006; Match(NTILE);
				State = 10007; Match(LR_BRACKET);
				State = 10008; expression(0);
				State = 10009; Match(RR_BRACKET);
				State = 10010; over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_windowed_functionContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public All_distinct_expressionContext all_distinct_expression() {
			return GetRuleContext<All_distinct_expressionContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode STAR() { return GetToken(TSqlParser.STAR, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_windowed_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_windowed_functionContext aggregate_windowed_function() {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(Context, State);
		EnterRule(_localctx, 860, RULE_aggregate_windowed_function);
		int _la;
		try {
			State = 10046;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10014;
				_la = TokenStream.LA(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (STDEV - 734)) | (1L << (STDEVP - 734)) | (1L << (SUM - 734)) | (1L << (VAR - 734)) | (1L << (VARP - 734)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10015; Match(LR_BRACKET);
				State = 10016; all_distinct_expression();
				State = 10017; Match(RR_BRACKET);
				State = 10019;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1402,Context) ) {
				case 1:
					{
					State = 10018; over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10021;
				_la = TokenStream.LA(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10022; Match(LR_BRACKET);
				State = 10025;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 10023; Match(STAR);
					}
					break;
				case ALL:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case DISTINCT:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 10024; all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10027; Match(RR_BRACKET);
				State = 10029;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1404,Context) ) {
				case 1:
					{
					State = 10028; over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10031; Match(CHECKSUM_AGG);
				State = 10032; Match(LR_BRACKET);
				State = 10033; all_distinct_expression();
				State = 10034; Match(RR_BRACKET);
				}
				break;
			case GROUPING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10036; Match(GROUPING);
				State = 10037; Match(LR_BRACKET);
				State = 10038; expression(0);
				State = 10039; Match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10041; Match(GROUPING_ID);
				State = 10042; Match(LR_BRACKET);
				State = 10043; expression_list();
				State = 10044; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analytic_windowed_functionContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analytic_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAnalytic_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAnalytic_windowed_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalytic_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Analytic_windowed_functionContext analytic_windowed_function() {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(Context, State);
		EnterRule(_localctx, 862, RULE_analytic_windowed_function);
		int _la;
		try {
			State = 10068;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10048;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10049; Match(LR_BRACKET);
				State = 10050; expression(0);
				State = 10051; Match(RR_BRACKET);
				State = 10052; over_clause();
				}
				break;
			case LAG:
			case LEAD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10054;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10055; Match(LR_BRACKET);
				State = 10056; expression(0);
				State = 10063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10057; Match(COMMA);
					State = 10058; expression(0);
					State = 10061;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 10059; Match(COMMA);
						State = 10060; expression(0);
						}
					}

					}
				}

				State = 10065; Match(RR_BRACKET);
				State = 10066; over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_distinct_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TSqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_distinct_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAll_distinct_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAll_distinct_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_distinct_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_distinct_expressionContext all_distinct_expression() {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(Context, State);
		EnterRule(_localctx, 864, RULE_all_distinct_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10071;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 10070;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 10073; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(TSqlParser.OVER, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(TSqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return GetRuleContext<Row_or_range_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 866, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10075; Match(OVER);
			State = 10076; Match(LR_BRACKET);
			State = 10080;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 10077; Match(PARTITION);
				State = 10078; Match(BY);
				State = 10079; expression_list();
				}
			}

			State = 10083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 10082; order_by_clause();
				}
			}

			State = 10086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 10085; row_or_range_clause();
				}
			}

			State = 10088; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_range_clauseContext : ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_range_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterRow_or_range_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitRow_or_range_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_or_range_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_range_clauseContext row_or_range_clause() {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(Context, State);
		EnterRule(_localctx, 868, RULE_row_or_range_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10090;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 10091; window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(TSqlParser.BETWEEN, 0); }
		public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		public ITerminalNode AND() { return GetToken(TSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_extent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(Context, State);
		EnterRule(_localctx, 870, RULE_window_frame_extent);
		try {
			State = 10099;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10093; window_frame_preceding();
				}
				break;
			case BETWEEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10094; Match(BETWEEN);
				State = 10095; window_frame_bound();
				State = 10096; Match(AND);
				State = 10097; window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public Window_frame_followingContext window_frame_following() {
			return GetRuleContext<Window_frame_followingContext>(0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(Context, State);
		EnterRule(_localctx, 872, RULE_window_frame_bound);
		try {
			State = 10103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1414,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10101; window_frame_preceding();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10102; window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_precedingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode CURRENT() { return GetToken(TSqlParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_preceding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_preceding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_preceding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_preceding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_precedingContext window_frame_preceding() {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(Context, State);
		EnterRule(_localctx, 874, RULE_window_frame_preceding);
		try {
			State = 10111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10105; Match(UNBOUNDED);
				State = 10106; Match(PRECEDING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10107; Match(DECIMAL);
				State = 10108; Match(PRECEDING);
				}
				break;
			case CURRENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10109; Match(CURRENT);
				State = 10110; Match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_followingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_following; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_following(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_following(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_following(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_followingContext window_frame_following() {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(Context, State);
		EnterRule(_localctx, 876, RULE_window_frame_following);
		try {
			State = 10117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10113; Match(UNBOUNDED);
				State = 10114; Match(FOLLOWING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10115; Match(DECIMAL);
				State = 10116; Match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_optionContext : ParserRuleContext {
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext[] database_filestream_option() {
			return GetRuleContexts<Database_filestream_optionContext>();
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return GetRuleContext<Database_filestream_optionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_database_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_database_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_database_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_optionContext create_database_option() {
		Create_database_optionContext _localctx = new Create_database_optionContext(Context, State);
		EnterRule(_localctx, 878, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			State = 10153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILESTREAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10119; Match(FILESTREAM);
				{
				State = 10120; database_filestream_option();
				State = 10125;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1417,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 10121; Match(COMMA);
						State = 10122; database_filestream_option();
						}
						} 
					}
					State = 10127;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1417,Context);
				}
				}
				}
				break;
			case DEFAULT_LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10128; Match(DEFAULT_LANGUAGE);
				State = 10129; Match(EQUAL);
				State = 10132;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 10130; id();
					}
					break;
				case STRING:
					{
					State = 10131; Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10134; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 10135; Match(EQUAL);
				State = 10138;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 10136; id();
					}
					break;
				case STRING:
					{
					State = 10137; Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10140; Match(NESTED_TRIGGERS);
				State = 10141; Match(EQUAL);
				State = 10142;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10143; Match(TRANSFORM_NOISE_WORDS);
				State = 10144; Match(EQUAL);
				State = 10145;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10146; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 10147; Match(EQUAL);
				State = 10148; Match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10149; Match(DB_CHAINING);
				State = 10150;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TRUSTWORTHY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10151; Match(TRUSTWORTHY);
				State = 10152;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_filestream_optionContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode FULL() { return GetToken(TSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_filestream_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_filestream_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_filestream_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_filestream_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_filestream_optionContext database_filestream_option() {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(Context, State);
		EnterRule(_localctx, 880, RULE_database_filestream_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10155; Match(LR_BRACKET);
			State = 10162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				{
				State = 10156; Match(NON_TRANSACTED_ACCESS);
				State = 10157; Match(EQUAL);
				State = 10158;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				{
				State = 10159; Match(DIRECTORY_NAME);
				State = 10160; Match(EQUAL);
				State = 10161; Match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 10164; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_file_specContext : ParserRuleContext {
		public File_groupContext file_group() {
			return GetRuleContext<File_groupContext>(0);
		}
		public File_specContext file_spec() {
			return GetRuleContext<File_specContext>(0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDatabase_file_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDatabase_file_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_file_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_file_specContext database_file_spec() {
		Database_file_specContext _localctx = new Database_file_specContext(Context, State);
		EnterRule(_localctx, 882, RULE_database_file_spec);
		try {
			State = 10168;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILEGROUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10166; file_group();
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10167; file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_groupContext : ParserRuleContext {
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public File_specContext[] file_spec() {
			return GetRuleContexts<File_specContext>();
		}
		public File_specContext file_spec(int i) {
			return GetRuleContext<File_specContext>(i);
		}
		public ITerminalNode[] CONTAINS() { return GetTokens(TSqlParser.CONTAINS); }
		public ITerminalNode CONTAINS(int i) {
			return GetToken(TSqlParser.CONTAINS, i);
		}
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public File_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_groupContext file_group() {
		File_groupContext _localctx = new File_groupContext(Context, State);
		EnterRule(_localctx, 884, RULE_file_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10170; Match(FILEGROUP);
			State = 10171; id();
			State = 10174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1423,Context) ) {
			case 1:
				{
				State = 10172; Match(CONTAINS);
				State = 10173; Match(FILESTREAM);
				}
				break;
			}
			State = 10177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 10176; Match(DEFAULT);
				}
			}

			State = 10181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINS) {
				{
				State = 10179; Match(CONTAINS);
				State = 10180; Match(MEMORY_OPTIMIZED_DATA);
				}
			}

			State = 10183; file_spec();
			State = 10188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1426,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 10184; Match(COMMA);
					State = 10185; file_spec();
					}
					} 
				}
				State = 10190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1426,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_specContext : ParserRuleContext {
		public IToken file;
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_spec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_specContext file_spec() {
		File_specContext _localctx = new File_specContext(Context, State);
		EnterRule(_localctx, 886, RULE_file_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10191; Match(LR_BRACKET);
			State = 10192; Match(NAME);
			State = 10193; Match(EQUAL);
			State = 10196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 10194; id();
				}
				break;
			case STRING:
				{
				State = 10195; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 10199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 10198; Match(COMMA);
				}
			}

			State = 10201; Match(FILENAME);
			State = 10202; Match(EQUAL);
			State = 10203; _localctx.file = Match(STRING);
			State = 10205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 10204; Match(COMMA);
				}
			}

			State = 10213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIZE) {
				{
				State = 10207; Match(SIZE);
				State = 10208; Match(EQUAL);
				State = 10209; file_size();
				State = 10211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10210; Match(COMMA);
					}
				}

				}
			}

			State = 10224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAXSIZE) {
				{
				State = 10215; Match(MAXSIZE);
				State = 10216; Match(EQUAL);
				State = 10219;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
					{
					State = 10217; file_size();
					}
					break;
				case UNLIMITED:
					{
					State = 10218; Match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10221; Match(COMMA);
					}
				}

				}
			}

			State = 10232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILEGROWTH) {
				{
				State = 10226; Match(FILEGROWTH);
				State = 10227; Match(EQUAL);
				State = 10228; file_size();
				State = 10230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10229; Match(COMMA);
					}
				}

				}
			}

			State = 10234; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(Context, State);
		EnterRule(_localctx, 888, RULE_entity_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1438,Context) ) {
			case 1:
				{
				State = 10236; _localctx.server = id();
				State = 10237; Match(DOT);
				State = 10238; _localctx.database = id();
				State = 10239; Match(DOT);
				State = 10240; _localctx.schema = id();
				State = 10241; Match(DOT);
				}
				break;
			case 2:
				{
				State = 10243; _localctx.database = id();
				State = 10244; Match(DOT);
				State = 10246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)))) != 0)) {
					{
					State = 10245; _localctx.schema = id();
					}
				}

				State = 10248; Match(DOT);
				}
				break;
			case 3:
				{
				State = 10250; _localctx.schema = id();
				State = 10251; Match(DOT);
				}
				break;
			}
			State = 10255; _localctx.table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_azure_dwContext : ParserRuleContext {
		public IdContext schema;
		public IdContext object_name;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_azure_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_azure_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_azure_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name_for_azure_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(Context, State);
		EnterRule(_localctx, 890, RULE_entity_name_for_azure_dw);
		try {
			State = 10262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1439,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10257; _localctx.schema = id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10258; _localctx.schema = id();
				State = 10259; Match(DOT);
				State = 10260; _localctx.object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_for_parallel_dwContext : ParserRuleContext {
		public IdContext schema_database;
		public IdContext schema;
		public IdContext object_name;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_for_parallel_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_for_parallel_dw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_for_parallel_dw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name_for_parallel_dw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(Context, State);
		EnterRule(_localctx, 892, RULE_entity_name_for_parallel_dw);
		try {
			State = 10269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1440,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10264; _localctx.schema_database = id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10265; _localctx.schema = id();
				State = 10266; Match(DOT);
				State = 10267; _localctx.object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_table_nameContext : ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_table_nameContext full_table_name() {
		Full_table_nameContext _localctx = new Full_table_nameContext(Context, State);
		EnterRule(_localctx, 894, RULE_full_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1442,Context) ) {
			case 1:
				{
				State = 10271; _localctx.server = id();
				State = 10272; Match(DOT);
				State = 10273; _localctx.database = id();
				State = 10274; Match(DOT);
				State = 10275; _localctx.schema = id();
				State = 10276; Match(DOT);
				}
				break;
			case 2:
				{
				State = 10278; _localctx.database = id();
				State = 10279; Match(DOT);
				State = 10281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)))) != 0)) {
					{
					State = 10280; _localctx.schema = id();
					}
				}

				State = 10283; Match(DOT);
				}
				break;
			case 3:
				{
				State = 10285; _localctx.schema = id();
				State = 10286; Match(DOT);
				}
				break;
			}
			State = 10290; _localctx.table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public ITerminalNode BLOCKING_HIERARCHY() { return GetToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 896, RULE_table_name);
		int _la;
		try {
			State = 10318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1447,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1444,Context) ) {
				case 1:
					{
					State = 10292; _localctx.database = id();
					State = 10293; Match(DOT);
					State = 10295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)))) != 0)) {
						{
						State = 10294; _localctx.schema = id();
						}
					}

					State = 10297; Match(DOT);
					}
					break;
				case 2:
					{
					State = 10299; _localctx.schema = id();
					State = 10300; Match(DOT);
					}
					break;
				}
				State = 10304; _localctx.table = id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10315;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1446,Context) ) {
				case 1:
					{
					State = 10305; _localctx.database = id();
					State = 10306; Match(DOT);
					State = 10308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)))) != 0)) {
						{
						State = 10307; _localctx.schema = id();
						}
					}

					State = 10310; Match(DOT);
					}
					break;
				case 2:
					{
					State = 10312; _localctx.schema = id();
					State = 10313; Match(DOT);
					}
					break;
				}
				State = 10317; Match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public IdContext schema;
		public IdContext name;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(Context, State);
		EnterRule(_localctx, 898, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1448,Context) ) {
			case 1:
				{
				State = 10320; _localctx.schema = id();
				State = 10321; Match(DOT);
				}
				break;
			}
			State = 10325; _localctx.name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_schemaContext : ParserRuleContext {
		public IdContext schema;
		public IdContext procedure;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_schemaContext func_proc_name_schema() {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(Context, State);
		EnterRule(_localctx, 900, RULE_func_proc_name_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1449,Context) ) {
			case 1:
				{
				{
				State = 10327; _localctx.schema = id();
				}
				State = 10328; Match(DOT);
				}
				break;
			}
			State = 10332; _localctx.procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_database_schemaContext : ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return GetRuleContext<Func_proc_name_schemaContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_database_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_database_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(Context, State);
		EnterRule(_localctx, 902, RULE_func_proc_name_database_schema);
		int _la;
		try {
			State = 10345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1452,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10334; func_proc_name_schema();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10342;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1451,Context) ) {
				case 1:
					{
					State = 10335; _localctx.database = id();
					State = 10336; Match(DOT);
					State = 10338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)))) != 0)) {
						{
						State = 10337; _localctx.schema = id();
						}
					}

					State = 10340; Match(DOT);
					}
					break;
				}
				State = 10344; _localctx.procedure = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_name_server_database_schemaContext : ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return GetRuleContext<Func_proc_name_database_schemaContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name_server_database_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name_server_database_schema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name_server_database_schema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name_server_database_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(Context, State);
		EnterRule(_localctx, 904, RULE_func_proc_name_server_database_schema);
		int _la;
		try {
			State = 10360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1455,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10347; func_proc_name_database_schema();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10357;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1454,Context) ) {
				case 1:
					{
					State = 10348; _localctx.server = id();
					State = 10349; Match(DOT);
					State = 10350; _localctx.database = id();
					State = 10351; Match(DOT);
					State = 10353;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (DOUBLE_QUOTE_ID - 768)) | (1L << (SQUARE_BRACKET_ID - 768)) | (1L << (ID - 768)))) != 0)) {
						{
						State = 10352; _localctx.schema = id();
						}
					}

					State = 10355; Match(DOT);
					}
					break;
				}
				State = 10359; _localctx.procedure = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_objectContext : ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDdl_object(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDdl_object(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_object(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_objectContext ddl_object() {
		Ddl_objectContext _localctx = new Ddl_objectContext(Context, State);
		EnterRule(_localctx, 906, RULE_ddl_object);
		try {
			State = 10364;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10362; full_table_name();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10363; Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_nameContext : ParserRuleContext {
		public IdContext column_name;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSqlParser.DOT, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode STATUS() { return GetToken(TSqlParser.STATUS, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public Full_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_nameContext full_column_name() {
		Full_column_nameContext _localctx = new Full_column_nameContext(Context, State);
		EnterRule(_localctx, 908, RULE_full_column_name);
		try {
			State = 10414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1465,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10369;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1457,Context) ) {
				case 1:
					{
					State = 10366; table_name();
					State = 10367; Match(DOT);
					}
					break;
				}
				State = 10371; _localctx.column_name = id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1458,Context) ) {
				case 1:
					{
					State = 10372; table_name();
					State = 10373; Match(DOT);
					}
					break;
				}
				State = 10377; Match(COMPATIBILITY_LEVEL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10381;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1459,Context) ) {
				case 1:
					{
					State = 10378; table_name();
					State = 10379; Match(DOT);
					}
					break;
				}
				State = 10383; Match(STATUS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10387;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1460,Context) ) {
				case 1:
					{
					State = 10384; table_name();
					State = 10385; Match(DOT);
					}
					break;
				}
				State = 10389; Match(QUOTED_IDENTIFIER);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10393;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1461,Context) ) {
				case 1:
					{
					State = 10390; table_name();
					State = 10391; Match(DOT);
					}
					break;
				}
				State = 10395; Match(ARITHABORT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10399;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1462,Context) ) {
				case 1:
					{
					State = 10396; table_name();
					State = 10397; Match(DOT);
					}
					break;
				}
				State = 10401; Match(ANSI_WARNINGS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10405;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1463,Context) ) {
				case 1:
					{
					State = 10402; table_name();
					State = 10403; Match(DOT);
					}
					break;
				}
				State = 10407; Match(ANSI_PADDING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10411;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1464,Context) ) {
				case 1:
					{
					State = 10408; table_name();
					State = 10409; Match(DOT);
					}
					break;
				}
				State = 10413; Match(ANSI_NULLS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_list_with_orderContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode[] ASC() { return GetTokens(TSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(TSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(TSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(TSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list_with_order; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list_with_order(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list_with_order(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list_with_order(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_list_with_orderContext column_name_list_with_order() {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(Context, State);
		EnterRule(_localctx, 910, RULE_column_name_list_with_order);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10416; id();
			State = 10418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 10417;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 10427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10420; Match(COMMA);
				State = 10421; id();
				State = 10423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 10422;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				State = 10429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(Context, State);
		EnterRule(_localctx, 912, RULE_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10430; id();
			State = 10435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10431; Match(COMMA);
				State = 10432; id();
				}
				}
				State = 10437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 914, RULE_cursor_name);
		try {
			State = 10440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10438; id();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10439; Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_offContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_off; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterOn_off(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitOn_off(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_off(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_offContext on_off() {
		On_offContext _localctx = new On_offContext(Context, State);
		EnterRule(_localctx, 916, RULE_on_off);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10442;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusteredContext : ParserRuleContext {
		public ITerminalNode CLUSTERED() { return GetToken(TSqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustered; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterClustered(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitClustered(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClustered(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClusteredContext clustered() {
		ClusteredContext _localctx = new ClusteredContext(Context, State);
		EnterRule(_localctx, 918, RULE_clustered);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10444;
			_la = TokenStream.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_notnullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode NOT() { return GetToken(TSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_notnull; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_notnull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_notnull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_notnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_notnullContext null_notnull() {
		Null_notnullContext _localctx = new Null_notnullContext(Context, State);
		EnterRule(_localctx, 920, RULE_null_notnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 10446; Match(NOT);
				}
			}

			State = 10449; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_or_defaultContext : ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(TSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_or_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_or_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_or_default(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_or_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_or_defaultContext null_or_default() {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(Context, State);
		EnterRule(_localctx, 922, RULE_null_or_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10458;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case NULL:
				{
				State = 10451; null_notnull();
				}
				break;
			case DEFAULT:
				{
				State = 10452; Match(DEFAULT);
				State = 10453; constant_expression();
				State = 10456;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1472,Context) ) {
				case 1:
					{
					State = 10454; Match(WITH);
					State = 10455; Match(VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_function_nameContext : ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return GetRuleContext<Func_proc_name_server_database_schemaContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(TSqlParser.RIGHT, 0); }
		public ITerminalNode LEFT() { return GetToken(TSqlParser.LEFT, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterScalar_function_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitScalar_function_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_function_nameContext scalar_function_name() {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(Context, State);
		EnterRule(_localctx, 924, RULE_scalar_function_name);
		try {
			State = 10465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1474,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10460; func_proc_name_server_database_schema();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10461; Match(RIGHT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10462; Match(LEFT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10463; Match(BINARY_CHECKSUM);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10464; Match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_timerContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_timer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_timer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_timer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_conversation_timer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_timerContext begin_conversation_timer() {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(Context, State);
		EnterRule(_localctx, 926, RULE_begin_conversation_timer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10467; Match(BEGIN);
			State = 10468; Match(CONVERSATION);
			State = 10469; Match(TIMER);
			State = 10470; Match(LR_BRACKET);
			State = 10471; Match(LOCAL_ID);
			State = 10472; Match(RR_BRACKET);
			State = 10473; Match(TIMEOUT);
			State = 10474; Match(EQUAL);
			State = 10475; time();
			State = 10477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1475,Context) ) {
			case 1:
				{
				State = 10476; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_conversation_dialogContext : ParserRuleContext {
		public IToken dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public IToken service_broker_guid;
		public ITerminalNode BEGIN() { return GetToken(TSqlParser.BEGIN, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public ITerminalNode[] SERVICE() { return GetTokens(TSqlParser.SERVICE); }
		public ITerminalNode SERVICE(int i) {
			return GetToken(TSqlParser.SERVICE, i);
		}
		public ITerminalNode TO() { return GetToken(TSqlParser.TO, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(TSqlParser.ON, i);
		}
		public ITerminalNode CONTRACT() { return GetToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return GetRuleContext<Contract_nameContext>(0);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public Service_nameContext[] service_name() {
			return GetRuleContexts<Service_nameContext>();
		}
		public Service_nameContext service_name(int i) {
			return GetRuleContext<Service_nameContext>(i);
		}
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(TSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TSqlParser.COMMA, i);
		}
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode LIFETIME() { return GetToken(TSqlParser.LIFETIME, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode RELATED_CONVERSATION() { return GetToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public ITerminalNode RELATED_CONVERSATION_GROUP() { return GetToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode OFF() { return GetToken(TSqlParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_conversation_dialog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterBegin_conversation_dialog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitBegin_conversation_dialog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_conversation_dialog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_conversation_dialogContext begin_conversation_dialog() {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(Context, State);
		EnterRule(_localctx, 928, RULE_begin_conversation_dialog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10479; Match(BEGIN);
			State = 10480; Match(DIALOG);
			State = 10482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONVERSATION) {
				{
				State = 10481; Match(CONVERSATION);
				}
			}

			State = 10484; _localctx.dialog_handle = Match(LOCAL_ID);
			State = 10485; Match(FROM);
			State = 10486; Match(SERVICE);
			State = 10487; _localctx.initiator_service_name = service_name();
			State = 10488; Match(TO);
			State = 10489; Match(SERVICE);
			State = 10490; _localctx.target_service_name = service_name();
			State = 10493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 10491; Match(COMMA);
				State = 10492; _localctx.service_broker_guid = Match(STRING);
				}
			}

			State = 10495; Match(ON);
			State = 10496; Match(CONTRACT);
			State = 10497; contract_name();
			State = 10520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1483,Context) ) {
			case 1:
				{
				State = 10498; Match(WITH);
				State = 10505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) {
					{
					State = 10499;
					_la = TokenStream.LA(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 10500; Match(EQUAL);
					State = 10501; Match(LOCAL_ID);
					State = 10503;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 10502; Match(COMMA);
						}
					}

					}
				}

				State = 10513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIFETIME) {
					{
					State = 10507; Match(LIFETIME);
					State = 10508; Match(EQUAL);
					State = 10509;
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 10511;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 10510; Match(COMMA);
						}
					}

					}
				}

				State = 10518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1482,Context) ) {
				case 1:
					{
					State = 10515; Match(ENCRYPTION);
					State = 10516; Match(EQUAL);
					State = 10517;
					_la = TokenStream.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			}
			State = 10523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1484,Context) ) {
			case 1:
				{
				State = 10522; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Contract_nameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterContract_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitContract_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContract_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Contract_nameContext contract_name() {
		Contract_nameContext _localctx = new Contract_nameContext(Context, State);
		EnterRule(_localctx, 930, RULE_contract_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1485,Context) ) {
			case 1:
				{
				State = 10525; id();
				}
				break;
			case 2:
				{
				State = 10526; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_nameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterService_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitService_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitService_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Service_nameContext service_name() {
		Service_nameContext _localctx = new Service_nameContext(Context, State);
		EnterRule(_localctx, 932, RULE_service_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1486,Context) ) {
			case 1:
				{
				State = 10529; id();
				}
				break;
			case 2:
				{
				State = 10530; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public IToken faliure_code;
		public IToken failure_text;
		public ITerminalNode END() { return GetToken(TSqlParser.END, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public ITerminalNode WITH() { return GetToken(TSqlParser.WITH, 0); }
		public ITerminalNode ERROR() { return GetToken(TSqlParser.ERROR, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(TSqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(TSqlParser.EQUAL, i);
		}
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterEnd_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitEnd_conversation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public End_conversationContext end_conversation() {
		End_conversationContext _localctx = new End_conversationContext(Context, State);
		EnterRule(_localctx, 934, RULE_end_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10533; Match(END);
			State = 10534; Match(CONVERSATION);
			State = 10535; _localctx.conversation_handle = Match(LOCAL_ID);
			State = 10537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1487,Context) ) {
			case 1:
				{
				State = 10536; Match(SEMI);
				}
				break;
			}
			State = 10551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1490,Context) ) {
			case 1:
				{
				State = 10539; Match(WITH);
				State = 10546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ERROR) {
					{
					State = 10540; Match(ERROR);
					State = 10541; Match(EQUAL);
					State = 10542;
					_localctx.faliure_code = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.faliure_code = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 10543; Match(DESCRIPTION);
					State = 10544; Match(EQUAL);
					State = 10545;
					_localctx.failure_text = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						_localctx.failure_text = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 10549;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1489,Context) ) {
				case 1:
					{
					State = 10548; Match(CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waitfor_conversationContext : ParserRuleContext {
		public TimeContext timeout;
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public Get_conversationContext get_conversation() {
			return GetRuleContext<Get_conversationContext>(0);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode WAITFOR() { return GetToken(TSqlParser.WAITFOR, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitfor_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterWaitfor_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitWaitfor_conversation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitfor_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Waitfor_conversationContext waitfor_conversation() {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(Context, State);
		EnterRule(_localctx, 936, RULE_waitfor_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAITFOR) {
				{
				State = 10553; Match(WAITFOR);
				}
			}

			State = 10556; Match(LR_BRACKET);
			State = 10557; get_conversation();
			State = 10558; Match(RR_BRACKET);
			State = 10564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1493,Context) ) {
			case 1:
				{
				State = 10560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 10559; Match(COMMA);
					}
				}

				State = 10562; Match(TIMEOUT);
				State = 10563; _localctx.timeout = time();
				}
				break;
			}
			State = 10567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1494,Context) ) {
			case 1:
				{
				State = 10566; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_conversationContext : ParserRuleContext {
		public IToken conversation_group_id;
		public Queue_idContext queue;
		public ITerminalNode GET() { return GetToken(TSqlParser.GET, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode GROUP() { return GetToken(TSqlParser.GROUP, 0); }
		public ITerminalNode FROM() { return GetToken(TSqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return GetRuleContext<Queue_idContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(TSqlParser.LOCAL_ID, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterGet_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitGet_conversation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_conversationContext get_conversation() {
		Get_conversationContext _localctx = new Get_conversationContext(Context, State);
		EnterRule(_localctx, 938, RULE_get_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10569; Match(GET);
			State = 10570; Match(CONVERSATION);
			State = 10571; Match(GROUP);
			State = 10572;
			_localctx.conversation_group_id = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_group_id = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 10573; Match(FROM);
			State = 10574; _localctx.queue = queue_id();
			State = 10576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1495,Context) ) {
			case 1:
				{
				State = 10575; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Queue_idContext : ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext name;
		public ITerminalNode[] DOT() { return GetTokens(TSqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TSqlParser.DOT, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queue_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterQueue_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitQueue_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueue_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Queue_idContext queue_id() {
		Queue_idContext _localctx = new Queue_idContext(Context, State);
		EnterRule(_localctx, 940, RULE_queue_id);
		try {
			State = 10585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1496,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 10578; _localctx.database_name = id();
				State = 10579; Match(DOT);
				State = 10580; _localctx.schema_name = id();
				State = 10581; Match(DOT);
				State = 10582; _localctx.name = id();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10584; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Send_conversationContext : ParserRuleContext {
		public IToken conversation_handle;
		public ExpressionContext message_type_name;
		public IToken message_body_expression;
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode ON() { return GetToken(TSqlParser.ON, 0); }
		public ITerminalNode CONVERSATION() { return GetToken(TSqlParser.CONVERSATION, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] STRING() { return GetTokens(TSqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(TSqlParser.STRING, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(TSqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(TSqlParser.LOCAL_ID, i);
		}
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode SEMI() { return GetToken(TSqlParser.SEMI, 0); }
		public Send_conversationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_send_conversation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSend_conversation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSend_conversation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSend_conversation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Send_conversationContext send_conversation() {
		Send_conversationContext _localctx = new Send_conversationContext(Context, State);
		EnterRule(_localctx, 942, RULE_send_conversation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10587; Match(SEND);
			State = 10588; Match(ON);
			State = 10589; Match(CONVERSATION);
			State = 10590;
			_localctx.conversation_handle = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				_localctx.conversation_handle = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 10591; Match(MESSAGE);
			State = 10592; Match(TYPE);
			State = 10593; _localctx.message_type_name = expression(0);
			State = 10597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1497,Context) ) {
			case 1:
				{
				State = 10594; Match(LR_BRACKET);
				State = 10595;
				_localctx.message_body_expression = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					_localctx.message_body_expression = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10596; Match(RR_BRACKET);
				}
				break;
			}
			State = 10600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1498,Context) ) {
			case 1:
				{
				State = 10599; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSqlParser.IDENTITY, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(TSqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(TSqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(TSqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(TSqlParser.DECIMAL, i);
		}
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode COMMA() { return GetToken(TSqlParser.COMMA, 0); }
		public ITerminalNode DOUBLE() { return GetToken(TSqlParser.DOUBLE, 0); }
		public ITerminalNode PRECISION() { return GetToken(TSqlParser.PRECISION, 0); }
		public ITerminalNode INT() { return GetToken(TSqlParser.INT, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSqlParser.TINYINT, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSqlParser.SMALLINT, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSqlParser.BIGINT, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 944, RULE_data_type);
		int _la;
		try {
			State = 10623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1503,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10602; id();
				State = 10604;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1499,Context) ) {
				case 1:
					{
					State = 10603; Match(IDENTITY);
					}
					break;
				}
				State = 10613;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1501,Context) ) {
				case 1:
					{
					State = 10606; Match(LR_BRACKET);
					State = 10607;
					_la = TokenStream.LA(1);
					if ( !(_la==MAX || _la==DECIMAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 10610;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 10608; Match(COMMA);
						State = 10609; Match(DECIMAL);
						}
					}

					State = 10612; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10615; Match(DOUBLE);
				State = 10617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRECISION) {
					{
					State = 10616; Match(PRECISION);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10619; Match(INT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10620; Match(TINYINT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10621; Match(SMALLINT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10622; Match(BIGINT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(TSqlParser.NULL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(Context, State);
		EnterRule(_localctx, 946, RULE_default_value);
		try {
			State = 10628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10625; Match(NULL);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10626; Match(DEFAULT);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10627; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken dollar;
		public ITerminalNode STRING() { return GetToken(TSqlParser.STRING, 0); }
		public ITerminalNode BINARY() { return GetToken(TSqlParser.BINARY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ITerminalNode REAL() { return GetToken(TSqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSqlParser.FLOAT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(TSqlParser.DOLLAR, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 948, RULE_constant);
		int _la;
		try {
			State = 10645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1508,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10630; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10631; Match(BINARY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 10632; sign();
					}
				}

				State = 10635; Match(DECIMAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 10636; sign();
					}
				}

				State = 10639;
				_la = TokenStream.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 10640; sign();
					}
				}

				State = 10643; _localctx.dollar = Match(DOLLAR);
				State = 10644;
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(TSqlParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(TSqlParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 950, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10647;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 952, RULE_id);
		try {
			State = 10652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10649; simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10650; Match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10651; Match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_idContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TSqlParser.ID, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(TSqlParser.ABSOLUTE, 0); }
		public ITerminalNode ACCENT_SENSITIVITY() { return GetToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public ITerminalNode ACTION() { return GetToken(TSqlParser.ACTION, 0); }
		public ITerminalNode ACTIVATION() { return GetToken(TSqlParser.ACTIVATION, 0); }
		public ITerminalNode ACTIVE() { return GetToken(TSqlParser.ACTIVE, 0); }
		public ITerminalNode ADDRESS() { return GetToken(TSqlParser.ADDRESS, 0); }
		public ITerminalNode AES_128() { return GetToken(TSqlParser.AES_128, 0); }
		public ITerminalNode AES_192() { return GetToken(TSqlParser.AES_192, 0); }
		public ITerminalNode AES_256() { return GetToken(TSqlParser.AES_256, 0); }
		public ITerminalNode AFFINITY() { return GetToken(TSqlParser.AFFINITY, 0); }
		public ITerminalNode AFTER() { return GetToken(TSqlParser.AFTER, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(TSqlParser.AGGREGATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(TSqlParser.ALGORITHM, 0); }
		public ITerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return GetToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public ITerminalNode ALLOWED() { return GetToken(TSqlParser.ALLOWED, 0); }
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public ITerminalNode ANSI_NULLS() { return GetToken(TSqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(TSqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(TSqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode APPLICATION_LOG() { return GetToken(TSqlParser.APPLICATION_LOG, 0); }
		public ITerminalNode APPLY() { return GetToken(TSqlParser.APPLY, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(TSqlParser.ARITHABORT, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(TSqlParser.ASSEMBLY, 0); }
		public ITerminalNode AUDIT() { return GetToken(TSqlParser.AUDIT, 0); }
		public ITerminalNode AUDIT_GUID() { return GetToken(TSqlParser.AUDIT_GUID, 0); }
		public ITerminalNode AUTO() { return GetToken(TSqlParser.AUTO, 0); }
		public ITerminalNode AUTO_CLEANUP() { return GetToken(TSqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode AUTO_CLOSE() { return GetToken(TSqlParser.AUTO_CLOSE, 0); }
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(TSqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public ITerminalNode AVAILABILITY() { return GetToken(TSqlParser.AVAILABILITY, 0); }
		public ITerminalNode AVG() { return GetToken(TSqlParser.AVG, 0); }
		public ITerminalNode BACKUP_PRIORITY() { return GetToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public ITerminalNode BEGIN_DIALOG() { return GetToken(TSqlParser.BEGIN_DIALOG, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSqlParser.BIGINT, 0); }
		public ITerminalNode BINARY_BASE64() { return GetToken(TSqlParser.BINARY_BASE64, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode BINDING() { return GetToken(TSqlParser.BINDING, 0); }
		public ITerminalNode BLOB_STORAGE() { return GetToken(TSqlParser.BLOB_STORAGE, 0); }
		public ITerminalNode BROKER() { return GetToken(TSqlParser.BROKER, 0); }
		public ITerminalNode BROKER_INSTANCE() { return GetToken(TSqlParser.BROKER_INSTANCE, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(TSqlParser.BULK_LOGGED, 0); }
		public ITerminalNode CALLED() { return GetToken(TSqlParser.CALLED, 0); }
		public ITerminalNode CALLER() { return GetToken(TSqlParser.CALLER, 0); }
		public ITerminalNode CAP_CPU_PERCENT() { return GetToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public ITerminalNode CAST() { return GetToken(TSqlParser.CAST, 0); }
		public ITerminalNode CATALOG() { return GetToken(TSqlParser.CATALOG, 0); }
		public ITerminalNode CATCH() { return GetToken(TSqlParser.CATCH, 0); }
		public ITerminalNode CHANGE_RETENTION() { return GetToken(TSqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode CHANGE_TRACKING() { return GetToken(TSqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(TSqlParser.CHECKSUM, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(TSqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode CLEANUP() { return GetToken(TSqlParser.CLEANUP, 0); }
		public ITerminalNode COLLECTION() { return GetToken(TSqlParser.COLLECTION, 0); }
		public ITerminalNode COLUMN_MASTER_KEY() { return GetToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public ITerminalNode COMMITTED() { return GetToken(TSqlParser.COMMITTED, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode CONCAT() { return GetToken(TSqlParser.CONCAT, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode CONTENT() { return GetToken(TSqlParser.CONTENT, 0); }
		public ITerminalNode CONTROL() { return GetToken(TSqlParser.CONTROL, 0); }
		public ITerminalNode COOKIE() { return GetToken(TSqlParser.COOKIE, 0); }
		public ITerminalNode COUNT() { return GetToken(TSqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSqlParser.COUNT_BIG, 0); }
		public ITerminalNode COUNTER() { return GetToken(TSqlParser.COUNTER, 0); }
		public ITerminalNode CPU() { return GetToken(TSqlParser.CPU, 0); }
		public ITerminalNode CREATE_NEW() { return GetToken(TSqlParser.CREATE_NEW, 0); }
		public ITerminalNode CREATION_DISPOSITION() { return GetToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public ITerminalNode CREDENTIAL() { return GetToken(TSqlParser.CREDENTIAL, 0); }
		public ITerminalNode CRYPTOGRAPHIC() { return GetToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode DATA_COMPRESSION() { return GetToken(TSqlParser.DATA_COMPRESSION, 0); }
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public ITerminalNode DATEADD() { return GetToken(TSqlParser.DATEADD, 0); }
		public ITerminalNode DATEDIFF() { return GetToken(TSqlParser.DATEDIFF, 0); }
		public ITerminalNode DATENAME() { return GetToken(TSqlParser.DATENAME, 0); }
		public ITerminalNode DATEPART() { return GetToken(TSqlParser.DATEPART, 0); }
		public ITerminalNode DAYS() { return GetToken(TSqlParser.DAYS, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(TSqlParser.DB_CHAINING, 0); }
		public ITerminalNode DB_FAILOVER() { return GetToken(TSqlParser.DB_FAILOVER, 0); }
		public ITerminalNode DECRYPTION() { return GetToken(TSqlParser.DECRYPTION, 0); }
		public ITerminalNode DEFAULT_DOUBLE_QUOTE() { return GetToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode DELAY() { return GetToken(TSqlParser.DELAY, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode DELETED() { return GetToken(TSqlParser.DELETED, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(TSqlParser.DENSE_RANK, 0); }
		public ITerminalNode DEPENDENTS() { return GetToken(TSqlParser.DEPENDENTS, 0); }
		public ITerminalNode DES() { return GetToken(TSqlParser.DES, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(TSqlParser.DESCRIPTION, 0); }
		public ITerminalNode DESX() { return GetToken(TSqlParser.DESX, 0); }
		public ITerminalNode DHCP() { return GetToken(TSqlParser.DHCP, 0); }
		public ITerminalNode DIALOG() { return GetToken(TSqlParser.DIALOG, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(TSqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSqlParser.DISABLE, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(TSqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode DISABLED() { return GetToken(TSqlParser.DISABLED, 0); }
		public ITerminalNode DISK_DRIVE() { return GetToken(TSqlParser.DISK_DRIVE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(TSqlParser.DOCUMENT, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(TSqlParser.DYNAMIC, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(TSqlParser.EMERGENCY, 0); }
		public ITerminalNode EMPTY() { return GetToken(TSqlParser.EMPTY, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSqlParser.ENABLE, 0); }
		public ITerminalNode ENABLE_BROKER() { return GetToken(TSqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode ENCRYPTED_VALUE() { return GetToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(TSqlParser.ENCRYPTION, 0); }
		public ITerminalNode ENDPOINT_URL() { return GetToken(TSqlParser.ENDPOINT_URL, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode EVENTDATA() { return GetToken(TSqlParser.EVENTDATA, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(TSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode EXECUTABLE() { return GetToken(TSqlParser.EXECUTABLE, 0); }
		public ITerminalNode EXIST() { return GetToken(TSqlParser.EXIST, 0); }
		public ITerminalNode EXPAND() { return GetToken(TSqlParser.EXPAND, 0); }
		public ITerminalNode EXPIRY_DATE() { return GetToken(TSqlParser.EXPIRY_DATE, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSqlParser.EXPLICIT, 0); }
		public ITerminalNode FAIL_OPERATION() { return GetToken(TSqlParser.FAIL_OPERATION, 0); }
		public ITerminalNode FAILOVER_MODE() { return GetToken(TSqlParser.FAILOVER_MODE, 0); }
		public ITerminalNode FAILURE() { return GetToken(TSqlParser.FAILURE, 0); }
		public ITerminalNode FAILURE_CONDITION_LEVEL() { return GetToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public ITerminalNode FAST() { return GetToken(TSqlParser.FAST, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(TSqlParser.FAST_FORWARD, 0); }
		public ITerminalNode FILEGROUP() { return GetToken(TSqlParser.FILEGROUP, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(TSqlParser.FILEGROWTH, 0); }
		public ITerminalNode FILENAME() { return GetToken(TSqlParser.FILENAME, 0); }
		public ITerminalNode FILEPATH() { return GetToken(TSqlParser.FILEPATH, 0); }
		public ITerminalNode FILESTREAM() { return GetToken(TSqlParser.FILESTREAM, 0); }
		public ITerminalNode FILLFACTOR() { return GetToken(TSqlParser.FILLFACTOR, 0); }
		public ITerminalNode FILTER() { return GetToken(TSqlParser.FILTER, 0); }
		public ITerminalNode FIRST() { return GetToken(TSqlParser.FIRST, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(TSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(TSqlParser.FOLLOWING, 0); }
		public ITerminalNode FORCE() { return GetToken(TSqlParser.FORCE, 0); }
		public ITerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return GetToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public ITerminalNode FORCED() { return GetToken(TSqlParser.FORCED, 0); }
		public ITerminalNode FORCESEEK() { return GetToken(TSqlParser.FORCESEEK, 0); }
		public ITerminalNode FORMAT() { return GetToken(TSqlParser.FORMAT, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(TSqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(TSqlParser.FULLSCAN, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(TSqlParser.FULLTEXT, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode GETDATE() { return GetToken(TSqlParser.GETDATE, 0); }
		public ITerminalNode GETUTCDATE() { return GetToken(TSqlParser.GETUTCDATE, 0); }
		public ITerminalNode GLOBAL() { return GetToken(TSqlParser.GLOBAL, 0); }
		public ITerminalNode GO() { return GetToken(TSqlParser.GO, 0); }
		public ITerminalNode GROUP_MAX_REQUESTS() { return GetToken(TSqlParser.GROUP_MAX_REQUESTS, 0); }
		public ITerminalNode GROUPING() { return GetToken(TSqlParser.GROUPING, 0); }
		public ITerminalNode GROUPING_ID() { return GetToken(TSqlParser.GROUPING_ID, 0); }
		public ITerminalNode HADR() { return GetToken(TSqlParser.HADR, 0); }
		public ITerminalNode HASH() { return GetToken(TSqlParser.HASH, 0); }
		public ITerminalNode HEALTH_CHECK_TIMEOUT() { return GetToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public ITerminalNode HIGH() { return GetToken(TSqlParser.HIGH, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public ITerminalNode HOURS() { return GetToken(TSqlParser.HOURS, 0); }
		public ITerminalNode IDENTITY_VALUE() { return GetToken(TSqlParser.IDENTITY_VALUE, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(TSqlParser.IMMEDIATE, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(TSqlParser.IMPERSONATE, 0); }
		public ITerminalNode IMPORTANCE() { return GetToken(TSqlParser.IMPORTANCE, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(TSqlParser.INCREMENTAL, 0); }
		public ITerminalNode INIT() { return GetToken(TSqlParser.INIT, 0); }
		public ITerminalNode INITIATOR() { return GetToken(TSqlParser.INITIATOR, 0); }
		public ITerminalNode INPUT() { return GetToken(TSqlParser.INPUT, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(TSqlParser.INSENSITIVE, 0); }
		public ITerminalNode INSERTED() { return GetToken(TSqlParser.INSERTED, 0); }
		public ITerminalNode INT() { return GetToken(TSqlParser.INT, 0); }
		public ITerminalNode IP() { return GetToken(TSqlParser.IP, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSqlParser.ISOLATION, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode KEEP() { return GetToken(TSqlParser.KEEP, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(TSqlParser.KEEPFIXED, 0); }
		public ITerminalNode KEY() { return GetToken(TSqlParser.KEY, 0); }
		public ITerminalNode KEY_SOURCE() { return GetToken(TSqlParser.KEY_SOURCE, 0); }
		public ITerminalNode KEYS() { return GetToken(TSqlParser.KEYS, 0); }
		public ITerminalNode KEYSET() { return GetToken(TSqlParser.KEYSET, 0); }
		public ITerminalNode LAG() { return GetToken(TSqlParser.LAG, 0); }
		public ITerminalNode LAST() { return GetToken(TSqlParser.LAST, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(TSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LEAD() { return GetToken(TSqlParser.LEAD, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSqlParser.LEVEL, 0); }
		public ITerminalNode LIST() { return GetToken(TSqlParser.LIST, 0); }
		public ITerminalNode LISTENER() { return GetToken(TSqlParser.LISTENER, 0); }
		public ITerminalNode LISTENER_URL() { return GetToken(TSqlParser.LISTENER_URL, 0); }
		public ITerminalNode LOB_COMPACTION() { return GetToken(TSqlParser.LOB_COMPACTION, 0); }
		public ITerminalNode LOCAL() { return GetToken(TSqlParser.LOCAL, 0); }
		public ITerminalNode LOCATION() { return GetToken(TSqlParser.LOCATION, 0); }
		public ITerminalNode LOCK() { return GetToken(TSqlParser.LOCK, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(TSqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode LOGIN() { return GetToken(TSqlParser.LOGIN, 0); }
		public ITerminalNode LOOP() { return GetToken(TSqlParser.LOOP, 0); }
		public ITerminalNode LOW() { return GetToken(TSqlParser.LOW, 0); }
		public ITerminalNode MANUAL() { return GetToken(TSqlParser.MANUAL, 0); }
		public ITerminalNode MARK() { return GetToken(TSqlParser.MARK, 0); }
		public ITerminalNode MASTER() { return GetToken(TSqlParser.MASTER, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(TSqlParser.MATERIALIZED, 0); }
		public ITerminalNode MAX() { return GetToken(TSqlParser.MAX, 0); }
		public ITerminalNode MAX_CPU_PERCENT() { return GetToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public ITerminalNode MAX_DOP() { return GetToken(TSqlParser.MAX_DOP, 0); }
		public ITerminalNode MAX_FILES() { return GetToken(TSqlParser.MAX_FILES, 0); }
		public ITerminalNode MAX_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MAX_MEMORY() { return GetToken(TSqlParser.MAX_MEMORY, 0); }
		public ITerminalNode MAX_MEMORY_PERCENT() { return GetToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public ITerminalNode MAX_PROCESSES() { return GetToken(TSqlParser.MAX_PROCESSES, 0); }
		public ITerminalNode MAX_QUEUE_READERS() { return GetToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public ITerminalNode MAX_ROLLOVER_FILES() { return GetToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
		public ITerminalNode MAXDOP() { return GetToken(TSqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(TSqlParser.MAXRECURSION, 0); }
		public ITerminalNode MAXSIZE() { return GetToken(TSqlParser.MAXSIZE, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode MEDIUM() { return GetToken(TSqlParser.MEDIUM, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public ITerminalNode MESSAGE() { return GetToken(TSqlParser.MESSAGE, 0); }
		public ITerminalNode MIN() { return GetToken(TSqlParser.MIN, 0); }
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public ITerminalNode MIN_CPU_PERCENT() { return GetToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public ITerminalNode MIN_IOPS_PER_VOLUME() { return GetToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public ITerminalNode MIN_MEMORY_PERCENT() { return GetToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public ITerminalNode MINUTES() { return GetToken(TSqlParser.MINUTES, 0); }
		public ITerminalNode MIRROR_ADDRESS() { return GetToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode MODE() { return GetToken(TSqlParser.MODE, 0); }
		public ITerminalNode MODIFY() { return GetToken(TSqlParser.MODIFY, 0); }
		public ITerminalNode MOVE() { return GetToken(TSqlParser.MOVE, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(TSqlParser.MULTI_USER, 0); }
		public ITerminalNode NAME() { return GetToken(TSqlParser.NAME, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode NEW_ACCOUNT() { return GetToken(TSqlParser.NEW_ACCOUNT, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(TSqlParser.NEW_BROKER, 0); }
		public ITerminalNode NEW_PASSWORD() { return GetToken(TSqlParser.NEW_PASSWORD, 0); }
		public ITerminalNode NEXT() { return GetToken(TSqlParser.NEXT, 0); }
		public ITerminalNode NO() { return GetToken(TSqlParser.NO, 0); }
		public ITerminalNode NO_TRUNCATE() { return GetToken(TSqlParser.NO_TRUNCATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(TSqlParser.NO_WAIT, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(TSqlParser.NOCOUNT, 0); }
		public ITerminalNode NODES() { return GetToken(TSqlParser.NODES, 0); }
		public ITerminalNode NOEXPAND() { return GetToken(TSqlParser.NOEXPAND, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(TSqlParser.NORECOMPUTE, 0); }
		public ITerminalNode NORECOVERY() { return GetToken(TSqlParser.NORECOVERY, 0); }
		public ITerminalNode NOWAIT() { return GetToken(TSqlParser.NOWAIT, 0); }
		public ITerminalNode NTILE() { return GetToken(TSqlParser.NTILE, 0); }
		public ITerminalNode NUMANODE() { return GetToken(TSqlParser.NUMANODE, 0); }
		public ITerminalNode NUMBER() { return GetToken(TSqlParser.NUMBER, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode OBJECT() { return GetToken(TSqlParser.OBJECT, 0); }
		public ITerminalNode OFFLINE() { return GetToken(TSqlParser.OFFLINE, 0); }
		public ITerminalNode OFFSET() { return GetToken(TSqlParser.OFFSET, 0); }
		public ITerminalNode OFFSETS() { return GetToken(TSqlParser.OFFSETS, 0); }
		public ITerminalNode OLD_ACCOUNT() { return GetToken(TSqlParser.OLD_ACCOUNT, 0); }
		public ITerminalNode ONLINE() { return GetToken(TSqlParser.ONLINE, 0); }
		public ITerminalNode ONLY() { return GetToken(TSqlParser.ONLY, 0); }
		public ITerminalNode OPEN_EXISTING() { return GetToken(TSqlParser.OPEN_EXISTING, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(TSqlParser.OPTIMISTIC, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSqlParser.OPTIMIZE, 0); }
		public ITerminalNode OUT() { return GetToken(TSqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSqlParser.OUTPUT, 0); }
		public ITerminalNode OWNER() { return GetToken(TSqlParser.OWNER, 0); }
		public ITerminalNode PAGE() { return GetToken(TSqlParser.PAGE, 0); }
		public ITerminalNode PAGE_VERIFY() { return GetToken(TSqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(TSqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSqlParser.PARTITION, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(TSqlParser.PARTITIONS, 0); }
		public ITerminalNode PARTNER() { return GetToken(TSqlParser.PARTNER, 0); }
		public ITerminalNode PATH() { return GetToken(TSqlParser.PATH, 0); }
		public ITerminalNode POISON_MESSAGE_HANDLING() { return GetToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public ITerminalNode POOL() { return GetToken(TSqlParser.POOL, 0); }
		public ITerminalNode PORT() { return GetToken(TSqlParser.PORT, 0); }
		public ITerminalNode PRECEDING() { return GetToken(TSqlParser.PRECEDING, 0); }
		public ITerminalNode PRIMARY_ROLE() { return GetToken(TSqlParser.PRIMARY_ROLE, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSqlParser.PRIOR, 0); }
		public ITerminalNode PRIORITY() { return GetToken(TSqlParser.PRIORITY, 0); }
		public ITerminalNode PRIORITY_LEVEL() { return GetToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(TSqlParser.PRIVATE, 0); }
		public ITerminalNode PRIVATE_KEY() { return GetToken(TSqlParser.PRIVATE_KEY, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(TSqlParser.PRIVILEGES, 0); }
		public ITerminalNode PROCEDURE_NAME() { return GetToken(TSqlParser.PROCEDURE_NAME, 0); }
		public ITerminalNode PROPERTY() { return GetToken(TSqlParser.PROPERTY, 0); }
		public ITerminalNode PROVIDER() { return GetToken(TSqlParser.PROVIDER, 0); }
		public ITerminalNode PROVIDER_KEY_NAME() { return GetToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public ITerminalNode PUBLIC() { return GetToken(TSqlParser.PUBLIC, 0); }
		public ITerminalNode QUERY() { return GetToken(TSqlParser.QUERY, 0); }
		public ITerminalNode QUEUE() { return GetToken(TSqlParser.QUEUE, 0); }
		public ITerminalNode QUEUE_DELAY() { return GetToken(TSqlParser.QUEUE_DELAY, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode R() { return GetToken(TSqlParser.R, 0); }
		public ITerminalNode RANGE() { return GetToken(TSqlParser.RANGE, 0); }
		public ITerminalNode RANK() { return GetToken(TSqlParser.RANK, 0); }
		public ITerminalNode RAW() { return GetToken(TSqlParser.RAW, 0); }
		public ITerminalNode RC2() { return GetToken(TSqlParser.RC2, 0); }
		public ITerminalNode RC4() { return GetToken(TSqlParser.RC4, 0); }
		public ITerminalNode RC4_128() { return GetToken(TSqlParser.RC4_128, 0); }
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(TSqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_ONLY_ROUTING_LIST() { return GetToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(TSqlParser.READ_WRITE, 0); }
		public ITerminalNode READONLY() { return GetToken(TSqlParser.READONLY, 0); }
		public ITerminalNode REBUILD() { return GetToken(TSqlParser.REBUILD, 0); }
		public ITerminalNode RECEIVE() { return GetToken(TSqlParser.RECEIVE, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(TSqlParser.RECOMPILE, 0); }
		public ITerminalNode RECOVERY() { return GetToken(TSqlParser.RECOVERY, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSqlParser.RELATIVE, 0); }
		public ITerminalNode REMOTE() { return GetToken(TSqlParser.REMOTE, 0); }
		public ITerminalNode REMOTE_SERVICE_NAME() { return GetToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSqlParser.REMOVE, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(TSqlParser.REORGANIZE, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(TSqlParser.REPEATABLE, 0); }
		public ITerminalNode REPLICA() { return GetToken(TSqlParser.REPLICA, 0); }
		public ITerminalNode REQUEST_MAX_CPU_TIME_SEC() { return GetToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public ITerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return GetToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public ITerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return GetToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public ITerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return GetToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public ITerminalNode RESERVE_DISK_SPACE() { return GetToken(TSqlParser.RESERVE_DISK_SPACE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(TSqlParser.RESOURCE, 0); }
		public ITerminalNode RESOURCE_MANAGER_LOCATION() { return GetToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(TSqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode RETENTION() { return GetToken(TSqlParser.RETENTION, 0); }
		public ITerminalNode RETURN() { return GetToken(TSqlParser.RETURN, 0); }
		public ITerminalNode RETURNS() { return GetToken(TSqlParser.RETURNS, 0); }
		public ITerminalNode ROBUST() { return GetToken(TSqlParser.ROBUST, 0); }
		public ITerminalNode ROOT() { return GetToken(TSqlParser.ROOT, 0); }
		public ITerminalNode ROUTE() { return GetToken(TSqlParser.ROUTE, 0); }
		public ITerminalNode ROW() { return GetToken(TSqlParser.ROW, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(TSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSqlParser.ROWCOUNT, 0); }
		public ITerminalNode ROWGUID() { return GetToken(TSqlParser.ROWGUID, 0); }
		public ITerminalNode ROWS() { return GetToken(TSqlParser.ROWS, 0); }
		public ITerminalNode SAFETY() { return GetToken(TSqlParser.SAFETY, 0); }
		public ITerminalNode SAMPLE() { return GetToken(TSqlParser.SAMPLE, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(TSqlParser.SCHEMABINDING, 0); }
		public ITerminalNode SCOPED() { return GetToken(TSqlParser.SCOPED, 0); }
		public ITerminalNode SCROLL() { return GetToken(TSqlParser.SCROLL, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(TSqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode SEARCH() { return GetToken(TSqlParser.SEARCH, 0); }
		public ITerminalNode SECONDARY() { return GetToken(TSqlParser.SECONDARY, 0); }
		public ITerminalNode SECONDARY_ONLY() { return GetToken(TSqlParser.SECONDARY_ONLY, 0); }
		public ITerminalNode SECONDARY_ROLE() { return GetToken(TSqlParser.SECONDARY_ROLE, 0); }
		public ITerminalNode SECONDS() { return GetToken(TSqlParser.SECONDS, 0); }
		public ITerminalNode SECRET() { return GetToken(TSqlParser.SECRET, 0); }
		public ITerminalNode SECURITY_LOG() { return GetToken(TSqlParser.SECURITY_LOG, 0); }
		public ITerminalNode SEEDING_MODE() { return GetToken(TSqlParser.SEEDING_MODE, 0); }
		public ITerminalNode SELF() { return GetToken(TSqlParser.SELF, 0); }
		public ITerminalNode SEMI_SENSITIVE() { return GetToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public ITerminalNode SEND() { return GetToken(TSqlParser.SEND, 0); }
		public ITerminalNode SENT() { return GetToken(TSqlParser.SENT, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(TSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SERVER() { return GetToken(TSqlParser.SERVER, 0); }
		public ITerminalNode SESSION_TIMEOUT() { return GetToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public ITerminalNode SETERROR() { return GetToken(TSqlParser.SETERROR, 0); }
		public ITerminalNode SHARE() { return GetToken(TSqlParser.SHARE, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(TSqlParser.SHOWPLAN, 0); }
		public ITerminalNode SID() { return GetToken(TSqlParser.SID, 0); }
		public ITerminalNode SIGNATURE() { return GetToken(TSqlParser.SIGNATURE, 0); }
		public ITerminalNode SIMPLE() { return GetToken(TSqlParser.SIMPLE, 0); }
		public ITerminalNode SINGLE_USER() { return GetToken(TSqlParser.SINGLE_USER, 0); }
		public ITerminalNode SIZE() { return GetToken(TSqlParser.SIZE, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSqlParser.SMALLINT, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(TSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSqlParser.SOURCE, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode STANDBY() { return GetToken(TSqlParser.STANDBY, 0); }
		public ITerminalNode START() { return GetToken(TSqlParser.START, 0); }
		public ITerminalNode START_DATE() { return GetToken(TSqlParser.START_DATE, 0); }
		public ITerminalNode STATE() { return GetToken(TSqlParser.STATE, 0); }
		public ITerminalNode STATIC() { return GetToken(TSqlParser.STATIC, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(TSqlParser.STATS_STREAM, 0); }
		public ITerminalNode STATUS() { return GetToken(TSqlParser.STATUS, 0); }
		public ITerminalNode STDEV() { return GetToken(TSqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(TSqlParser.STDEVP, 0); }
		public ITerminalNode STOPLIST() { return GetToken(TSqlParser.STOPLIST, 0); }
		public ITerminalNode STUFF() { return GetToken(TSqlParser.STUFF, 0); }
		public ITerminalNode SUBJECT() { return GetToken(TSqlParser.SUBJECT, 0); }
		public ITerminalNode SUM() { return GetToken(TSqlParser.SUM, 0); }
		public ITerminalNode SUSPEND() { return GetToken(TSqlParser.SUSPEND, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(TSqlParser.SYMMETRIC, 0); }
		public ITerminalNode SYNCHRONOUS_COMMIT() { return GetToken(TSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public ITerminalNode SYNONYM() { return GetToken(TSqlParser.SYNONYM, 0); }
		public ITerminalNode TAKE() { return GetToken(TSqlParser.TAKE, 0); }
		public ITerminalNode TARGET() { return GetToken(TSqlParser.TARGET, 0); }
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public ITerminalNode THROW() { return GetToken(TSqlParser.THROW, 0); }
		public ITerminalNode TIES() { return GetToken(TSqlParser.TIES, 0); }
		public ITerminalNode TIME() { return GetToken(TSqlParser.TIME, 0); }
		public ITerminalNode TIMEOUT() { return GetToken(TSqlParser.TIMEOUT, 0); }
		public ITerminalNode TIMER() { return GetToken(TSqlParser.TIMER, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSqlParser.TINYINT, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TRIPLE_DES() { return GetToken(TSqlParser.TRIPLE_DES, 0); }
		public ITerminalNode TRIPLE_DES_3KEY() { return GetToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(TSqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode TRY() { return GetToken(TSqlParser.TRY, 0); }
		public ITerminalNode TSQL() { return GetToken(TSqlParser.TSQL, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode TYPE() { return GetToken(TSqlParser.TYPE, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(TSqlParser.TYPE_WARNING, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(TSqlParser.UNBOUNDED, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(TSqlParser.UNCOMMITTED, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(TSqlParser.UNKNOWN, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(TSqlParser.UNLIMITED, 0); }
		public ITerminalNode USING() { return GetToken(TSqlParser.USING, 0); }
		public ITerminalNode VALID_XML() { return GetToken(TSqlParser.VALID_XML, 0); }
		public ITerminalNode VALIDATION() { return GetToken(TSqlParser.VALIDATION, 0); }
		public ITerminalNode VALUE() { return GetToken(TSqlParser.VALUE, 0); }
		public ITerminalNode VAR() { return GetToken(TSqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(TSqlParser.VARP, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(TSqlParser.VIEW_METADATA, 0); }
		public ITerminalNode VIEWS() { return GetToken(TSqlParser.VIEWS, 0); }
		public ITerminalNode WAIT() { return GetToken(TSqlParser.WAIT, 0); }
		public ITerminalNode WELL_FORMED_XML() { return GetToken(TSqlParser.WELL_FORMED_XML, 0); }
		public ITerminalNode WORK() { return GetToken(TSqlParser.WORK, 0); }
		public ITerminalNode WORKLOAD() { return GetToken(TSqlParser.WORKLOAD, 0); }
		public ITerminalNode XML() { return GetToken(TSqlParser.XML, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(TSqlParser.XMLNAMESPACES, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_idContext simple_id() {
		Simple_idContext _localctx = new Simple_idContext(Context, State);
		EnterRule(_localctx, 954, RULE_simple_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10654;
			_la = TokenStream.LA(1);
			if ( !(_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (TARGET - 296)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (ABSOLUTE - 384)) | (1L << (ACCENT_SENSITIVITY - 384)) | (1L << (ACTION - 384)) | (1L << (ACTIVATION - 384)) | (1L << (ACTIVE - 384)) | (1L << (ADDRESS - 384)) | (1L << (AES_128 - 384)) | (1L << (AES_192 - 384)) | (1L << (AES_256 - 384)) | (1L << (AFFINITY - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALGORITHM - 384)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 384)) | (1L << (ALLOWED - 384)) | (1L << (ANSI_NULL_DEFAULT - 384)) | (1L << (ANSI_NULLS - 384)) | (1L << (ANSI_PADDING - 384)) | (1L << (ANSI_WARNINGS - 384)) | (1L << (APPLICATION_LOG - 384)) | (1L << (APPLY - 384)) | (1L << (ARITHABORT - 384)) | (1L << (ASSEMBLY - 384)) | (1L << (AUDIT - 384)) | (1L << (AUDIT_GUID - 384)) | (1L << (AUTO - 384)) | (1L << (AUTO_CLEANUP - 384)) | (1L << (AUTO_CLOSE - 384)) | (1L << (AUTO_CREATE_STATISTICS - 384)) | (1L << (AUTO_SHRINK - 384)) | (1L << (AUTO_UPDATE_STATISTICS - 384)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1L << (AVAILABILITY - 384)) | (1L << (AVG - 384)) | (1L << (BACKUP_PRIORITY - 384)) | (1L << (BEGIN_DIALOG - 384)) | (1L << (BIGINT - 384)) | (1L << (BINARY_BASE64 - 384)) | (1L << (BINARY_CHECKSUM - 384)) | (1L << (BINDING - 384)) | (1L << (BLOB_STORAGE - 384)) | (1L << (BROKER - 384)) | (1L << (BROKER_INSTANCE - 384)) | (1L << (BULK_LOGGED - 384)) | (1L << (CALLER - 384)) | (1L << (CAP_CPU_PERCENT - 384)) | (1L << (CAST - 384)) | (1L << (CATALOG - 384)) | (1L << (CATCH - 384)) | (1L << (CHANGE_RETENTION - 384)) | (1L << (CHANGE_TRACKING - 384)) | (1L << (CHECKSUM - 384)) | (1L << (CHECKSUM_AGG - 384)) | (1L << (CLEANUP - 384)) | (1L << (COLLECTION - 384)) | (1L << (COLUMN_MASTER_KEY - 384)) | (1L << (COMMITTED - 384)) | (1L << (COMPATIBILITY_LEVEL - 384)) | (1L << (CONCAT - 384)) | (1L << (CONCAT_NULL_YIELDS_NULL - 384)) | (1L << (CONTENT - 384)) | (1L << (CONTROL - 384)) | (1L << (COOKIE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COUNT - 448)) | (1L << (COUNT_BIG - 448)) | (1L << (COUNTER - 448)) | (1L << (CPU - 448)) | (1L << (CREATE_NEW - 448)) | (1L << (CREATION_DISPOSITION - 448)) | (1L << (CREDENTIAL - 448)) | (1L << (CRYPTOGRAPHIC - 448)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 448)) | (1L << (CURSOR_DEFAULT - 448)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 448)) | (1L << (DATEADD - 448)) | (1L << (DATEDIFF - 448)) | (1L << (DATENAME - 448)) | (1L << (DATEPART - 448)) | (1L << (DAYS - 448)) | (1L << (DB_CHAINING - 448)) | (1L << (DB_FAILOVER - 448)) | (1L << (DECRYPTION - 448)) | (1L << (DEFAULT_DOUBLE_QUOTE - 448)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1L << (DEFAULT_LANGUAGE - 448)) | (1L << (DELAY - 448)) | (1L << (DELAYED_DURABILITY - 448)) | (1L << (DELETED - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (DEPENDENTS - 448)) | (1L << (DES - 448)) | (1L << (DESCRIPTION - 448)) | (1L << (DESX - 448)) | (1L << (DHCP - 448)) | (1L << (DIALOG - 448)) | (1L << (DIRECTORY_NAME - 448)) | (1L << (DISABLE - 448)) | (1L << (DISABLE_BROKER - 448)) | (1L << (DISABLED - 448)) | (1L << (DISK_DRIVE - 448)) | (1L << (DOCUMENT - 448)) | (1L << (DYNAMIC - 448)) | (1L << (EMERGENCY - 448)) | (1L << (EMPTY - 448)) | (1L << (ENABLE - 448)) | (1L << (ENABLE_BROKER - 448)) | (1L << (ENCRYPTED_VALUE - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (ENDPOINT_URL - 448)) | (1L << (ERROR_BROKER_CONVERSATIONS - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (EXECUTABLE - 448)) | (1L << (EXIST - 448)) | (1L << (EXPAND - 448)) | (1L << (EXPIRY_DATE - 448)) | (1L << (EXPLICIT - 448)) | (1L << (FAIL_OPERATION - 448)) | (1L << (FAILOVER_MODE - 448)) | (1L << (FAILURE - 448)) | (1L << (FAILURE_CONDITION_LEVEL - 448)) | (1L << (FAST - 448)) | (1L << (FAST_FORWARD - 448)) | (1L << (FILEGROUP - 448)) | (1L << (FILEGROWTH - 448)) | (1L << (FILEPATH - 448)) | (1L << (FILESTREAM - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (FILTER - 512)) | (1L << (FIRST - 512)) | (1L << (FIRST_VALUE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (FORCE - 512)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1L << (FORCED - 512)) | (1L << (FORMAT - 512)) | (1L << (FORWARD_ONLY - 512)) | (1L << (FULLSCAN - 512)) | (1L << (FULLTEXT - 512)) | (1L << (GB - 512)) | (1L << (GETDATE - 512)) | (1L << (GETUTCDATE - 512)) | (1L << (GLOBAL - 512)) | (1L << (GO - 512)) | (1L << (GROUP_MAX_REQUESTS - 512)) | (1L << (GROUPING - 512)) | (1L << (GROUPING_ID - 512)) | (1L << (HADR - 512)) | (1L << (HASH - 512)) | (1L << (HEALTH_CHECK_TIMEOUT - 512)) | (1L << (HIGH - 512)) | (1L << (HONOR_BROKER_PRIORITY - 512)) | (1L << (HOURS - 512)) | (1L << (IDENTITY_VALUE - 512)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1L << (IMMEDIATE - 512)) | (1L << (IMPERSONATE - 512)) | (1L << (IMPORTANCE - 512)) | (1L << (INCREMENTAL - 512)) | (1L << (INITIATOR - 512)) | (1L << (INPUT - 512)) | (1L << (INSENSITIVE - 512)) | (1L << (INSERTED - 512)) | (1L << (INT - 512)) | (1L << (IP - 512)) | (1L << (ISOLATION - 512)) | (1L << (KB - 512)) | (1L << (KEEP - 512)) | (1L << (KEEPFIXED - 512)) | (1L << (KEY_SOURCE - 512)) | (1L << (KEYS - 512)) | (1L << (KEYSET - 512)) | (1L << (LAG - 512)) | (1L << (LAST - 512)) | (1L << (LAST_VALUE - 512)) | (1L << (LEAD - 512)) | (1L << (LEVEL - 512)) | (1L << (LIST - 512)) | (1L << (LISTENER - 512)) | (1L << (LISTENER_URL - 512)) | (1L << (LOB_COMPACTION - 512)) | (1L << (LOCAL - 512)) | (1L << (LOCATION - 512)) | (1L << (LOCK - 512)) | (1L << (LOCK_ESCALATION - 512)) | (1L << (LOGIN - 512)) | (1L << (LOOP - 512)) | (1L << (LOW - 512)) | (1L << (MANUAL - 512)) | (1L << (MARK - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (MATERIALIZED - 576)) | (1L << (MAX - 576)) | (1L << (MAX_CPU_PERCENT - 576)) | (1L << (MAX_DOP - 576)) | (1L << (MAX_FILES - 576)) | (1L << (MAX_IOPS_PER_VOLUME - 576)) | (1L << (MAX_MEMORY_PERCENT - 576)) | (1L << (MAX_PROCESSES - 576)) | (1L << (MAX_QUEUE_READERS - 576)) | (1L << (MAX_ROLLOVER_FILES - 576)) | (1L << (MAXDOP - 576)) | (1L << (MAXRECURSION - 576)) | (1L << (MAXSIZE - 576)) | (1L << (MB - 576)) | (1L << (MEDIUM - 576)) | (1L << (MEMORY_OPTIMIZED_DATA - 576)) | (1L << (MESSAGE - 576)) | (1L << (MIN - 576)) | (1L << (MIN_ACTIVE_ROWVERSION - 576)) | (1L << (MIN_CPU_PERCENT - 576)) | (1L << (MIN_IOPS_PER_VOLUME - 576)) | (1L << (MIN_MEMORY_PERCENT - 576)) | (1L << (MINUTES - 576)) | (1L << (MIRROR_ADDRESS - 576)) | (1L << (MIXED_PAGE_ALLOCATION - 576)) | (1L << (MODE - 576)) | (1L << (MODIFY - 576)) | (1L << (MOVE - 576)) | (1L << (MULTI_USER - 576)) | (1L << (NAME - 576)) | (1L << (NESTED_TRIGGERS - 576)) | (1L << (NEW_ACCOUNT - 576)) | (1L << (NEW_BROKER - 576)) | (1L << (NEW_PASSWORD - 576)) | (1L << (NEXT - 576)) | (1L << (NO - 576)) | (1L << (NO_TRUNCATE - 576)) | (1L << (NO_WAIT - 576)) | (1L << (NOCOUNT - 576)) | (1L << (NODES - 576)) | (1L << (NOEXPAND - 576)) | (1L << (NON_TRANSACTED_ACCESS - 576)) | (1L << (NORECOMPUTE - 576)) | (1L << (NORECOVERY - 576)) | (1L << (NOWAIT - 576)) | (1L << (NTILE - 576)) | (1L << (NUMANODE - 576)) | (1L << (NUMBER - 576)) | (1L << (NUMERIC_ROUNDABORT - 576)) | (1L << (OBJECT - 576)) | (1L << (OFFLINE - 576)) | (1L << (OFFSET - 576)) | (1L << (OLD_ACCOUNT - 576)) | (1L << (ONLINE - 576)) | (1L << (ONLY - 576)) | (1L << (OPEN_EXISTING - 576)) | (1L << (OPTIMISTIC - 576)) | (1L << (OPTIMIZE - 576)) | (1L << (OUT - 576)) | (1L << (OUTPUT - 576)) | (1L << (OWNER - 576)) | (1L << (PAGE_VERIFY - 576)) | (1L << (PARAMETERIZATION - 576)) | (1L << (PARTITION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PARTITIONS - 640)) | (1L << (PARTNER - 640)) | (1L << (PATH - 640)) | (1L << (POISON_MESSAGE_HANDLING - 640)) | (1L << (POOL - 640)) | (1L << (PORT - 640)) | (1L << (PRECEDING - 640)) | (1L << (PRIMARY_ROLE - 640)) | (1L << (PRIOR - 640)) | (1L << (PRIORITY - 640)) | (1L << (PRIORITY_LEVEL - 640)) | (1L << (PRIVATE - 640)) | (1L << (PRIVATE_KEY - 640)) | (1L << (PRIVILEGES - 640)) | (1L << (PROCEDURE_NAME - 640)) | (1L << (PROPERTY - 640)) | (1L << (PROVIDER - 640)) | (1L << (PROVIDER_KEY_NAME - 640)) | (1L << (QUERY - 640)) | (1L << (QUEUE - 640)) | (1L << (QUEUE_DELAY - 640)) | (1L << (QUOTED_IDENTIFIER - 640)) | (1L << (RANGE - 640)) | (1L << (RANK - 640)) | (1L << (RC2 - 640)) | (1L << (RC4 - 640)) | (1L << (RC4_128 - 640)) | (1L << (READ_COMMITTED_SNAPSHOT - 640)) | (1L << (READ_ONLY - 640)) | (1L << (READ_ONLY_ROUTING_LIST - 640)) | (1L << (READ_WRITE - 640)) | (1L << (READONLY - 640)) | (1L << (REBUILD - 640)) | (1L << (RECEIVE - 640)) | (1L << (RECOMPILE - 640)) | (1L << (RECOVERY - 640)) | (1L << (RECURSIVE_TRIGGERS - 640)) | (1L << (RELATIVE - 640)) | (1L << (REMOTE - 640)) | (1L << (REMOTE_SERVICE_NAME - 640)) | (1L << (REMOVE - 640)) | (1L << (REORGANIZE - 640)) | (1L << (REPEATABLE - 640)) | (1L << (REPLICA - 640)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 640)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1L << (RESERVE_DISK_SPACE - 640)) | (1L << (RESOURCE - 640)) | (1L << (RESOURCE_MANAGER_LOCATION - 640)) | (1L << (RESTRICTED_USER - 640)) | (1L << (RETENTION - 640)) | (1L << (ROBUST - 640)) | (1L << (ROOT - 640)) | (1L << (ROUTE - 640)) | (1L << (ROW - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (ROWGUID - 640)) | (1L << (ROWS - 640)) | (1L << (SAMPLE - 640)) | (1L << (SCHEMABINDING - 640)) | (1L << (SCOPED - 640)) | (1L << (SCROLL - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL_LOCKS - 704)) | (1L << (SEARCH - 704)) | (1L << (SECONDARY - 704)) | (1L << (SECONDARY_ONLY - 704)) | (1L << (SECONDARY_ROLE - 704)) | (1L << (SECONDS - 704)) | (1L << (SECRET - 704)) | (1L << (SECURITY_LOG - 704)) | (1L << (SEEDING_MODE - 704)) | (1L << (SELF - 704)) | (1L << (SEMI_SENSITIVE - 704)) | (1L << (SEND - 704)) | (1L << (SENT - 704)) | (1L << (SERIALIZABLE - 704)) | (1L << (SESSION_TIMEOUT - 704)) | (1L << (SETERROR - 704)) | (1L << (SHARE - 704)) | (1L << (SHOWPLAN - 704)) | (1L << (SIGNATURE - 704)) | (1L << (SIMPLE - 704)) | (1L << (SINGLE_USER - 704)) | (1L << (SIZE - 704)) | (1L << (SMALLINT - 704)) | (1L << (SNAPSHOT - 704)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 704)) | (1L << (STANDBY - 704)) | (1L << (START_DATE - 704)) | (1L << (STATIC - 704)) | (1L << (STATS_STREAM - 704)) | (1L << (STATUS - 704)) | (1L << (STDEV - 704)) | (1L << (STDEVP - 704)) | (1L << (STOPLIST - 704)) | (1L << (STUFF - 704)) | (1L << (SUBJECT - 704)) | (1L << (SUM - 704)) | (1L << (SUSPEND - 704)) | (1L << (SYMMETRIC - 704)) | (1L << (SYNCHRONOUS_COMMIT - 704)) | (1L << (SYNONYM - 704)) | (1L << (TAKE - 704)) | (1L << (TARGET_RECOVERY_TIME - 704)) | (1L << (TB - 704)) | (1L << (TEXTIMAGE_ON - 704)) | (1L << (THROW - 704)) | (1L << (TIES - 704)) | (1L << (TIME - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMER - 704)) | (1L << (TINYINT - 704)) | (1L << (TORN_PAGE_DETECTION - 704)) | (1L << (TRANSFORM_NOISE_WORDS - 704)) | (1L << (TRIPLE_DES - 704)) | (1L << (TRIPLE_DES_3KEY - 704)) | (1L << (TRUSTWORTHY - 704)) | (1L << (TRY - 704)) | (1L << (TSQL - 704)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 704)) | (1L << (TYPE - 704)) | (1L << (TYPE_WARNING - 704)) | (1L << (UNBOUNDED - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (UNKNOWN - 704)) | (1L << (UNLIMITED - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (USING - 768)) | (1L << (VALID_XML - 768)) | (1L << (VALIDATION - 768)) | (1L << (VALUE - 768)) | (1L << (VAR - 768)) | (1L << (VARP - 768)) | (1L << (VIEW_METADATA - 768)) | (1L << (VIEWS - 768)) | (1L << (WAIT - 768)) | (1L << (WELL_FORMED_XML - 768)) | (1L << (WORK - 768)) | (1L << (WORKLOAD - 768)) | (1L << (XML - 768)) | (1L << (XMLNAMESPACES - 768)) | (1L << (ID - 768)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(TSqlParser.EQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(TSqlParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(TSqlParser.LESS, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(TSqlParser.EXCLAMATION, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 956, RULE_comparison_operator);
		try {
			State = 10671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1510,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10656; Match(EQUAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10657; Match(GREATER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10658; Match(LESS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10659; Match(LESS);
				State = 10660; Match(EQUAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10661; Match(GREATER);
				State = 10662; Match(EQUAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10663; Match(LESS);
				State = 10664; Match(GREATER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10665; Match(EXCLAMATION);
				State = 10666; Match(EQUAL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10667; Match(EXCLAMATION);
				State = 10668; Match(GREATER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10669; Match(EXCLAMATION);
				State = 10670; Match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS_ASSIGN() { return GetToken(TSqlParser.PLUS_ASSIGN, 0); }
		public ITerminalNode MINUS_ASSIGN() { return GetToken(TSqlParser.MINUS_ASSIGN, 0); }
		public ITerminalNode MULT_ASSIGN() { return GetToken(TSqlParser.MULT_ASSIGN, 0); }
		public ITerminalNode DIV_ASSIGN() { return GetToken(TSqlParser.DIV_ASSIGN, 0); }
		public ITerminalNode MOD_ASSIGN() { return GetToken(TSqlParser.MOD_ASSIGN, 0); }
		public ITerminalNode AND_ASSIGN() { return GetToken(TSqlParser.AND_ASSIGN, 0); }
		public ITerminalNode XOR_ASSIGN() { return GetToken(TSqlParser.XOR_ASSIGN, 0); }
		public ITerminalNode OR_ASSIGN() { return GetToken(TSqlParser.OR_ASSIGN, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 958, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10673;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 806)) & ~0x3f) == 0 && ((1L << (_la - 806)) & ((1L << (PLUS_ASSIGN - 806)) | (1L << (MINUS_ASSIGN - 806)) | (1L << (MULT_ASSIGN - 806)) | (1L << (DIV_ASSIGN - 806)) | (1L << (MOD_ASSIGN - 806)) | (1L << (AND_ASSIGN - 806)) | (1L << (XOR_ASSIGN - 806)) | (1L << (OR_ASSIGN - 806)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_sizeContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(TSqlParser.DECIMAL, 0); }
		public ITerminalNode KB() { return GetToken(TSqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(TSqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(TSqlParser.GB, 0); }
		public ITerminalNode TB() { return GetToken(TSqlParser.TB, 0); }
		public ITerminalNode MODULE() { return GetToken(TSqlParser.MODULE, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_size; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.EnterFile_size(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSqlParserListener typedListener = listener as ITSqlParserListener;
			if (typedListener != null) typedListener.ExitFile_size(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSqlParserVisitor<TResult> typedVisitor = visitor as ITSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_size(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_sizeContext file_size() {
		File_sizeContext _localctx = new File_sizeContext(Context, State);
		EnterRule(_localctx, 960, RULE_file_size);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10675; Match(DECIMAL);
			State = 10677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) {
				{
				State = 10676;
				_la = TokenStream.LA(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 46: return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);
		case 357: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 10);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x344', '\x29BA', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B', 
		'\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D', 
		'\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120', 
		'\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122', 
		'\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125', 
		'\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127', 
		'\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A', 
		'\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C', 
		'\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F', 
		'\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131', 
		'\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134', 
		'\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x4', '\x136', '\t', '\x136', 
		'\x4', '\x137', '\t', '\x137', '\x4', '\x138', '\t', '\x138', '\x4', '\x139', 
		'\t', '\x139', '\x4', '\x13A', '\t', '\x13A', '\x4', '\x13B', '\t', '\x13B', 
		'\x4', '\x13C', '\t', '\x13C', '\x4', '\x13D', '\t', '\x13D', '\x4', '\x13E', 
		'\t', '\x13E', '\x4', '\x13F', '\t', '\x13F', '\x4', '\x140', '\t', '\x140', 
		'\x4', '\x141', '\t', '\x141', '\x4', '\x142', '\t', '\x142', '\x4', '\x143', 
		'\t', '\x143', '\x4', '\x144', '\t', '\x144', '\x4', '\x145', '\t', '\x145', 
		'\x4', '\x146', '\t', '\x146', '\x4', '\x147', '\t', '\x147', '\x4', '\x148', 
		'\t', '\x148', '\x4', '\x149', '\t', '\x149', '\x4', '\x14A', '\t', '\x14A', 
		'\x4', '\x14B', '\t', '\x14B', '\x4', '\x14C', '\t', '\x14C', '\x4', '\x14D', 
		'\t', '\x14D', '\x4', '\x14E', '\t', '\x14E', '\x4', '\x14F', '\t', '\x14F', 
		'\x4', '\x150', '\t', '\x150', '\x4', '\x151', '\t', '\x151', '\x4', '\x152', 
		'\t', '\x152', '\x4', '\x153', '\t', '\x153', '\x4', '\x154', '\t', '\x154', 
		'\x4', '\x155', '\t', '\x155', '\x4', '\x156', '\t', '\x156', '\x4', '\x157', 
		'\t', '\x157', '\x4', '\x158', '\t', '\x158', '\x4', '\x159', '\t', '\x159', 
		'\x4', '\x15A', '\t', '\x15A', '\x4', '\x15B', '\t', '\x15B', '\x4', '\x15C', 
		'\t', '\x15C', '\x4', '\x15D', '\t', '\x15D', '\x4', '\x15E', '\t', '\x15E', 
		'\x4', '\x15F', '\t', '\x15F', '\x4', '\x160', '\t', '\x160', '\x4', '\x161', 
		'\t', '\x161', '\x4', '\x162', '\t', '\x162', '\x4', '\x163', '\t', '\x163', 
		'\x4', '\x164', '\t', '\x164', '\x4', '\x165', '\t', '\x165', '\x4', '\x166', 
		'\t', '\x166', '\x4', '\x167', '\t', '\x167', '\x4', '\x168', '\t', '\x168', 
		'\x4', '\x169', '\t', '\x169', '\x4', '\x16A', '\t', '\x16A', '\x4', '\x16B', 
		'\t', '\x16B', '\x4', '\x16C', '\t', '\x16C', '\x4', '\x16D', '\t', '\x16D', 
		'\x4', '\x16E', '\t', '\x16E', '\x4', '\x16F', '\t', '\x16F', '\x4', '\x170', 
		'\t', '\x170', '\x4', '\x171', '\t', '\x171', '\x4', '\x172', '\t', '\x172', 
		'\x4', '\x173', '\t', '\x173', '\x4', '\x174', '\t', '\x174', '\x4', '\x175', 
		'\t', '\x175', '\x4', '\x176', '\t', '\x176', '\x4', '\x177', '\t', '\x177', 
		'\x4', '\x178', '\t', '\x178', '\x4', '\x179', '\t', '\x179', '\x4', '\x17A', 
		'\t', '\x17A', '\x4', '\x17B', '\t', '\x17B', '\x4', '\x17C', '\t', '\x17C', 
		'\x4', '\x17D', '\t', '\x17D', '\x4', '\x17E', '\t', '\x17E', '\x4', '\x17F', 
		'\t', '\x17F', '\x4', '\x180', '\t', '\x180', '\x4', '\x181', '\t', '\x181', 
		'\x4', '\x182', '\t', '\x182', '\x4', '\x183', '\t', '\x183', '\x4', '\x184', 
		'\t', '\x184', '\x4', '\x185', '\t', '\x185', '\x4', '\x186', '\t', '\x186', 
		'\x4', '\x187', '\t', '\x187', '\x4', '\x188', '\t', '\x188', '\x4', '\x189', 
		'\t', '\x189', '\x4', '\x18A', '\t', '\x18A', '\x4', '\x18B', '\t', '\x18B', 
		'\x4', '\x18C', '\t', '\x18C', '\x4', '\x18D', '\t', '\x18D', '\x4', '\x18E', 
		'\t', '\x18E', '\x4', '\x18F', '\t', '\x18F', '\x4', '\x190', '\t', '\x190', 
		'\x4', '\x191', '\t', '\x191', '\x4', '\x192', '\t', '\x192', '\x4', '\x193', 
		'\t', '\x193', '\x4', '\x194', '\t', '\x194', '\x4', '\x195', '\t', '\x195', 
		'\x4', '\x196', '\t', '\x196', '\x4', '\x197', '\t', '\x197', '\x4', '\x198', 
		'\t', '\x198', '\x4', '\x199', '\t', '\x199', '\x4', '\x19A', '\t', '\x19A', 
		'\x4', '\x19B', '\t', '\x19B', '\x4', '\x19C', '\t', '\x19C', '\x4', '\x19D', 
		'\t', '\x19D', '\x4', '\x19E', '\t', '\x19E', '\x4', '\x19F', '\t', '\x19F', 
		'\x4', '\x1A0', '\t', '\x1A0', '\x4', '\x1A1', '\t', '\x1A1', '\x4', '\x1A2', 
		'\t', '\x1A2', '\x4', '\x1A3', '\t', '\x1A3', '\x4', '\x1A4', '\t', '\x1A4', 
		'\x4', '\x1A5', '\t', '\x1A5', '\x4', '\x1A6', '\t', '\x1A6', '\x4', '\x1A7', 
		'\t', '\x1A7', '\x4', '\x1A8', '\t', '\x1A8', '\x4', '\x1A9', '\t', '\x1A9', 
		'\x4', '\x1AA', '\t', '\x1AA', '\x4', '\x1AB', '\t', '\x1AB', '\x4', '\x1AC', 
		'\t', '\x1AC', '\x4', '\x1AD', '\t', '\x1AD', '\x4', '\x1AE', '\t', '\x1AE', 
		'\x4', '\x1AF', '\t', '\x1AF', '\x4', '\x1B0', '\t', '\x1B0', '\x4', '\x1B1', 
		'\t', '\x1B1', '\x4', '\x1B2', '\t', '\x1B2', '\x4', '\x1B3', '\t', '\x1B3', 
		'\x4', '\x1B4', '\t', '\x1B4', '\x4', '\x1B5', '\t', '\x1B5', '\x4', '\x1B6', 
		'\t', '\x1B6', '\x4', '\x1B7', '\t', '\x1B7', '\x4', '\x1B8', '\t', '\x1B8', 
		'\x4', '\x1B9', '\t', '\x1B9', '\x4', '\x1BA', '\t', '\x1BA', '\x4', '\x1BB', 
		'\t', '\x1BB', '\x4', '\x1BC', '\t', '\x1BC', '\x4', '\x1BD', '\t', '\x1BD', 
		'\x4', '\x1BE', '\t', '\x1BE', '\x4', '\x1BF', '\t', '\x1BF', '\x4', '\x1C0', 
		'\t', '\x1C0', '\x4', '\x1C1', '\t', '\x1C1', '\x4', '\x1C2', '\t', '\x1C2', 
		'\x4', '\x1C3', '\t', '\x1C3', '\x4', '\x1C4', '\t', '\x1C4', '\x4', '\x1C5', 
		'\t', '\x1C5', '\x4', '\x1C6', '\t', '\x1C6', '\x4', '\x1C7', '\t', '\x1C7', 
		'\x4', '\x1C8', '\t', '\x1C8', '\x4', '\x1C9', '\t', '\x1C9', '\x4', '\x1CA', 
		'\t', '\x1CA', '\x4', '\x1CB', '\t', '\x1CB', '\x4', '\x1CC', '\t', '\x1CC', 
		'\x4', '\x1CD', '\t', '\x1CD', '\x4', '\x1CE', '\t', '\x1CE', '\x4', '\x1CF', 
		'\t', '\x1CF', '\x4', '\x1D0', '\t', '\x1D0', '\x4', '\x1D1', '\t', '\x1D1', 
		'\x4', '\x1D2', '\t', '\x1D2', '\x4', '\x1D3', '\t', '\x1D3', '\x4', '\x1D4', 
		'\t', '\x1D4', '\x4', '\x1D5', '\t', '\x1D5', '\x4', '\x1D6', '\t', '\x1D6', 
		'\x4', '\x1D7', '\t', '\x1D7', '\x4', '\x1D8', '\t', '\x1D8', '\x4', '\x1D9', 
		'\t', '\x1D9', '\x4', '\x1DA', '\t', '\x1DA', '\x4', '\x1DB', '\t', '\x1DB', 
		'\x4', '\x1DC', '\t', '\x1DC', '\x4', '\x1DD', '\t', '\x1DD', '\x4', '\x1DE', 
		'\t', '\x1DE', '\x4', '\x1DF', '\t', '\x1DF', '\x4', '\x1E0', '\t', '\x1E0', 
		'\x4', '\x1E1', '\t', '\x1E1', '\x4', '\x1E2', '\t', '\x1E2', '\x3', '\x2', 
		'\a', '\x2', '\x3C6', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x3C9', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', 
		'\x3', '\x3CF', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x3D2', '\v', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x3D5', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x3D9', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x3DC', '\v', '\x3', '\x5', '\x3', '\x3DE', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x3E2', '\n', '\x4', '\x6', '\x4', '\x3E4', 
		'\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x3E5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x3EF', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x3F6', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x497', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x49E', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x4AC', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x4B0', '\n', '\n', '\x3', '\n', '\x5', '\n', '\x4B3', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x4B7', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\x4BB', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\x4BF', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x4C4', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x4C9', '\n', '\r', '\x5', '\r', '\x4CB', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x4CF', '\n', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x4D2', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x4D9', '\n', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x4DC', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x4E5', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x4E8', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x4F3', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x4F6', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x4FB', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x500', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x503', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x508', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x50C', 
		'\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x50F', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x513', '\n', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x516', '\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x519', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x520', '\n', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x524', '\n', '\x16', '\x5', '\x16', '\x526', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x52B', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x52F', 
		'\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x532', '\v', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x535', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x540', '\n', '\x18', '\f', 
		'\x18', '\xE', '\x18', '\x543', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x548', '\n', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x54B', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x552', '\n', '\x18', '\f', 
		'\x18', '\xE', '\x18', '\x555', '\v', '\x18', '\x5', '\x18', '\x557', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x568', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x570', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x575', '\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x578', 
		'\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x57D', '\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x580', '\n', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x585', '\n', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x58D', '\n', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x592', '\n', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x595', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x59A', '\n', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x5A0', '\n', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x5A5', '\n', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', 
		'\x5', '!', '\x5B6', '\n', '!', '\x3', '!', '\x5', '!', '\x5B9', '\n', 
		'!', '\x3', '!', '\x5', '!', '\x5BC', '\n', '!', '\x3', '!', '\x5', '!', 
		'\x5BF', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x5C4', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '%', '\x3', '%', '\x5', '%', '\x5CD', '\n', '%', '\x3', '&', 
		'\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x5', ')', '\x5DC', '\n', ')', '\x3', '*', '\x3', '*', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x5', '/', '\x5ED', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x5F8', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\a', '\x30', '\x5FC', '\n', '\x30', '\f', '\x30', '\xE', '\x30', 
		'\x5FF', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x60D', 
		'\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', 
		'\x61C', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x625', '\n', ':', 
		'\x3', ':', '\x3', ':', '\x5', ':', '\x629', '\n', ':', '\x3', ':', '\x6', 
		':', '\x62C', '\n', ':', '\r', ':', '\xE', ':', '\x62D', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x5', ':', '\x634', '\n', ':', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x63A', '\n', ';', '\x3', 
		';', '\x5', ';', '\x63D', '\n', ';', '\x3', ';', '\x6', ';', '\x640', 
		'\n', ';', '\r', ';', '\xE', ';', '\x641', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x5', ';', '\x647', '\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x64F', '\n', '<', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x5', '>', '\x659', '\n', '>', '\x3', '>', '\x3', '>', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x66C', '\n', '@', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x5', '\x41', '\x674', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', 
		'\x681', '\n', '\x41', '\x5', '\x41', '\x683', '\n', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', 
		'\x68F', '\n', '\x41', '\x5', '\x41', '\x691', '\n', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', 
		'\x698', '\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x6A1', 
		'\n', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x5', '\x43', '\x6A7', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x6B0', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x6BF', 
		'\n', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x6C9', '\n', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x5', 'J', '\x6D3', '\n', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x5', 'K', '\x6FB', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 
		'L', '\x712', '\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'P', 
		'\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x5', 'R', '\x736', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x5', 'R', '\x748', '\n', 'R', '\x3', 'R', '\x5', 'R', '\x74B', 
		'\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x750', '\n', 
		'R', '\x3', 'R', '\x5', 'R', '\x753', '\n', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x5', 'R', '\x758', '\n', 'R', '\x3', 'R', '\x5', 'R', '\x75B', 
		'\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x760', '\n', 
		'R', '\x3', 'R', '\x5', 'R', '\x763', '\n', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x5', 'R', '\x768', '\n', 'R', '\x3', 'R', '\x5', 'R', '\x76B', 
		'\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x5', 'R', '\x773', '\n', 'R', '\x3', 'R', '\x5', 'R', '\x776', 
		'\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x5', 'R', '\x77E', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x78B', '\n', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x5', 'R', '\x796', '\n', 'R', '\x3', 'R', '\a', 
		'R', '\x799', '\n', 'R', '\f', 'R', '\xE', 'R', '\x79C', '\v', 'R', '\x3', 
		'R', '\x5', 'R', '\x79F', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x5', 'R', '\x7A5', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x5', 'R', '\x7BC', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x5', 'R', '\x7C8', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x5', 'R', '\x7D3', '\n', 'R', '\x3', 'R', '\a', 'R', '\x7D6', '\n', 
		'R', '\f', 'R', '\xE', 'R', '\x7D9', '\v', 'R', '\x3', 'R', '\x5', 'R', 
		'\x7DC', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 
		'R', '\x7E2', '\n', 'R', '\x5', 'R', '\x7E4', '\n', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x7F1', '\n', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x6', 'R', '\x806', '\n', 'R', '\r', 'R', '\xE', 'R', '\x807', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', 
		'\x80F', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x818', '\n', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x5', 'R', '\x81D', '\n', 'R', '\x3', 'R', '\x5', 
		'R', '\x820', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', 
		'\x825', '\n', 'R', '\x3', 'R', '\x5', 'R', '\x828', '\n', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x82D', '\n', 'R', '\x3', 'R', 
		'\x6', 'R', '\x830', '\n', 'R', '\r', 'R', '\xE', 'R', '\x831', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x5', 'R', '\x84E', '\n', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x855', '\n', 'R', '\x3', 
		'R', '\x6', 'R', '\x858', '\n', 'R', '\r', 'R', '\xE', 'R', '\x859', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x861', 
		'\n', 'R', '\x5', 'R', '\x863', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x5', 'R', '\x86E', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x5', 'R', '\x874', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x883', 
		'\n', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'S', '\x5', 'S', '\x891', '\n', 'S', '\x3', 'S', '\x5', 'S', '\x894', 
		'\n', 'S', '\x5', 'S', '\x896', '\n', 'S', '\x3', 'S', '\x3', 'S', '\x3', 
		'S', '\x5', 'S', '\x89B', '\n', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', 
		'\x89F', '\n', 'S', '\x3', 'S', '\x5', 'S', '\x8A2', '\n', 'S', '\x5', 
		'S', '\x8A4', '\n', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x5', 'S', '\x8AA', '\n', 'S', '\x3', 'S', '\x5', 'S', '\x8AD', '\n', 
		'S', '\x5', 'S', '\x8AF', '\n', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'S', '\x5', 'S', '\x8B5', '\n', 'S', '\x5', 'S', '\x8B7', '\n', 
		'S', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x8CD', '\n', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', 
		'\x8D5', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x5', 'U', '\x8DD', '\n', 'U', '\x6', 'U', '\x8DF', 
		'\n', 'U', '\r', 'U', '\xE', 'U', '\x8E0', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x8EA', 
		'\n', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x5', 'V', '\x8FF', '\n', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x90C', '\n', 'W', 
		'\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x5', 'W', '\x91B', '\n', 'W', '\x6', 'W', '\x91D', '\n', 
		'W', '\r', 'W', '\xE', 'W', '\x91E', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x5', '^', '\x942', '\n', '^', '\x3', '^', '\x5', '^', '\x945', 
		'\n', '^', '\x3', '^', '\x6', '^', '\x948', '\n', '^', '\r', '^', '\xE', 
		'^', '\x949', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', 
		'\x5', '\x61', '\x95C', '\n', '\x61', '\x3', '\x61', '\x5', '\x61', '\x95F', 
		'\n', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', 
		'\x964', '\n', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', 
		'\x65', '\x5', '\x65', '\x97E', '\n', '\x65', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x5', 'g', 
		'\x98C', '\n', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x5', 'g', '\x991', 
		'\n', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 'h', '\x3', 'h', 
		'\x3', 'h', '\x5', 'h', '\x999', '\n', 'h', '\x3', 'h', '\x6', 'h', '\x99C', 
		'\n', 'h', '\r', 'h', '\xE', 'h', '\x99D', '\x3', 'h', '\x3', 'h', '\x3', 
		'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\x9A5', '\n', 'h', '\x3', 'i', 
		'\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', 
		'\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'k', 
		'\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', 
		'\x5', 'k', '\x9BA', '\n', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'm', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 
		'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'q', '\x3', 'q', '\x3', 
		'q', '\x3', 'q', '\x3', 'q', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 
		'r', '\x3', 'r', '\x5', 'r', '\x9DF', '\n', 'r', '\x3', 'r', '\x3', 'r', 
		'\x3', 'r', '\x5', 'r', '\x9E4', '\n', 'r', '\x3', 'r', '\x3', 'r', '\x3', 
		's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 
		't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 'u', '\x3', 
		'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\x9F7', '\n', 'u', '\x3', 'u', 
		'\x3', 'u', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'w', 
		'\x3', 'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\xA03', '\n', 'w', '\x3', 
		'w', '\x5', 'w', '\xA06', '\n', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', 
		'\x5', 'w', '\xA0B', '\n', 'w', '\x3', 'w', '\x5', 'w', '\xA0E', '\n', 
		'w', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x5', 'x', '\xA14', 
		'\n', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'y', '\x3', 'y', '\x3', 'y', 
		'\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', 
		'\x3', 'z', '\x3', 'z', '\x5', 'z', '\xA23', '\n', 'z', '\x3', 'z', '\x3', 
		'z', '\x3', 'z', '\x5', 'z', '\xA28', '\n', 'z', '\x3', 'z', '\x3', 'z', 
		'\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x5', '{', '\xA30', '\n', 
		'{', '\x3', '{', '\x5', '{', '\xA33', '\n', '{', '\x3', '{', '\x3', '{', 
		'\x3', '{', '\x5', '{', '\xA38', '\n', '{', '\x3', '{', '\x3', '{', '\x3', 
		'{', '\x5', '{', '\xA3D', '\n', '{', '\x3', '{', '\x5', '{', '\xA40', 
		'\n', '{', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', 
		'\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', 
		'\x3', '~', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', '\x7F', 
		'\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x80', '\x3', '\x80', 
		'\x5', '\x80', '\xA58', '\n', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', 
		'\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\xA5F', '\n', '\x80', 
		'\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\xA64', '\n', 
		'\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\xA69', 
		'\n', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x6', '\x80', 
		'\xA6E', '\n', '\x80', '\r', '\x80', '\xE', '\x80', '\xA6F', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x5', '\x81', 
		'\xA77', '\n', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', 
		'\x82', '\x3', '\x82', '\x3', '\x82', '\x5', '\x82', '\xA84', '\n', '\x82', 
		'\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', '\x83', 
		'\xA8A', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', 
		'\x83', '\xA8F', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\xA97', '\n', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x85', '\x3', '\x85', '\x3', 
		'\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x86', '\x3', '\x86', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x5', 
		'\x86', '\xAA7', '\n', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x5', '\x87', '\xAAE', '\n', '\x87', '\x3', 
		'\x87', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', '\xAB3', '\n', '\x87', 
		'\x3', '\x87', '\x6', '\x87', '\xAB6', '\n', '\x87', '\r', '\x87', '\xE', 
		'\x87', '\xAB7', '\x3', '\x87', '\x5', '\x87', '\xABB', '\n', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', 
		'\xAC1', '\n', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', 
		'\x87', '\x5', '\x87', '\xAC7', '\n', '\x87', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x5', '\x88', '\xACC', '\n', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x5', '\x88', '\xAD1', '\n', '\x88', '\x3', '\x88', 
		'\x6', '\x88', '\xAD4', '\n', '\x88', '\r', '\x88', '\xE', '\x88', '\xAD5', 
		'\x3', '\x88', '\x5', '\x88', '\xAD9', '\n', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\xADF', '\n', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', 
		'\xAE5', '\n', '\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x89', '\x5', '\x89', '\xAF0', '\n', '\x89', '\x3', '\x89', '\x5', '\x89', 
		'\xAF3', '\n', '\x89', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', 
		'\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x5', 
		'\x8A', '\xAFD', '\n', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', 
		'\x3', '\x8A', '\x5', '\x8A', '\xB03', '\n', '\x8A', '\x6', '\x8A', '\xB05', 
		'\n', '\x8A', '\r', '\x8A', '\xE', '\x8A', '\xB06', '\x3', '\x8A', '\x3', 
		'\x8A', '\x5', '\x8A', '\xB0B', '\n', '\x8A', '\x3', '\x8B', '\x3', '\x8B', 
		'\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', 
		'\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', 
		'\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8C', 
		'\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', 
		'\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', 
		'\x5', '\x8C', '\xB28', '\n', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xB35', 
		'\n', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', 
		'\x5', '\x8D', '\xB3B', '\n', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', 
		'\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', 
		'\x8E', '\x5', '\x8E', '\xB45', '\n', '\x8E', '\x3', '\x8E', '\x5', '\x8E', 
		'\xB48', '\n', '\x8E', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', 
		'\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', 
		'\x8F', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', 
		'\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x5', 
		'\x90', '\xB5C', '\n', '\x90', '\x3', '\x90', '\x3', '\x90', '\x5', '\x90', 
		'\xB60', '\n', '\x90', '\x3', '\x90', '\x3', '\x90', '\x5', '\x90', '\xB64', 
		'\n', '\x90', '\x3', '\x90', '\x6', '\x90', '\xB67', '\n', '\x90', '\r', 
		'\x90', '\xE', '\x90', '\xB68', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x5', '\x91', '\xB78', '\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\xB7F', '\n', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\xB88', '\n', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\a', '\x91', '\xB8E', 
		'\n', '\x91', '\f', '\x91', '\xE', '\x91', '\xB91', '\v', '\x91', '\x5', 
		'\x91', '\xB93', '\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x5', '\x91', '\xB98', '\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\x5', '\x91', '\xB9D', '\n', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x6', '\x91', '\xBA3', '\n', '\x91', '\r', 
		'\x91', '\xE', '\x91', '\xBA4', '\x3', '\x91', '\x3', '\x91', '\x6', '\x91', 
		'\xBA9', '\n', '\x91', '\r', '\x91', '\xE', '\x91', '\xBAA', '\x3', '\x91', 
		'\x3', '\x91', '\x5', '\x91', '\xBAF', '\n', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\a', '\x91', '\xBB3', '\n', '\x91', '\f', '\x91', '\xE', '\x91', 
		'\xBB6', '\v', '\x91', '\a', '\x91', '\xBB8', '\n', '\x91', '\f', '\x91', 
		'\xE', '\x91', '\xBBB', '\v', '\x91', '\x3', '\x91', '\x5', '\x91', '\xBBE', 
		'\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x5', '\x91', '\xBC5', '\n', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x3', '\x91', '\a', '\x91', '\xBCB', '\n', '\x91', 
		'\f', '\x91', '\xE', '\x91', '\xBCE', '\v', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\xBD5', 
		'\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\xBDE', '\n', 
		'\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\xBE3', 
		'\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\xBE7', '\n', 
		'\x91', '\x3', '\x91', '\x5', '\x91', '\xBEA', '\n', '\x91', '\x6', '\x91', 
		'\xBEC', '\n', '\x91', '\r', '\x91', '\xE', '\x91', '\xBED', '\x3', '\x91', 
		'\x3', '\x91', '\a', '\x91', '\xBF2', '\n', '\x91', '\f', '\x91', '\xE', 
		'\x91', '\xBF5', '\v', '\x91', '\a', '\x91', '\xBF7', '\n', '\x91', '\f', 
		'\x91', '\xE', '\x91', '\xBFA', '\v', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\xC01', '\n', 
		'\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\a', 
		'\x91', '\xC07', '\n', '\x91', '\f', '\x91', '\xE', '\x91', '\xC0A', '\v', 
		'\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\xC0F', 
		'\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x5', '\x91', '\xC15', '\n', '\x91', '\x3', '\x91', '\x5', '\x91', '\xC18', 
		'\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', 
		'\xC1D', '\n', '\x91', '\x3', '\x91', '\x5', '\x91', '\xC20', '\n', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x5', '\x91', '\xC27', '\n', '\x91', '\x5', '\x91', '\xC29', '\n', '\x91', 
		'\x3', '\x91', '\x5', '\x91', '\xC2C', '\n', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\xC32', '\n', '\x91', 
		'\x3', '\x91', '\x5', '\x91', '\xC35', '\n', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x5', '\x91', '\xC3A', '\n', '\x91', '\x3', '\x91', 
		'\x5', '\x91', '\xC3D', '\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\x5', '\x91', '\xC42', '\n', '\x91', '\x3', '\x91', '\x5', '\x91', 
		'\xC45', '\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', 
		'\x91', '\xC4A', '\n', '\x91', '\x3', '\x91', '\x5', '\x91', '\xC4D', 
		'\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', '\x91', 
		'\xC52', '\n', '\x91', '\x3', '\x92', '\x5', '\x92', '\xC55', '\n', '\x92', 
		'\x3', '\x92', '\x5', '\x92', '\xC58', '\n', '\x92', '\x3', '\x92', '\x5', 
		'\x92', '\xC5B', '\n', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', 
		'\x3', '\x92', '\x3', '\x92', '\x5', '\x92', '\xC62', '\n', '\x92', '\x6', 
		'\x92', '\xC64', '\n', '\x92', '\r', '\x92', '\xE', '\x92', '\xC65', '\x3', 
		'\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x5', 
		'\x93', '\xC6D', '\n', '\x93', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x5', '\x94', '\xC74', '\n', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x5', '\x94', '\xC7A', 
		'\n', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x5', '\x94', '\xC87', '\n', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x5', '\x94', '\xC8B', '\n', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x5', '\x94', '\xC90', '\n', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x3', '\x94', '\x5', '\x94', '\xC9A', '\n', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x5', '\x94', '\xCA3', '\n', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x5', '\x94', '\xCA7', '\n', '\x94', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x5', '\x95', 
		'\xCB3', '\n', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', 
		'\x95', '\x5', '\x95', '\xCB9', '\n', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\x6', '\x95', '\xCBE', '\n', '\x95', '\r', '\x95', '\xE', 
		'\x95', '\xCBF', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x5', '\x95', 
		'\xCD4', '\n', '\x95', '\x3', '\x95', '\x3', '\x95', '\x5', '\x95', '\xCD8', 
		'\n', '\x95', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x5', '\x96', '\xCE0', '\n', '\x96', '\x3', 
		'\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', 
		'\x96', '\x3', '\x96', '\x5', '\x96', '\xCE9', '\n', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x5', '\x96', '\xCEF', '\n', 
		'\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x5', 
		'\x96', '\xCF5', '\n', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x6', '\x96', '\xCFD', '\n', 
		'\x96', '\r', '\x96', '\xE', '\x96', '\xCFE', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', 
		'\x3', '\x97', '\x5', '\x97', '\xD09', '\n', '\x97', '\x3', '\x97', '\x3', 
		'\x97', '\x5', '\x97', '\xD0D', '\n', '\x97', '\x3', '\x97', '\x5', '\x97', 
		'\xD10', '\n', '\x97', '\x3', '\x97', '\x3', '\x97', '\x5', '\x97', '\xD14', 
		'\n', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x5', '\x97', 
		'\xD19', '\n', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', 
		'\x97', '\x5', '\x97', '\xD1F', '\n', '\x97', '\x3', '\x97', '\x5', '\x97', 
		'\xD22', '\n', '\x97', '\x3', '\x97', '\x3', '\x97', '\x5', '\x97', '\xD26', 
		'\n', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', 
		'\x3', '\x97', '\x3', '\x97', '\x6', '\x97', '\xD2E', '\n', '\x97', '\r', 
		'\x97', '\xE', '\x97', '\xD2F', '\x3', '\x97', '\x5', '\x97', '\xD33', 
		'\n', '\x97', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', 
		'\x3', '\x98', '\x3', '\x98', '\x5', '\x98', '\xD3B', '\n', '\x98', '\x3', 
		'\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', 
		'\x98', '\x5', '\x98', '\xD43', '\n', '\x98', '\x3', '\x98', '\x3', '\x98', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x5', '\x98', '\xD4A', '\n', 
		'\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', 
		'\x98', '\x6', '\x98', '\xD51', '\n', '\x98', '\r', '\x98', '\xE', '\x98', 
		'\xD52', '\x5', '\x98', '\xD55', '\n', '\x98', '\x3', '\x98', '\x3', '\x98', 
		'\x3', '\x98', '\x5', '\x98', '\xD5A', '\n', '\x98', '\x3', '\x98', '\x3', 
		'\x98', '\x3', '\x98', '\x3', '\x98', '\x5', '\x98', '\xD60', '\n', '\x98', 
		'\x3', '\x98', '\x6', '\x98', '\xD63', '\n', '\x98', '\r', '\x98', '\xE', 
		'\x98', '\xD64', '\x5', '\x98', '\xD67', '\n', '\x98', '\x3', '\x98', 
		'\x5', '\x98', '\xD6A', '\n', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', 
		'\x98', '\x5', '\x98', '\xD6F', '\n', '\x98', '\x3', '\x98', '\x5', '\x98', 
		'\xD72', '\n', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x5', 
		'\x98', '\xD77', '\n', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x99', 
		'\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', 
		'\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', 
		'\x5', '\x99', '\xD86', '\n', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x99', '\x3', '\x99', '\x3', '\x99', '\x5', '\x99', '\xD8D', '\n', '\x99', 
		'\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', 
		'\x6', '\x99', '\xD94', '\n', '\x99', '\r', '\x99', '\xE', '\x99', '\xD95', 
		'\x5', '\x99', '\xD98', '\n', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x99', '\x5', '\x99', '\xD9D', '\n', '\x99', '\x3', '\x99', '\x3', '\x99', 
		'\x3', '\x99', '\x3', '\x99', '\x5', '\x99', '\xDA3', '\n', '\x99', '\x3', 
		'\x99', '\x6', '\x99', '\xDA6', '\n', '\x99', '\r', '\x99', '\xE', '\x99', 
		'\xDA7', '\x5', '\x99', '\xDAA', '\n', '\x99', '\x3', '\x99', '\x5', '\x99', 
		'\xDAD', '\n', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x5', 
		'\x99', '\xDB2', '\n', '\x99', '\x3', '\x99', '\x5', '\x99', '\xDB5', 
		'\n', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x5', '\x99', 
		'\xDBA', '\n', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x9A', '\x3', 
		'\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', 
		'\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\xDC7', '\n', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\xDCC', '\n', 
		'\x9A', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', 
		'\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\xDD5', '\n', '\x9B', 
		'\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\xDDA', '\n', 
		'\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', 
		'\x9B', '\xDE0', '\n', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', 
		'\xDE4', '\n', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\xDE8', 
		'\n', '\x9B', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', 
		'\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', 
		'\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', 
		'\x3', '\x9C', '\x5', '\x9C', '\xDF9', '\n', '\x9C', '\x5', '\x9C', '\xDFB', 
		'\n', '\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', 
		'\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x5', '\x9D', 
		'\xE05', '\n', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x5', 
		'\x9D', '\xE0A', '\n', '\x9D', '\x5', '\x9D', '\xE0C', '\n', '\x9D', '\x3', 
		'\x9D', '\x3', '\x9D', '\x5', '\x9D', '\xE10', '\n', '\x9D', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x5', '\x9E', '\xE16', '\n', 
		'\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9E', '\x5', '\x9E', '\xE1E', '\n', '\x9E', '\x3', '\x9E', 
		'\a', '\x9E', '\xE21', '\n', '\x9E', '\f', '\x9E', '\xE', '\x9E', '\xE24', 
		'\v', '\x9E', '\x5', '\x9E', '\xE26', '\n', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9E', '\x3', '\x9E', '\a', '\x9E', '\xE2C', '\n', '\x9E', 
		'\f', '\x9E', '\xE', '\x9E', '\xE2F', '\v', '\x9E', '\x5', '\x9E', '\xE31', 
		'\n', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x5', '\x9E', 
		'\xE36', '\n', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x5', 
		'\x9E', '\xE3B', '\n', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x5', '\x9E', '\xE40', '\n', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x5', '\x9E', '\xE45', '\n', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x5', '\x9E', '\xE4A', '\n', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9E', '\x5', '\x9E', '\xE4F', '\n', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x5', '\x9E', '\xE53', '\n', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9E', '\x5', '\x9E', '\xE58', '\n', '\x9E', '\x3', '\x9F', 
		'\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', 
		'\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xE63', '\n', 
		'\x9F', '\x3', '\x9F', '\a', '\x9F', '\xE66', '\n', '\x9F', '\f', '\x9F', 
		'\xE', '\x9F', '\xE69', '\v', '\x9F', '\x5', '\x9F', '\xE6B', '\n', '\x9F', 
		'\x3', '\x9F', '\x5', '\x9F', '\xE6E', '\n', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xE73', '\n', '\x9F', '\x3', '\x9F', 
		'\x5', '\x9F', '\xE76', '\n', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x5', '\x9F', '\xE7B', '\n', '\x9F', '\x3', '\x9F', '\x5', '\x9F', 
		'\xE7E', '\n', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', 
		'\x9F', '\xE83', '\n', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xE86', 
		'\n', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', 
		'\xE8B', '\n', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xE8E', '\n', '\x9F', 
		'\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xE93', '\n', 
		'\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xE96', '\n', '\x9F', '\x3', '\x9F', 
		'\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xE9B', '\n', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xEA1', 
		'\n', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', 
		'\xEA6', '\n', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xEA9', '\n', '\x9F', 
		'\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xEAE', '\n', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x5', '\x9F', '\xEB5', '\n', '\x9F', '\x5', '\x9F', '\xEB7', 
		'\n', '\x9F', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', 
		'\x5', '\xA0', '\xEBD', '\n', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x5', 
		'\xA0', '\xEC6', '\n', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', 
		'\x5', '\xA0', '\xECB', '\n', '\xA0', '\x5', '\xA0', '\xECD', '\n', '\xA0', 
		'\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', 
		'\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', 
		'\x5', '\xA1', '\xED9', '\n', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x3', 
		'\xA2', '\x3', '\xA2', '\x5', '\xA2', '\xEDF', '\n', '\xA2', '\x3', '\xA2', 
		'\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', 
		'\x3', '\xA2', '\x3', '\xA2', '\a', '\xA2', '\xEE9', '\n', '\xA2', '\f', 
		'\xA2', '\xE', '\xA2', '\xEEC', '\v', '\xA2', '\x5', '\xA2', '\xEEE', 
		'\n', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', 
		'\xEF3', '\n', '\xA2', '\x5', '\xA2', '\xEF5', '\n', '\xA2', '\x3', '\xA3', 
		'\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', 
		'\x3', '\xA3', '\x3', '\xA3', '\x5', '\xA3', '\xEFF', '\n', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x5', '\xA3', '\xF04', '\n', '\xA3', 
		'\x5', '\xA3', '\xF06', '\n', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x5', 
		'\xA3', '\xF0A', '\n', '\xA3', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', 
		'\x3', '\xA4', '\x5', '\xA4', '\xF10', '\n', '\xA4', '\x3', '\xA4', '\x3', 
		'\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', 
		'\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', 
		'\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x5', 
		'\xA4', '\xF22', '\n', '\xA4', '\x5', '\xA4', '\xF24', '\n', '\xA4', '\x3', 
		'\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', 
		'\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\xF33', '\n', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x5', '\xA6', '\xF45', '\n', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x5', 
		'\xA6', '\xF4D', '\n', '\xA6', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', 
		'\x5', '\xA7', '\xF57', '\n', '\xA7', '\x3', '\xA8', '\x3', '\xA8', '\x3', 
		'\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', 
		'\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', 
		'\xA8', '\x3', '\xA8', '\x5', '\xA8', '\xF67', '\n', '\xA8', '\x3', '\xA9', 
		'\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', 
		'\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', 
		'\x3', '\xA9', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xF7C', '\n', 
		'\xAA', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', 
		'\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x5', 
		'\xAB', '\xF87', '\n', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAB', '\x5', '\xAB', '\xF8D', '\n', '\xAB', '\x3', '\xAC', '\x3', 
		'\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', 
		'\xAC', '\x5', '\xAC', '\xF96', '\n', '\xAC', '\x3', '\xAC', '\x3', '\xAC', 
		'\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', 
		'\x5', '\xAC', '\xF9F', '\n', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', 
		'\xAC', '\x3', '\xAC', '\x5', '\xAC', '\xFA5', '\n', '\xAC', '\x3', '\xAD', 
		'\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAD', '\x5', '\xAD', '\xFAE', '\n', '\xAD', '\x3', '\xAD', '\x3', 
		'\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xFB3', '\n', '\xAD', '\x3', '\xAD', 
		'\x5', '\xAD', '\xFB6', '\n', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', 
		'\xAD', '\x5', '\xAD', '\xFBB', '\n', '\xAD', '\x3', '\xAD', '\x5', '\xAD', 
		'\xFBE', '\n', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x5', 
		'\xAD', '\xFC3', '\n', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xFC6', 
		'\n', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xFCE', '\n', '\xAD', '\x3', 
		'\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xFD4', 
		'\n', '\xAD', '\x6', '\xAD', '\xFD6', '\n', '\xAD', '\r', '\xAD', '\xE', 
		'\xAD', '\xFD7', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAD', '\x5', '\xAD', '\xFDF', '\n', '\xAD', '\x3', '\xAD', '\x3', 
		'\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xFE5', '\n', '\xAD', 
		'\x6', '\xAD', '\xFE7', '\n', '\xAD', '\r', '\xAD', '\xE', '\xAD', '\xFE8', 
		'\x3', '\xAD', '\x5', '\xAD', '\xFEC', '\n', '\xAD', '\x5', '\xAD', '\xFEE', 
		'\n', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xFF1', '\n', '\xAD', '\x3', 
		'\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xFF6', '\n', '\xAD', 
		'\x3', '\xAD', '\x5', '\xAD', '\xFF9', '\n', '\xAD', '\x3', '\xAD', '\x3', 
		'\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xFFE', '\n', '\xAD', '\x3', '\xAD', 
		'\x5', '\xAD', '\x1001', '\n', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', 
		'\xAD', '\x5', '\xAD', '\x1006', '\n', '\xAD', '\x3', '\xAD', '\x5', '\xAD', 
		'\x1009', '\n', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x5', 
		'\xAD', '\x100E', '\n', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\x1011', 
		'\n', '\xAD', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', 
		'\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', 
		'\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', 
		'\x1020', '\n', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', 
		'\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', 
		'\xAE', '\x5', '\xAE', '\x102B', '\n', '\xAE', '\x3', '\xAF', '\x3', '\xAF', 
		'\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', 
		'\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x5', '\xAF', '\x1037', 
		'\n', '\xAF', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', 
		'\x3', '\xB0', '\x5', '\xB0', '\x103E', '\n', '\xB0', '\x3', '\xB1', '\x3', 
		'\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', '\x1045', 
		'\n', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', '\x1049', '\n', 
		'\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', '\x104E', 
		'\n', '\xB1', '\x3', '\xB1', '\x5', '\xB1', '\x1051', '\n', '\xB1', '\x3', 
		'\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', '\x1056', '\n', '\xB1', 
		'\x3', '\xB1', '\x5', '\xB1', '\x1059', '\n', '\xB1', '\x3', '\xB1', '\x3', 
		'\xB1', '\x3', '\xB1', '\x5', '\xB1', '\x105E', '\n', '\xB1', '\x3', '\xB1', 
		'\x5', '\xB1', '\x1061', '\n', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', 
		'\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', 
		'\xB1', '\x106A', '\n', '\xB1', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', 
		'\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', '\x1071', '\n', '\xB2', '\x3', 
		'\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x1080', '\n', '\xB3', 
		'\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x1084', '\n', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x1089', '\n', '\xB3', 
		'\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', 
		'\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x5', '\xB4', 
		'\x1094', '\n', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x5', 
		'\xB4', '\x109E', '\n', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', 
		'\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', 
		'\x3', '\xB4', '\x3', '\xB4', '\x5', '\xB4', '\x10AA', '\n', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\a', '\xB4', '\x10B0', 
		'\n', '\xB4', '\f', '\xB4', '\xE', '\xB4', '\x10B3', '\v', '\xB4', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x5', 
		'\xB5', '\x10BA', '\n', '\xB5', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', 
		'\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x5', '\xB6', 
		'\x10C3', '\n', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x5', 
		'\xB6', '\x10C8', '\n', '\xB6', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', 
		'\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', 
		'\x3', '\xB7', '\x5', '\xB7', '\x10D3', '\n', '\xB7', '\x3', '\xB7', '\x5', 
		'\xB7', '\x10D6', '\n', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x5', '\xB7', 
		'\x10DA', '\n', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x10E2', '\n', '\xB8', 
		'\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x10E6', '\n', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x10EA', '\n', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', 
		'\x5', '\xB8', '\x10F2', '\n', '\xB8', '\x3', '\xB8', '\x6', '\xB8', '\x10F5', 
		'\n', '\xB8', '\r', '\xB8', '\xE', '\xB8', '\x10F6', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', 
		'\xB8', '\x10FF', '\n', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', 
		'\x5', '\xB8', '\x1104', '\n', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\a', 
		'\xB8', '\x1108', '\n', '\xB8', '\f', '\xB8', '\xE', '\xB8', '\x110B', 
		'\v', '\xB8', '\x6', '\xB8', '\x110D', '\n', '\xB8', '\r', '\xB8', '\xE', 
		'\xB8', '\x110E', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x1118', 
		'\n', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x111B', '\n', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x1120', '\n', '\xB8', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x5', '\xB9', '\x1127', '\n', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', 
		'\xB9', '\x3', '\xB9', '\x5', '\xB9', '\x112D', '\n', '\xB9', '\x5', '\xB9', 
		'\x112F', '\n', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', 
		'\xB9', '\x1134', '\n', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x5', '\xB9', '\x113A', '\n', '\xB9', '\x3', '\xB9', '\x3', 
		'\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\x1140', '\n', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\x1145', 
		'\n', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x5', '\xB9', '\x114B', '\n', '\xB9', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x1152', '\n', '\xBA', 
		'\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x1157', 
		'\n', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', 
		'\x115C', '\n', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x5', 
		'\xBA', '\x1161', '\n', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x1164', 
		'\n', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x1168', '\n', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x116C', '\n', '\xBA', 
		'\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x1170', '\n', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x1174', '\n', '\xBA', '\x3', '\xBA', 
		'\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x1179', '\n', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x117D', '\n', '\xBA', '\x3', '\xBA', 
		'\x3', '\xBA', '\x5', '\xBA', '\x1181', '\n', '\xBA', '\x3', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x118B', '\n', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x1191', 
		'\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x5', '\xBB', '\x1198', '\n', '\xBB', '\x3', '\xBB', '\x5', 
		'\xBB', '\x119B', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x5', '\xBB', '\x11A1', '\n', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x11A7', '\n', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\a', '\xBB', '\x11AC', '\n', 
		'\xBB', '\f', '\xBB', '\xE', '\xBB', '\x11AF', '\v', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x11B4', '\n', '\xBB', '\x5', 
		'\xBB', '\x11B6', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x5', '\xBB', '\x11BB', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x11C1', '\n', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x11C7', 
		'\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\a', '\xBB', 
		'\x11CC', '\n', '\xBB', '\f', '\xBB', '\xE', '\xBB', '\x11CF', '\v', '\xBB', 
		'\x3', '\xBB', '\x5', '\xBB', '\x11D2', '\n', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBB', '\x5', '\xBB', '\x11D6', '\n', '\xBB', '\x3', '\xBB', '\x5', '\xBB', 
		'\x11D9', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x11E7', 
		'\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', 
		'\x11EC', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x11F0', 
		'\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x11FD', '\n', '\xBB', '\x3', 
		'\xBB', '\x5', '\xBB', '\x1200', '\n', '\xBB', '\x5', '\xBB', '\x1202', 
		'\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x120A', '\n', '\xBB', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x1214', '\n', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', 
		'\x121A', '\n', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x1221', '\n', '\xBC', '\x3', '\xBC', 
		'\x5', '\xBC', '\x1224', '\n', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x122A', '\n', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x1230', 
		'\n', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\a', '\xBC', 
		'\x1235', '\n', '\xBC', '\f', '\xBC', '\xE', '\xBC', '\x1238', '\v', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x123D', 
		'\n', '\xBC', '\x5', '\xBC', '\x123F', '\n', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x1244', '\n', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x124A', 
		'\n', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', 
		'\x5', '\xBC', '\x1250', '\n', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x1256', '\n', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\a', '\xBC', '\x125B', '\n', '\xBC', '\f', 
		'\xBC', '\xE', '\xBC', '\x125E', '\v', '\xBC', '\x3', '\xBC', '\x5', '\xBC', 
		'\x1261', '\n', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x1265', 
		'\n', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x1268', '\n', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x1276', '\n', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x127B', '\n', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x127F', '\n', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', 
		'\x5', '\xBC', '\x128C', '\n', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x128F', 
		'\n', '\xBC', '\x5', '\xBC', '\x1291', '\n', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', 
		'\xBC', '\x1299', '\n', '\xBC', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', 
		'\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', 
		'\x3', '\xBD', '\x5', '\xBD', '\x12A4', '\n', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\a', '\xBD', '\x12AB', 
		'\n', '\xBD', '\f', '\xBD', '\xE', '\xBD', '\x12AE', '\v', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x5', '\xBD', '\x12B6', '\n', '\xBD', '\x3', '\xBE', '\x3', '\xBE', 
		'\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', 
		'\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\x12C1', '\n', '\xBE', '\x3', 
		'\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\a', 
		'\xBE', '\x12C8', '\n', '\xBE', '\f', '\xBE', '\xE', '\xBE', '\x12CB', 
		'\v', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', 
		'\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\x12D3', '\n', '\xBE', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', 
		'\xBF', '\x12DF', '\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', 
		'\x12E3', '\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x6', 
		'\xBF', '\x12E8', '\n', '\xBF', '\r', '\xBF', '\xE', '\xBF', '\x12E9', 
		'\x5', '\xBF', '\x12EC', '\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x5', '\xBF', '\x12F1', '\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x5', '\xBF', '\x12F5', '\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x6', '\xBF', '\x12FA', '\n', '\xBF', '\r', '\xBF', '\xE', '\xBF', 
		'\x12FB', '\x5', '\xBF', '\x12FE', '\n', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x5', '\xBF', '\x130C', '\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x5', '\xBF', '\x1311', '\n', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\x1327', 
		'\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x5', '\xBF', '\x133D', '\n', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x5', '\xBF', '\x1342', '\n', '\xBF', '\x3', '\xC0', 
		'\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', 
		'\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', 
		'\x5', '\xC0', '\x134F', '\n', '\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x5', '\xC1', '\x1357', 
		'\n', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC3', 
		'\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', 
		'\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x5', '\xC3', 
		'\x136B', '\n', '\xC3', '\x3', '\xC3', '\x5', '\xC3', '\x136E', '\n', 
		'\xC3', '\x3', '\xC3', '\x3', '\xC3', '\a', '\xC3', '\x1372', '\n', '\xC3', 
		'\f', '\xC3', '\xE', '\xC3', '\x1375', '\v', '\xC3', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x5', '\xC4', '\x137C', 
		'\n', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', 
		'\x3', '\xC4', '\x5', '\xC4', '\x1383', '\n', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC4', '\x5', '\xC4', '\x1388', '\n', '\xC4', '\x3', '\xC4', 
		'\x3', '\xC4', '\x5', '\xC4', '\x138C', '\n', '\xC4', '\x6', '\xC4', '\x138E', 
		'\n', '\xC4', '\r', '\xC4', '\xE', '\xC4', '\x138F', '\x3', '\xC4', '\x5', 
		'\xC4', '\x1393', '\n', '\xC4', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', 
		'\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x139A', '\n', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x5', '\xC5', '\x13AC', '\n', '\xC5', '\x5', '\xC5', '\x13AE', 
		'\n', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', 
		'\x13C2', '\n', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x13CA', '\n', '\xC7', 
		'\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x13CF', 
		'\n', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', 
		'\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', 
		'\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', 
		'\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x13E1', '\n', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x13F0', '\n', '\xC7', 
		'\x5', '\xC7', '\x13F2', '\n', '\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', '\x13F9', '\n', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x5', '\xC8', '\x1400', '\n', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC8', '\x5', '\xC8', '\x1405', '\n', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x5', '\xC8', '\x140A', '\n', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', '\x1410', '\n', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', '\x1415', 
		'\n', '\xC8', '\x5', '\xC8', '\x1417', '\n', '\xC8', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x141E', 
		'\n', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', 
		'\x5', '\xC9', '\x1424', '\n', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x142A', '\n', '\xC9', '\x3', '\xC9', 
		'\x5', '\xC9', '\x142D', '\n', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x1433', '\n', '\xC9', '\x3', '\xC9', 
		'\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', 
		'\x6', '\xC9', '\x143B', '\n', '\xC9', '\r', '\xC9', '\xE', '\xC9', '\x143C', 
		'\x3', '\xC9', '\x5', '\xC9', '\x1440', '\n', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x1447', 
		'\n', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x144A', '\n', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x6', '\xC9', '\x144F', '\n', '\xC9', 
		'\r', '\xC9', '\xE', '\xC9', '\x1450', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x1459', 
		'\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x145D', '\n', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', 
		'\xCA', '\x1463', '\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', 
		'\a', '\xCA', '\x1468', '\n', '\xCA', '\f', '\xCA', '\xE', '\xCA', '\x146B', 
		'\v', '\xCA', '\x5', '\xCA', '\x146D', '\n', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x1474', 
		'\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', 
		'\x5', '\xCA', '\x147A', '\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x1481', '\n', '\xCA', 
		'\x3', '\xCA', '\x5', '\xCA', '\x1484', '\n', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x148A', '\n', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\a', '\xCA', '\x148F', '\n', 
		'\xCA', '\f', '\xCA', '\xE', '\xCA', '\x1492', '\v', '\xCA', '\x5', '\xCA', 
		'\x1494', '\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x149C', '\n', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', 
		'\x14A2', '\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x14A9', '\n', '\xCA', '\x3', '\xCA', 
		'\x5', '\xCA', '\x14AC', '\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x14B2', '\n', '\xCA', '\x3', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\a', '\xCA', '\x14B7', '\n', '\xCA', '\f', 
		'\xCA', '\xE', '\xCA', '\x14BA', '\v', '\xCA', '\x3', '\xCA', '\x3', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x14C1', 
		'\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x14C9', '\n', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x14CF', 
		'\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\a', '\xCA', 
		'\x14D4', '\n', '\xCA', '\f', '\xCA', '\xE', '\xCA', '\x14D7', '\v', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x14E0', '\n', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x14E5', '\n', '\xCA', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\x14EF', 
		'\n', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x5', '\xCB', '\x14F5', '\n', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', 
		'\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', 
		'\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\x1501', '\n', '\xCB', 
		'\x5', '\xCB', '\x1503', '\n', '\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\x150A', '\n', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', 
		'\x1510', '\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x5', '\xCC', '\x1516', '\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\x151C', '\n', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x6', '\xCC', '\x1521', '\n', '\xCC', 
		'\r', '\xCC', '\xE', '\xCC', '\x1522', '\x3', '\xCD', '\x3', '\xCD', '\x3', 
		'\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x5', '\xCD', '\x152A', '\n', '\xCD', 
		'\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', 
		'\x3', '\xCD', '\x5', '\xCD', '\x1532', '\n', '\xCD', '\x3', '\xCD', '\x3', 
		'\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x5', '\xCD', '\x1538', '\n', '\xCD', 
		'\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', 
		'\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', 
		'\x3', '\xCD', '\x3', '\xCD', '\x6', '\xCD', '\x1546', '\n', '\xCD', '\r', 
		'\xCD', '\xE', '\xCD', '\x1547', '\x3', '\xCD', '\x5', '\xCD', '\x154B', 
		'\n', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x5', '\xCD', 
		'\x1550', '\n', '\xCD', '\x5', '\xCD', '\x1552', '\n', '\xCD', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x5', 
		'\xCE', '\x155E', '\n', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', 
		'\x3', '\xCE', '\x5', '\xCE', '\x1564', '\n', '\xCE', '\x3', '\xCE', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', 
		'\xCE', '\x6', '\xCE', '\x1572', '\n', '\xCE', '\r', '\xCE', '\xE', '\xCE', 
		'\x1573', '\x3', '\xCE', '\x5', '\xCE', '\x1577', '\n', '\xCE', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x5', '\xCE', '\x157C', '\n', '\xCE', 
		'\x3', '\xCE', '\x5', '\xCE', '\x157F', '\n', '\xCE', '\x3', '\xCE', '\x3', 
		'\xCE', '\x3', '\xCE', '\x5', '\xCE', '\x1584', '\n', '\xCE', '\x5', '\xCE', 
		'\x1586', '\n', '\xCE', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', 
		'\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x5', '\xCF', '\x158F', 
		'\n', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x5', '\xCF', '\x1596', '\n', '\xCF', '\x3', '\xD0', '\x3', 
		'\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x5', '\xD0', '\x159C', '\n', '\xD0', 
		'\x3', '\xD0', '\x5', '\xD0', '\x159F', '\n', '\xD0', '\x3', '\xD0', '\x3', 
		'\xD0', '\x3', '\xD0', '\x5', '\xD0', '\x15A4', '\n', '\xD0', '\x3', '\xD1', 
		'\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x5', '\xD1', 
		'\x15AB', '\n', '\xD1', '\x5', '\xD1', '\x15AD', '\n', '\xD1', '\x3', 
		'\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x5', '\xD1', '\x15B3', 
		'\n', '\xD1', '\x5', '\xD1', '\x15B5', '\n', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x5', 
		'\xD1', '\x15BD', '\n', '\xD1', '\x5', '\xD1', '\x15BF', '\n', '\xD1', 
		'\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x5', '\xD1', 
		'\x15C5', '\n', '\xD1', '\x5', '\xD1', '\x15C7', '\n', '\xD1', '\x3', 
		'\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x5', '\xD1', '\x15CD', 
		'\n', '\xD1', '\x5', '\xD1', '\x15CF', '\n', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x5', '\xD1', '\x15D6', 
		'\n', '\xD1', '\x3', '\xD1', '\x5', '\xD1', '\x15D9', '\n', '\xD1', '\x5', 
		'\xD1', '\x15DB', '\n', '\xD1', '\x3', '\xD1', '\x5', '\xD1', '\x15DE', 
		'\n', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x5', '\xD1', '\x15E2', '\n', 
		'\xD1', '\x5', '\xD1', '\x15E4', '\n', '\xD1', '\x3', '\xD1', '\x3', '\xD1', 
		'\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', 
		'\x5', '\xD1', '\x15ED', '\n', '\xD1', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x5', '\xD2', '\x15F3', '\n', '\xD2', '\x3', '\xD2', 
		'\x3', '\xD2', '\x5', '\xD2', '\x15F7', '\n', '\xD2', '\x3', '\xD3', '\x3', 
		'\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x5', 
		'\xD3', '\x15FF', '\n', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', 
		'\x3', '\xD3', '\x3', '\xD3', '\x5', '\xD3', '\x1606', '\n', '\xD3', '\x3', 
		'\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x5', '\xD3', '\x160C', 
		'\n', '\xD3', '\x5', '\xD3', '\x160E', '\n', '\xD3', '\x3', '\xD4', '\x3', 
		'\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD5', '\x3', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x5', '\xD5', '\x1619', '\n', '\xD5', 
		'\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x5', '\xD5', '\x161E', 
		'\n', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', 
		'\x5', '\xD5', '\x1624', '\n', '\xD5', '\x6', '\xD5', '\x1626', '\n', 
		'\xD5', '\r', '\xD5', '\xE', '\xD5', '\x1627', '\x3', '\xD5', '\x3', '\xD5', 
		'\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', 
		'\x3', '\xD6', '\x5', '\xD6', '\x1632', '\n', '\xD6', '\x3', '\xD7', '\x3', 
		'\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x5', 
		'\xD7', '\x163A', '\n', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\x1646', '\n', '\xD7', '\x3', 
		'\xD8', '\x5', '\xD8', '\x1649', '\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', 
		'\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', 
		'\x1651', '\n', '\xD8', '\x5', '\xD8', '\x1653', '\n', '\xD8', '\x3', 
		'\xD8', '\x5', '\xD8', '\x1656', '\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', 
		'\x5', '\xD8', '\x165A', '\n', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x165D', 
		'\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', 
		'\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', 
		'\x1667', '\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\a', '\xD8', '\x166B', 
		'\n', '\xD8', '\f', '\xD8', '\xE', '\xD8', '\x166E', '\v', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', 
		'\xD8', '\x1675', '\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', 
		'\x1679', '\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x167D', 
		'\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', 
		'\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x1686', 
		'\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\a', '\xD8', '\x168A', '\n', 
		'\xD8', '\f', '\xD8', '\xE', '\xD8', '\x168D', '\v', '\xD8', '\x3', '\xD8', 
		'\x5', '\xD8', '\x1690', '\n', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x1693', 
		'\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD9', '\x3', '\xD9', 
		'\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\a', '\xD9', '\x169C', '\n', 
		'\xD9', '\f', '\xD9', '\xE', '\xD9', '\x169F', '\v', '\xD9', '\x3', '\xD9', 
		'\x5', '\xD9', '\x16A2', '\n', '\xD9', '\x3', '\xDA', '\x3', '\xDA', '\x3', 
		'\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x5', '\xDA', '\x16A9', '\n', '\xDA', 
		'\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x5', '\xDA', '\x16AE', 
		'\n', '\xDA', '\x3', '\xDB', '\x5', '\xDB', '\x16B1', '\n', '\xDB', '\x3', 
		'\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', 
		'\xDB', '\x5', '\xDB', '\x16B9', '\n', '\xDB', '\x3', '\xDB', '\x3', '\xDB', 
		'\x5', '\xDB', '\x16BD', '\n', '\xDB', '\x3', '\xDB', '\x5', '\xDB', '\x16C0', 
		'\n', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x5', '\xDB', '\x16C4', '\n', 
		'\xDB', '\x3', '\xDB', '\x5', '\xDB', '\x16C7', '\n', '\xDB', '\x3', '\xDB', 
		'\x3', '\xDB', '\x5', '\xDB', '\x16CB', '\n', '\xDB', '\x3', '\xDB', '\x3', 
		'\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x5', '\xDB', '\x16D2', 
		'\n', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x5', '\xDB', '\x16D6', '\n', 
		'\xDB', '\x5', '\xDB', '\x16D8', '\n', '\xDB', '\x5', '\xDB', '\x16DA', 
		'\n', '\xDB', '\x3', '\xDB', '\x5', '\xDB', '\x16DD', '\n', '\xDB', '\x3', 
		'\xDB', '\x5', '\xDB', '\x16E0', '\n', '\xDB', '\x3', '\xDB', '\x5', '\xDB', 
		'\x16E3', '\n', '\xDB', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', 
		'\xDC', '\x5', '\xDC', '\x16E9', '\n', '\xDC', '\x3', '\xDD', '\x5', '\xDD', 
		'\x16EC', '\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x16F4', '\n', '\xDD', 
		'\x5', '\xDD', '\x16F6', '\n', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x16F9', 
		'\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x16FD', '\n', 
		'\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x1700', '\n', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x1706', 
		'\n', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x1709', '\n', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x170D', '\n', '\xDD', '\x3', '\xDD', 
		'\x5', '\xDD', '\x1710', '\n', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x1713', 
		'\n', '\xDD', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', 
		'\x3', '\xDE', '\x5', '\xDE', '\x171A', '\n', '\xDE', '\x3', '\xDF', '\x5', 
		'\xDF', '\x171D', '\n', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', 
		'\x3', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\x1724', '\n', '\xDF', '\x3', 
		'\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\x172A', 
		'\n', '\xDF', '\a', '\xDF', '\x172C', '\n', '\xDF', '\f', '\xDF', '\xE', 
		'\xDF', '\x172F', '\v', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', 
		'\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x5', '\xDF', 
		'\x1738', '\n', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\x173B', '\n', 
		'\xDF', '\x3', '\xE0', '\x5', '\xE0', '\x173E', '\n', '\xE0', '\x3', '\xE0', 
		'\x3', '\xE0', '\x5', '\xE0', '\x1742', '\n', '\xE0', '\x3', '\xE0', '\x5', 
		'\xE0', '\x1745', '\n', '\xE0', '\x3', '\xE0', '\x5', '\xE0', '\x1748', 
		'\n', '\xE0', '\x3', '\xE0', '\x5', '\xE0', '\x174B', '\n', '\xE0', '\x3', 
		'\xE1', '\x3', '\xE1', '\x5', '\xE1', '\x174F', '\n', '\xE1', '\x3', '\xE2', 
		'\x5', '\xE2', '\x1752', '\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', 
		'\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\x175A', 
		'\n', '\xE2', '\x5', '\xE2', '\x175C', '\n', '\xE2', '\x3', '\xE2', '\x3', 
		'\xE2', '\x5', '\xE2', '\x1760', '\n', '\xE2', '\x3', '\xE2', '\x5', '\xE2', 
		'\x1763', '\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', 
		'\xE2', '\a', '\xE2', '\x1769', '\n', '\xE2', '\f', '\xE2', '\xE', '\xE2', 
		'\x176C', '\v', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\x176F', '\n', 
		'\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\x1773', '\n', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x5', '\xE2', '\x177A', '\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', 
		'\xE2', '\x177E', '\n', '\xE2', '\x5', '\xE2', '\x1780', '\n', '\xE2', 
		'\x5', '\xE2', '\x1782', '\n', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\x1785', 
		'\n', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\x1788', '\n', '\xE2', '\x3', 
		'\xE2', '\x5', '\xE2', '\x178B', '\n', '\xE2', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\a', '\xE3', '\x1791', '\n', '\xE3', '\f', 
		'\xE3', '\xE', '\xE3', '\x1794', '\v', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x5', '\xE3', '\x1799', '\n', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x179F', '\n', '\xE3', 
		'\x5', '\xE3', '\x17A1', '\n', '\xE3', '\x3', '\xE4', '\x3', '\xE4', '\x5', 
		'\xE4', '\x17A5', '\n', '\xE4', '\x3', '\xE4', '\x5', '\xE4', '\x17A8', 
		'\n', '\xE4', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x5', '\xE5', 
		'\x17AD', '\n', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x5', 
		'\xE5', '\x17B2', '\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\x17B5', 
		'\n', '\xE5', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', 
		'\x3', '\xE6', '\x3', '\xE6', '\x5', '\xE6', '\x17BD', '\n', '\xE6', '\x3', 
		'\xE6', '\x3', '\xE6', '\x5', '\xE6', '\x17C1', '\n', '\xE6', '\x3', '\xE6', 
		'\x3', '\xE6', '\x3', '\xE6', '\a', '\xE6', '\x17C6', '\n', '\xE6', '\f', 
		'\xE6', '\xE', '\xE6', '\x17C9', '\v', '\xE6', '\x5', '\xE6', '\x17CB', 
		'\n', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', 
		'\x3', '\xE6', '\a', '\xE6', '\x17D2', '\n', '\xE6', '\f', '\xE6', '\xE', 
		'\xE6', '\x17D5', '\v', '\xE6', '\x5', '\xE6', '\x17D7', '\n', '\xE6', 
		'\x3', '\xE6', '\x3', '\xE6', '\x5', '\xE6', '\x17DB', '\n', '\xE6', '\x3', 
		'\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\a', '\xE6', '\x17E1', 
		'\n', '\xE6', '\f', '\xE6', '\xE', '\xE6', '\x17E4', '\v', '\xE6', '\x5', 
		'\xE6', '\x17E6', '\n', '\xE6', '\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', 
		'\x17EA', '\n', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\x17ED', '\n', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\x17FB', '\n', '\xE7', 
		'\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\x17FF', '\n', '\xE7', '\x3', 
		'\xE7', '\x5', '\xE7', '\x1802', '\n', '\xE7', '\x3', '\xE7', '\x3', '\xE7', 
		'\x5', '\xE7', '\x1806', '\n', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\x1809', 
		'\n', '\xE7', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x5', '\xE8', 
		'\x180E', '\n', '\xE8', '\x3', '\xE8', '\x5', '\xE8', '\x1811', '\n', 
		'\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x5', 
		'\xE8', '\x1817', '\n', '\xE8', '\x3', '\xE8', '\x5', '\xE8', '\x181A', 
		'\n', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\a', '\xE8', 
		'\x181F', '\n', '\xE8', '\f', '\xE8', '\xE', '\xE8', '\x1822', '\v', '\xE8', 
		'\x3', '\xE8', '\x5', '\xE8', '\x1825', '\n', '\xE8', '\x5', '\xE8', '\x1827', 
		'\n', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', 
		'\a', '\xE8', '\x182D', '\n', '\xE8', '\f', '\xE8', '\xE', '\xE8', '\x1830', 
		'\v', '\xE8', '\x5', '\xE8', '\x1832', '\n', '\xE8', '\x3', '\xE8', '\x3', 
		'\xE8', '\x5', '\xE8', '\x1836', '\n', '\xE8', '\x3', '\xE8', '\x3', '\xE8', 
		'\x3', '\xE8', '\x3', '\xE9', '\x3', '\xE9', '\x5', '\xE9', '\x183D', 
		'\n', '\xE9', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x5', '\xEA', 
		'\x1842', '\n', '\xEA', '\x3', '\xEA', '\x5', '\xEA', '\x1845', '\n', 
		'\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', 
		'\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\a', '\xEA', '\x184F', 
		'\n', '\xEA', '\f', '\xEA', '\xE', '\xEA', '\x1852', '\v', '\xEA', '\x5', 
		'\xEA', '\x1854', '\n', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', 
		'\x3', '\xEA', '\x5', '\xEA', '\x185A', '\n', '\xEA', '\x3', '\xEA', '\x3', 
		'\xEA', '\x3', '\xEA', '\a', '\xEA', '\x185F', '\n', '\xEA', '\f', '\xEA', 
		'\xE', '\xEA', '\x1862', '\v', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x5', 
		'\xEA', '\x1866', '\n', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', 
		'\x5', '\xEA', '\x186B', '\n', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', 
		'\xEA', '\x3', '\xEB', '\x3', '\xEB', '\x5', '\xEB', '\x1872', '\n', '\xEB', 
		'\x3', '\xEC', '\x3', '\xEC', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', 
		'\x5', '\xED', '\x1879', '\n', '\xED', '\x3', '\xED', '\x5', '\xED', '\x187C', 
		'\n', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', 
		'\x3', '\xED', '\x3', '\xED', '\x5', '\xED', '\x1884', '\n', '\xED', '\x3', 
		'\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\a', '\xED', '\x188A', 
		'\n', '\xED', '\f', '\xED', '\xE', '\xED', '\x188D', '\v', '\xED', '\x5', 
		'\xED', '\x188F', '\n', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', 
		'\x3', '\xED', '\a', '\xED', '\x1895', '\n', '\xED', '\f', '\xED', '\xE', 
		'\xED', '\x1898', '\v', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', 
		'\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', 
		'\x5', '\xEF', '\x18A2', '\n', '\xEF', '\x3', '\xEF', '\x5', '\xEF', '\x18A5', 
		'\n', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', 
		'\x3', '\xEF', '\x3', '\xEF', '\a', '\xEF', '\x18AD', '\n', '\xEF', '\f', 
		'\xEF', '\xE', '\xEF', '\x18B0', '\v', '\xEF', '\x3', '\xEF', '\x3', '\xEF', 
		'\x3', '\xEF', '\x3', '\xEF', '\x5', '\xEF', '\x18B6', '\n', '\xEF', '\x3', 
		'\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x5', '\xEF', '\x18BB', '\n', '\xEF', 
		'\x3', '\xEF', '\x5', '\xEF', '\x18BE', '\n', '\xEF', '\x3', '\xF0', '\x3', 
		'\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\a', 
		'\xF0', '\x18C6', '\n', '\xF0', '\f', '\xF0', '\xE', '\xF0', '\x18C9', 
		'\v', '\xF0', '\x5', '\xF0', '\x18CB', '\n', '\xF0', '\x3', '\xF0', '\x5', 
		'\xF0', '\x18CE', '\n', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', 
		'\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x5', '\xF0', '\x18D6', 
		'\n', '\xF0', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', 
		'\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\a', '\xF1', '\x18DF', '\n', 
		'\xF1', '\f', '\xF1', '\xE', '\xF1', '\x18E2', '\v', '\xF1', '\x5', '\xF1', 
		'\x18E4', '\n', '\xF1', '\x3', '\xF1', '\x5', '\xF1', '\x18E7', '\n', 
		'\xF1', '\x3', '\xF1', '\x3', '\xF1', '\a', '\xF1', '\x18EB', '\n', '\xF1', 
		'\f', '\xF1', '\xE', '\xF1', '\x18EE', '\v', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF1', '\x5', '\xF1', '\x18F2', '\n', '\xF1', '\x3', '\xF1', '\x3', '\xF1', 
		'\x5', '\xF1', '\x18F6', '\n', '\xF1', '\x3', '\xF2', '\x3', '\xF2', '\x3', 
		'\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\a', '\xF2', '\x18FE', 
		'\n', '\xF2', '\f', '\xF2', '\xE', '\xF2', '\x1901', '\v', '\xF2', '\x5', 
		'\xF2', '\x1903', '\n', '\xF2', '\x3', '\xF2', '\x5', '\xF2', '\x1906', 
		'\n', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\a', '\xF2', '\x190A', '\n', 
		'\xF2', '\f', '\xF2', '\xE', '\xF2', '\x190D', '\v', '\xF2', '\x3', '\xF2', 
		'\x3', '\xF2', '\x3', '\xF2', '\x5', '\xF2', '\x1912', '\n', '\xF2', '\x3', 
		'\xF2', '\x3', '\xF2', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', 
		'\xF3', '\x5', '\xF3', '\x191A', '\n', '\xF3', '\x3', '\xF3', '\x5', '\xF3', 
		'\x191D', '\n', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x5', '\xF3', '\x1921', 
		'\n', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x5', '\xF3', '\x1925', '\n', 
		'\xF3', '\x3', '\xF3', '\x5', '\xF3', '\x1928', '\n', '\xF3', '\x3', '\xF4', 
		'\x3', '\xF4', '\x3', '\xF4', '\x5', '\xF4', '\x192D', '\n', '\xF4', '\x3', 
		'\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', 
		'\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', 
		'\xF5', '\x3', '\xF5', '\x5', '\xF5', '\x193B', '\n', '\xF5', '\x3', '\xF6', 
		'\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', 
		'\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', 
		'\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x5', '\xF6', '\x194B', 
		'\n', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x5', '\xF6', '\x194F', '\n', 
		'\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x5', 
		'\xF6', '\x1955', '\n', '\xF6', '\x5', '\xF6', '\x1957', '\n', '\xF6', 
		'\x3', '\xF6', '\x5', '\xF6', '\x195A', '\n', '\xF6', '\x3', '\xF7', '\x3', 
		'\xF7', '\x5', '\xF7', '\x195E', '\n', '\xF7', '\x3', '\xF7', '\x3', '\xF7', 
		'\x3', '\xF7', '\x5', '\xF7', '\x1963', '\n', '\xF7', '\x3', '\xF7', '\x3', 
		'\xF7', '\x3', '\xF7', '\x5', '\xF7', '\x1968', '\n', '\xF7', '\x3', '\xF8', 
		'\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', 
		'\x5', '\xF8', '\x1970', '\n', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', 
		'\xF8', '\x5', '\xF8', '\x1975', '\n', '\xF8', '\x3', '\xF8', '\a', '\xF8', 
		'\x1978', '\n', '\xF8', '\f', '\xF8', '\xE', '\xF8', '\x197B', '\v', '\xF8', 
		'\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x5', '\xF8', '\x1980', 
		'\n', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x5', '\xF8', 
		'\x1985', '\n', '\xF8', '\x3', '\xF8', '\x5', '\xF8', '\x1988', '\n', 
		'\xF8', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', 
		'\xF9', '\a', '\xF9', '\x198F', '\n', '\xF9', '\f', '\xF9', '\xE', '\xF9', 
		'\x1992', '\v', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', 
		'\xF9', '\x3', '\xF9', '\a', '\xF9', '\x1999', '\n', '\xF9', '\f', '\xF9', 
		'\xE', '\xF9', '\x199C', '\v', '\xF9', '\x5', '\xF9', '\x199E', '\n', 
		'\xF9', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x5', '\xFA', '\x19A7', '\n', '\xFA', 
		'\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\a', '\xFA', 
		'\x19AD', '\n', '\xFA', '\f', '\xFA', '\xE', '\xFA', '\x19B0', '\v', '\xFA', 
		'\x5', '\xFA', '\x19B2', '\n', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x5', '\xFA', '\x19B9', '\n', '\xFA', 
		'\x3', '\xFA', '\x5', '\xFA', '\x19BC', '\n', '\xFA', '\x3', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x5', '\xFC', '\x19EA', '\n', '\xFC', 
		'\x3', '\xFC', '\x3', '\xFC', '\x5', '\xFC', '\x19EE', '\n', '\xFC', '\x3', 
		'\xFC', '\x5', '\xFC', '\x19F1', '\n', '\xFC', '\x3', '\xFD', '\x3', '\xFD', 
		'\x3', '\xFD', '\x3', '\xFD', '\x5', '\xFD', '\x19F7', '\n', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x5', 
		'\xFD', '\x1A03', '\n', '\xFD', '\x5', '\xFD', '\x1A05', '\n', '\xFD', 
		'\x3', '\xFD', '\x5', '\xFD', '\x1A08', '\n', '\xFD', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x5', '\xFE', '\x1A21', '\n', '\xFE', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x5', '\xFF', '\x1A2C', 
		'\n', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x5', '\xFF', '\x1A34', '\n', '\xFF', '\x3', 
		'\x100', '\x3', '\x100', '\x3', '\x100', '\x3', '\x100', '\x3', '\x100', 
		'\x3', '\x100', '\x3', '\x100', '\a', '\x100', '\x1A3D', '\n', '\x100', 
		'\f', '\x100', '\xE', '\x100', '\x1A40', '\v', '\x100', '\a', '\x100', 
		'\x1A42', '\n', '\x100', '\f', '\x100', '\xE', '\x100', '\x1A45', '\v', 
		'\x100', '\x5', '\x100', '\x1A47', '\n', '\x100', '\x3', '\x101', '\x3', 
		'\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', 
		'\x5', '\x101', '\x1A4F', '\n', '\x101', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x3', '\x102', '\x3', '\x103', '\x3', '\x103', '\x3', 
		'\x103', '\x3', '\x103', '\x5', '\x103', '\x1A59', '\n', '\x103', '\x3', 
		'\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', 
		'\x5', '\x104', '\x1A60', '\n', '\x104', '\x3', '\x104', '\x3', '\x104', 
		'\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x5', '\x104', '\x1A67', 
		'\n', '\x104', '\x5', '\x104', '\x1A69', '\n', '\x104', '\x3', '\x104', 
		'\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', 
		'\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', 
		'\x5', '\x104', '\x1A75', '\n', '\x104', '\x3', '\x104', '\x3', '\x104', 
		'\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', 
		'\x104', '\x3', '\x104', '\x3', '\x104', '\x5', '\x104', '\x1A80', '\n', 
		'\x104', '\x3', '\x104', '\x3', '\x104', '\x5', '\x104', '\x1A84', '\n', 
		'\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x5', '\x104', 
		'\x1A89', '\n', '\x104', '\x3', '\x104', '\x5', '\x104', '\x1A8C', '\n', 
		'\x104', '\x5', '\x104', '\x1A8E', '\n', '\x104', '\x3', '\x104', '\x5', 
		'\x104', '\x1A91', '\n', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', 
		'\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', 
		'\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x5', '\x104', '\x1A9D', 
		'\n', '\x104', '\x5', '\x104', '\x1A9F', '\n', '\x104', '\x5', '\x104', 
		'\x1AA1', '\n', '\x104', '\x3', '\x104', '\x5', '\x104', '\x1AA4', '\n', 
		'\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x5', '\x104', 
		'\x1AA9', '\n', '\x104', '\x3', '\x104', '\x5', '\x104', '\x1AAC', '\n', 
		'\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x5', '\x104', 
		'\x1AB1', '\n', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', 
		'\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', 
		'\x104', '\x5', '\x104', '\x1ABB', '\n', '\x104', '\x3', '\x104', '\x3', 
		'\x104', '\x5', '\x104', '\x1ABF', '\n', '\x104', '\x3', '\x104', '\x3', 
		'\x104', '\x3', '\x104', '\x5', '\x104', '\x1AC4', '\n', '\x104', '\x3', 
		'\x104', '\x5', '\x104', '\x1AC7', '\n', '\x104', '\x5', '\x104', '\x1AC9', 
		'\n', '\x104', '\x3', '\x104', '\x5', '\x104', '\x1ACC', '\n', '\x104', 
		'\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', 
		'\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', 
		'\x3', '\x104', '\x5', '\x104', '\x1AD8', '\n', '\x104', '\x5', '\x104', 
		'\x1ADA', '\n', '\x104', '\x5', '\x104', '\x1ADC', '\n', '\x104', '\x3', 
		'\x104', '\x5', '\x104', '\x1ADF', '\n', '\x104', '\x3', '\x104', '\x3', 
		'\x104', '\x3', '\x104', '\x3', '\x104', '\x5', '\x104', '\x1AE5', '\n', 
		'\x104', '\x3', '\x105', '\x3', '\x105', '\x3', '\x106', '\x3', '\x106', 
		'\x3', '\x106', '\x3', '\x106', '\x3', '\x106', '\x3', '\x106', '\x5', 
		'\x106', '\x1AEF', '\n', '\x106', '\x3', '\x107', '\x3', '\x107', '\x3', 
		'\x108', '\x3', '\x108', '\x3', '\x109', '\x3', '\x109', '\x3', '\x10A', 
		'\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', 
		'\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', 
		'\x3', '\x10A', '\x3', '\x10A', '\x5', '\x10A', '\x1B03', '\n', '\x10A', 
		'\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x5', 
		'\x10B', '\x1B09', '\n', '\x10B', '\x3', '\x10C', '\x3', '\x10C', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', 
		'\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x110', '\x3', '\x110', '\x3', '\x111', 
		'\x3', '\x111', '\x3', '\x111', '\x3', '\x111', '\x3', '\x111', '\x3', 
		'\x111', '\x3', '\x111', '\x3', '\x111', '\x5', '\x111', '\x1B22', '\n', 
		'\x111', '\x5', '\x111', '\x1B24', '\n', '\x111', '\x3', '\x112', '\x3', 
		'\x112', '\x3', '\x112', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', 
		'\x3', '\x114', '\x3', '\x114', '\x3', '\x115', '\x3', '\x115', '\x3', 
		'\x116', '\x3', '\x116', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', 
		'\x3', '\x117', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', 
		'\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', 
		'\x5', '\x118', '\x1B3E', '\n', '\x118', '\x3', '\x118', '\x3', '\x118', 
		'\x3', '\x118', '\x3', '\x118', '\x5', '\x118', '\x1B44', '\n', '\x118', 
		'\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', 
		'\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', 
		'\x5', '\x118', '\x1B4F', '\n', '\x118', '\x3', '\x119', '\x3', '\x119', 
		'\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x5', 
		'\x119', '\x1B57', '\n', '\x119', '\x3', '\x119', '\x5', '\x119', '\x1B5A', 
		'\n', '\x119', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11C', '\x3', '\x11C', 
		'\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x5', 
		'\x11C', '\x1B68', '\n', '\x11C', '\x3', '\x11D', '\x3', '\x11D', '\x3', 
		'\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x5', '\x11D', 
		'\x1B70', '\n', '\x11D', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x1B77', '\n', '\x11E', 
		'\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', 
		'\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', 
		'\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', 
		'\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', 
		'\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x5', '\x11F', '\x1B8E', 
		'\n', '\x11F', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', 
		'\x120', '\x3', '\x120', '\x3', '\x121', '\x3', '\x121', '\x3', '\x121', 
		'\x3', '\x121', '\x3', '\x121', '\x3', '\x121', '\x5', '\x121', '\x1B9B', 
		'\n', '\x121', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x5', '\x122', '\x1BA1', '\n', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\a', '\x122', '\x1BA6', '\n', '\x122', '\f', 
		'\x122', '\xE', '\x122', '\x1BA9', '\v', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\a', '\x122', '\x1BAE', '\n', '\x122', '\f', 
		'\x122', '\xE', '\x122', '\x1BB1', '\v', '\x122', '\x5', '\x122', '\x1BB3', 
		'\n', '\x122', '\x3', '\x122', '\x5', '\x122', '\x1BB6', '\n', '\x122', 
		'\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', 
		'\x124', '\x3', '\x124', '\x3', '\x124', '\x5', '\x124', '\x1BBF', '\n', 
		'\x124', '\x3', '\x124', '\x3', '\x124', '\x3', '\x124', '\x3', '\x124', 
		'\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x5', 
		'\x125', '\x1BC9', '\n', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', 
		'\x125', '\a', '\x125', '\x1BCE', '\n', '\x125', '\f', '\x125', '\xE', 
		'\x125', '\x1BD1', '\v', '\x125', '\x3', '\x125', '\x5', '\x125', '\x1BD4', 
		'\n', '\x125', '\x3', '\x126', '\x3', '\x126', '\x5', '\x126', '\x1BD8', 
		'\n', '\x126', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', 
		'\x127', '\x5', '\x127', '\x1BDE', '\n', '\x127', '\x3', '\x127', '\x3', 
		'\x127', '\x3', '\x127', '\a', '\x127', '\x1BE3', '\n', '\x127', '\f', 
		'\x127', '\xE', '\x127', '\x1BE6', '\v', '\x127', '\x3', '\x127', '\x5', 
		'\x127', '\x1BE9', '\n', '\x127', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x5', '\x128', '\x1BEF', '\n', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\a', '\x128', '\x1BF4', '\n', 
		'\x128', '\f', '\x128', '\xE', '\x128', '\x1BF7', '\v', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x5', '\x128', 
		'\x1BFD', '\n', '\x128', '\x3', '\x128', '\x5', '\x128', '\x1C00', '\n', 
		'\x128', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', 
		'\x5', '\x129', '\x1C06', '\n', '\x129', '\x3', '\x129', '\x3', '\x129', 
		'\x3', '\x129', '\a', '\x129', '\x1C0B', '\n', '\x129', '\f', '\x129', 
		'\xE', '\x129', '\x1C0E', '\v', '\x129', '\x3', '\x129', '\x5', '\x129', 
		'\x1C11', '\n', '\x129', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', 
		'\x5', '\x12A', '\x1C16', '\n', '\x12A', '\x3', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x5', '\x12A', '\x1C1B', '\n', '\x12A', '\x3', '\x12A', 
		'\x6', '\x12A', '\x1C1E', '\n', '\x12A', '\r', '\x12A', '\xE', '\x12A', 
		'\x1C1F', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12B', '\x3', '\x12B', 
		'\x3', '\x12B', '\x3', '\x12B', '\x5', '\x12B', '\x1C28', '\n', '\x12B', 
		'\x3', '\x12B', '\x3', '\x12B', '\x5', '\x12B', '\x1C2C', '\n', '\x12B', 
		'\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x5', 
		'\x12C', '\x1C32', '\n', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', 
		'\x12C', '\a', '\x12C', '\x1C37', '\n', '\x12C', '\f', '\x12C', '\xE', 
		'\x12C', '\x1C3A', '\v', '\x12C', '\x3', '\x12C', '\x5', '\x12C', '\x1C3D', 
		'\n', '\x12C', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', 
		'\x1C46', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x1C4E', 
		'\n', '\x12D', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', 
		'\x12E', '\x5', '\x12E', '\x1C54', '\n', '\x12E', '\x3', '\x12E', '\x3', 
		'\x12E', '\x3', '\x12F', '\x3', '\x12F', '\x5', '\x12F', '\x1C5A', '\n', 
		'\x12F', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', 
		'\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x131', '\x3', 
		'\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', 
		'\x3', '\x131', '\x3', '\x131', '\x5', '\x131', '\x1C6B', '\n', '\x131', 
		'\x3', '\x131', '\x3', '\x131', '\x5', '\x131', '\x1C6F', '\n', '\x131', 
		'\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x132', '\x3', 
		'\x132', '\x3', '\x132', '\x5', '\x132', '\x1C77', '\n', '\x132', '\x3', 
		'\x132', '\x3', '\x132', '\x5', '\x132', '\x1C7B', '\n', '\x132', '\x3', 
		'\x132', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132', '\a', '\x132', 
		'\x1C81', '\n', '\x132', '\f', '\x132', '\xE', '\x132', '\x1C84', '\v', 
		'\x132', '\x3', '\x132', '\x5', '\x132', '\x1C87', '\n', '\x132', '\x3', 
		'\x132', '\x3', '\x132', '\x3', '\x132', '\x5', '\x132', '\x1C8C', '\n', 
		'\x132', '\x3', '\x132', '\x3', '\x132', '\x5', '\x132', '\x1C90', '\n', 
		'\x132', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132', 
		'\x3', '\x132', '\x5', '\x132', '\x1C97', '\n', '\x132', '\x3', '\x132', 
		'\x3', '\x132', '\x3', '\x132', '\x3', '\x132', '\x5', '\x132', '\x1C9D', 
		'\n', '\x132', '\x5', '\x132', '\x1C9F', '\n', '\x132', '\x3', '\x133', 
		'\x3', '\x133', '\x5', '\x133', '\x1CA3', '\n', '\x133', '\x3', '\x133', 
		'\x3', '\x133', '\x5', '\x133', '\x1CA7', '\n', '\x133', '\x3', '\x133', 
		'\x3', '\x133', '\x5', '\x133', '\x1CAB', '\n', '\x133', '\x3', '\x133', 
		'\x5', '\x133', '\x1CAE', '\n', '\x133', '\x3', '\x133', '\x3', '\x133', 
		'\x5', '\x133', '\x1CB2', '\n', '\x133', '\x3', '\x133', '\x3', '\x133', 
		'\x3', '\x133', '\x3', '\x133', '\x5', '\x133', '\x1CB8', '\n', '\x133', 
		'\x3', '\x133', '\x3', '\x133', '\x5', '\x133', '\x1CBC', '\n', '\x133', 
		'\x5', '\x133', '\x1CBE', '\n', '\x133', '\x3', '\x134', '\x3', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1CC5', 
		'\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\a', '\x134', 
		'\x1CCA', '\n', '\x134', '\f', '\x134', '\xE', '\x134', '\x1CCD', '\v', 
		'\x134', '\x5', '\x134', '\x1CCF', '\n', '\x134', '\x3', '\x134', '\x5', 
		'\x134', '\x1CD2', '\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', 
		'\x134', '\a', '\x134', '\x1CD7', '\n', '\x134', '\f', '\x134', '\xE', 
		'\x134', '\x1CDA', '\v', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', 
		'\x134', '\x1CDE', '\n', '\x134', '\x3', '\x134', '\x6', '\x134', '\x1CE1', 
		'\n', '\x134', '\r', '\x134', '\xE', '\x134', '\x1CE2', '\x3', '\x134', 
		'\x3', '\x134', '\x5', '\x134', '\x1CE7', '\n', '\x134', '\x3', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1CED', 
		'\n', '\x134', '\x6', '\x134', '\x1CEF', '\n', '\x134', '\r', '\x134', 
		'\xE', '\x134', '\x1CF0', '\x5', '\x134', '\x1CF3', '\n', '\x134', '\x3', 
		'\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1CF8', '\n', 
		'\x134', '\x3', '\x134', '\x6', '\x134', '\x1CFB', '\n', '\x134', '\r', 
		'\x134', '\xE', '\x134', '\x1CFC', '\x6', '\x134', '\x1CFF', '\n', '\x134', 
		'\r', '\x134', '\xE', '\x134', '\x1D00', '\x3', '\x134', '\x3', '\x134', 
		'\x3', '\x134', '\x5', '\x134', '\x1D06', '\n', '\x134', '\x3', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D0C', 
		'\n', '\x134', '\x6', '\x134', '\x1D0E', '\n', '\x134', '\r', '\x134', 
		'\xE', '\x134', '\x1D0F', '\x6', '\x134', '\x1D12', '\n', '\x134', '\r', 
		'\x134', '\xE', '\x134', '\x1D13', '\x5', '\x134', '\x1D16', '\n', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D1A', '\n', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D1E', '\n', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D22', '\n', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D26', '\n', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', 
		'\x134', '\x1D2C', '\n', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D2F', 
		'\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', 
		'\x134', '\x5', '\x134', '\x1D35', '\n', '\x134', '\x3', '\x134', '\x3', 
		'\x134', '\x5', '\x134', '\x1D39', '\n', '\x134', '\x3', '\x134', '\x3', 
		'\x134', '\x5', '\x134', '\x1D3D', '\n', '\x134', '\x3', '\x134', '\x3', 
		'\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D43', '\n', 
		'\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', 
		'\x5', '\x134', '\x1D49', '\n', '\x134', '\x5', '\x134', '\x1D4B', '\n', 
		'\x134', '\x3', '\x134', '\x5', '\x134', '\x1D4E', '\n', '\x134', '\x3', 
		'\x134', '\x3', '\x134', '\x5', '\x134', '\x1D52', '\n', '\x134', '\x3', 
		'\x134', '\x3', '\x134', '\x5', '\x134', '\x1D56', '\n', '\x134', '\x3', 
		'\x134', '\x3', '\x134', '\x5', '\x134', '\x1D5A', '\n', '\x134', '\x3', 
		'\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', 
		'\x1D60', '\n', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D63', '\n', 
		'\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', 
		'\x5', '\x134', '\x1D69', '\n', '\x134', '\x3', '\x134', '\x3', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D6F', '\n', '\x134', 
		'\x3', '\x134', '\x5', '\x134', '\x1D72', '\n', '\x134', '\x3', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D78', 
		'\n', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D7B', '\n', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', 
		'\x134', '\x1D81', '\n', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D84', 
		'\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D88', 
		'\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D8C', 
		'\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D90', 
		'\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', 
		'\x134', '\x1D95', '\n', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D98', 
		'\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1D9C', 
		'\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1DA0', 
		'\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', 
		'\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', 
		'\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', 
		'\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1DB1', '\n', 
		'\x134', '\a', '\x134', '\x1DB3', '\n', '\x134', '\f', '\x134', '\xE', 
		'\x134', '\x1DB6', '\v', '\x134', '\x5', '\x134', '\x1DB8', '\n', '\x134', 
		'\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', 
		'\x135', '\x5', '\x135', '\x1DBF', '\n', '\x135', '\x3', '\x135', '\x6', 
		'\x135', '\x1DC2', '\n', '\x135', '\r', '\x135', '\xE', '\x135', '\x1DC3', 
		'\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1DC8', '\n', '\x135', 
		'\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', 
		'\x135', '\x1DCE', '\n', '\x135', '\x6', '\x135', '\x1DD0', '\n', '\x135', 
		'\r', '\x135', '\xE', '\x135', '\x1DD1', '\x5', '\x135', '\x1DD4', '\n', 
		'\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', 
		'\x1DD9', '\n', '\x135', '\x3', '\x135', '\x6', '\x135', '\x1DDC', '\n', 
		'\x135', '\r', '\x135', '\xE', '\x135', '\x1DDD', '\x6', '\x135', '\x1DE0', 
		'\n', '\x135', '\r', '\x135', '\xE', '\x135', '\x1DE1', '\x3', '\x135', 
		'\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1DE7', '\n', '\x135', 
		'\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', 
		'\x135', '\x1DED', '\n', '\x135', '\x6', '\x135', '\x1DEF', '\n', '\x135', 
		'\r', '\x135', '\xE', '\x135', '\x1DF0', '\x6', '\x135', '\x1DF3', '\n', 
		'\x135', '\r', '\x135', '\xE', '\x135', '\x1DF4', '\x5', '\x135', '\x1DF7', 
		'\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1DFB', 
		'\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1DFF', 
		'\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1E03', 
		'\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1E07', 
		'\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', 
		'\x135', '\x5', '\x135', '\x1E0D', '\n', '\x135', '\x3', '\x135', '\x5', 
		'\x135', '\x1E10', '\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', 
		'\x135', '\x3', '\x135', '\x5', '\x135', '\x1E16', '\n', '\x135', '\x3', 
		'\x135', '\x3', '\x135', '\x5', '\x135', '\x1E1A', '\n', '\x135', '\x3', 
		'\x135', '\x3', '\x135', '\x5', '\x135', '\x1E1E', '\n', '\x135', '\x3', 
		'\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', 
		'\x1E24', '\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', 
		'\x3', '\x135', '\x5', '\x135', '\x1E2A', '\n', '\x135', '\x5', '\x135', 
		'\x1E2C', '\n', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1E2F', '\n', 
		'\x135', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1E33', '\n', 
		'\x135', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1E37', '\n', 
		'\x135', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1E3B', '\n', 
		'\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', 
		'\x5', '\x135', '\x1E41', '\n', '\x135', '\x3', '\x135', '\x5', '\x135', 
		'\x1E44', '\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', 
		'\x3', '\x135', '\x5', '\x135', '\x1E4A', '\n', '\x135', '\x3', '\x135', 
		'\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1E50', 
		'\n', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1E53', '\n', '\x135', 
		'\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', 
		'\x135', '\x1E59', '\n', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1E5C', 
		'\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', 
		'\x135', '\x5', '\x135', '\x1E62', '\n', '\x135', '\x3', '\x135', '\x5', 
		'\x135', '\x1E65', '\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', 
		'\x135', '\x1E69', '\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', 
		'\x135', '\x1E6D', '\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', 
		'\x135', '\x1E71', '\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', 
		'\x135', '\x5', '\x135', '\x1E76', '\n', '\x135', '\x3', '\x135', '\x5', 
		'\x135', '\x1E79', '\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', 
		'\x135', '\x1E7D', '\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', 
		'\x135', '\x1E81', '\n', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', 
		'\x135', '\x3', '\x135', '\x5', '\x135', '\x1E87', '\n', '\x135', '\x3', 
		'\x135', '\x5', '\x135', '\x1E8A', '\n', '\x135', '\x3', '\x135', '\x3', 
		'\x135', '\x5', '\x135', '\x1E8E', '\n', '\x135', '\x3', '\x135', '\x3', 
		'\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', 
		'\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', 
		'\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', 
		'\x5', '\x135', '\x1E9F', '\n', '\x135', '\a', '\x135', '\x1EA1', '\n', 
		'\x135', '\f', '\x135', '\xE', '\x135', '\x1EA4', '\v', '\x135', '\x5', 
		'\x135', '\x1EA6', '\n', '\x135', '\x3', '\x136', '\x3', '\x136', '\x3', 
		'\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', 
		'\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', 
		'\x136', '\x5', '\x136', '\x1EB4', '\n', '\x136', '\x3', '\x136', '\x3', 
		'\x136', '\x3', '\x136', '\x3', '\x136', '\x5', '\x136', '\x1EBA', '\n', 
		'\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', 
		'\x3', '\x136', '\x3', '\x136', '\x5', '\x136', '\x1EC2', '\n', '\x136', 
		'\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', 
		'\x136', '\x6', '\x136', '\x1EC9', '\n', '\x136', '\r', '\x136', '\xE', 
		'\x136', '\x1ECA', '\x3', '\x136', '\x5', '\x136', '\x1ECE', '\n', '\x136', 
		'\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', 
		'\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', 
		'\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', 
		'\x138', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', 
		'\x3', '\x138', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', '\x3', 
		'\x138', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', 
		'\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x13A', '\x3', 
		'\x13A', '\x5', '\x13A', '\x1EF0', '\n', '\x13A', '\x3', '\x13A', '\x3', 
		'\x13A', '\x5', '\x13A', '\x1EF4', '\n', '\x13A', '\x3', '\x13A', '\x3', 
		'\x13A', '\x3', '\x13A', '\a', '\x13A', '\x1EF9', '\n', '\x13A', '\f', 
		'\x13A', '\xE', '\x13A', '\x1EFC', '\v', '\x13A', '\x5', '\x13A', '\x1EFE', 
		'\n', '\x13A', '\x3', '\x13A', '\x5', '\x13A', '\x1F01', '\n', '\x13A', 
		'\x3', '\x13A', '\x3', '\x13A', '\x3', '\x13A', '\x3', '\x13A', '\a', 
		'\x13A', '\x1F07', '\n', '\x13A', '\f', '\x13A', '\xE', '\x13A', '\x1F0A', 
		'\v', '\x13A', '\x3', '\x13A', '\x3', '\x13A', '\x5', '\x13A', '\x1F0E', 
		'\n', '\x13A', '\x3', '\x13A', '\x3', '\x13A', '\x3', '\x13A', '\x5', 
		'\x13A', '\x1F13', '\n', '\x13A', '\x3', '\x13A', '\x5', '\x13A', '\x1F16', 
		'\n', '\x13A', '\x5', '\x13A', '\x1F18', '\n', '\x13A', '\x3', '\x13B', 
		'\x3', '\x13B', '\x5', '\x13B', '\x1F1C', '\n', '\x13B', '\x3', '\x13B', 
		'\x3', '\x13B', '\x5', '\x13B', '\x1F20', '\n', '\x13B', '\x3', '\x13B', 
		'\x5', '\x13B', '\x1F23', '\n', '\x13B', '\x3', '\x13B', '\x3', '\x13B', 
		'\x5', '\x13B', '\x1F27', '\n', '\x13B', '\x3', '\x13C', '\x3', '\x13C', 
		'\x3', '\x13D', '\x3', '\x13D', '\x5', '\x13D', '\x1F2D', '\n', '\x13D', 
		'\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x5', '\x13D', '\x1F32', 
		'\n', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', 
		'\x13D', '\x3', '\x13D', '\x5', '\x13D', '\x1F39', '\n', '\x13D', '\x5', 
		'\x13D', '\x1F3B', '\n', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x5', 
		'\x13D', '\x1F3F', '\n', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', 
		'\x13D', '\x3', '\x13D', '\a', '\x13D', '\x1F45', '\n', '\x13D', '\f', 
		'\x13D', '\xE', '\x13D', '\x1F48', '\v', '\x13D', '\x3', '\x13D', '\x3', 
		'\x13D', '\x3', '\x13D', '\x5', '\x13D', '\x1F4D', '\n', '\x13D', '\x3', 
		'\x13D', '\x3', '\x13D', '\x5', '\x13D', '\x1F51', '\n', '\x13D', '\x3', 
		'\x13D', '\x5', '\x13D', '\x1F54', '\n', '\x13D', '\x3', '\x13D', '\x3', 
		'\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', 
		'\x3', '\x13D', '\x5', '\x13D', '\x1F5D', '\n', '\x13D', '\x3', '\x13D', 
		'\x5', '\x13D', '\x1F60', '\n', '\x13D', '\x3', '\x13D', '\x3', '\x13D', 
		'\x3', '\x13D', '\x3', '\x13D', '\x5', '\x13D', '\x1F66', '\n', '\x13D', 
		'\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', 
		'\x13E', '\x5', '\x13E', '\x1F6D', '\n', '\x13E', '\x3', '\x13E', '\x3', 
		'\x13E', '\x3', '\x13E', '\x5', '\x13E', '\x1F72', '\n', '\x13E', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', 
		'\x3', '\x13E', '\x5', '\x13E', '\x1F7A', '\n', '\x13E', '\x3', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x5', '\x13F', '\x1F7F', '\n', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', 
		'\x3', '\x13F', '\x5', '\x13F', '\x1F8B', '\n', '\x13F', '\x5', '\x13F', 
		'\x1F8D', '\n', '\x13F', '\x3', '\x140', '\x3', '\x140', '\x3', '\x140', 
		'\x3', '\x140', '\x3', '\x140', '\x3', '\x140', '\x3', '\x140', '\x3', 
		'\x140', '\x3', '\x140', '\x5', '\x140', '\x1F98', '\n', '\x140', '\x3', 
		'\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', 
		'\x5', '\x141', '\x1F9F', '\n', '\x141', '\x3', '\x141', '\x3', '\x141', 
		'\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\a', 
		'\x141', '\x1FA7', '\n', '\x141', '\f', '\x141', '\xE', '\x141', '\x1FAA', 
		'\v', '\x141', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', 
		'\x142', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', 
		'\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x3', 
		'\x143', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', 
		'\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x5', '\x143', '\x1FC0', 
		'\n', '\x143', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x3', 
		'\x144', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', 
		'\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x5', '\x144', '\x1FCD', 
		'\n', '\x144', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', 
		'\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', 
		'\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', 
		'\x145', '\x3', '\x145', '\x5', '\x145', '\x1FDD', '\n', '\x145', '\x3', 
		'\x145', '\x3', '\x145', '\x3', '\x145', '\x5', '\x145', '\x1FE2', '\n', 
		'\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', 
		'\x3', '\x145', '\x5', '\x145', '\x1FE9', '\n', '\x145', '\x3', '\x145', 
		'\x5', '\x145', '\x1FEC', '\n', '\x145', '\x6', '\x145', '\x1FEE', '\n', 
		'\x145', '\r', '\x145', '\xE', '\x145', '\x1FEF', '\x5', '\x145', '\x1FF2', 
		'\n', '\x145', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\x3', 
		'\x146', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', 
		'\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\x3', 
		'\x146', '\x3', '\x146', '\x3', '\x146', '\x5', '\x146', '\x2003', '\n', 
		'\x146', '\x3', '\x147', '\x3', '\x147', '\x3', '\x148', '\x3', '\x148', 
		'\x3', '\x148', '\x3', '\x148', '\x3', '\x148', '\x3', '\x148', '\x3', 
		'\x148', '\x3', '\x148', '\x3', '\x148', '\x3', '\x148', '\x3', '\x148', 
		'\x5', '\x148', '\x2012', '\n', '\x148', '\x3', '\x149', '\x3', '\x149', 
		'\x3', '\x149', '\x3', '\x149', '\x3', '\x149', '\x3', '\x149', '\x5', 
		'\x149', '\x201A', '\n', '\x149', '\x3', '\x149', '\x3', '\x149', '\x3', 
		'\x149', '\x3', '\x149', '\x3', '\x149', '\x3', '\x149', '\x3', '\x149', 
		'\x5', '\x149', '\x2023', '\n', '\x149', '\x3', '\x149', '\x3', '\x149', 
		'\x3', '\x149', '\x3', '\x149', '\x3', '\x149', '\x3', '\x149', '\x5', 
		'\x149', '\x202B', '\n', '\x149', '\x3', '\x14A', '\x3', '\x14A', '\x3', 
		'\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', 
		'\x5', '\x14A', '\x2034', '\n', '\x14A', '\x3', '\x14A', '\x3', '\x14A', 
		'\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', 
		'\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x5', '\x14A', '\x203F', '\n', 
		'\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x5', '\x14A', '\x2043', '\n', 
		'\x14A', '\x5', '\x14A', '\x2045', '\n', '\x14A', '\x5', '\x14A', '\x2047', 
		'\n', '\x14A', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', 
		'\x14B', '\x5', '\x14B', '\x204D', '\n', '\x14B', '\x3', '\x14B', '\x3', 
		'\x14B', '\x3', '\x14B', '\x5', '\x14B', '\x2052', '\n', '\x14B', '\x3', 
		'\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', 
		'\x5', '\x14B', '\x2059', '\n', '\x14B', '\x3', '\x14B', '\x3', '\x14B', 
		'\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', 
		'\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', 
		'\x5', '\x14B', '\x2066', '\n', '\x14B', '\x5', '\x14B', '\x2068', '\n', 
		'\x14B', '\x5', '\x14B', '\x206A', '\n', '\x14B', '\x3', '\x14B', '\x5', 
		'\x14B', '\x206D', '\n', '\x14B', '\x3', '\x14B', '\x5', '\x14B', '\x2070', 
		'\n', '\x14B', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', 
		'\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x2077', '\n', '\x14C', '\x3', 
		'\x14C', '\x5', '\x14C', '\x207A', '\n', '\x14C', '\x3', '\x14C', '\x3', 
		'\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x2080', '\n', 
		'\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x5', '\x14C', 
		'\x2085', '\n', '\x14C', '\x5', '\x14C', '\x2087', '\n', '\x14C', '\x3', 
		'\x14C', '\x5', '\x14C', '\x208A', '\n', '\x14C', '\x3', '\x14C', '\x3', 
		'\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x2090', '\n', 
		'\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', 
		'\x3', '\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x2098', '\n', '\x14C', 
		'\x5', '\x14C', '\x209A', '\n', '\x14C', '\x3', '\x14C', '\x5', '\x14C', 
		'\x209D', '\n', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x5', '\x14C', 
		'\x20A1', '\n', '\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x20A4', '\n', 
		'\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', 
		'\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x5', 
		'\x14C', '\x20AE', '\n', '\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x20B1', 
		'\n', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x20B5', 
		'\n', '\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x20B8', '\n', '\x14C', 
		'\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x5', 
		'\x14C', '\x20BE', '\n', '\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x20C1', 
		'\n', '\x14C', '\x5', '\x14C', '\x20C3', '\n', '\x14C', '\x3', '\x14D', 
		'\x3', '\x14D', '\x5', '\x14D', '\x20C7', '\n', '\x14D', '\x3', '\x14E', 
		'\x3', '\x14E', '\x3', '\x14E', '\x5', '\x14E', '\x20CC', '\n', '\x14E', 
		'\x3', '\x14F', '\x3', '\x14F', '\x5', '\x14F', '\x20D0', '\n', '\x14F', 
		'\x3', '\x150', '\x3', '\x150', '\x3', '\x150', '\x3', '\x150', '\x3', 
		'\x150', '\x3', '\x150', '\x5', '\x150', '\x20D8', '\n', '\x150', '\x3', 
		'\x150', '\x3', '\x150', '\x5', '\x150', '\x20DC', '\n', '\x150', '\x3', 
		'\x150', '\x5', '\x150', '\x20DF', '\n', '\x150', '\x3', '\x151', '\x3', 
		'\x151', '\x3', '\x151', '\x5', '\x151', '\x20E4', '\n', '\x151', '\x3', 
		'\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x153', 
		'\x3', '\x153', '\x5', '\x153', '\x20EC', '\n', '\x153', '\x3', '\x153', 
		'\x3', '\x153', '\x3', '\x153', '\x5', '\x153', '\x20F1', '\n', '\x153', 
		'\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x5', '\x155', 
		'\x20FB', '\n', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', 
		'\x3', '\x156', '\x3', '\x156', '\x3', '\x156', '\x3', '\x156', '\x3', 
		'\x157', '\x3', '\x157', '\x5', '\x157', '\x2106', '\n', '\x157', '\x3', 
		'\x157', '\a', '\x157', '\x2109', '\n', '\x157', '\f', '\x157', '\xE', 
		'\x157', '\x210C', '\v', '\x157', '\x3', '\x158', '\x3', '\x158', '\x3', 
		'\x158', '\x5', '\x158', '\x2111', '\n', '\x158', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x2117', '\n', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x211B', '\n', 
		'\x159', '\x3', '\x159', '\x5', '\x159', '\x211E', '\n', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x5', '\x159', '\x2122', '\n', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x5', '\x159', '\x2126', '\n', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x5', '\x159', '\x212E', '\n', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x2133', '\n', '\x159', 
		'\x5', '\x159', '\x2135', '\n', '\x159', '\x3', '\x159', '\x5', '\x159', 
		'\x2138', '\n', '\x159', '\x3', '\x159', '\a', '\x159', '\x213B', '\n', 
		'\x159', '\f', '\x159', '\xE', '\x159', '\x213E', '\v', '\x159', '\x3', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x5', '\x15A', '\x2146', '\n', '\x15A', '\x3', '\x15B', 
		'\x3', '\x15B', '\x5', '\x15B', '\x214A', '\n', '\x15B', '\x3', '\x15B', 
		'\x3', '\x15B', '\x3', '\x15B', '\x5', '\x15B', '\x214F', '\n', '\x15B', 
		'\x3', '\x15B', '\x5', '\x15B', '\x2152', '\n', '\x15B', '\x3', '\x15B', 
		'\x5', '\x15B', '\x2155', '\n', '\x15B', '\x3', '\x15B', '\x3', '\x15B', 
		'\x3', '\x15B', '\x3', '\x15B', '\x5', '\x15B', '\x215B', '\n', '\x15B', 
		'\x3', '\x15B', '\x3', '\x15B', '\x3', '\x15B', '\x3', '\x15B', '\x3', 
		'\x15B', '\x3', '\x15B', '\x5', '\x15B', '\x2163', '\n', '\x15B', '\x3', 
		'\x15B', '\x3', '\x15B', '\x3', '\x15B', '\x3', '\x15B', '\x3', '\x15B', 
		'\x3', '\x15B', '\x5', '\x15B', '\x216B', '\n', '\x15B', '\x3', '\x15B', 
		'\x5', '\x15B', '\x216E', '\n', '\x15B', '\x3', '\x15B', '\x5', '\x15B', 
		'\x2171', '\n', '\x15B', '\x3', '\x15C', '\x3', '\x15C', '\x5', '\x15C', 
		'\x2175', '\n', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', 
		'\x5', '\x15C', '\x217A', '\n', '\x15C', '\x3', '\x15C', '\x5', '\x15C', 
		'\x217D', '\n', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', 
		'\x3', '\x15C', '\x5', '\x15C', '\x2183', '\n', '\x15C', '\x3', '\x15C', 
		'\x3', '\x15C', '\x5', '\x15C', '\x2187', '\n', '\x15C', '\x3', '\x15C', 
		'\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x5', '\x15C', '\x218D', 
		'\n', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', 
		'\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x5', '\x15C', '\x2195', '\n', 
		'\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', 
		'\x6', '\x15C', '\x219B', '\n', '\x15C', '\r', '\x15C', '\xE', '\x15C', 
		'\x219C', '\x3', '\x15C', '\x5', '\x15C', '\x21A0', '\n', '\x15C', '\x3', 
		'\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', 
		'\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', 
		'\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x5', '\x15C', 
		'\x21AF', '\n', '\x15C', '\x3', '\x15C', '\x5', '\x15C', '\x21B2', '\n', 
		'\x15C', '\x3', '\x15C', '\x5', '\x15C', '\x21B5', '\n', '\x15C', '\x5', 
		'\x15C', '\x21B7', '\n', '\x15C', '\x3', '\x15D', '\x3', '\x15D', '\x3', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x21C2', '\n', '\x15D', 
		'\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', 
		'\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', 
		'\x5', '\x15E', '\x21CD', '\n', '\x15E', '\x3', '\x15F', '\x3', '\x15F', 
		'\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\a', '\x15F', '\x21D4', 
		'\n', '\x15F', '\f', '\x15F', '\xE', '\x15F', '\x21D7', '\v', '\x15F', 
		'\x3', '\x15F', '\x3', '\x15F', '\x3', '\x160', '\x3', '\x160', '\x3', 
		'\x160', '\x3', '\x160', '\x3', '\x160', '\x5', '\x160', '\x21E0', '\n', 
		'\x160', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', 
		'\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x5', 
		'\x161', '\x21EA', '\n', '\x161', '\x5', '\x161', '\x21EC', '\n', '\x161', 
		'\x5', '\x161', '\x21EE', '\n', '\x161', '\x3', '\x161', '\x5', '\x161', 
		'\x21F1', '\n', '\x161', '\x3', '\x161', '\x5', '\x161', '\x21F4', '\n', 
		'\x161', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', 
		'\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x3', 
		'\x161', '\x5', '\x161', '\x21FF', '\n', '\x161', '\x5', '\x161', '\x2201', 
		'\n', '\x161', '\x5', '\x161', '\x2203', '\n', '\x161', '\x3', '\x161', 
		'\x5', '\x161', '\x2206', '\n', '\x161', '\x3', '\x162', '\a', '\x162', 
		'\x2209', '\n', '\x162', '\f', '\x162', '\xE', '\x162', '\x220C', '\v', 
		'\x162', '\x3', '\x162', '\x3', '\x162', '\x3', '\x162', '\x3', '\x163', 
		'\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x5', 
		'\x163', '\x2216', '\n', '\x163', '\x3', '\x164', '\x3', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', 
		'\x5', '\x164', '\x221F', '\n', '\x164', '\x3', '\x164', '\x5', '\x164', 
		'\x2222', '\n', '\x164', '\x3', '\x164', '\x5', '\x164', '\x2225', '\n', 
		'\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', 
		'\x3', '\x164', '\a', '\x164', '\x222C', '\n', '\x164', '\f', '\x164', 
		'\xE', '\x164', '\x222F', '\v', '\x164', '\x5', '\x164', '\x2231', '\n', 
		'\x164', '\x3', '\x164', '\x5', '\x164', '\x2234', '\n', '\x164', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x5', '\x165', '\x223B', '\n', '\x165', '\x3', '\x165', '\x5', '\x165', 
		'\x223E', '\n', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x5', '\x165', '\x224D', '\n', '\x165', '\x3', '\x165', 
		'\x5', '\x165', '\x2250', '\n', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x5', '\x165', '\x2257', 
		'\n', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x5', '\x165', '\x2267', '\n', '\x165', '\x3', 
		'\x166', '\x3', '\x166', '\x5', '\x166', '\x226B', '\n', '\x166', '\x3', 
		'\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', 
		'\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x5', '\x167', '\x2275', 
		'\n', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', 
		'\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', 
		'\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', 
		'\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', 
		'\a', '\x167', '\x2288', '\n', '\x167', '\f', '\x167', '\xE', '\x167', 
		'\x228B', '\v', '\x167', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x5', '\x168', '\x2291', '\n', '\x168', '\x3', '\x169', 
		'\x3', '\x169', '\x3', '\x169', '\x6', '\x169', '\x2296', '\n', '\x169', 
		'\r', '\x169', '\xE', '\x169', '\x2297', '\x3', '\x169', '\x3', '\x169', 
		'\x5', '\x169', '\x229C', '\n', '\x169', '\x3', '\x169', '\x3', '\x169', 
		'\x3', '\x169', '\x3', '\x169', '\x6', '\x169', '\x22A2', '\n', '\x169', 
		'\r', '\x169', '\xE', '\x169', '\x22A3', '\x3', '\x169', '\x3', '\x169', 
		'\x5', '\x169', '\x22A8', '\n', '\x169', '\x3', '\x169', '\x3', '\x169', 
		'\x5', '\x169', '\x22AC', '\n', '\x169', '\x3', '\x16A', '\x3', '\x16A', 
		'\x3', '\x16A', '\x3', '\x16A', '\x5', '\x16A', '\x22B2', '\n', '\x16A', 
		'\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x5', '\x16B', 
		'\x22BC', '\n', '\x16B', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', 
		'\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x3', 
		'\x16C', '\x5', '\x16C', '\x22C6', '\n', '\x16C', '\x3', '\x16D', '\x3', 
		'\x16D', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x5', '\x16E', 
		'\x22CD', '\n', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', 
		'\a', '\x16E', '\x22D2', '\n', '\x16E', '\f', '\x16E', '\xE', '\x16E', 
		'\x22D5', '\v', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', 
		'\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x5', '\x16E', '\x22DD', 
		'\n', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', 
		'\x16E', '\x3', '\x16E', '\x5', '\x16E', '\x22E4', '\n', '\x16E', '\x3', 
		'\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', 
		'\x5', '\x16F', '\x22EB', '\n', '\x16F', '\x3', '\x16F', '\x3', '\x16F', 
		'\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x170', '\x3', 
		'\x170', '\x5', '\x170', '\x22F4', '\n', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x5', '\x170', '\x22F8', '\n', '\x170', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x5', '\x170', '\x2302', '\n', '\x170', 
		'\x3', '\x171', '\x3', '\x171', '\x3', '\x171', '\a', '\x171', '\x2307', 
		'\n', '\x171', '\f', '\x171', '\xE', '\x171', '\x230A', '\v', '\x171', 
		'\x3', '\x172', '\x3', '\x172', '\x3', '\x172', '\a', '\x172', '\x230F', 
		'\n', '\x172', '\f', '\x172', '\xE', '\x172', '\x2312', '\v', '\x172', 
		'\x3', '\x173', '\x3', '\x173', '\x3', '\x173', '\a', '\x173', '\x2317', 
		'\n', '\x173', '\f', '\x173', '\xE', '\x173', '\x231A', '\v', '\x173', 
		'\x3', '\x174', '\x5', '\x174', '\x231D', '\n', '\x174', '\x3', '\x174', 
		'\x3', '\x174', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x5', '\x175', '\x2333', '\n', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x5', '\x175', '\x233C', '\n', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x5', '\x175', 
		'\x2342', '\n', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x5', '\x175', '\x2348', '\n', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x5', '\x175', '\x234E', 
		'\n', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', 
		'\x5', '\x175', '\x2358', '\n', '\x175', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x5', '\x176', '\x235F', 
		'\n', '\x176', '\x3', '\x176', '\a', '\x176', '\x2362', '\n', '\x176', 
		'\f', '\x176', '\xE', '\x176', '\x2365', '\v', '\x176', '\x3', '\x177', 
		'\x3', '\x177', '\x5', '\x177', '\x2369', '\n', '\x177', '\x3', '\x177', 
		'\x3', '\x177', '\x5', '\x177', '\x236D', '\n', '\x177', '\x3', '\x177', 
		'\x3', '\x177', '\x3', '\x177', '\x3', '\x177', '\x3', '\x177', '\x5', 
		'\x177', '\x2374', '\n', '\x177', '\x3', '\x178', '\x3', '\x178', '\x5', 
		'\x178', '\x2378', '\n', '\x178', '\x3', '\x178', '\x5', '\x178', '\x237B', 
		'\n', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', '\x5', 
		'\x178', '\x2380', '\n', '\x178', '\x3', '\x178', '\x3', '\x178', '\x5', 
		'\x178', '\x2384', '\n', '\x178', '\x3', '\x178', '\x3', '\x178', '\x5', 
		'\x178', '\x2388', '\n', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', 
		'\x178', '\x5', '\x178', '\x238D', '\n', '\x178', '\x3', '\x178', '\x3', 
		'\x178', '\x3', '\x178', '\a', '\x178', '\x2392', '\n', '\x178', '\f', 
		'\x178', '\xE', '\x178', '\x2395', '\v', '\x178', '\x5', '\x178', '\x2397', 
		'\n', '\x178', '\x3', '\x178', '\x3', '\x178', '\x5', '\x178', '\x239B', 
		'\n', '\x178', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', 
		'\x179', '\x23A0', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', 
		'\x179', '\x23A4', '\n', '\x179', '\x3', '\x17A', '\x3', '\x17A', '\x3', 
		'\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17A', 
		'\x5', '\x17A', '\x23AD', '\n', '\x17A', '\x3', '\x17B', '\x3', '\x17B', 
		'\x3', '\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x5', '\x17B', '\x23B4', 
		'\n', '\x17B', '\x3', '\x17C', '\x3', '\x17C', '\x3', '\x17C', '\x3', 
		'\x17C', '\x3', '\x17C', '\a', '\x17C', '\x23BB', '\n', '\x17C', '\f', 
		'\x17C', '\xE', '\x17C', '\x23BE', '\v', '\x17C', '\x3', '\x17C', '\x3', 
		'\x17C', '\x3', '\x17C', '\x3', '\x17C', '\x3', '\x17C', '\x3', '\x17C', 
		'\x3', '\x17C', '\x3', '\x17C', '\x3', '\x17C', '\x5', '\x17C', '\x23C9', 
		'\n', '\x17C', '\x5', '\x17C', '\x23CB', '\n', '\x17C', '\x3', '\x17D', 
		'\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', 
		'\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x5', '\x17D', '\x23D5', '\n', 
		'\x17D', '\x3', '\x17D', '\x5', '\x17D', '\x23D8', '\n', '\x17D', '\x3', 
		'\x17D', '\a', '\x17D', '\x23DB', '\n', '\x17D', '\f', '\x17D', '\xE', 
		'\x17D', '\x23DE', '\v', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', 
		'\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x5', '\x17D', 
		'\x23E6', '\n', '\x17D', '\x5', '\x17D', '\x23E8', '\n', '\x17D', '\x5', 
		'\x17D', '\x23EA', '\n', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', 
		'\x17D', '\x5', '\x17D', '\x23EF', '\n', '\x17D', '\x3', '\x17D', '\x3', 
		'\x17D', '\x3', '\x17D', '\x3', '\x17D', '\a', '\x17D', '\x23F5', '\n', 
		'\x17D', '\f', '\x17D', '\xE', '\x17D', '\x23F8', '\v', '\x17D', '\x3', 
		'\x17D', '\x3', '\x17D', '\x5', '\x17D', '\x23FC', '\n', '\x17D', '\x3', 
		'\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', 
		'\x3', '\x17D', '\x5', '\x17D', '\x2404', '\n', '\x17D', '\x3', '\x17D', 
		'\a', '\x17D', '\x2407', '\n', '\x17D', '\f', '\x17D', '\xE', '\x17D', 
		'\x240A', '\v', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', 
		'\x5', '\x17D', '\x240F', '\n', '\x17D', '\x3', '\x17D', '\x3', '\x17D', 
		'\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x3', 
		'\x17D', '\x3', '\x17D', '\x5', '\x17D', '\x2419', '\n', '\x17D', '\x5', 
		'\x17D', '\x241B', '\n', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x5', 
		'\x17D', '\x241F', '\n', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x5', 
		'\x17D', '\x2423', '\n', '\x17D', '\x5', '\x17D', '\x2425', '\n', '\x17D', 
		'\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17F', '\x3', 
		'\x17F', '\x5', '\x17F', '\x242C', '\n', '\x17F', '\x3', '\x180', '\x3', 
		'\x180', '\x3', '\x181', '\x3', '\x181', '\x3', '\x181', '\x3', '\x181', 
		'\x3', '\x181', '\a', '\x181', '\x2435', '\n', '\x181', '\f', '\x181', 
		'\xE', '\x181', '\x2438', '\v', '\x181', '\x3', '\x181', '\x3', '\x181', 
		'\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', 
		'\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', 
		'\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', 
		'\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', 
		'\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', 
		'\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', 
		'\a', '\x182', '\x2457', '\n', '\x182', '\f', '\x182', '\xE', '\x182', 
		'\x245A', '\v', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', 
		'\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', 
		'\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', 
		'\x3', '\x182', '\x5', '\x182', '\x2469', '\n', '\x182', '\x3', '\x183', 
		'\x3', '\x183', '\x3', '\x183', '\x3', '\x183', '\x3', '\x183', '\x5', 
		'\x183', '\x2470', '\n', '\x183', '\x5', '\x183', '\x2472', '\n', '\x183', 
		'\x3', '\x184', '\x3', '\x184', '\x3', '\x184', '\a', '\x184', '\x2477', 
		'\n', '\x184', '\f', '\x184', '\xE', '\x184', '\x247A', '\v', '\x184', 
		'\x3', '\x185', '\x3', '\x185', '\x3', '\x185', '\x3', '\x185', '\a', 
		'\x185', '\x2480', '\n', '\x185', '\f', '\x185', '\xE', '\x185', '\x2483', 
		'\v', '\x185', '\x3', '\x185', '\x3', '\x185', '\x3', '\x186', '\x3', 
		'\x186', '\x3', '\x186', '\x3', '\x186', '\x3', '\x186', '\x5', '\x186', 
		'\x248C', '\n', '\x186', '\x3', '\x187', '\x3', '\x187', '\x3', '\x187', 
		'\x5', '\x187', '\x2491', '\n', '\x187', '\x3', '\x187', '\x3', '\x187', 
		'\x3', '\x187', '\x3', '\x187', '\x3', '\x187', '\x5', '\x187', '\x2498', 
		'\n', '\x187', '\x3', '\x187', '\x5', '\x187', '\x249B', '\n', '\x187', 
		'\x3', '\x188', '\x3', '\x188', '\x3', '\x188', '\x3', '\x188', '\x3', 
		'\x188', '\x5', '\x188', '\x24A2', '\n', '\x188', '\x3', '\x188', '\x3', 
		'\x188', '\x3', '\x188', '\x3', '\x188', '\x3', '\x188', '\x5', '\x188', 
		'\x24A9', '\n', '\x188', '\x3', '\x188', '\x5', '\x188', '\x24AC', '\n', 
		'\x188', '\x5', '\x188', '\x24AE', '\n', '\x188', '\x3', '\x189', '\x3', 
		'\x189', '\x3', '\x189', '\x3', '\x189', '\x3', '\x189', '\x3', '\x189', 
		'\x5', '\x189', '\x24B6', '\n', '\x189', '\x5', '\x189', '\x24B8', '\n', 
		'\x189', '\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18A', 
		'\x5', '\x18A', '\x24BE', '\n', '\x18A', '\x3', '\x18B', '\x3', '\x18B', 
		'\x3', '\x18B', '\a', '\x18B', '\x24C3', '\n', '\x18B', '\f', '\x18B', 
		'\xE', '\x18B', '\x24C6', '\v', '\x18B', '\x3', '\x18C', '\x3', '\x18C', 
		'\x3', '\x18C', '\x3', '\x18C', '\x3', '\x18C', '\x5', '\x18C', '\x24CD', 
		'\n', '\x18C', '\x3', '\x18D', '\x3', '\x18D', '\a', '\x18D', '\x24D1', 
		'\n', '\x18D', '\f', '\x18D', '\xE', '\x18D', '\x24D4', '\v', '\x18D', 
		'\x3', '\x18E', '\x3', '\x18E', '\x5', '\x18E', '\x24D8', '\n', '\x18E', 
		'\x3', '\x18E', '\x3', '\x18E', '\x5', '\x18E', '\x24DC', '\n', '\x18E', 
		'\x3', '\x18E', '\x3', '\x18E', '\x5', '\x18E', '\x24E0', '\n', '\x18E', 
		'\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x5', '\x18E', '\x24E5', 
		'\n', '\x18E', '\x5', '\x18E', '\x24E7', '\n', '\x18E', '\x3', '\x18E', 
		'\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x5', 
		'\x18E', '\x24EE', '\n', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x5', 
		'\x18E', '\x24F2', '\n', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x3', 
		'\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x5', '\x18E', '\x24F9', '\n', 
		'\x18E', '\x5', '\x18E', '\x24FB', '\n', '\x18E', '\x3', '\x18E', '\x3', 
		'\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', '\x5', '\x18E', 
		'\x2502', '\n', '\x18E', '\x5', '\x18E', '\x2504', '\n', '\x18E', '\x3', 
		'\x18F', '\x3', '\x18F', '\x3', '\x18F', '\x3', '\x18F', '\x3', '\x18F', 
		'\x3', '\x18F', '\x3', '\x18F', '\x5', '\x18F', '\x250D', '\n', '\x18F', 
		'\x3', '\x18F', '\x3', '\x18F', '\x3', '\x18F', '\x3', '\x18F', '\x3', 
		'\x18F', '\x3', '\x18F', '\x5', '\x18F', '\x2515', '\n', '\x18F', '\x3', 
		'\x190', '\x3', '\x190', '\x3', '\x190', '\a', '\x190', '\x251A', '\n', 
		'\x190', '\f', '\x190', '\xE', '\x190', '\x251D', '\v', '\x190', '\x3', 
		'\x191', '\x3', '\x191', '\x3', '\x191', '\x5', '\x191', '\x2522', '\n', 
		'\x191', '\x3', '\x192', '\x3', '\x192', '\x3', '\x192', '\x3', '\x192', 
		'\x3', '\x192', '\x3', '\x192', '\x3', '\x192', '\x3', '\x192', '\x3', 
		'\x193', '\x5', '\x193', '\x252D', '\n', '\x193', '\x3', '\x193', '\x3', 
		'\x193', '\x5', '\x193', '\x2531', '\n', '\x193', '\x5', '\x193', '\x2533', 
		'\n', '\x193', '\x3', '\x193', '\x5', '\x193', '\x2536', '\n', '\x193', 
		'\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', 
		'\x193', '\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', '\x193', 
		'\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', 
		'\x193', '\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', '\x193', 
		'\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x5', 
		'\x193', '\x254E', '\n', '\x193', '\x3', '\x194', '\x3', '\x194', '\x3', 
		'\x194', '\x3', '\x194', '\x3', '\x194', '\x3', '\x194', '\x3', '\x194', 
		'\x3', '\x194', '\x3', '\x195', '\x3', '\x195', '\x3', '\x195', '\x3', 
		'\x195', '\x3', '\x195', '\x3', '\x195', '\x3', '\x195', '\x3', '\x195', 
		'\x3', '\x195', '\x3', '\x195', '\x3', '\x196', '\x3', '\x196', '\x3', 
		'\x196', '\a', '\x196', '\x2565', '\n', '\x196', '\f', '\x196', '\xE', 
		'\x196', '\x2568', '\v', '\x196', '\x3', '\x197', '\x3', '\x197', '\x5', 
		'\x197', '\x256C', '\n', '\x197', '\x3', '\x198', '\x3', '\x198', '\x3', 
		'\x198', '\x3', '\x198', '\x3', '\x198', '\x3', '\x198', '\x3', '\x198', 
		'\x3', '\x198', '\x3', '\x198', '\x3', '\x198', '\x3', '\x198', '\x3', 
		'\x198', '\x3', '\x198', '\x3', '\x198', '\x3', '\x198', '\x3', '\x198', 
		'\a', '\x198', '\x257E', '\n', '\x198', '\f', '\x198', '\xE', '\x198', 
		'\x2581', '\v', '\x198', '\x3', '\x198', '\x5', '\x198', '\x2584', '\n', 
		'\x198', '\x3', '\x198', '\x3', '\x198', '\x5', '\x198', '\x2588', '\n', 
		'\x198', '\x3', '\x199', '\x3', '\x199', '\x3', '\x199', '\x3', '\x199', 
		'\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', 
		'\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', 
		'\x3', '\x19A', '\x5', '\x19A', '\x2598', '\n', '\x19A', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x5', '\x19B', '\x25A0', '\n', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x5', '\x19B', '\x25B6', '\n', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x5', '\x19B', '\x25F0', '\n', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x5', '\x19B', '\x25F4', '\n', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\x5', '\x19B', '\x261E', '\n', 
		'\x19B', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', 
		'\x3', '\x19C', '\x5', '\x19C', '\x2625', '\n', '\x19C', '\x3', '\x19D', 
		'\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x5', '\x19D', '\x262B', 
		'\n', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', 
		'\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', 
		'\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x5', '\x19D', '\x2638', 
		'\n', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', 
		'\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', 
		'\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', 
		'\x19D', '\x5', '\x19D', '\x2647', '\n', '\x19D', '\x3', '\x19D', '\x3', 
		'\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', 
		'\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x5', '\x19D', '\x2652', 
		'\n', '\x19D', '\x3', '\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x5', 
		'\x19E', '\x2657', '\n', '\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x3', 
		'\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x3', '\x19E', 
		'\x3', '\x19E', '\x5', '\x19E', '\x2661', '\n', '\x19E', '\x3', '\x19E', 
		'\x3', '\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x3', 
		'\x19E', '\x3', '\x19E', '\x5', '\x19E', '\x266A', '\n', '\x19E', '\x3', 
		'\x19F', '\x3', '\x19F', '\x3', '\x19F', '\x3', '\x19F', '\x3', '\x19F', 
		'\x3', '\x19F', '\x3', '\x19F', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', 
		'\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', 
		'\x3', '\x1A1', '\x3', '\x1A1', '\x3', '\x1A1', '\x3', '\x1A1', '\x3', 
		'\x1A1', '\x3', '\x1A1', '\x3', '\x1A1', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A3', '\x3', 
		'\x1A3', '\x3', '\x1A3', '\x3', '\x1A3', '\x3', '\x1A3', '\x3', '\x1A4', 
		'\x5', '\x1A4', '\x268C', '\n', '\x1A4', '\x3', '\x1A4', '\x3', '\x1A4', 
		'\x3', '\x1A5', '\x5', '\x1A5', '\x2691', '\n', '\x1A5', '\x3', '\x1A5', 
		'\x3', '\x1A5', '\x3', '\x1A6', '\x3', '\x1A6', '\x5', '\x1A6', '\x2697', 
		'\n', '\x1A6', '\x3', '\x1A7', '\x5', '\x1A7', '\x269A', '\n', '\x1A7', 
		'\x3', '\x1A7', '\x3', '\x1A7', '\x3', '\x1A7', '\x5', '\x1A7', '\x269F', 
		'\n', '\x1A7', '\x3', '\x1A7', '\a', '\x1A7', '\x26A2', '\n', '\x1A7', 
		'\f', '\x1A7', '\xE', '\x1A7', '\x26A5', '\v', '\x1A7', '\x3', '\x1A7', 
		'\x3', '\x1A7', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', 
		'\x1A8', '\x5', '\x1A8', '\x26AD', '\n', '\x1A8', '\x3', '\x1A8', '\a', 
		'\x1A8', '\x26B0', '\n', '\x1A8', '\f', '\x1A8', '\xE', '\x1A8', '\x26B3', 
		'\v', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A9', '\x5', 
		'\x1A9', '\x26B8', '\n', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', 
		'\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\a', '\x1A9', '\x26BF', '\n', 
		'\x1A9', '\f', '\x1A9', '\xE', '\x1A9', '\x26C2', '\v', '\x1A9', '\x3', 
		'\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', 
		'\a', '\x1A9', '\x26C9', '\n', '\x1A9', '\f', '\x1A9', '\xE', '\x1A9', 
		'\x26CC', '\v', '\x1A9', '\x5', '\x1A9', '\x26CE', '\n', '\x1A9', '\x3', 
		'\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', 
		'\x3', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', 
		'\x1A9', '\a', '\x1A9', '\x26DA', '\n', '\x1A9', '\f', '\x1A9', '\xE', 
		'\x1A9', '\x26DD', '\v', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', 
		'\x1A9', '\x5', '\x1A9', '\x26E2', '\n', '\x1A9', '\x3', '\x1A9', '\x3', 
		'\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', 
		'\x5', '\x1A9', '\x26EA', '\n', '\x1A9', '\x3', '\x1AA', '\x3', '\x1AA', 
		'\x5', '\x1AA', '\x26EE', '\n', '\x1AA', '\x3', '\x1AB', '\x3', '\x1AB', 
		'\x3', '\x1AB', '\x3', '\x1AB', '\a', '\x1AB', '\x26F4', '\n', '\x1AB', 
		'\f', '\x1AB', '\xE', '\x1AB', '\x26F7', '\v', '\x1AB', '\x3', '\x1AB', 
		'\x3', '\x1AB', '\x3', '\x1AC', '\x3', '\x1AC', '\x5', '\x1AC', '\x26FD', 
		'\n', '\x1AC', '\x3', '\x1AD', '\x3', '\x1AD', '\x3', '\x1AD', '\x3', 
		'\x1AD', '\x3', '\x1AD', '\x3', '\x1AD', '\x3', '\x1AD', '\x3', '\x1AD', 
		'\x3', '\x1AD', '\a', '\x1AD', '\x2708', '\n', '\x1AD', '\f', '\x1AD', 
		'\xE', '\x1AD', '\x270B', '\v', '\x1AD', '\x3', '\x1AE', '\x3', '\x1AE', 
		'\x3', '\x1AE', '\a', '\x1AE', '\x2710', '\n', '\x1AE', '\f', '\x1AE', 
		'\xE', '\x1AE', '\x2713', '\v', '\x1AE', '\x3', '\x1AF', '\x3', '\x1AF', 
		'\x3', '\x1AF', '\x3', '\x1AF', '\x3', '\x1AF', '\x3', '\x1AF', '\x3', 
		'\x1AF', '\x3', '\x1AF', '\x3', '\x1AF', '\x3', '\x1AF', '\x5', '\x1AF', 
		'\x271F', '\n', '\x1AF', '\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', 
		'\x3', '\x1B0', '\x3', '\x1B0', '\x5', '\x1B0', '\x2726', '\n', '\x1B0', 
		'\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x5', 
		'\x1B0', '\x272C', '\n', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x5', 
		'\x1B0', '\x2730', '\n', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x3', 
		'\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', 
		'\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x3', 
		'\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\x5', '\x1B0', 
		'\x2741', '\n', '\x1B0', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', 
		'\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', 
		'\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', 
		'\x3', '\x1B1', '\x5', '\x1B1', '\x2750', '\n', '\x1B1', '\x5', '\x1B1', 
		'\x2752', '\n', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', 
		'\x5', '\x1B1', '\x2757', '\n', '\x1B1', '\x3', '\x1B2', '\x5', '\x1B2', 
		'\x275A', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B3', 
		'\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x5', 
		'\x1B3', '\x2763', '\n', '\x1B3', '\x3', '\x1B3', '\x5', '\x1B3', '\x2766', 
		'\n', '\x1B3', '\x3', '\x1B3', '\x5', '\x1B3', '\x2769', '\n', '\x1B3', 
		'\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', 
		'\x1B4', '\x3', '\x1B5', '\x3', '\x1B5', '\x3', '\x1B5', '\x3', '\x1B5', 
		'\x3', '\x1B5', '\x3', '\x1B5', '\x5', '\x1B5', '\x2776', '\n', '\x1B5', 
		'\x3', '\x1B6', '\x3', '\x1B6', '\x5', '\x1B6', '\x277A', '\n', '\x1B6', 
		'\x3', '\x1B7', '\x3', '\x1B7', '\x3', '\x1B7', '\x3', '\x1B7', '\x3', 
		'\x1B7', '\x3', '\x1B7', '\x5', '\x1B7', '\x2782', '\n', '\x1B7', '\x3', 
		'\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\x5', '\x1B8', 
		'\x2788', '\n', '\x1B8', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x3', '\x1B9', '\a', '\x1B9', '\x278E', '\n', '\x1B9', '\f', '\x1B9', 
		'\xE', '\x1B9', '\x2791', '\v', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x3', '\x1B9', '\x3', '\x1B9', '\x5', '\x1B9', '\x2797', '\n', '\x1B9', 
		'\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x5', 
		'\x1B9', '\x279D', '\n', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', 
		'\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', 
		'\x1B9', '\x3', '\x1B9', '\x5', '\x1B9', '\x27AC', '\n', '\x1B9', '\x3', 
		'\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', 
		'\x3', '\x1BA', '\x3', '\x1BA', '\x5', '\x1BA', '\x27B5', '\n', '\x1BA', 
		'\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BB', '\x3', '\x1BB', '\x5', 
		'\x1BB', '\x27BB', '\n', '\x1BB', '\x3', '\x1BC', '\x3', '\x1BC', '\x3', 
		'\x1BC', '\x3', '\x1BC', '\x5', '\x1BC', '\x27C1', '\n', '\x1BC', '\x3', 
		'\x1BC', '\x5', '\x1BC', '\x27C4', '\n', '\x1BC', '\x3', '\x1BC', '\x3', 
		'\x1BC', '\x5', '\x1BC', '\x27C8', '\n', '\x1BC', '\x3', '\x1BC', '\x3', 
		'\x1BC', '\x3', '\x1BC', '\a', '\x1BC', '\x27CD', '\n', '\x1BC', '\f', 
		'\x1BC', '\xE', '\x1BC', '\x27D0', '\v', '\x1BC', '\x3', '\x1BD', '\x3', 
		'\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x5', '\x1BD', 
		'\x27D7', '\n', '\x1BD', '\x3', '\x1BD', '\x5', '\x1BD', '\x27DA', '\n', 
		'\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', 
		'\x5', '\x1BD', '\x27E0', '\n', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', 
		'\x3', '\x1BD', '\x3', '\x1BD', '\x5', '\x1BD', '\x27E6', '\n', '\x1BD', 
		'\x5', '\x1BD', '\x27E8', '\n', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', 
		'\x3', '\x1BD', '\x3', '\x1BD', '\x5', '\x1BD', '\x27EE', '\n', '\x1BD', 
		'\x3', '\x1BD', '\x5', '\x1BD', '\x27F1', '\n', '\x1BD', '\x5', '\x1BD', 
		'\x27F3', '\n', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', 
		'\x3', '\x1BD', '\x5', '\x1BD', '\x27F9', '\n', '\x1BD', '\x5', '\x1BD', 
		'\x27FB', '\n', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BE', 
		'\x3', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', 
		'\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', 
		'\x5', '\x1BE', '\x2809', '\n', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', 
		'\x3', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x5', '\x1BE', '\x2810', 
		'\n', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BF', '\x3', 
		'\x1BF', '\x3', '\x1BF', '\x3', '\x1BF', '\x3', '\x1BF', '\x5', '\x1BF', 
		'\x2819', '\n', '\x1BF', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', 
		'\x3', '\x1C0', '\x3', '\x1C0', '\x5', '\x1C0', '\x2820', '\n', '\x1C0', 
		'\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', 
		'\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', 
		'\x3', '\x1C1', '\x5', '\x1C1', '\x282C', '\n', '\x1C1', '\x3', '\x1C1', 
		'\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', 
		'\x1C1', '\x2833', '\n', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', 
		'\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x5', '\x1C2', '\x283A', '\n', 
		'\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', 
		'\x3', '\x1C2', '\x5', '\x1C2', '\x2841', '\n', '\x1C2', '\x3', '\x1C2', 
		'\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x5', '\x1C2', '\x2847', 
		'\n', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', 
		'\x1C2', '\x3', '\x1C2', '\x5', '\x1C2', '\x284E', '\n', '\x1C2', '\x3', 
		'\x1C2', '\x5', '\x1C2', '\x2851', '\n', '\x1C2', '\x3', '\x1C3', '\x3', 
		'\x1C3', '\x3', '\x1C3', '\x5', '\x1C3', '\x2856', '\n', '\x1C3', '\x3', 
		'\x1C3', '\x3', '\x1C3', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', 
		'\x5', '\x1C4', '\x285D', '\n', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', 
		'\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x5', 
		'\x1C5', '\x2865', '\n', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x5', 
		'\x1C5', '\x2869', '\n', '\x1C5', '\x3', '\x1C5', '\x5', '\x1C5', '\x286C', 
		'\n', '\x1C5', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x2874', '\n', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x2878', '\n', 
		'\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x287B', '\n', '\x1C6', '\x3', 
		'\x1C7', '\x3', '\x1C7', '\x5', '\x1C7', '\x287F', '\n', '\x1C7', '\x3', 
		'\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', '\x2884', '\n', 
		'\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', 
		'\x5', '\x1C8', '\x288A', '\n', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', 
		'\x3', '\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', '\x2890', '\n', '\x1C8', 
		'\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x5', 
		'\x1C8', '\x2896', '\n', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', 
		'\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', '\x289C', '\n', '\x1C8', '\x3', 
		'\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', 
		'\x28A2', '\n', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', 
		'\x3', '\x1C8', '\x5', '\x1C8', '\x28A8', '\n', '\x1C8', '\x3', '\x1C8', 
		'\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', '\x28AE', 
		'\n', '\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', '\x28B1', '\n', '\x1C8', 
		'\x3', '\x1C9', '\x3', '\x1C9', '\x5', '\x1C9', '\x28B5', '\n', '\x1C9', 
		'\x3', '\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', '\x5', '\x1C9', '\x28BA', 
		'\n', '\x1C9', '\a', '\x1C9', '\x28BC', '\n', '\x1C9', '\f', '\x1C9', 
		'\xE', '\x1C9', '\x28BF', '\v', '\x1C9', '\x3', '\x1CA', '\x3', '\x1CA', 
		'\x3', '\x1CA', '\a', '\x1CA', '\x28C4', '\n', '\x1CA', '\f', '\x1CA', 
		'\xE', '\x1CA', '\x28C7', '\v', '\x1CA', '\x3', '\x1CB', '\x3', '\x1CB', 
		'\x5', '\x1CB', '\x28CB', '\n', '\x1CB', '\x3', '\x1CC', '\x3', '\x1CC', 
		'\x3', '\x1CD', '\x3', '\x1CD', '\x3', '\x1CE', '\x5', '\x1CE', '\x28D2', 
		'\n', '\x1CE', '\x3', '\x1CE', '\x3', '\x1CE', '\x3', '\x1CF', '\x3', 
		'\x1CF', '\x3', '\x1CF', '\x3', '\x1CF', '\x3', '\x1CF', '\x5', '\x1CF', 
		'\x28DB', '\n', '\x1CF', '\x5', '\x1CF', '\x28DD', '\n', '\x1CF', '\x3', 
		'\x1D0', '\x3', '\x1D0', '\x3', '\x1D0', '\x3', '\x1D0', '\x3', '\x1D0', 
		'\x5', '\x1D0', '\x28E4', '\n', '\x1D0', '\x3', '\x1D1', '\x3', '\x1D1', 
		'\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', 
		'\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', 
		'\x28F0', '\n', '\x1D1', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', 
		'\x5', '\x1D2', '\x28F5', '\n', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', 
		'\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', 
		'\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x5', '\x1D2', '\x2900', '\n', 
		'\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', 
		'\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x5', 
		'\x1D2', '\x290A', '\n', '\x1D2', '\x5', '\x1D2', '\x290C', '\n', '\x1D2', 
		'\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x5', 
		'\x1D2', '\x2912', '\n', '\x1D2', '\x5', '\x1D2', '\x2914', '\n', '\x1D2', 
		'\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x5', '\x1D2', '\x2919', 
		'\n', '\x1D2', '\x5', '\x1D2', '\x291B', '\n', '\x1D2', '\x3', '\x1D2', 
		'\x5', '\x1D2', '\x291E', '\n', '\x1D2', '\x3', '\x1D3', '\x3', '\x1D3', 
		'\x5', '\x1D3', '\x2922', '\n', '\x1D3', '\x3', '\x1D4', '\x3', '\x1D4', 
		'\x5', '\x1D4', '\x2926', '\n', '\x1D4', '\x3', '\x1D5', '\x3', '\x1D5', 
		'\x3', '\x1D5', '\x3', '\x1D5', '\x5', '\x1D5', '\x292C', '\n', '\x1D5', 
		'\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', '\x3', 
		'\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', '\x5', '\x1D5', '\x2935', '\n', 
		'\x1D5', '\x3', '\x1D5', '\x5', '\x1D5', '\x2938', '\n', '\x1D5', '\x5', 
		'\x1D5', '\x293A', '\n', '\x1D5', '\x3', '\x1D6', '\x5', '\x1D6', '\x293D', 
		'\n', '\x1D6', '\x3', '\x1D6', '\x3', '\x1D6', '\x3', '\x1D6', '\x3', 
		'\x1D6', '\x5', '\x1D6', '\x2943', '\n', '\x1D6', '\x3', '\x1D6', '\x3', 
		'\x1D6', '\x5', '\x1D6', '\x2947', '\n', '\x1D6', '\x3', '\x1D6', '\x5', 
		'\x1D6', '\x294A', '\n', '\x1D6', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', 
		'\x5', '\x1D7', '\x2953', '\n', '\x1D7', '\x3', '\x1D8', '\x3', '\x1D8', 
		'\x3', '\x1D8', '\x3', '\x1D8', '\x3', '\x1D8', '\x3', '\x1D8', '\x3', 
		'\x1D8', '\x5', '\x1D8', '\x295C', '\n', '\x1D8', '\x3', '\x1D9', '\x3', 
		'\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', 
		'\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x5', 
		'\x1D9', '\x2968', '\n', '\x1D9', '\x3', '\x1D9', '\x5', '\x1D9', '\x296B', 
		'\n', '\x1D9', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x296F', 
		'\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', 
		'\x1DA', '\x5', '\x1DA', '\x2975', '\n', '\x1DA', '\x3', '\x1DA', '\x5', 
		'\x1DA', '\x2978', '\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', 
		'\x1DA', '\x297C', '\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', 
		'\x1DA', '\x3', '\x1DA', '\x5', '\x1DA', '\x2982', '\n', '\x1DA', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x2987', '\n', 
		'\x1DB', '\x3', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\x5', '\x1DC', 
		'\x298C', '\n', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\x5', '\x1DC', 
		'\x2990', '\n', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\x5', '\x1DC', 
		'\x2994', '\n', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DC', '\x5', '\x1DC', 
		'\x2998', '\n', '\x1DC', '\x3', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DE', 
		'\x3', '\x1DE', '\x3', '\x1DE', '\x5', '\x1DE', '\x299F', '\n', '\x1DE', 
		'\x3', '\x1DF', '\x3', '\x1DF', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', 
		'\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', 
		'\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', 
		'\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x5', '\x1E0', 
		'\x29B2', '\n', '\x1E0', '\x3', '\x1E1', '\x3', '\x1E1', '\x3', '\x1E2', 
		'\x3', '\x1E2', '\x5', '\x1E2', '\x29B8', '\n', '\x1E2', '\x3', '\x1E2', 
		'\x2', '\x4', '^', '\x2CC', '\x1E3', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', 
		'\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', 
		'\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', 
		'\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', 
		'\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', 
		'\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', 
		'\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', 
		'\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', 
		'\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', 
		'\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', 
		'\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x180', 
		'\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', '\x190', 
		'\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', '\x1A0', 
		'\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', '\x1B0', 
		'\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', '\x1C0', 
		'\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', '\x1D0', 
		'\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', '\x1E0', 
		'\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE', '\x1F0', 
		'\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE', '\x200', 
		'\x202', '\x204', '\x206', '\x208', '\x20A', '\x20C', '\x20E', '\x210', 
		'\x212', '\x214', '\x216', '\x218', '\x21A', '\x21C', '\x21E', '\x220', 
		'\x222', '\x224', '\x226', '\x228', '\x22A', '\x22C', '\x22E', '\x230', 
		'\x232', '\x234', '\x236', '\x238', '\x23A', '\x23C', '\x23E', '\x240', 
		'\x242', '\x244', '\x246', '\x248', '\x24A', '\x24C', '\x24E', '\x250', 
		'\x252', '\x254', '\x256', '\x258', '\x25A', '\x25C', '\x25E', '\x260', 
		'\x262', '\x264', '\x266', '\x268', '\x26A', '\x26C', '\x26E', '\x270', 
		'\x272', '\x274', '\x276', '\x278', '\x27A', '\x27C', '\x27E', '\x280', 
		'\x282', '\x284', '\x286', '\x288', '\x28A', '\x28C', '\x28E', '\x290', 
		'\x292', '\x294', '\x296', '\x298', '\x29A', '\x29C', '\x29E', '\x2A0', 
		'\x2A2', '\x2A4', '\x2A6', '\x2A8', '\x2AA', '\x2AC', '\x2AE', '\x2B0', 
		'\x2B2', '\x2B4', '\x2B6', '\x2B8', '\x2BA', '\x2BC', '\x2BE', '\x2C0', 
		'\x2C2', '\x2C4', '\x2C6', '\x2C8', '\x2CA', '\x2CC', '\x2CE', '\x2D0', 
		'\x2D2', '\x2D4', '\x2D6', '\x2D8', '\x2DA', '\x2DC', '\x2DE', '\x2E0', 
		'\x2E2', '\x2E4', '\x2E6', '\x2E8', '\x2EA', '\x2EC', '\x2EE', '\x2F0', 
		'\x2F2', '\x2F4', '\x2F6', '\x2F8', '\x2FA', '\x2FC', '\x2FE', '\x300', 
		'\x302', '\x304', '\x306', '\x308', '\x30A', '\x30C', '\x30E', '\x310', 
		'\x312', '\x314', '\x316', '\x318', '\x31A', '\x31C', '\x31E', '\x320', 
		'\x322', '\x324', '\x326', '\x328', '\x32A', '\x32C', '\x32E', '\x330', 
		'\x332', '\x334', '\x336', '\x338', '\x33A', '\x33C', '\x33E', '\x340', 
		'\x342', '\x344', '\x346', '\x348', '\x34A', '\x34C', '\x34E', '\x350', 
		'\x352', '\x354', '\x356', '\x358', '\x35A', '\x35C', '\x35E', '\x360', 
		'\x362', '\x364', '\x366', '\x368', '\x36A', '\x36C', '\x36E', '\x370', 
		'\x372', '\x374', '\x376', '\x378', '\x37A', '\x37C', '\x37E', '\x380', 
		'\x382', '\x384', '\x386', '\x388', '\x38A', '\x38C', '\x38E', '\x390', 
		'\x392', '\x394', '\x396', '\x398', '\x39A', '\x39C', '\x39E', '\x3A0', 
		'\x3A2', '\x3A4', '\x3A6', '\x3A8', '\x3AA', '\x3AC', '\x3AE', '\x3B0', 
		'\x3B2', '\x3B4', '\x3B6', '\x3B8', '\x3BA', '\x3BC', '\x3BE', '\x3C0', 
		'\x3C2', '\x2', '\x8C', '\x3', '\x2', '\x31B', '\x31C', '\x4', '\x2', 
		'\x31B', '\x31B', '\x320', '\x320', '\x4', '\x2', '\x1D8', '\x1D8', '\x2F0', 
		'\x2F1', '\x4', '\x2', '\x31B', '\x31C', '\x320', '\x320', '\x4', '\x2', 
		'\xBC', '\xBC', '\x2D1', '\x2D1', '\x5', '\x2', '\x318', '\x318', '\x31B', 
		'\x31B', '\x320', '\x320', '\x5', '\x2', '}', '}', '\x12C', '\x12C', '\x16C', 
		'\x16C', '\x4', '\x2', '\xE3', '\xE3', '\xE6', '\xE6', '\x3', '\x2', '\x320', 
		'\x321', '\x3', '\x2', '\x125', '\x129', '\x4', '\x2', '\x1C6', '\x1C6', 
		'\x279', '\x279', '\x4', '\x2', '\x12F', '\x12F', '\x273', '\x273', '\x5', 
		'\x2', 'U', 'U', '\x12F', '\x12F', '\x273', '\x273', '\x5', '\x2', '\xD6', 
		'\xD6', '\x101', '\x101', '\x2C4', '\x2C5', '\x4', '\x2', '\x13', '\x13', 
		'\x2E8', '\x2E8', '\x4', '\x2', '\x17', '\x17', '\x240', '\x240', '\x4', 
		'\x2', '\x6', '\x6', '\x2A0', '\x2A0', '\x5', '\x2', '\x6', '\x6', '\x265', 
		'\x265', '\x29E', '\x29E', '\x4', '\x2', '\n', '\n', 'I', 'I', '\x4', 
		'\x2', '\x4', '\x4', 'h', 'h', '\x4', '\x2', '\x1F2', '\x1F2', '\x2D2', 
		'\x2D2', '\x4', '\x2', '\x1E3', '\x1E3', '\x1EC', '\x1EC', '\x4', '\x2', 
		'\x31C', '\x31C', '\x320', '\x320', '\x4', '\x2', '\x22A', '\x22A', '\x24F', 
		'\x24F', '\x4', '\x2', '\b', '\t', '\xDC', '\xDC', '\x5', '\x2', '\xD6', 
		'\xD6', '\xF8', '\xF8', '\xFA', '\xFA', '\x4', '\x2', '\x14E', '\x14E', 
		'\x151', '\x151', '\x4', '\x2', '\v', '\v', '\xEE', '\xEE', '\x3', '\x2', 
		'\x31E', '\x31F', '\x4', '\x2', '\x4', '\x4', '\x13E', '\x13E', '\x4', 
		'\x2', '\xB7', '\xB7', '\x17C', '\x17C', '\x3', '\x2', '\x107', '\x108', 
		'\x4', '\x2', '\x31C', '\x31C', '\x320', '\x321', '\x4', '\x2', '\xCF', 
		'\xCF', '\x16A', '\x16A', '\x4', '\x2', '\xCA', '\xCA', '\x147', '\x147', 
		'\x4', '\x2', '\x10E', '\x10E', '\x1E3', '\x1E3', '\x4', '\x2', '\x31E', 
		'\x31E', '\x320', '\x320', '\x4', '\x2', '^', '^', '\x92', '\x92', '\x6', 
		'\x2', ']', ']', '\xA3', '\xA3', '\x133', '\x133', '\x16D', '\x16D', '\x4', 
		'\x2', '\x1E', '\x1E', '\x202', '\x202', '\x4', '\x2', '\xA3', '\xA3', 
		'\x16D', '\x16D', '\x4', '\x2', ']', ']', '\x16D', '\x16D', '\x5', '\x2', 
		'\x20D', '\x20D', '\x24F', '\x24F', '\x2EC', '\x2EC', '\x4', '\x2', '\x301', 
		'\x301', '\x31C', '\x31C', '\x5', '\x2', '\x42', '\x42', '\x140', '\x140', 
		'\x1F8', '\x1F8', '\x4', '\x2', 'Z', 'Z', '\x320', '\x320', '\x4', '\x2', 
		'Z', 'Z', '\x31C', '\x31C', '\x4', '\x2', '\x239', '\x239', '\x320', '\x320', 
		'\x5', '\x2', '\x20D', '\x20D', '\x22A', '\x22A', '\x24F', '\x24F', '\a', 
		'\x2', '\x188', '\x18A', '\x1DD', '\x1DD', '\x1DF', '\x1DF', '\x29A', 
		'\x29C', '\x2F6', '\x2F7', '\x4', '\x2', '\x86', '\x86', '\x8C', '\x8C', 
		'\x5', '\x2', '\x218', '\x218', '\x23F', '\x23F', '\x250', '\x250', '\x5', 
		'\x2', '\r', '\r', '\x15A', '\x15A', '\x222', '\x222', '\x4', '\x2', '\xD6', 
		'\xD6', '\xF4', '\xF4', '\x3', '\x2', '\x103', '\x104', '\x5', '\x2', 
		']', ']', '\xA3', '\xA3', '\x16D', '\x16D', '\x4', '\x2', '\x86', '\x86', 
		'\x18C', '\x18C', '\x4', '\x2', '\x27C', '\x27D', '\x2A1', '\x2A1', '\x4', 
		'\x2', '\xF6', '\xF6', '\x2BD', '\x2BD', '\x4', '\x2', '\x6', '\x6', '\x9F', 
		'\x9F', '\x5', '\x2', '\x1EF', '\x1EF', '\x2BF', '\x2BF', '\x308', '\x308', 
		'\x5', '\x2', '\x157', '\x157', '\x19C', '\x19C', '\x1E3', '\x1E3', '\x5', 
		'\x2', '\x1D1', '\x1D1', '\x21A', '\x21A', '\x258', '\x258', '\x4', '\x2', 
		'\x210', '\x210', '\x239', '\x239', '\x4', '\x2', '\x6', '\x6', '\xA7', 
		'\xA8', '\x5', '\x2', '\xAC', '\xAC', '\xD1', '\xD1', '\xDF', '\xDF', 
		'\x5', '\x2', '\x114', '\x114', '\x154', '\x154', '\x1E5', '\x1E5', '\x4', 
		'\x2', 'l', 'l', '\x1E5', '\x1E5', '\x5', '\x2', '\x6', '\x6', '\x180', 
		'\x180', '\x283', '\x283', '\x4', '\x2', '\x8D', '\x8D', '\xE3', '\xE3', 
		'\x5', '\x2', '\x1EA', '\x1EA', '\x274', '\x274', '\x277', '\x277', '\x4', 
		'\x2', '\x29E', '\x29E', '\x2A0', '\x2A0', '\x5', '\x2', '\x25E', '\x25E', 
		'\x2B5', '\x2B5', '\x2D6', '\x2D6', '\x5', '\x2', '\x191', '\x191', '\x1E5', 
		'\x1E5', '\x208', '\x208', '\x4', '\x2', '\x119', '\x119', '\x2E6', '\x2E6', 
		'\x4', '\x2', '\x208', '\x208', '\x2D5', '\x2D5', '\x5', '\x2', '\x8D', 
		'\x8D', '\x1AE', '\x1AE', '\x2D5', '\x2D5', '\x5', '\x2', '\xD6', '\xD6', 
		'\x1B6', '\x1B6', '\x2F4', '\x2F4', '\x4', '\x2', '\x258', '\x258', '\x2C7', 
		'\x2C7', '\x4', '\x2', '\x82', '\x82', '\x1FE', '\x1FE', '\x5', '\x2', 
		'\x62', '\x62', '\x159', '\x159', '\x16F', '\x16F', '\x4', '\x2', '\x39', 
		'\x39', '\xDB', '\xDB', '\x4', '\x2', '\xA1', '\xA1', '\xD4', '\xD4', 
		'\x4', '\x2', '\xD8', '\xD8', '\x142', '\x142', '\x4', '\x2', '\xD3', 
		'\xD3', '\x209', '\x209', '\x4', '\x2', '\xDA', '\xDA', '\x1B6', '\x1B6', 
		'\x4', '\x2', '\x43', '\x43', '\x153', '\x153', '\x4', '\x2', '\xD7', 
		'\xD7', '\x11F', '\x11F', '\x4', '\x2', '\xBA', '\xBA', '\xD9', '\xD9', 
		'\x4', '\x2', '\x188', '\x18A', '\x2F7', '\x2F7', '\x4', '\x2', '\x172', 
		'\x172', '\x23D', '\x23D', '\x3', '\x2', '\x27C', '\x27D', '\x4', '\x2', 
		'\x82', '\x82', '\x321', '\x321', '\x4', '\x2', '\x1D4', '\x1D4', '\x1EF', 
		'\x1EF', '\x4', '\x2', '\x1F6', '\x1F6', '\x2DC', '\x2DC', '\x4', '\x2', 
		'\x157', '\x157', '\x176', '\x176', '\x3', '\x2', '\x161', '\x162', '\x6', 
		'\x2', '\x1AF', '\x1AF', '\x27E', '\x27E', '\x2CB', '\x2CB', '\x320', 
		'\x320', '\x4', '\x2', '\x1BF', '\x1BF', '\x1E7', '\x1E7', '\x4', '\x2', 
		'\x10', '\x10', ';', ';', '\x4', '\x2', '\x224', '\x224', '\x2CC', '\x2CC', 
		'\x4', '\x2', '\x20A', '\x20A', '\x2C1', '\x2C1', '\x6', '\x2', '\x1E8', 
		'\x1E8', '\x1FD', '\x1FD', '\x22F', '\x22F', '\x2DD', '\x2DD', '\x5', 
		'\x2', '\x27A', '\x27A', '\x29E', '\x29E', '\x2C2', '\x2C2', '\x4', '\x2', 
		'\x182', '\x182', '\x2A7', '\x2A7', '\x3', '\x2', '\x33B', '\x33D', '\x5', 
		'\x2', '\x330', '\x330', '\x33E', '\x33F', '\x341', '\x343', '\x3', '\x2', 
		'\x33E', '\x33F', '\x5', '\x2', '\x6', '\x6', '\r', '\r', '\x144', '\x144', 
		'\x4', '\x2', '\x6', '\x6', '\x63', '\x63', '\x3', '\x2', '\x322', '\x323', 
		'\x4', '\x2', '\x2BA', '\x2BA', '\x2BD', '\x2BD', '\x4', '\x2', '\x203', 
		'\x203', '\x264', '\x264', '\x4', '\x2', '\x3', '\x3', '\x313', '\x313', 
		'\x4', '\x2', '\x19C', '\x19C', '\x284', '\x284', '\x5', '\x2', '\x1A8', 
		'\x1A8', '\x2B8', '\x2B8', '\x2FC', '\x2FC', '\x4', '\x2', '\x11', '\x11', 
		'_', '_', '\x4', '\x2', '\xEF', '\xEF', '\x216', '\x216', '\x5', '\x2', 
		'\xCA', '\xCA', '\x1BD', '\x1BD', '\x216', '\x216', '\x5', '\x2', '\xCA', 
		'\xCA', '\x216', '\x216', '\x23E', '\x23E', '\x4', '\x2', '\xE0', '\xE0', 
		'\x31B', '\x31C', '\x5', '\x2', '\x8D', '\x8D', '\xB2', '\xB2', '\x120', 
		'\x120', '\x6', '\x2', '\xCA', '\xCA', '\x216', '\x216', '\x23E', '\x23E', 
		'\x2A8', '\x2A8', '\x4', '\x2', '\x31B', '\x31B', '\x31D', '\x31D', '\x5', 
		'\x2', '\x1DB', '\x1DB', '\x299', '\x299', '\x2BB', '\x2BB', '\b', '\x2', 
		'\x1A4', '\x1A4', '\x243', '\x243', '\x253', '\x253', '\x2E0', '\x2E1', 
		'\x2E5', '\x2E5', '\x306', '\x307', '\x3', '\x2', '\x1C2', '\x1C3', '\x4', 
		'\x2', '\x204', '\x204', '\x232', '\x232', '\x4', '\x2', '\x230', '\x230', 
		'\x233', '\x233', '\x4', '\x2', '\x298', '\x298', '\x2BD', '\x2BD', '\x5', 
		'\x2', '\x8D', '\x8D', '\xE3', '\xE3', '\x29E', '\x29E', '\x4', '\x2', 
		'\x35', '\x35', '\xD5', '\xD5', '\x3', '\x2', '\x111', '\x112', '\x4', 
		'\x2', '\x243', '\x243', '\x31C', '\x31C', '\x4', '\x2', '\x31C', '\x31C', 
		'\x322', '\x322', '\x1F', '\x2', '(', '(', 'S', 'S', 's', 's', '\x83', 
		'\x84', '\x87', '\x87', '\xA1', '\xA1', '\xAD', '\xAD', '\xBE', '\xBF', 
		'\xE4', '\xE4', '\xF2', '\xF2', '\x106', '\x106', '\x108', '\x108', '\x10A', 
		'\x10A', '\x11B', '\x11C', '\x123', '\x123', '\x12A', '\x12A', '\x138', 
		'\x138', '\x141', '\x141', '\x145', '\x145', '\x14C', '\x14C', '\x14E', 
		'\x14E', '\x15A', '\x15A', '\x182', '\x1E8', '\x1EA', '\x21F', '\x221', 
		'\x228', '\x22A', '\x30B', '\x30D', '\x30F', '\x311', '\x311', '\x31D', 
		'\x31D', '\x3', '\x2', '\x328', '\x32F', '\a', '\x2', '\x20D', '\x20D', 
		'\x22A', '\x22A', '\x24F', '\x24F', '\x2EC', '\x2EC', '\x33D', '\x33D', 
		'\x2', '\x308D', '\x2', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x4', '\x3DD', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x3E3', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x3EE', '\x3', '\x2', '\x2', '\x2', '\n', '\x3F5', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x496', '\x3', '\x2', '\x2', '\x2', '\xE', '\x49D', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x4AB', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x4AD', '\x3', '\x2', '\x2', '\x2', '\x14', '\x4B8', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x4BC', '\x3', '\x2', '\x2', '\x2', '\x18', '\x4CA', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x4CC', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x4DD', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x4E9', '\x3', '\x2', '\x2', '\x2', '\"', '\x4EB', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x4ED', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x4EF', '\x3', '\x2', '\x2', '\x2', '(', '\x509', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x51A', '\x3', '\x2', '\x2', '\x2', ',', '\x527', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x556', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x558', '\x3', '\x2', '\x2', '\x2', '\x32', '\x567', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x569', '\x3', '\x2', '\x2', '\x2', '\x36', '\x586', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x59B', '\x3', '\x2', '\x2', '\x2', 
		':', '\x5A8', '\x3', '\x2', '\x2', '\x2', '<', '\x5AD', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x5B1', '\x3', '\x2', '\x2', '\x2', '@', '\x5B5', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x5C0', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x5C5', '\x3', '\x2', '\x2', '\x2', '\x46', '\x5C7', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x5CC', '\x3', '\x2', '\x2', '\x2', 'J', '\x5CE', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x5D0', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x5D3', '\x3', '\x2', '\x2', '\x2', 'P', '\x5D7', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x5DD', '\x3', '\x2', '\x2', '\x2', 'T', '\x5DF', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x5E2', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x5E4', '\x3', '\x2', '\x2', '\x2', 'Z', '\x5E7', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x5EC', '\x3', '\x2', '\x2', '\x2', '^', '\x5F7', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x600', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x604', '\x3', '\x2', '\x2', '\x2', '\x64', '\x606', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x60C', '\x3', '\x2', '\x2', '\x2', 'h', '\x60E', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x610', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x613', '\x3', '\x2', '\x2', '\x2', 'n', '\x61B', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x61D', '\x3', '\x2', '\x2', '\x2', 'r', '\x61F', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x635', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x648', '\x3', '\x2', '\x2', '\x2', 'x', '\x650', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x654', '\x3', '\x2', '\x2', '\x2', '|', '\x65C', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x66B', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x66D', '\x3', '\x2', '\x2', '\x2', '\x82', '\x699', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x86', '\x6AF', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x6B1', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x6B3', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x6B6', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x6BA', '\x3', '\x2', '\x2', '\x2', '\x90', '\x6C4', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x6CE', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x6FA', '\x3', '\x2', '\x2', '\x2', '\x96', '\x711', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x713', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x715', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x717', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x71C', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x71F', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x882', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x884', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x8BA', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x8BF', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x8EB', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x902', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x920', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x924', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x92A', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x930', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x934', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x938', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x93D', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x94B', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x951', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x957', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x967', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x96B', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x971', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x977', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\x97F', '\x3', '\x2', '\x2', '\x2', '\xCC', '\x985', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\x994', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x9AD', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\x9B2', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x9BD', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\x9C2', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\x9C6', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x9CA', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\x9CF', '\x3', '\x2', '\x2', '\x2', '\xE0', '\x9D4', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\x9D9', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\x9E7', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x9ED', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\x9F2', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x9FA', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\x9FE', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xA0F', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xA17', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xA1D', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xA2B', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xA41', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xA46', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xA4C', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\xA51', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xA55', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\xA71', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\xA7C', '\x3', '\x2', '\x2', '\x2', '\x104', '\xA85', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\xA92', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\xA9A', '\x3', '\x2', '\x2', '\x2', '\x10A', '\xA9F', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\xAAA', '\x3', '\x2', '\x2', '\x2', '\x10E', '\xAC8', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\xAE6', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\xAF4', '\x3', '\x2', '\x2', '\x2', '\x114', '\xB0C', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\xB1C', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\xB29', '\x3', '\x2', '\x2', '\x2', '\x11A', '\xB3C', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\xB49', '\x3', '\x2', '\x2', '\x2', '\x11E', '\xB52', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\xB70', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\xC63', '\x3', '\x2', '\x2', '\x2', '\x124', '\xC6C', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\xCA6', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\xCD7', '\x3', '\x2', '\x2', '\x2', '\x12A', '\xCD9', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\xD02', '\x3', '\x2', '\x2', '\x2', '\x12E', '\xD34', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\xD7A', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\xDBD', '\x3', '\x2', '\x2', '\x2', '\x134', '\xDCD', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\xDE9', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\xDFC', '\x3', '\x2', '\x2', '\x2', '\x13A', '\xE11', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\xE59', '\x3', '\x2', '\x2', '\x2', '\x13E', '\xEB8', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\xECE', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\xEDA', '\x3', '\x2', '\x2', '\x2', '\x144', '\xEF6', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\xF0B', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\xF25', '\x3', '\x2', '\x2', '\x2', '\x14A', '\xF2E', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\xF4E', '\x3', '\x2', '\x2', '\x2', '\x14E', '\xF58', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\xF68', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\xF74', '\x3', '\x2', '\x2', '\x2', '\x154', '\xF7D', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\xF8E', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\xFA6', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x1012', '\x3', '\x2', 
		'\x2', '\x2', '\x15C', '\x102C', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x1038', '\x3', '\x2', '\x2', '\x2', '\x160', '\x103F', '\x3', '\x2', 
		'\x2', '\x2', '\x162', '\x106B', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x1076', '\x3', '\x2', '\x2', '\x2', '\x166', '\x108A', '\x3', '\x2', 
		'\x2', '\x2', '\x168', '\x10B4', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x10BB', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x10C9', '\x3', '\x2', 
		'\x2', '\x2', '\x16E', '\x10DB', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x1121', '\x3', '\x2', '\x2', '\x2', '\x172', '\x114C', '\x3', '\x2', 
		'\x2', '\x2', '\x174', '\x1182', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x120B', '\x3', '\x2', '\x2', '\x2', '\x178', '\x129A', '\x3', '\x2', 
		'\x2', '\x2', '\x17A', '\x12B7', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x12D4', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x1343', '\x3', '\x2', 
		'\x2', '\x2', '\x180', '\x1350', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x1358', '\x3', '\x2', '\x2', '\x2', '\x184', '\x1360', '\x3', '\x2', 
		'\x2', '\x2', '\x186', '\x1376', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x1394', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x13AF', '\x3', '\x2', 
		'\x2', '\x2', '\x18C', '\x13C3', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x13F3', '\x3', '\x2', '\x2', '\x2', '\x190', '\x1418', '\x3', '\x2', 
		'\x2', '\x2', '\x192', '\x14E4', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x1502', '\x3', '\x2', '\x2', '\x2', '\x196', '\x1504', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x1524', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x1553', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x1587', '\x3', '\x2', 
		'\x2', '\x2', '\x19E', '\x1597', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x15A5', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x15EE', '\x3', '\x2', 
		'\x2', '\x2', '\x1A4', '\x160D', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x160F', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1613', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA', '\x1631', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1633', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1648', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0', '\x16A1', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x16A3', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x16B0', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6', '\x16E8', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x16EB', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1719', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC', '\x171C', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x173D', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x174E', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2', '\x1751', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x178C', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x17A4', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8', '\x17B4', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x17B6', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x17E7', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE', '\x1810', '\x3', '\x2', '\x2', '\x2', '\x1D0', 
		'\x183C', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1844', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4', '\x1871', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x1873', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x187B', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA', '\x189C', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'\x18A4', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x18BF', '\x3', '\x2', 
		'\x2', '\x2', '\x1E0', '\x18D7', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\x18F7', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1915', '\x3', '\x2', 
		'\x2', '\x2', '\x1E6', '\x192C', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'\x193A', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x193C', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC', '\x195B', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x1969', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1989', '\x3', '\x2', 
		'\x2', '\x2', '\x1F2', '\x199F', '\x3', '\x2', '\x2', '\x2', '\x1F4', 
		'\x19BD', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x19BF', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8', '\x19F2', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1A20', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1A33', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE', '\x1A35', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x1A4E', '\x3', '\x2', '\x2', '\x2', '\x202', '\x1A50', '\x3', '\x2', 
		'\x2', '\x2', '\x204', '\x1A58', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x1A5A', '\x3', '\x2', '\x2', '\x2', '\x208', '\x1AE6', '\x3', '\x2', 
		'\x2', '\x2', '\x20A', '\x1AEE', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x1AF0', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x1AF2', '\x3', '\x2', 
		'\x2', '\x2', '\x210', '\x1AF4', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x1B02', '\x3', '\x2', '\x2', '\x2', '\x214', '\x1B08', '\x3', '\x2', 
		'\x2', '\x2', '\x216', '\x1B0A', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x1B0C', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x1B11', '\x3', '\x2', 
		'\x2', '\x2', '\x21C', '\x1B13', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x1B17', '\x3', '\x2', '\x2', '\x2', '\x220', '\x1B23', '\x3', '\x2', 
		'\x2', '\x2', '\x222', '\x1B25', '\x3', '\x2', '\x2', '\x2', '\x224', 
		'\x1B28', '\x3', '\x2', '\x2', '\x2', '\x226', '\x1B2B', '\x3', '\x2', 
		'\x2', '\x2', '\x228', '\x1B2D', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x1B2F', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x1B31', '\x3', '\x2', 
		'\x2', '\x2', '\x22E', '\x1B4E', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x1B50', '\x3', '\x2', '\x2', '\x2', '\x232', '\x1B5B', '\x3', '\x2', 
		'\x2', '\x2', '\x234', '\x1B5E', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x1B67', '\x3', '\x2', '\x2', '\x2', '\x238', '\x1B6F', '\x3', '\x2', 
		'\x2', '\x2', '\x23A', '\x1B76', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x1B8D', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x1B8F', '\x3', '\x2', 
		'\x2', '\x2', '\x240', '\x1B9A', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x1B9C', '\x3', '\x2', '\x2', '\x2', '\x244', '\x1BB7', '\x3', '\x2', 
		'\x2', '\x2', '\x246', '\x1BBE', '\x3', '\x2', '\x2', '\x2', '\x248', 
		'\x1BC4', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x1BD7', '\x3', '\x2', 
		'\x2', '\x2', '\x24C', '\x1BD9', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x1BEA', '\x3', '\x2', '\x2', '\x2', '\x250', '\x1C01', '\x3', '\x2', 
		'\x2', '\x2', '\x252', '\x1C12', '\x3', '\x2', '\x2', '\x2', '\x254', 
		'\x1C23', '\x3', '\x2', '\x2', '\x2', '\x256', '\x1C2D', '\x3', '\x2', 
		'\x2', '\x2', '\x258', '\x1C3E', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x1C4F', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x1C59', '\x3', '\x2', 
		'\x2', '\x2', '\x25E', '\x1C5B', '\x3', '\x2', '\x2', '\x2', '\x260', 
		'\x1C62', '\x3', '\x2', '\x2', '\x2', '\x262', '\x1C9E', '\x3', '\x2', 
		'\x2', '\x2', '\x264', '\x1CBD', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x1CBF', '\x3', '\x2', '\x2', '\x2', '\x268', '\x1DB9', '\x3', '\x2', 
		'\x2', '\x2', '\x26A', '\x1EA7', '\x3', '\x2', '\x2', '\x2', '\x26C', 
		'\x1ECF', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x1EDC', '\x3', '\x2', 
		'\x2', '\x2', '\x270', '\x1EEA', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x1F17', '\x3', '\x2', '\x2', '\x2', '\x274', '\x1F1B', '\x3', '\x2', 
		'\x2', '\x2', '\x276', '\x1F28', '\x3', '\x2', '\x2', '\x2', '\x278', 
		'\x1F65', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x1F67', '\x3', '\x2', 
		'\x2', '\x2', '\x27C', '\x1F8C', '\x3', '\x2', '\x2', '\x2', '\x27E', 
		'\x1F8E', '\x3', '\x2', '\x2', '\x2', '\x280', '\x1F9E', '\x3', '\x2', 
		'\x2', '\x2', '\x282', '\x1FAB', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x1FBF', '\x3', '\x2', '\x2', '\x2', '\x286', '\x1FCC', '\x3', '\x2', 
		'\x2', '\x2', '\x288', '\x1FF1', '\x3', '\x2', '\x2', '\x2', '\x28A', 
		'\x2002', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x2004', '\x3', '\x2', 
		'\x2', '\x2', '\x28E', '\x2011', '\x3', '\x2', '\x2', '\x2', '\x290', 
		'\x202A', '\x3', '\x2', '\x2', '\x2', '\x292', '\x2046', '\x3', '\x2', 
		'\x2', '\x2', '\x294', '\x206F', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\x20C2', '\x3', '\x2', '\x2', '\x2', '\x298', '\x20C4', '\x3', '\x2', 
		'\x2', '\x2', '\x29A', '\x20C8', '\x3', '\x2', '\x2', '\x2', '\x29C', 
		'\x20CD', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x20D1', '\x3', '\x2', 
		'\x2', '\x2', '\x2A0', '\x20E0', '\x3', '\x2', '\x2', '\x2', '\x2A2', 
		'\x20E5', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x20E9', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6', '\x20F2', '\x3', '\x2', '\x2', '\x2', '\x2A8', 
		'\x20F7', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x20FF', '\x3', '\x2', 
		'\x2', '\x2', '\x2AC', '\x2103', '\x3', '\x2', '\x2', '\x2', '\x2AE', 
		'\x2110', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2112', '\x3', '\x2', 
		'\x2', '\x2', '\x2B2', '\x213F', '\x3', '\x2', '\x2', '\x2', '\x2B4', 
		'\x2149', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2174', '\x3', '\x2', 
		'\x2', '\x2', '\x2B8', '\x21B8', '\x3', '\x2', '\x2', '\x2', '\x2BA', 
		'\x21C3', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x21CE', '\x3', '\x2', 
		'\x2', '\x2', '\x2BE', '\x21DA', '\x3', '\x2', '\x2', '\x2', '\x2C0', 
		'\x21E1', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x220A', '\x3', '\x2', 
		'\x2', '\x2', '\x2C4', '\x2215', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\x2217', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2266', '\x3', '\x2', 
		'\x2', '\x2', '\x2CA', '\x226A', '\x3', '\x2', '\x2', '\x2', '\x2CC', 
		'\x2274', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2290', '\x3', '\x2', 
		'\x2', '\x2', '\x2D0', '\x22AB', '\x3', '\x2', '\x2', '\x2', '\x2D2', 
		'\x22B1', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x22BB', '\x3', '\x2', 
		'\x2', '\x2', '\x2D6', '\x22C5', '\x3', '\x2', '\x2', '\x2', '\x2D8', 
		'\x22C7', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x22E3', '\x3', '\x2', 
		'\x2', '\x2', '\x2DC', '\x22E5', '\x3', '\x2', '\x2', '\x2', '\x2DE', 
		'\x2301', '\x3', '\x2', '\x2', '\x2', '\x2E0', '\x2303', '\x3', '\x2', 
		'\x2', '\x2', '\x2E2', '\x230B', '\x3', '\x2', '\x2', '\x2', '\x2E4', 
		'\x2313', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x231C', '\x3', '\x2', 
		'\x2', '\x2', '\x2E8', '\x2357', '\x3', '\x2', '\x2', '\x2', '\x2EA', 
		'\x235E', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x236C', '\x3', '\x2', 
		'\x2', '\x2', '\x2EE', '\x2375', '\x3', '\x2', '\x2', '\x2', '\x2F0', 
		'\x239C', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x23AC', '\x3', '\x2', 
		'\x2', '\x2', '\x2F4', '\x23B3', '\x3', '\x2', '\x2', '\x2', '\x2F6', 
		'\x23B5', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2424', '\x3', '\x2', 
		'\x2', '\x2', '\x2FA', '\x2426', '\x3', '\x2', '\x2', '\x2', '\x2FC', 
		'\x2429', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x242D', '\x3', '\x2', 
		'\x2', '\x2', '\x300', '\x242F', '\x3', '\x2', '\x2', '\x2', '\x302', 
		'\x2468', '\x3', '\x2', '\x2', '\x2', '\x304', '\x246A', '\x3', '\x2', 
		'\x2', '\x2', '\x306', '\x2473', '\x3', '\x2', '\x2', '\x2', '\x308', 
		'\x247B', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x248B', '\x3', '\x2', 
		'\x2', '\x2', '\x30C', '\x2490', '\x3', '\x2', '\x2', '\x2', '\x30E', 
		'\x24AD', '\x3', '\x2', '\x2', '\x2', '\x310', '\x24B7', '\x3', '\x2', 
		'\x2', '\x2', '\x312', '\x24BD', '\x3', '\x2', '\x2', '\x2', '\x314', 
		'\x24BF', '\x3', '\x2', '\x2', '\x2', '\x316', '\x24CC', '\x3', '\x2', 
		'\x2', '\x2', '\x318', '\x24CE', '\x3', '\x2', '\x2', '\x2', '\x31A', 
		'\x2503', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x2505', '\x3', '\x2', 
		'\x2', '\x2', '\x31E', '\x2516', '\x3', '\x2', '\x2', '\x2', '\x320', 
		'\x251E', '\x3', '\x2', '\x2', '\x2', '\x322', '\x2523', '\x3', '\x2', 
		'\x2', '\x2', '\x324', '\x254D', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x254F', '\x3', '\x2', '\x2', '\x2', '\x328', '\x2557', '\x3', '\x2', 
		'\x2', '\x2', '\x32A', '\x2561', '\x3', '\x2', '\x2', '\x2', '\x32C', 
		'\x2569', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x2587', '\x3', '\x2', 
		'\x2', '\x2', '\x330', '\x2589', '\x3', '\x2', '\x2', '\x2', '\x332', 
		'\x2597', '\x3', '\x2', '\x2', '\x2', '\x334', '\x261D', '\x3', '\x2', 
		'\x2', '\x2', '\x336', '\x2624', '\x3', '\x2', '\x2', '\x2', '\x338', 
		'\x2651', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x2669', '\x3', '\x2', 
		'\x2', '\x2', '\x33C', '\x266B', '\x3', '\x2', '\x2', '\x2', '\x33E', 
		'\x2672', '\x3', '\x2', '\x2', '\x2', '\x340', '\x2679', '\x3', '\x2', 
		'\x2', '\x2', '\x342', '\x2680', '\x3', '\x2', '\x2', '\x2', '\x344', 
		'\x2685', '\x3', '\x2', '\x2', '\x2', '\x346', '\x268B', '\x3', '\x2', 
		'\x2', '\x2', '\x348', '\x2690', '\x3', '\x2', '\x2', '\x2', '\x34A', 
		'\x2694', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x2699', '\x3', '\x2', 
		'\x2', '\x2', '\x34E', '\x26A8', '\x3', '\x2', '\x2', '\x2', '\x350', 
		'\x26B7', '\x3', '\x2', '\x2', '\x2', '\x352', '\x26ED', '\x3', '\x2', 
		'\x2', '\x2', '\x354', '\x26EF', '\x3', '\x2', '\x2', '\x2', '\x356', 
		'\x26FC', '\x3', '\x2', '\x2', '\x2', '\x358', '\x26FE', '\x3', '\x2', 
		'\x2', '\x2', '\x35A', '\x270C', '\x3', '\x2', '\x2', '\x2', '\x35C', 
		'\x271E', '\x3', '\x2', '\x2', '\x2', '\x35E', '\x2740', '\x3', '\x2', 
		'\x2', '\x2', '\x360', '\x2756', '\x3', '\x2', '\x2', '\x2', '\x362', 
		'\x2759', '\x3', '\x2', '\x2', '\x2', '\x364', '\x275D', '\x3', '\x2', 
		'\x2', '\x2', '\x366', '\x276C', '\x3', '\x2', '\x2', '\x2', '\x368', 
		'\x2775', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x2779', '\x3', '\x2', 
		'\x2', '\x2', '\x36C', '\x2781', '\x3', '\x2', '\x2', '\x2', '\x36E', 
		'\x2787', '\x3', '\x2', '\x2', '\x2', '\x370', '\x27AB', '\x3', '\x2', 
		'\x2', '\x2', '\x372', '\x27AD', '\x3', '\x2', '\x2', '\x2', '\x374', 
		'\x27BA', '\x3', '\x2', '\x2', '\x2', '\x376', '\x27BC', '\x3', '\x2', 
		'\x2', '\x2', '\x378', '\x27D1', '\x3', '\x2', '\x2', '\x2', '\x37A', 
		'\x280F', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x2818', '\x3', '\x2', 
		'\x2', '\x2', '\x37E', '\x281F', '\x3', '\x2', '\x2', '\x2', '\x380', 
		'\x2832', '\x3', '\x2', '\x2', '\x2', '\x382', '\x2850', '\x3', '\x2', 
		'\x2', '\x2', '\x384', '\x2855', '\x3', '\x2', '\x2', '\x2', '\x386', 
		'\x285C', '\x3', '\x2', '\x2', '\x2', '\x388', '\x286B', '\x3', '\x2', 
		'\x2', '\x2', '\x38A', '\x287A', '\x3', '\x2', '\x2', '\x2', '\x38C', 
		'\x287E', '\x3', '\x2', '\x2', '\x2', '\x38E', '\x28B0', '\x3', '\x2', 
		'\x2', '\x2', '\x390', '\x28B2', '\x3', '\x2', '\x2', '\x2', '\x392', 
		'\x28C0', '\x3', '\x2', '\x2', '\x2', '\x394', '\x28CA', '\x3', '\x2', 
		'\x2', '\x2', '\x396', '\x28CC', '\x3', '\x2', '\x2', '\x2', '\x398', 
		'\x28CE', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x28D1', '\x3', '\x2', 
		'\x2', '\x2', '\x39C', '\x28DC', '\x3', '\x2', '\x2', '\x2', '\x39E', 
		'\x28E3', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x28E5', '\x3', '\x2', 
		'\x2', '\x2', '\x3A2', '\x28F1', '\x3', '\x2', '\x2', '\x2', '\x3A4', 
		'\x2921', '\x3', '\x2', '\x2', '\x2', '\x3A6', '\x2925', '\x3', '\x2', 
		'\x2', '\x2', '\x3A8', '\x2927', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x293C', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x294B', '\x3', '\x2', 
		'\x2', '\x2', '\x3AE', '\x295B', '\x3', '\x2', '\x2', '\x2', '\x3B0', 
		'\x295D', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x2981', '\x3', '\x2', 
		'\x2', '\x2', '\x3B4', '\x2986', '\x3', '\x2', '\x2', '\x2', '\x3B6', 
		'\x2997', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\x2999', '\x3', '\x2', 
		'\x2', '\x2', '\x3BA', '\x299E', '\x3', '\x2', '\x2', '\x2', '\x3BC', 
		'\x29A0', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x29B1', '\x3', '\x2', 
		'\x2', '\x2', '\x3C0', '\x29B3', '\x3', '\x2', '\x2', '\x2', '\x3C2', 
		'\x29B5', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C6', '\x5', '\x4', 
		'\x3', '\x2', '\x3C5', '\x3C4', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C9', 
		'\x3', '\x2', '\x2', '\x2', '\x3C7', '\x3C5', '\x3', '\x2', '\x2', '\x2', 
		'\x3C7', '\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3CA', '\x3', 
		'\x2', '\x2', '\x2', '\x3C9', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3CA', 
		'\x3CB', '\a', '\x2', '\x2', '\x3', '\x3CB', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x3CC', '\x3D0', '\x5', '\x272', '\x13A', '\x2', '\x3CD', '\x3CF', 
		'\x5', '\x298', '\x14D', '\x2', '\x3CE', '\x3CD', '\x3', '\x2', '\x2', 
		'\x2', '\x3CF', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3CE', 
		'\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3D1', '\x3', '\x2', '\x2', '\x2', 
		'\x3D1', '\x3DE', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D0', '\x3', 
		'\x2', '\x2', '\x2', '\x3D3', '\x3D5', '\x5', '\x272', '\x13A', '\x2', 
		'\x3D4', '\x3D3', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\x3', 
		'\x2', '\x2', '\x2', '\x3D5', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D6', 
		'\x3DA', '\x5', '\x6', '\x4', '\x2', '\x3D7', '\x3D9', '\x5', '\x298', 
		'\x14D', '\x2', '\x3D8', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3D9', 
		'\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3DA', '\x3D8', '\x3', '\x2', '\x2', 
		'\x2', '\x3DA', '\x3DB', '\x3', '\x2', '\x2', '\x2', '\x3DB', '\x3DE', 
		'\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3DA', '\x3', '\x2', '\x2', '\x2', 
		'\x3DD', '\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3DD', '\x3D4', '\x3', 
		'\x2', '\x2', '\x2', '\x3DE', '\x5', '\x3', '\x2', '\x2', '\x2', '\x3DF', 
		'\x3E1', '\x5', '\b', '\x5', '\x2', '\x3E0', '\x3E2', '\a', '\x339', '\x2', 
		'\x2', '\x3E1', '\x3E0', '\x3', '\x2', '\x2', '\x2', '\x3E1', '\x3E2', 
		'\x3', '\x2', '\x2', '\x2', '\x3E2', '\x3E4', '\x3', '\x2', '\x2', '\x2', 
		'\x3E3', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3E5', '\x3', 
		'\x2', '\x2', '\x2', '\x3E5', '\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3E5', 
		'\x3E6', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x3E7', '\x3EF', '\x5', '\n', '\x6', '\x2', '\x3E8', '\x3EF', 
		'\x5', '\f', '\a', '\x2', '\x3E9', '\x3EF', '\x5', '\x10', '\t', '\x2', 
		'\x3EA', '\x3EF', '\x5', '\x29E', '\x150', '\x2', '\x3EB', '\x3EF', '\x5', 
		'\x30', '\x19', '\x2', '\x3EC', '\x3EF', '\x5', '\x32', '\x1A', '\x2', 
		'\x3ED', '\x3EF', '\x5', '\xE', '\b', '\x2', '\x3EE', '\x3E7', '\x3', 
		'\x2', '\x2', '\x2', '\x3EE', '\x3E8', '\x3', '\x2', '\x2', '\x2', '\x3EE', 
		'\x3E9', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EA', '\x3', '\x2', '\x2', 
		'\x2', '\x3EE', '\x3EB', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EC', 
		'\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3ED', '\x3', '\x2', '\x2', '\x2', 
		'\x3EF', '\t', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3F6', '\x5', '\x1AE', 
		'\xD8', '\x2', '\x3F1', '\x3F6', '\x5', '\x1B4', '\xDB', '\x2', '\x3F2', 
		'\x3F6', '\x5', '\x1B8', '\xDD', '\x2', '\x3F3', '\x3F6', '\x5', '\x1BE', 
		'\xE0', '\x2', '\x3F4', '\x3F6', '\x5', '\x1C2', '\xE2', '\x2', '\x3F5', 
		'\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F1', '\x3', '\x2', '\x2', 
		'\x2', '\x3F5', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F3', 
		'\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F4', '\x3', '\x2', '\x2', '\x2', 
		'\x3F6', '\v', '\x3', '\x2', '\x2', '\x2', '\x3F7', '\x497', '\x5', '\x34', 
		'\x1B', '\x2', '\x3F8', '\x497', '\x5', '<', '\x1F', '\x2', '\x3F9', '\x497', 
		'\x5', 'v', '<', '\x2', '\x3FA', '\x497', '\x5', '\x84', '\x43', '\x2', 
		'\x3FB', '\x497', '\x5', '\x90', 'I', '\x2', '\x3FC', '\x497', '\x5', 
		'\x92', 'J', '\x2', '\x3FD', '\x497', '\x5', '\x8E', 'H', '\x2', '\x3FE', 
		'\x497', '\x5', '\x9E', 'P', '\x2', '\x3FF', '\x497', '\x5', '\xA8', 'U', 
		'\x2', '\x400', '\x497', '\x5', '\xAA', 'V', '\x2', '\x401', '\x497', 
		'\x5', '\x116', '\x8C', '\x2', '\x402', '\x497', '\x5', '\x11A', '\x8E', 
		'\x2', '\x403', '\x497', '\x5', '\x1F8', '\xFD', '\x2', '\x404', '\x497', 
		'\x5', '\x15C', '\xAF', '\x2', '\x405', '\x497', '\x5', '\x206', '\x104', 
		'\x2', '\x406', '\x497', '\x5', '\x120', '\x91', '\x2', '\x407', '\x497', 
		'\x5', '\x128', '\x95', '\x2', '\x408', '\x497', '\x5', '\x12A', '\x96', 
		'\x2', '\x409', '\x497', '\x5', '\x12E', '\x98', '\x2', '\x40A', '\x497', 
		'\x5', '\x132', '\x9A', '\x2', '\x40B', '\x497', '\x5', '\x136', '\x9C', 
		'\x2', '\x40C', '\x497', '\x5', '\x13E', '\xA0', '\x2', '\x40D', '\x497', 
		'\x5', '\x142', '\xA2', '\x2', '\x40E', '\x497', '\x5', '\x13A', '\x9E', 
		'\x2', '\x40F', '\x497', '\x5', '\x14A', '\xA6', '\x2', '\x410', '\x497', 
		'\x5', '\x146', '\xA4', '\x2', '\x411', '\x497', '\x5', '\x14E', '\xA8', 
		'\x2', '\x412', '\x497', '\x5', '\x150', '\xA9', '\x2', '\x413', '\x497', 
		'\x5', '\x152', '\xAA', '\x2', '\x414', '\x497', '\x5', '\x154', '\xAB', 
		'\x2', '\x415', '\x497', '\x5', '\x15A', '\xAE', '\x2', '\x416', '\x497', 
		'\x5', '\x16A', '\xB6', '\x2', '\x417', '\x497', '\x5', '\x164', '\xB3', 
		'\x2', '\x418', '\x497', '\x5', '\x170', '\xB9', '\x2', '\x419', '\x497', 
		'\x5', '\x174', '\xBB', '\x2', '\x41A', '\x497', '\x5', '\x178', '\xBD', 
		'\x2', '\x41B', '\x497', '\x5', '\x17C', '\xBF', '\x2', '\x41C', '\x497', 
		'\x5', '\x17E', '\xC0', '\x2', '\x41D', '\x497', '\x5', '\x182', '\xC2', 
		'\x2', '\x41E', '\x497', '\x5', '\x184', '\xC3', '\x2', '\x41F', '\x497', 
		'\x5', '\x188', '\xC5', '\x2', '\x420', '\x497', '\x5', '\x18A', '\xC6', 
		'\x2', '\x421', '\x497', '\x5', '\x1F6', '\xFC', '\x2', '\x422', '\x497', 
		'\x5', '\x190', '\xC9', '\x2', '\x423', '\x497', '\x5', '\x196', '\xCC', 
		'\x2', '\x424', '\x497', '\x5', '\x198', '\xCD', '\x2', '\x425', '\x497', 
		'\x5', '\x36', '\x1C', '\x2', '\x426', '\x497', '\x5', 'r', ':', '\x2', 
		'\x427', '\x497', '\x5', '\x80', '\x41', '\x2', '\x428', '\x497', '\x5', 
		'\xAC', 'W', '\x2', '\x429', '\x497', '\x5', '\x114', '\x8B', '\x2', '\x42A', 
		'\x497', '\x5', '\x118', '\x8D', '\x2', '\x42B', '\x497', '\x5', '\x11C', 
		'\x8F', '\x2', '\x42C', '\x497', '\x5', '\x1CA', '\xE6', '\x2', '\x42D', 
		'\x497', '\x5', '\x15E', '\xB0', '\x2', '\x42E', '\x497', '\x5', '\x11E', 
		'\x90', '\x2', '\x42F', '\x497', '\x5', '\x12C', '\x97', '\x2', '\x430', 
		'\x497', '\x5', '\x130', '\x99', '\x2', '\x431', '\x497', '\x5', '\x134', 
		'\x9B', '\x2', '\x432', '\x497', '\x5', '\x138', '\x9D', '\x2', '\x433', 
		'\x497', '\x5', '\x1CC', '\xE7', '\x2', '\x434', '\x497', '\x5', '\x140', 
		'\xA1', '\x2', '\x435', '\x497', '\x5', '\x144', '\xA3', '\x2', '\x436', 
		'\x497', '\x5', '\x13C', '\x9F', '\x2', '\x437', '\x497', '\x5', '\x14C', 
		'\xA7', '\x2', '\x438', '\x497', '\x5', '\x148', '\xA5', '\x2', '\x439', 
		'\x497', '\x5', '\xA4', 'S', '\x2', '\x43A', '\x497', '\x5', '\x1DC', 
		'\xEF', '\x2', '\x43B', '\x497', '\x5', '\x1CE', '\xE8', '\x2', '\x43C', 
		'\x497', '\x5', '\x1D0', '\xE9', '\x2', '\x43D', '\x497', '\x5', '\x156', 
		'\xAC', '\x2', '\x43E', '\x497', '\x5', '\x158', '\xAD', '\x2', '\x43F', 
		'\x497', '\x5', '\x160', '\xB1', '\x2', '\x440', '\x497', '\x5', '\x162', 
		'\xB2', '\x2', '\x441', '\x497', '\x5', '\x166', '\xB4', '\x2', '\x442', 
		'\x497', '\x5', '\x168', '\xB5', '\x2', '\x443', '\x497', '\x5', '\x16C', 
		'\xB7', '\x2', '\x444', '\x497', '\x5', '\x16E', '\xB8', '\x2', '\x445', 
		'\x497', '\x5', '\x172', '\xBA', '\x2', '\x446', '\x497', '\x5', '\x176', 
		'\xBC', '\x2', '\x447', '\x497', '\x5', '\x17A', '\xBE', '\x2', '\x448', 
		'\x497', '\x5', '\x180', '\xC1', '\x2', '\x449', '\x497', '\x5', '\x186', 
		'\xC4', '\x2', '\x44A', '\x497', '\x5', '\x1EA', '\xF6', '\x2', '\x44B', 
		'\x497', '\x5', '\x18C', '\xC7', '\x2', '\x44C', '\x497', '\x5', '\x18E', 
		'\xC8', '\x2', '\x44D', '\x497', '\x5', '\x1EE', '\xF8', '\x2', '\x44E', 
		'\x497', '\x5', '\x258', '\x12D', '\x2', '\x44F', '\x497', '\x5', '\x192', 
		'\xCA', '\x2', '\x450', '\x497', '\x5', '\x194', '\xCB', '\x2', '\x451', 
		'\x497', '\x5', '\x1F2', '\xFA', '\x2', '\x452', '\x497', '\x5', '\x19A', 
		'\xCE', '\x2', '\x453', '\x497', '\x5', '\x19C', '\xCF', '\x2', '\x454', 
		'\x497', '\x5', '\x38', '\x1D', '\x2', '\x455', '\x497', '\x5', ':', '\x1E', 
		'\x2', '\x456', '\x497', '\x5', 't', ';', '\x2', '\x457', '\x497', '\x5', 
		'\x82', '\x42', '\x2', '\x458', '\x497', '\x5', '\x9C', 'O', '\x2', '\x459', 
		'\x497', '\x5', '\xA6', 'T', '\x2', '\x45A', '\x497', '\x5', '\xAE', 'X', 
		'\x2', '\x45B', '\x497', '\x5', '\xB0', 'Y', '\x2', '\x45C', '\x497', 
		'\x5', '\xB2', 'Z', '\x2', '\x45D', '\x497', '\x5', '\xB4', '[', '\x2', 
		'\x45E', '\x497', '\x5', '\xB6', '\\', '\x2', '\x45F', '\x497', '\x5', 
		'\xB8', ']', '\x2', '\x460', '\x497', '\x5', '\xBA', '^', '\x2', '\x461', 
		'\x497', '\x5', '\xBC', '_', '\x2', '\x462', '\x497', '\x5', '\xBE', '`', 
		'\x2', '\x463', '\x497', '\x5', '\xE8', 'u', '\x2', '\x464', '\x497', 
		'\x5', '\xC0', '\x61', '\x2', '\x465', '\x497', '\x5', '\xC2', '\x62', 
		'\x2', '\x466', '\x497', '\x5', '\xCE', 'h', '\x2', '\x467', '\x497', 
		'\x5', '\xD0', 'i', '\x2', '\x468', '\x497', '\x5', '\xC4', '\x63', '\x2', 
		'\x469', '\x497', '\x5', '\xC6', '\x64', '\x2', '\x46A', '\x497', '\x5', 
		'\xC8', '\x65', '\x2', '\x46B', '\x497', '\x5', '\xCA', '\x66', '\x2', 
		'\x46C', '\x497', '\x5', '\xCC', 'g', '\x2', '\x46D', '\x497', '\x5', 
		'\xD2', 'j', '\x2', '\x46E', '\x497', '\x5', '\xD4', 'k', '\x2', '\x46F', 
		'\x497', '\x5', '\xD6', 'l', '\x2', '\x470', '\x497', '\x5', '\x250', 
		'\x129', '\x2', '\x471', '\x497', '\x5', '\x242', '\x122', '\x2', '\x472', 
		'\x497', '\x5', '\xD8', 'm', '\x2', '\x473', '\x497', '\x5', '\xDA', 'n', 
		'\x2', '\x474', '\x497', '\x5', '\xDC', 'o', '\x2', '\x475', '\x497', 
		'\x5', '\xDE', 'p', '\x2', '\x476', '\x497', '\x5', '\xE0', 'q', '\x2', 
		'\x477', '\x497', '\x5', '\x248', '\x125', '\x2', '\x478', '\x497', '\x5', 
		'\xE2', 'r', '\x2', '\x479', '\x497', '\x5', '\xE4', 's', '\x2', '\x47A', 
		'\x497', '\x5', '\xE6', 't', '\x2', '\x47B', '\x497', '\x5', '\xEA', 'v', 
		'\x2', '\x47C', '\x497', '\x5', '\xEC', 'w', '\x2', '\x47D', '\x497', 
		'\x5', '\xEE', 'x', '\x2', '\x47E', '\x497', '\x5', '\xF0', 'y', '\x2', 
		'\x47F', '\x497', '\x5', '\xF2', 'z', '\x2', '\x480', '\x497', '\x5', 
		'\xF4', '{', '\x2', '\x481', '\x497', '\x5', '\xF6', '|', '\x2', '\x482', 
		'\x497', '\x5', '\xF8', '}', '\x2', '\x483', '\x497', '\x5', '\xFA', '~', 
		'\x2', '\x484', '\x497', '\x5', '\xFC', '\x7F', '\x2', '\x485', '\x497', 
		'\x5', '\xFE', '\x80', '\x2', '\x486', '\x497', '\x5', '\x252', '\x12A', 
		'\x2', '\x487', '\x497', '\x5', '\x100', '\x81', '\x2', '\x488', '\x497', 
		'\x5', '\x102', '\x82', '\x2', '\x489', '\x497', '\x5', '\x104', '\x83', 
		'\x2', '\x48A', '\x497', '\x5', '\x254', '\x12B', '\x2', '\x48B', '\x497', 
		'\x5', '\x24A', '\x126', '\x2', '\x48C', '\x497', '\x5', '\x25A', '\x12E', 
		'\x2', '\x48D', '\x497', '\x5', '\x106', '\x84', '\x2', '\x48E', '\x497', 
		'\x5', '\x256', '\x12C', '\x2', '\x48F', '\x497', '\x5', '\x108', '\x85', 
		'\x2', '\x490', '\x497', '\x5', '\x10A', '\x86', '\x2', '\x491', '\x497', 
		'\x5', '\x10C', '\x87', '\x2', '\x492', '\x497', '\x5', '\x10E', '\x88', 
		'\x2', '\x493', '\x497', '\x5', '\x110', '\x89', '\x2', '\x494', '\x497', 
		'\x5', '\x112', '\x8A', '\x2', '\x495', '\x497', '\x5', '\x1EC', '\xF7', 
		'\x2', '\x496', '\x3F7', '\x3', '\x2', '\x2', '\x2', '\x496', '\x3F8', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x3F9', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x496', '\x3FB', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x3FC', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x3FD', '\x3', '\x2', '\x2', '\x2', '\x496', '\x3FE', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x496', '\x400', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x401', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x402', '\x3', '\x2', '\x2', '\x2', '\x496', '\x403', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x404', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x405', '\x3', '\x2', '\x2', '\x2', '\x496', '\x406', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x407', '\x3', '\x2', '\x2', '\x2', '\x496', '\x408', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x409', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x496', '\x40B', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x40C', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x40D', '\x3', '\x2', '\x2', '\x2', '\x496', '\x40E', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x496', '\x410', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x411', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x412', '\x3', '\x2', '\x2', '\x2', '\x496', '\x413', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x414', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x415', '\x3', '\x2', '\x2', '\x2', '\x496', '\x416', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x417', '\x3', '\x2', '\x2', '\x2', '\x496', '\x418', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x419', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x496', '\x41B', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x41D', '\x3', '\x2', '\x2', '\x2', '\x496', '\x41E', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x41F', '\x3', '\x2', '\x2', '\x2', '\x496', '\x420', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x421', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x422', '\x3', '\x2', '\x2', '\x2', '\x496', '\x423', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x424', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x496', '\x426', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x427', '\x3', '\x2', '\x2', '\x2', '\x496', '\x428', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x429', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x42A', '\x3', '\x2', '\x2', '\x2', '\x496', '\x42B', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x42D', '\x3', '\x2', '\x2', '\x2', '\x496', '\x42E', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x42F', '\x3', '\x2', '\x2', '\x2', '\x496', '\x430', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x431', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x432', '\x3', '\x2', '\x2', '\x2', '\x496', '\x433', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x434', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x435', '\x3', '\x2', '\x2', '\x2', '\x496', '\x436', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x437', '\x3', '\x2', '\x2', '\x2', '\x496', '\x438', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x439', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x43A', '\x3', '\x2', '\x2', '\x2', '\x496', '\x43B', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x43C', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x43D', '\x3', '\x2', '\x2', '\x2', '\x496', '\x43E', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x43F', '\x3', '\x2', '\x2', '\x2', '\x496', '\x440', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x441', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x442', '\x3', '\x2', '\x2', '\x2', '\x496', '\x443', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x444', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x445', '\x3', '\x2', '\x2', '\x2', '\x496', '\x446', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x447', '\x3', '\x2', '\x2', '\x2', '\x496', '\x448', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x449', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x496', '\x44B', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x44C', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x44D', '\x3', '\x2', '\x2', '\x2', '\x496', '\x44E', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x44F', '\x3', '\x2', '\x2', '\x2', '\x496', '\x450', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x451', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x452', '\x3', '\x2', '\x2', '\x2', '\x496', '\x453', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x454', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x455', '\x3', '\x2', '\x2', '\x2', '\x496', '\x456', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x457', '\x3', '\x2', '\x2', '\x2', '\x496', '\x458', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x459', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x45A', '\x3', '\x2', '\x2', '\x2', '\x496', '\x45B', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x45C', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x45D', '\x3', '\x2', '\x2', '\x2', '\x496', '\x45E', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x45F', '\x3', '\x2', '\x2', '\x2', '\x496', '\x460', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x461', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x462', '\x3', '\x2', '\x2', '\x2', '\x496', '\x463', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x464', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x465', '\x3', '\x2', '\x2', '\x2', '\x496', '\x466', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x467', '\x3', '\x2', '\x2', '\x2', '\x496', '\x468', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x469', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x46A', '\x3', '\x2', '\x2', '\x2', '\x496', '\x46B', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x46C', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x46D', '\x3', '\x2', '\x2', '\x2', '\x496', '\x46E', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x46F', '\x3', '\x2', '\x2', '\x2', '\x496', '\x470', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x471', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x472', '\x3', '\x2', '\x2', '\x2', '\x496', '\x473', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x474', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x475', '\x3', '\x2', '\x2', '\x2', '\x496', '\x476', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x477', '\x3', '\x2', '\x2', '\x2', '\x496', '\x478', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x479', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x47A', '\x3', '\x2', '\x2', '\x2', '\x496', '\x47B', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x47C', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x47D', '\x3', '\x2', '\x2', '\x2', '\x496', '\x47E', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x47F', '\x3', '\x2', '\x2', '\x2', '\x496', '\x480', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x481', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x482', '\x3', '\x2', '\x2', '\x2', '\x496', '\x483', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x484', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x485', '\x3', '\x2', '\x2', '\x2', '\x496', '\x486', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x487', '\x3', '\x2', '\x2', '\x2', '\x496', '\x488', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x489', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x48A', '\x3', '\x2', '\x2', '\x2', '\x496', '\x48B', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x48C', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x48D', '\x3', '\x2', '\x2', '\x2', '\x496', '\x48E', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x48F', '\x3', '\x2', '\x2', '\x2', '\x496', '\x490', 
		'\x3', '\x2', '\x2', '\x2', '\x496', '\x491', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x492', '\x3', '\x2', '\x2', '\x2', '\x496', '\x493', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x494', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x495', '\x3', '\x2', '\x2', '\x2', '\x497', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x498', '\x49E', '\x5', '\x266', '\x134', '\x2', '\x499', '\x49E', 
		'\x5', '\x268', '\x135', '\x2', '\x49A', '\x49E', '\x5', '\x26A', '\x136', 
		'\x2', '\x49B', '\x49E', '\x5', '\x26C', '\x137', '\x2', '\x49C', '\x49E', 
		'\x5', '\x26E', '\x138', '\x2', '\x49D', '\x498', '\x3', '\x2', '\x2', 
		'\x2', '\x49D', '\x499', '\x3', '\x2', '\x2', '\x2', '\x49D', '\x49A', 
		'\x3', '\x2', '\x2', '\x2', '\x49D', '\x49B', '\x3', '\x2', '\x2', '\x2', 
		'\x49D', '\x49C', '\x3', '\x2', '\x2', '\x2', '\x49E', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x49F', '\x4AC', '\x5', '\x12', '\n', '\x2', '\x4A0', '\x4AC', 
		'\x5', '\x14', '\v', '\x2', '\x4A1', '\x4AC', '\x5', '\x16', '\f', '\x2', 
		'\x4A2', '\x4AC', '\x5', '\x18', '\r', '\x2', '\x4A3', '\x4AC', '\x5', 
		'\x1C', '\xF', '\x2', '\x4A4', '\x4AC', '\x5', '\x1A', '\xE', '\x2', '\x4A5', 
		'\x4AC', '\x5', '\x1E', '\x10', '\x2', '\x4A6', '\x4AC', '\x5', '&', '\x14', 
		'\x2', '\x4A7', '\x4AC', '\x5', '(', '\x15', '\x2', '\x4A8', '\x4AC', 
		'\x5', '*', '\x16', '\x2', '\x4A9', '\x4AC', '\x5', ',', '\x17', '\x2', 
		'\x4AA', '\x4AC', '\x5', '.', '\x18', '\x2', '\x4AB', '\x49F', '\x3', 
		'\x2', '\x2', '\x2', '\x4AB', '\x4A0', '\x3', '\x2', '\x2', '\x2', '\x4AB', 
		'\x4A1', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4A2', '\x3', '\x2', '\x2', 
		'\x2', '\x4AB', '\x4A3', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4A4', 
		'\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4A5', '\x3', '\x2', '\x2', '\x2', 
		'\x4AB', '\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4A7', '\x3', 
		'\x2', '\x2', '\x2', '\x4AB', '\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4AB', 
		'\x4A9', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4AA', '\x3', '\x2', '\x2', 
		'\x2', '\x4AC', '\x11', '\x3', '\x2', '\x2', '\x2', '\x4AD', '\x4AF', 
		'\a', '\x1C', '\x2', '\x2', '\x4AE', '\x4B0', '\a', '\x339', '\x2', '\x2', 
		'\x4AF', '\x4AE', '\x3', '\x2', '\x2', '\x2', '\x4AF', '\x4B0', '\x3', 
		'\x2', '\x2', '\x2', '\x4B0', '\x4B2', '\x3', '\x2', '\x2', '\x2', '\x4B1', 
		'\x4B3', '\x5', '\x6', '\x4', '\x2', '\x4B2', '\x4B1', '\x3', '\x2', '\x2', 
		'\x2', '\x4B2', '\x4B3', '\x3', '\x2', '\x2', '\x2', '\x4B3', '\x4B4', 
		'\x3', '\x2', '\x2', '\x2', '\x4B4', '\x4B6', '\a', 'm', '\x2', '\x2', 
		'\x4B5', '\x4B7', '\a', '\x339', '\x2', '\x2', '\x4B6', '\x4B5', '\x3', 
		'\x2', '\x2', '\x2', '\x4B6', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4B7', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4BA', '\a', '!', '\x2', 
		'\x2', '\x4B9', '\x4BB', '\a', '\x339', '\x2', '\x2', '\x4BA', '\x4B9', 
		'\x3', '\x2', '\x2', '\x2', '\x4BA', '\x4BB', '\x3', '\x2', '\x2', '\x2', 
		'\x4BB', '\x15', '\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4BE', '\a', '\x42', 
		'\x2', '\x2', '\x4BD', '\x4BF', '\a', '\x339', '\x2', '\x2', '\x4BE', 
		'\x4BD', '\x3', '\x2', '\x2', '\x2', '\x4BE', '\x4BF', '\x3', '\x2', '\x2', 
		'\x2', '\x4BF', '\x17', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x4C1', 
		'\a', '\x90', '\x2', '\x2', '\x4C1', '\x4C3', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x4C2', '\x4C4', '\a', '\x339', '\x2', '\x2', '\x4C3', '\x4C2', 
		'\x3', '\x2', '\x2', '\x2', '\x4C3', '\x4C4', '\x3', '\x2', '\x2', '\x2', 
		'\x4C4', '\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4C5', '\x4C6', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x4C6', '\x4C8', '\a', '\x33A', '\x2', '\x2', 
		'\x4C7', '\x4C9', '\a', '\x339', '\x2', '\x2', '\x4C8', '\x4C7', '\x3', 
		'\x2', '\x2', '\x2', '\x4C8', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4C9', 
		'\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4C0', '\x3', '\x2', '\x2', 
		'\x2', '\x4CA', '\x4C5', '\x3', '\x2', '\x2', '\x2', '\x4CB', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x4CC', '\x4CE', '\a', '\x11B', '\x2', '\x2', 
		'\x4CD', '\x4CF', '\x5', '\x2CC', '\x167', '\x2', '\x4CE', '\x4CD', '\x3', 
		'\x2', '\x2', '\x2', '\x4CE', '\x4CF', '\x3', '\x2', '\x2', '\x2', '\x4CF', 
		'\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4D0', '\x4D2', '\a', '\x339', 
		'\x2', '\x2', '\x4D1', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D2', 
		'\x3', '\x2', '\x2', '\x2', '\x4D2', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x4D3', '\x4D4', '\a', '\x9A', '\x2', '\x2', '\x4D4', '\x4D5', '\x5', 
		'\x2E2', '\x172', '\x2', '\x4D5', '\x4D8', '\x5', '\b', '\x5', '\x2', 
		'\x4D6', '\x4D7', '\a', 'k', '\x2', '\x2', '\x4D7', '\x4D9', '\x5', '\b', 
		'\x5', '\x2', '\x4D8', '\x4D6', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4D9', 
		'\x3', '\x2', '\x2', '\x2', '\x4D9', '\x4DB', '\x3', '\x2', '\x2', '\x2', 
		'\x4DA', '\x4DC', '\a', '\x339', '\x2', '\x2', '\x4DB', '\x4DA', '\x3', 
		'\x2', '\x2', '\x2', '\x4DB', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4DC', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x4DD', '\x4E4', '\a', '\x2EE', '\x2', 
		'\x2', '\x4DE', '\x4DF', '\x5', ' ', '\x11', '\x2', '\x4DF', '\x4E0', 
		'\a', '\x338', '\x2', '\x2', '\x4E0', '\x4E1', '\x5', '\"', '\x12', '\x2', 
		'\x4E1', '\x4E2', '\a', '\x338', '\x2', '\x2', '\x4E2', '\x4E3', '\x5', 
		'$', '\x13', '\x2', '\x4E3', '\x4E5', '\x3', '\x2', '\x2', '\x2', '\x4E4', 
		'\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4E5', '\x3', '\x2', '\x2', 
		'\x2', '\x4E5', '\x4E7', '\x3', '\x2', '\x2', '\x2', '\x4E6', '\x4E8', 
		'\a', '\x339', '\x2', '\x2', '\x4E7', '\x4E6', '\x3', '\x2', '\x2', '\x2', 
		'\x4E7', '\x4E8', '\x3', '\x2', '\x2', '\x2', '\x4E8', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x4E9', '\x4EA', '\t', '\x2', '\x2', '\x2', '\x4EA', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4EC', '\t', '\x3', '\x2', 
		'\x2', '\x4EC', '#', '\x3', '\x2', '\x2', '\x2', '\x4ED', '\x4EE', '\t', 
		'\x2', '\x2', '\x2', '\x4EE', '%', '\x3', '\x2', '\x2', '\x2', '\x4EF', 
		'\x4F0', '\a', '\x1C', '\x2', '\x2', '\x4F0', '\x4F2', '\a', '\x2F9', 
		'\x2', '\x2', '\x4F1', '\x4F3', '\a', '\x339', '\x2', '\x2', '\x4F2', 
		'\x4F1', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F3', '\x3', '\x2', '\x2', 
		'\x2', '\x4F3', '\x4F5', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F6', 
		'\x5', '\x6', '\x4', '\x2', '\x4F5', '\x4F4', '\x3', '\x2', '\x2', '\x2', 
		'\x4F5', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4F7', '\x3', 
		'\x2', '\x2', '\x2', '\x4F7', '\x4F8', '\a', 'm', '\x2', '\x2', '\x4F8', 
		'\x4FA', '\a', '\x2F9', '\x2', '\x2', '\x4F9', '\x4FB', '\a', '\x339', 
		'\x2', '\x2', '\x4FA', '\x4F9', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4FB', 
		'\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FC', '\x3', '\x2', '\x2', '\x2', 
		'\x4FC', '\x4FD', '\a', '\x1C', '\x2', '\x2', '\x4FD', '\x4FF', '\a', 
		'\x1B3', '\x2', '\x2', '\x4FE', '\x500', '\a', '\x339', '\x2', '\x2', 
		'\x4FF', '\x4FE', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x500', '\x3', 
		'\x2', '\x2', '\x2', '\x500', '\x502', '\x3', '\x2', '\x2', '\x2', '\x501', 
		'\x503', '\x5', '\x6', '\x4', '\x2', '\x502', '\x501', '\x3', '\x2', '\x2', 
		'\x2', '\x502', '\x503', '\x3', '\x2', '\x2', '\x2', '\x503', '\x504', 
		'\x3', '\x2', '\x2', '\x2', '\x504', '\x505', '\a', 'm', '\x2', '\x2', 
		'\x505', '\x507', '\a', '\x1B3', '\x2', '\x2', '\x506', '\x508', '\a', 
		'\x339', '\x2', '\x2', '\x507', '\x506', '\x3', '\x2', '\x2', '\x2', '\x507', 
		'\x508', '\x3', '\x2', '\x2', '\x2', '\x508', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x509', '\x50B', '\a', '\x178', '\x2', '\x2', '\x50A', '\x50C', 
		'\x5', '\x1BC', '\xDF', '\x2', '\x50B', '\x50A', '\x3', '\x2', '\x2', 
		'\x2', '\x50B', '\x50C', '\x3', '\x2', '\x2', '\x2', '\x50C', '\x50E', 
		'\x3', '\x2', '\x2', '\x2', '\x50D', '\x50F', '\a', '\x338', '\x2', '\x2', 
		'\x50E', '\x50D', '\x3', '\x2', '\x2', '\x2', '\x50E', '\x50F', '\x3', 
		'\x2', '\x2', '\x2', '\x50F', '\x512', '\x3', '\x2', '\x2', '\x2', '\x510', 
		'\x511', '\t', '\x4', '\x2', '\x2', '\x511', '\x513', '\x5', '\x1C0', 
		'\xE1', '\x2', '\x512', '\x510', '\x3', '\x2', '\x2', '\x2', '\x512', 
		'\x513', '\x3', '\x2', '\x2', '\x2', '\x513', '\x515', '\x3', '\x2', '\x2', 
		'\x2', '\x514', '\x516', '\x5', '\x2CC', '\x167', '\x2', '\x515', '\x514', 
		'\x3', '\x2', '\x2', '\x2', '\x515', '\x516', '\x3', '\x2', '\x2', '\x2', 
		'\x516', '\x518', '\x3', '\x2', '\x2', '\x2', '\x517', '\x519', '\a', 
		'\x339', '\x2', '\x2', '\x518', '\x517', '\x3', '\x2', '\x2', '\x2', '\x518', 
		'\x519', '\x3', '\x2', '\x2', '\x2', '\x519', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x51A', '\x51B', '\a', '\x17B', '\x2', '\x2', '\x51B', '\x525', 
		'\x5', '\x2E2', '\x172', '\x2', '\x51C', '\x526', '\x5', '\b', '\x5', 
		'\x2', '\x51D', '\x51F', '\a', '!', '\x2', '\x2', '\x51E', '\x520', '\a', 
		'\x339', '\x2', '\x2', '\x51F', '\x51E', '\x3', '\x2', '\x2', '\x2', '\x51F', 
		'\x520', '\x3', '\x2', '\x2', '\x2', '\x520', '\x526', '\x3', '\x2', '\x2', 
		'\x2', '\x521', '\x523', '\a', '\x42', '\x2', '\x2', '\x522', '\x524', 
		'\a', '\x339', '\x2', '\x2', '\x523', '\x522', '\x3', '\x2', '\x2', '\x2', 
		'\x523', '\x524', '\x3', '\x2', '\x2', '\x2', '\x524', '\x526', '\x3', 
		'\x2', '\x2', '\x2', '\x525', '\x51C', '\x3', '\x2', '\x2', '\x2', '\x525', 
		'\x51D', '\x3', '\x2', '\x2', '\x2', '\x525', '\x521', '\x3', '\x2', '\x2', 
		'\x2', '\x526', '+', '\x3', '\x2', '\x2', '\x2', '\x527', '\x52A', '\a', 
		'\x102', '\x2', '\x2', '\x528', '\x52B', '\x5', '\x2CC', '\x167', '\x2', 
		'\x529', '\x52B', '\a', '\x318', '\x2', '\x2', '\x52A', '\x528', '\x3', 
		'\x2', '\x2', '\x2', '\x52A', '\x529', '\x3', '\x2', '\x2', '\x2', '\x52B', 
		'\x530', '\x3', '\x2', '\x2', '\x2', '\x52C', '\x52D', '\a', '\x338', 
		'\x2', '\x2', '\x52D', '\x52F', '\a', '\x31B', '\x2', '\x2', '\x52E', 
		'\x52C', '\x3', '\x2', '\x2', '\x2', '\x52F', '\x532', '\x3', '\x2', '\x2', 
		'\x2', '\x530', '\x52E', '\x3', '\x2', '\x2', '\x2', '\x530', '\x531', 
		'\x3', '\x2', '\x2', '\x2', '\x531', '\x534', '\x3', '\x2', '\x2', '\x2', 
		'\x532', '\x530', '\x3', '\x2', '\x2', '\x2', '\x533', '\x535', '\a', 
		'\x339', '\x2', '\x2', '\x534', '\x533', '\x3', '\x2', '\x2', '\x2', '\x534', 
		'\x535', '\x3', '\x2', '\x2', '\x2', '\x535', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x536', '\x537', '\a', '\x109', '\x2', '\x2', '\x537', '\x538', 
		'\a', '\x336', '\x2', '\x2', '\x538', '\x539', '\t', '\x5', '\x2', '\x2', 
		'\x539', '\x53A', '\a', '\x338', '\x2', '\x2', '\x53A', '\x53B', '\x5', 
		'\x2CA', '\x166', '\x2', '\x53B', '\x53C', '\a', '\x338', '\x2', '\x2', 
		'\x53C', '\x541', '\x5', '\x2CA', '\x166', '\x2', '\x53D', '\x53E', '\a', 
		'\x338', '\x2', '\x2', '\x53E', '\x540', '\x5', '\x2CA', '\x166', '\x2', 
		'\x53F', '\x53D', '\x3', '\x2', '\x2', '\x2', '\x540', '\x543', '\x3', 
		'\x2', '\x2', '\x2', '\x541', '\x53F', '\x3', '\x2', '\x2', '\x2', '\x541', 
		'\x542', '\x3', '\x2', '\x2', '\x2', '\x542', '\x544', '\x3', '\x2', '\x2', 
		'\x2', '\x543', '\x541', '\x3', '\x2', '\x2', '\x2', '\x544', '\x547', 
		'\a', '\x337', '\x2', '\x2', '\x545', '\x546', '\a', '\x17D', '\x2', '\x2', 
		'\x546', '\x548', '\t', '\x6', '\x2', '\x2', '\x547', '\x545', '\x3', 
		'\x2', '\x2', '\x2', '\x547', '\x548', '\x3', '\x2', '\x2', '\x2', '\x548', 
		'\x54A', '\x3', '\x2', '\x2', '\x2', '\x549', '\x54B', '\a', '\x339', 
		'\x2', '\x2', '\x54A', '\x549', '\x3', '\x2', '\x2', '\x2', '\x54A', '\x54B', 
		'\x3', '\x2', '\x2', '\x2', '\x54B', '\x557', '\x3', '\x2', '\x2', '\x2', 
		'\x54C', '\x54D', '\a', '\x109', '\x2', '\x2', '\x54D', '\x54E', '\a', 
		'\x31C', '\x2', '\x2', '\x54E', '\x553', '\t', '\a', '\x2', '\x2', '\x54F', 
		'\x550', '\a', '\x338', '\x2', '\x2', '\x550', '\x552', '\t', '\x5', '\x2', 
		'\x2', '\x551', '\x54F', '\x3', '\x2', '\x2', '\x2', '\x552', '\x555', 
		'\x3', '\x2', '\x2', '\x2', '\x553', '\x551', '\x3', '\x2', '\x2', '\x2', 
		'\x553', '\x554', '\x3', '\x2', '\x2', '\x2', '\x554', '\x557', '\x3', 
		'\x2', '\x2', '\x2', '\x555', '\x553', '\x3', '\x2', '\x2', '\x2', '\x556', 
		'\x536', '\x3', '\x2', '\x2', '\x2', '\x556', '\x54C', '\x3', '\x2', '\x2', 
		'\x2', '\x557', '/', '\x3', '\x2', '\x2', '\x2', '\x558', '\x559', '\a', 
		'\x339', '\x2', '\x2', '\x559', '\x31', '\x3', '\x2', '\x2', '\x2', '\x55A', 
		'\x568', '\x5', '\x262', '\x132', '\x2', '\x55B', '\x568', '\x5', '\x264', 
		'\x133', '\x2', '\x55C', '\x568', '\x5', '\x1AA', '\xD6', '\x2', '\x55D', 
		'\x568', '\x5', '\x1A8', '\xD5', '\x2', '\x55E', '\x568', '\x5', '\x19E', 
		'\xD0', '\x2', '\x55F', '\x568', '\x5', '\x1A2', '\xD2', '\x2', '\x560', 
		'\x568', '\x5', '\x270', '\x139', '\x2', '\x561', '\x568', '\x5', '\x1AC', 
		'\xD7', '\x2', '\x562', '\x568', '\x5', '\x278', '\x13D', '\x2', '\x563', 
		'\x568', '\x5', '\x294', '\x14B', '\x2', '\x564', '\x568', '\x5', '\x296', 
		'\x14C', '\x2', '\x565', '\x568', '\x5', '\x29A', '\x14E', '\x2', '\x566', 
		'\x568', '\x5', '\x29C', '\x14F', '\x2', '\x567', '\x55A', '\x3', '\x2', 
		'\x2', '\x2', '\x567', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x567', '\x55C', 
		'\x3', '\x2', '\x2', '\x2', '\x567', '\x55D', '\x3', '\x2', '\x2', '\x2', 
		'\x567', '\x55E', '\x3', '\x2', '\x2', '\x2', '\x567', '\x55F', '\x3', 
		'\x2', '\x2', '\x2', '\x567', '\x560', '\x3', '\x2', '\x2', '\x2', '\x567', 
		'\x561', '\x3', '\x2', '\x2', '\x2', '\x567', '\x562', '\x3', '\x2', '\x2', 
		'\x2', '\x567', '\x563', '\x3', '\x2', '\x2', '\x2', '\x567', '\x564', 
		'\x3', '\x2', '\x2', '\x2', '\x567', '\x565', '\x3', '\x2', '\x2', '\x2', 
		'\x567', '\x566', '\x3', '\x2', '\x2', '\x2', '\x568', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x569', '\x56A', '\a', '\n', '\x2', '\x2', '\x56A', 
		'\x56B', '\a', '\xF', '\x2', '\x2', '\x56B', '\x56C', '\a', '\x122', '\x2', 
		'\x2', '\x56C', '\x56D', '\x5', '\x3BA', '\x1DE', '\x2', '\x56D', '\x574', 
		'\a', '\x17D', '\x2', '\x2', '\x56E', '\x570', '\a', '\x338', '\x2', '\x2', 
		'\x56F', '\x56E', '\x3', '\x2', '\x2', '\x2', '\x56F', '\x570', '\x3', 
		'\x2', '\x2', '\x2', '\x570', '\x571', '\x3', '\x2', '\x2', '\x2', '\x571', 
		'\x572', '\a', '\x25F', '\x2', '\x2', '\x572', '\x573', '\a', '\x324', 
		'\x2', '\x2', '\x573', '\x575', '\x5', '\x3BA', '\x1DE', '\x2', '\x574', 
		'\x56F', '\x3', '\x2', '\x2', '\x2', '\x574', '\x575', '\x3', '\x2', '\x2', 
		'\x2', '\x575', '\x57C', '\x3', '\x2', '\x2', '\x2', '\x576', '\x578', 
		'\a', '\x338', '\x2', '\x2', '\x577', '\x576', '\x3', '\x2', '\x2', '\x2', 
		'\x577', '\x578', '\x3', '\x2', '\x2', '\x2', '\x578', '\x579', '\x3', 
		'\x2', '\x2', '\x2', '\x579', '\x57A', '\a', '\xF5', '\x2', '\x2', '\x57A', 
		'\x57B', '\a', '\x324', '\x2', '\x2', '\x57B', '\x57D', '\a', '\x320', 
		'\x2', '\x2', '\x57C', '\x577', '\x3', '\x2', '\x2', '\x2', '\x57C', '\x57D', 
		'\x3', '\x2', '\x2', '\x2', '\x57D', '\x584', '\x3', '\x2', '\x2', '\x2', 
		'\x57E', '\x580', '\a', '\x338', '\x2', '\x2', '\x57F', '\x57E', '\x3', 
		'\x2', '\x2', '\x2', '\x57F', '\x580', '\x3', '\x2', '\x2', '\x2', '\x580', 
		'\x581', '\x3', '\x2', '\x2', '\x2', '\x581', '\x582', '\a', '\\', '\x2', 
		'\x2', '\x582', '\x583', '\a', '\x324', '\x2', '\x2', '\x583', '\x585', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x584', '\x57F', '\x3', '\x2', '\x2', 
		'\x2', '\x584', '\x585', '\x3', '\x2', '\x2', '\x2', '\x585', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x586', '\x587', '\a', 'I', '\x2', '\x2', 
		'\x587', '\x588', '\a', '\xF', '\x2', '\x2', '\x588', '\x589', '\a', '\x122', 
		'\x2', '\x2', '\x589', '\x58A', '\x5', '\x3BA', '\x1DE', '\x2', '\x58A', 
		'\x591', '\a', '\x17D', '\x2', '\x2', '\x58B', '\x58D', '\a', '\x338', 
		'\x2', '\x2', '\x58C', '\x58B', '\x3', '\x2', '\x2', '\x2', '\x58C', '\x58D', 
		'\x3', '\x2', '\x2', '\x2', '\x58D', '\x58E', '\x3', '\x2', '\x2', '\x2', 
		'\x58E', '\x58F', '\a', '\xF5', '\x2', '\x2', '\x58F', '\x590', '\a', 
		'\x324', '\x2', '\x2', '\x590', '\x592', '\a', '\x320', '\x2', '\x2', 
		'\x591', '\x58C', '\x3', '\x2', '\x2', '\x2', '\x591', '\x592', '\x3', 
		'\x2', '\x2', '\x2', '\x592', '\x599', '\x3', '\x2', '\x2', '\x2', '\x593', 
		'\x595', '\a', '\x338', '\x2', '\x2', '\x594', '\x593', '\x3', '\x2', 
		'\x2', '\x2', '\x594', '\x595', '\x3', '\x2', '\x2', '\x2', '\x595', '\x596', 
		'\x3', '\x2', '\x2', '\x2', '\x596', '\x597', '\a', '\\', '\x2', '\x2', 
		'\x597', '\x598', '\a', '\x324', '\x2', '\x2', '\x598', '\x59A', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x599', '\x594', '\x3', '\x2', '\x2', '\x2', 
		'\x599', '\x59A', '\x3', '\x2', '\x2', '\x2', '\x59A', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x59B', '\x59C', '\a', 'h', '\x2', '\x2', '\x59C', 
		'\x59F', '\a', '\x18D', '\x2', '\x2', '\x59D', '\x59E', '\a', '\x9A', 
		'\x2', '\x2', '\x59E', '\x5A0', '\a', 'x', '\x2', '\x2', '\x59F', '\x59D', 
		'\x3', '\x2', '\x2', '\x2', '\x59F', '\x5A0', '\x3', '\x2', '\x2', '\x2', 
		'\x5A0', '\x5A4', '\x3', '\x2', '\x2', '\x2', '\x5A1', '\x5A2', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x5A2', '\x5A3', '\a', '\x331', '\x2', '\x2', 
		'\x5A3', '\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x5A1', '\x3', 
		'\x2', '\x2', '\x2', '\x5A4', '\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A5', 
		'\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5A7', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x5A7', '\x39', '\x3', '\x2', '\x2', '\x2', '\x5A8', 
		'\x5A9', '\a', 'h', '\x2', '\x2', '\x5A9', '\x5AA', '\a', '\xF', '\x2', 
		'\x2', '\x5AA', '\x5AB', '\a', '\x122', '\x2', '\x2', '\x5AB', '\x5AC', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x5AC', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x5AD', '\x5AE', '\x5', '>', ' ', '\x2', '\x5AE', '\x5AF', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x5AF', '\x5B0', '\x5', '@', '!', '\x2', '\x5B0', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5B2', '\a', '\n', '\x2', '\x2', 
		'\x5B2', '\x5B3', '\a', '\x199', '\x2', '\x2', '\x5B3', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x5B4', '\x5B6', '\x5', '\x42', '\"', '\x2', '\x5B5', '\x5B4', 
		'\x3', '\x2', '\x2', '\x2', '\x5B5', '\x5B6', '\x3', '\x2', '\x2', '\x2', 
		'\x5B6', '\x5B8', '\x3', '\x2', '\x2', '\x2', '\x5B7', '\x5B9', '\x5', 
		'X', '-', '\x2', '\x5B8', '\x5B7', '\x3', '\x2', '\x2', '\x2', '\x5B8', 
		'\x5B9', '\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5BB', '\x3', '\x2', '\x2', 
		'\x2', '\x5BA', '\x5BC', '\x5', '\x46', '$', '\x2', '\x5BB', '\x5BA', 
		'\x3', '\x2', '\x2', '\x2', '\x5BB', '\x5BC', '\x3', '\x2', '\x2', '\x2', 
		'\x5BC', '\x5BE', '\x3', '\x2', '\x2', '\x2', '\x5BD', '\x5BF', '\x5', 
		'L', '\'', '\x2', '\x5BE', '\x5BD', '\x3', '\x2', '\x2', '\x2', '\x5BE', 
		'\x5BF', '\x3', '\x2', '\x2', '\x2', '\x5BF', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x5C0', '\x5C3', '\x5', '\x44', '#', '\x2', '\x5C1', '\x5C4', 
		'\x5', '\\', '/', '\x2', '\x5C2', '\x5C4', '\x5', 'T', '+', '\x2', '\x5C3', 
		'\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5C2', '\x3', '\x2', '\x2', 
		'\x2', '\x5C4', '\x43', '\x3', '\x2', '\x2', '\x2', '\x5C5', '\x5C6', 
		'\a', '\x8C', '\x2', '\x2', '\x5C6', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x5C7', '\x5C8', '\x5', 'J', '&', '\x2', '\x5C8', '\x5C9', '\x5', 'H', 
		'%', '\x2', '\x5C9', 'G', '\x3', '\x2', '\x2', '\x2', '\x5CA', '\x5CD', 
		'\a', '\x6', '\x2', '\x2', '\x5CB', '\x5CD', '\x5', 'n', '\x38', '\x2', 
		'\x5CC', '\x5CA', '\x3', '\x2', '\x2', '\x2', '\x5CC', '\x5CB', '\x3', 
		'\x2', '\x2', '\x2', '\x5CD', 'I', '\x3', '\x2', '\x2', '\x2', '\x5CE', 
		'\x5CF', '\a', 'h', '\x2', '\x2', '\x5CF', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x5D0', '\x5D1', '\x5', 'N', '(', '\x2', '\x5D1', '\x5D2', '\x5', 'P', 
		')', '\x2', '\x5D2', 'M', '\x3', '\x2', '\x2', '\x2', '\x5D3', '\x5D4', 
		'\a', '\x4', '\x2', '\x2', '\x5D4', '\x5D5', '\a', '\x82', '\x2', '\x2', 
		'\x5D5', '\x5D6', '\a', '\x8C', '\x2', '\x2', '\x5D6', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x5D7', '\x5DB', '\x5', 'R', '*', '\x2', '\x5D8', '\x5D9', 
		'\x5', 'V', ',', '\x2', '\x5D9', '\x5DA', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x5DA', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DB', '\x5D8', '\x3', 
		'\x2', '\x2', '\x2', '\x5DB', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DC', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x5DD', '\x5DE', '\a', '\x320', '\x2', 
		'\x2', '\x5DE', 'S', '\x3', '\x2', '\x2', '\x2', '\x5DF', '\x5E0', '\x5', 
		'V', ',', '\x2', '\x5E0', '\x5E1', '\x5', '\x3BA', '\x1DE', '\x2', '\x5E1', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x5E2', '\x5E3', '\a', '\x10', '\x2', 
		'\x2', '\x5E3', 'W', '\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5E5', '\x5', 
		'Z', '.', '\x2', '\x5E5', '\x5E6', '\x5', '^', '\x30', '\x2', '\x5E6', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x5E7', '\x5E8', '\a', '\x17D', '\x2', 
		'\x2', '\x5E8', '[', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5ED', '\x5', 
		'`', '\x31', '\x2', '\x5EA', '\x5ED', '\x5', 'j', '\x36', '\x2', '\x5EB', 
		'\x5ED', '\a', '\x320', '\x2', '\x2', '\x5EC', '\x5E9', '\x3', '\x2', 
		'\x2', '\x2', '\x5EC', '\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5EC', '\x5EB', 
		'\x3', '\x2', '\x2', '\x2', '\x5ED', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x5EE', '\x5EF', '\b', '\x30', '\x1', '\x2', '\x5EF', '\x5F0', '\a', 
		'\xF7', '\x2', '\x2', '\x5F0', '\x5F1', '\a', '\x324', '\x2', '\x2', '\x5F1', 
		'\x5F8', '\t', '\b', '\x2', '\x2', '\x5F2', '\x5F3', '\a', '\x177', '\x2', 
		'\x2', '\x5F3', '\x5F4', '\a', '\x324', '\x2', '\x2', '\x5F4', '\x5F8', 
		'\t', '\t', '\x2', '\x2', '\x5F5', '\x5F6', '\a', '\x167', '\x2', '\x2', 
		'\x5F6', '\x5F8', '\a', 'R', '\x2', '\x2', '\x5F7', '\x5EE', '\x3', '\x2', 
		'\x2', '\x2', '\x5F7', '\x5F2', '\x3', '\x2', '\x2', '\x2', '\x5F7', '\x5F5', 
		'\x3', '\x2', '\x2', '\x2', '\x5F8', '\x5FD', '\x3', '\x2', '\x2', '\x2', 
		'\x5F9', '\x5FA', '\f', '\x3', '\x2', '\x2', '\x5FA', '\x5FC', '\a', '\x338', 
		'\x2', '\x2', '\x5FB', '\x5F9', '\x3', '\x2', '\x2', '\x2', '\x5FC', '\x5FF', 
		'\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5FB', '\x3', '\x2', '\x2', '\x2', 
		'\x5FD', '\x5FE', '\x3', '\x2', '\x2', '\x2', '\x5FE', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x5FF', '\x5FD', '\x3', '\x2', '\x2', '\x2', '\x600', '\x601', 
		'\x5', '\x64', '\x33', '\x2', '\x601', '\x602', '\x5', '\x62', '\x32', 
		'\x2', '\x602', '\x603', '\x5', '\x66', '\x34', '\x2', '\x603', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x604', '\x605', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x605', '\x63', '\x3', '\x2', '\x2', '\x2', '\x606', '\x607', 
		'\a', '\x66', '\x2', '\x2', '\x607', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x608', '\x609', '\x5', 'h', '\x35', '\x2', '\x609', '\x60A', '\x5', 
		'\x66', '\x34', '\x2', '\x60A', '\x60D', '\x3', '\x2', '\x2', '\x2', '\x60B', 
		'\x60D', '\x5', '\x3BA', '\x1DE', '\x2', '\x60C', '\x608', '\x3', '\x2', 
		'\x2', '\x2', '\x60C', '\x60B', '\x3', '\x2', '\x2', '\x2', '\x60D', 'g', 
		'\x3', '\x2', '\x2', '\x2', '\x60E', '\x60F', '\a', '\x19', '\x2', '\x2', 
		'\x60F', 'i', '\x3', '\x2', '\x2', '\x2', '\x610', '\x611', '\x5', 'l', 
		'\x37', '\x2', '\x611', '\x612', '\x5', '\x66', '\x34', '\x2', '\x612', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x613', '\x614', '\a', '\x1E6', '\x2', 
		'\x2', '\x614', 'm', '\x3', '\x2', '\x2', '\x2', '\x615', '\x616', '\x5', 
		'p', '\x39', '\x2', '\x616', '\x617', '\x5', 'j', '\x36', '\x2', '\x617', 
		'\x618', '\a', '\x319', '\x2', '\x2', '\x618', '\x619', '\a', '\x338', 
		'\x2', '\x2', '\x619', '\x61C', '\x3', '\x2', '\x2', '\x2', '\x61A', '\x61C', 
		'\x5', 'j', '\x36', '\x2', '\x61B', '\x615', '\x3', '\x2', '\x2', '\x2', 
		'\x61B', '\x61A', '\x3', '\x2', '\x2', '\x2', '\x61C', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x61D', '\x61E', '\a', '\x319', '\x2', '\x2', '\x61E', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x61F', '\x620', '\a', 'I', '\x2', '\x2', 
		'\x620', '\x621', '\a', '\x199', '\x2', '\x2', '\x621', '\x624', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x622', '\x623', '\a', '\x14', '\x2', '\x2', 
		'\x623', '\x625', '\x5', '\x3BA', '\x1DE', '\x2', '\x624', '\x622', '\x3', 
		'\x2', '\x2', '\x2', '\x624', '\x625', '\x3', '\x2', '\x2', '\x2', '\x625', 
		'\x626', '\x3', '\x2', '\x2', '\x2', '\x626', '\x62B', '\a', '\x8C', '\x2', 
		'\x2', '\x627', '\x629', '\a', '\x338', '\x2', '\x2', '\x628', '\x627', 
		'\x3', '\x2', '\x2', '\x2', '\x628', '\x629', '\x3', '\x2', '\x2', '\x2', 
		'\x629', '\x62A', '\x3', '\x2', '\x2', '\x2', '\x62A', '\x62C', '\t', 
		'\n', '\x2', '\x2', '\x62B', '\x628', '\x3', '\x2', '\x2', '\x2', '\x62C', 
		'\x62D', '\x3', '\x2', '\x2', '\x2', '\x62D', '\x62B', '\x3', '\x2', '\x2', 
		'\x2', '\x62D', '\x62E', '\x3', '\x2', '\x2', '\x2', '\x62E', '\x633', 
		'\x3', '\x2', '\x2', '\x2', '\x62F', '\x630', '\a', '\x17D', '\x2', '\x2', 
		'\x630', '\x631', '\a', '\xF7', '\x2', '\x2', '\x631', '\x632', '\a', 
		'\x324', '\x2', '\x2', '\x632', '\x634', '\t', '\b', '\x2', '\x2', '\x633', 
		'\x62F', '\x3', '\x2', '\x2', '\x2', '\x633', '\x634', '\x3', '\x2', '\x2', 
		'\x2', '\x634', 's', '\x3', '\x2', '\x2', '\x2', '\x635', '\x636', '\a', 
		'h', '\x2', '\x2', '\x636', '\x639', '\a', '\x199', '\x2', '\x2', '\x637', 
		'\x638', '\a', '\x9A', '\x2', '\x2', '\x638', '\x63A', '\a', 'x', '\x2', 
		'\x2', '\x639', '\x637', '\x3', '\x2', '\x2', '\x2', '\x639', '\x63A', 
		'\x3', '\x2', '\x2', '\x2', '\x63A', '\x63F', '\x3', '\x2', '\x2', '\x2', 
		'\x63B', '\x63D', '\a', '\x338', '\x2', '\x2', '\x63C', '\x63B', '\x3', 
		'\x2', '\x2', '\x2', '\x63C', '\x63D', '\x3', '\x2', '\x2', '\x2', '\x63D', 
		'\x63E', '\x3', '\x2', '\x2', '\x2', '\x63E', '\x640', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x63F', '\x63C', '\x3', '\x2', '\x2', '\x2', '\x640', 
		'\x641', '\x3', '\x2', '\x2', '\x2', '\x641', '\x63F', '\x3', '\x2', '\x2', 
		'\x2', '\x641', '\x642', '\x3', '\x2', '\x2', '\x2', '\x642', '\x646', 
		'\x3', '\x2', '\x2', '\x2', '\x643', '\x644', '\a', '\x17D', '\x2', '\x2', 
		'\x644', '\x645', '\a', '\x265', '\x2', '\x2', '\x645', '\x647', '\a', 
		'\x1DC', '\x2', '\x2', '\x646', '\x643', '\x3', '\x2', '\x2', '\x2', '\x646', 
		'\x647', '\x3', '\x2', '\x2', '\x2', '\x647', 'u', '\x3', '\x2', '\x2', 
		'\x2', '\x648', '\x649', '\x5', 'x', '=', '\x2', '\x649', '\x64E', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x64A', '\x64F', '\x5', 'z', '>', '\x2', '\x64B', 
		'\x64C', '\a', '\x2AA', '\x2', '\x2', '\x64C', '\x64D', '\a', '\x28D', 
		'\x2', '\x2', '\x64D', '\x64F', '\a', '\xAD', '\x2', '\x2', '\x64E', '\x64A', 
		'\x3', '\x2', '\x2', '\x2', '\x64E', '\x64B', '\x3', '\x2', '\x2', '\x2', 
		'\x64F', 'w', '\x3', '\x2', '\x2', '\x2', '\x650', '\x651', '\a', '\n', 
		'\x2', '\x2', '\x651', '\x652', '\a', '\x12', '\x2', '\x2', '\x652', '\x653', 
		'\a', '\xAD', '\x2', '\x2', '\x653', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x654', '\x655', '\x5', '|', '?', '\x2', '\x655', '\x658', '\x5', '~', 
		'@', '\x2', '\x656', '\x657', '\a', '\x338', '\x2', '\x2', '\x657', '\x659', 
		'\x5', '~', '@', '\x2', '\x658', '\x656', '\x3', '\x2', '\x2', '\x2', 
		'\x658', '\x659', '\x3', '\x2', '\x2', '\x2', '\x659', '\x65A', '\x3', 
		'\x2', '\x2', '\x2', '\x65A', '\x65B', '\a', '\x337', '\x2', '\x2', '\x65B', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x65C', '\x65D', '\a', '\x17D', '\x2', 
		'\x2', '\x65D', '\x65E', '\a', '\x28D', '\x2', '\x2', '\x65E', '\x65F', 
		'\a', '\xAD', '\x2', '\x2', '\x65F', '\x660', '\a', '\x336', '\x2', '\x2', 
		'\x660', '}', '\x3', '\x2', '\x2', '\x2', '\x661', '\x662', '\a', '\x1D4', 
		'\x2', '\x2', '\x662', '\x663', '\a', '&', '\x2', '\x2', '\x663', '\x664', 
		'\a', '\xF5', '\x2', '\x2', '\x664', '\x665', '\a', '\x324', '\x2', '\x2', 
		'\x665', '\x66C', '\a', '\x320', '\x2', '\x2', '\x666', '\x667', '\a', 
		'\x1EF', '\x2', '\x2', '\x667', '\x668', '\a', '&', '\x2', '\x2', '\x668', 
		'\x669', '\a', '\xF5', '\x2', '\x2', '\x669', '\x66A', '\a', '\x324', 
		'\x2', '\x2', '\x66A', '\x66C', '\a', '\x320', '\x2', '\x2', '\x66B', 
		'\x661', '\x3', '\x2', '\x2', '\x2', '\x66B', '\x666', '\x3', '\x2', '\x2', 
		'\x2', '\x66C', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x66D', '\x66E', 
		'\a', 'I', '\x2', '\x2', '\x66E', '\x66F', '\a', '\x12', '\x2', '\x2', 
		'\x66F', '\x670', '\a', '\xAD', '\x2', '\x2', '\x670', '\x673', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x671', '\x672', '\a', '\x14', '\x2', '\x2', 
		'\x672', '\x674', '\x5', '\x3BA', '\x1DE', '\x2', '\x673', '\x671', '\x3', 
		'\x2', '\x2', '\x2', '\x673', '\x674', '\x3', '\x2', '\x2', '\x2', '\x674', 
		'\x682', '\x3', '\x2', '\x2', '\x2', '\x675', '\x680', '\a', '\x8C', '\x2', 
		'\x2', '\x676', '\x677', '\a', '\x82', '\x2', '\x2', '\x677', '\x678', 
		'\a', '\x324', '\x2', '\x2', '\x678', '\x681', '\a', '\x320', '\x2', '\x2', 
		'\x679', '\x67A', '\a', 'v', '\x2', '\x2', '\x67A', '\x67B', '\a', '\x324', 
		'\x2', '\x2', '\x67B', '\x681', '\a', '\x320', '\x2', '\x2', '\x67C', 
		'\x67D', '\a', '\x199', '\x2', '\x2', '\x67D', '\x681', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x67E', '\x67F', '\a', '\x292', '\x2', '\x2', '\x67F', 
		'\x681', '\x5', '\x3BA', '\x1DE', '\x2', '\x680', '\x676', '\x3', '\x2', 
		'\x2', '\x2', '\x680', '\x679', '\x3', '\x2', '\x2', '\x2', '\x680', '\x67C', 
		'\x3', '\x2', '\x2', '\x2', '\x680', '\x67E', '\x3', '\x2', '\x2', '\x2', 
		'\x681', '\x683', '\x3', '\x2', '\x2', '\x2', '\x682', '\x675', '\x3', 
		'\x2', '\x2', '\x2', '\x682', '\x683', '\x3', '\x2', '\x2', '\x2', '\x683', 
		'\x690', '\x3', '\x2', '\x2', '\x2', '\x684', '\x68E', '\a', '\x17D', 
		'\x2', '\x2', '\x685', '\x686', '\a', '\x18E', '\x2', '\x2', '\x686', 
		'\x687', '\a', '\x324', '\x2', '\x2', '\x687', '\x68F', '\t', '\v', '\x2', 
		'\x2', '\x688', '\x689', '\a', '\x293', '\x2', '\x2', '\x689', '\x68A', 
		'\a', '\x324', '\x2', '\x2', '\x68A', '\x68F', '\a', '\x320', '\x2', '\x2', 
		'\x68B', '\x68C', '\a', '\x1C7', '\x2', '\x2', '\x68C', '\x68D', '\a', 
		'\x324', '\x2', '\x2', '\x68D', '\x68F', '\t', '\f', '\x2', '\x2', '\x68E', 
		'\x685', '\x3', '\x2', '\x2', '\x2', '\x68E', '\x688', '\x3', '\x2', '\x2', 
		'\x2', '\x68E', '\x68B', '\x3', '\x2', '\x2', '\x2', '\x68F', '\x691', 
		'\x3', '\x2', '\x2', '\x2', '\x690', '\x684', '\x3', '\x2', '\x2', '\x2', 
		'\x690', '\x691', '\x3', '\x2', '\x2', '\x2', '\x691', '\x697', '\x3', 
		'\x2', '\x2', '\x2', '\x692', '\x693', '\a', '\x1EF', '\x2', '\x2', '\x693', 
		'\x694', '\a', '&', '\x2', '\x2', '\x694', '\x695', '\a', '\xF5', '\x2', 
		'\x2', '\x695', '\x696', '\a', '\x324', '\x2', '\x2', '\x696', '\x698', 
		'\a', '\x320', '\x2', '\x2', '\x697', '\x692', '\x3', '\x2', '\x2', '\x2', 
		'\x697', '\x698', '\x3', '\x2', '\x2', '\x2', '\x698', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x699', '\x69A', '\a', 'h', '\x2', '\x2', '\x69A', 
		'\x69B', '\a', '\x12', '\x2', '\x2', '\x69B', '\x69C', '\a', '\xAD', '\x2', 
		'\x2', '\x69C', '\x6A0', '\x5', '\x3BA', '\x1DE', '\x2', '\x69D', '\x69E', 
		'\a', '\x2AA', '\x2', '\x2', '\x69E', '\x69F', '\a', '\x292', '\x2', '\x2', 
		'\x69F', '\x6A1', '\a', '\xAD', '\x2', '\x2', '\x6A0', '\x69D', '\x3', 
		'\x2', '\x2', '\x2', '\x6A0', '\x6A1', '\x3', '\x2', '\x2', '\x2', '\x6A1', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x6A6', '\x5', '\x8C', 'G', 
		'\x2', '\x6A3', '\x6A4', '\x5', '\x94', 'K', '\x2', '\x6A4', '\x6A5', 
		'\x5', '\x8A', '\x46', '\x2', '\x6A5', '\x6A7', '\x3', '\x2', '\x2', '\x2', 
		'\x6A6', '\x6A3', '\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6A7', '\x3', 
		'\x2', '\x2', '\x2', '\x6A7', '\x6A8', '\x3', '\x2', '\x2', '\x2', '\x6A8', 
		'\x6A9', '\x5', '\x37A', '\x1BE', '\x2', '\x6A9', '\x6AA', '\x5', '\x88', 
		'\x45', '\x2', '\x6AA', '\x6AB', '\x5', '\x86', '\x44', '\x2', '\x6AB', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x6AC', '\x6B0', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x6AD', '\x6AE', '\a', '\x12F', '\x2', '\x2', '\x6AE', 
		'\x6B0', '\a', '\x27E', '\x2', '\x2', '\x6AF', '\x6AC', '\x3', '\x2', 
		'\x2', '\x2', '\x6AF', '\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6B0', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x6B1', '\x6B2', '\a', '\x15E', '\x2', '\x2', 
		'\x6B2', '\x89', '\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B4', '\a', '\x33A', 
		'\x2', '\x2', '\x6B4', '\x6B5', '\a', '\x33A', '\x2', '\x2', '\x6B5', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x6B6', '\x6B7', '\a', '\n', '\x2', 
		'\x2', '\x6B7', '\x6B8', '\a', '\x14', '\x2', '\x2', '\x6B8', '\x6B9', 
		'\a', '\xE6', '\x2', '\x2', '\x6B9', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x6BA', '\x6BE', '\x5', '\x8C', 'G', '\x2', '\x6BB', '\x6BC', '\x5', 
		'\x96', 'L', '\x2', '\x6BC', '\x6BD', '\x5', '\x8A', '\x46', '\x2', '\x6BD', 
		'\x6BF', '\x3', '\x2', '\x2', '\x2', '\x6BE', '\x6BB', '\x3', '\x2', '\x2', 
		'\x2', '\x6BE', '\x6BF', '\x3', '\x2', '\x2', '\x2', '\x6BF', '\x6C0', 
		'\x3', '\x2', '\x2', '\x2', '\x6C0', '\x6C1', '\x5', '\x37A', '\x1BE', 
		'\x2', '\x6C1', '\x6C2', '\x5', '\x88', '\x45', '\x2', '\x6C2', '\x6C3', 
		'\x5', '\x86', '\x44', '\x2', '\x6C3', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x6C4', '\x6C8', '\x5', '\x8C', 'G', '\x2', '\x6C5', '\x6C6', '\x5', 
		'\x98', 'M', '\x2', '\x6C6', '\x6C7', '\x5', '\x8A', '\x46', '\x2', '\x6C7', 
		'\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6C5', '\x3', '\x2', '\x2', 
		'\x2', '\x6C8', '\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6C9', '\x6CA', 
		'\x3', '\x2', '\x2', '\x2', '\x6CA', '\x6CB', '\x5', '\x37C', '\x1BF', 
		'\x2', '\x6CB', '\x6CC', '\x5', '\x88', '\x45', '\x2', '\x6CC', '\x6CD', 
		'\x5', '\x86', '\x44', '\x2', '\x6CD', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x6CE', '\x6D2', '\x5', '\x8C', 'G', '\x2', '\x6CF', '\x6D0', '\x5', 
		'\x9A', 'N', '\x2', '\x6D0', '\x6D1', '\x5', '\x8A', '\x46', '\x2', '\x6D1', 
		'\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6D2', '\x6CF', '\x3', '\x2', '\x2', 
		'\x2', '\x6D2', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6D4', 
		'\x3', '\x2', '\x2', '\x2', '\x6D4', '\x6D5', '\x5', '\x37E', '\x1C0', 
		'\x2', '\x6D5', '\x6D6', '\x5', '\x88', '\x45', '\x2', '\x6D6', '\x6D7', 
		'\x5', '\x86', '\x44', '\x2', '\x6D7', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x6D8', '\x6FB', '\a', '\x273', '\x2', '\x2', '\x6D9', '\x6FB', '\a', 
		'\x199', '\x2', '\x2', '\x6DA', '\x6DB', '\a', '\x12', '\x2', '\x2', '\x6DB', 
		'\x6FB', '\a', '\xAD', '\x2', '\x2', '\x6DC', '\x6DD', '\a', '\x1A3', 
		'\x2', '\x2', '\x6DD', '\x6FB', '\a', '\x93', '\x2', '\x2', '\x6DE', '\x6FB', 
		'\a', '+', '\x2', '\x2', '\x6DF', '\x6FB', '\a', '\x44', '\x2', '\x2', 
		'\x6E0', '\x6FB', '\a', '\x2FC', '\x2', '\x2', '\x6E1', '\x6FB', '\a', 
		'U', '\x2', '\x2', '\x6E2', '\x6FB', '\a', 'n', '\x2', '\x2', '\x6E3', 
		'\x6E4', '\a', '\x20C', '\x2', '\x2', '\x6E4', '\x6FB', '\a', '\x1B2', 
		'\x2', '\x2', '\x6E5', '\x6E6', '\a', '\x20C', '\x2', '\x2', '\x6E6', 
		'\x6FB', '\a', '\x2E2', '\x2', '\x2', '\x6E7', '\x6E8', '\a', '\x252', 
		'\x2', '\x2', '\x6E8', '\x6FB', '\a', '\x2FC', '\x2', '\x2', '\x6E9', 
		'\x6EA', '\a', '\x2A8', '\x2', '\x2', '\x6EA', '\x6EB', '\a', '\x139', 
		'\x2', '\x2', '\x6EB', '\x6FB', '\a', '\x1AA', '\x2', '\x2', '\x6EC', 
		'\x6FB', '\a', '\x122', '\x2', '\x2', '\x6ED', '\x6FB', '\a', '\x2B9', 
		'\x2', '\x2', '\x6EE', '\x6FB', '\a', '\x12F', '\x2', '\x2', '\x6EF', 
		'\x6F0', '\a', '\x2C3', '\x2', '\x2', '\x6F0', '\x6F1', '\a', '\x291', 
		'\x2', '\x2', '\x6F1', '\x6FB', '\a', '\x235', '\x2', '\x2', '\x6F2', 
		'\x6F3', '\a', '\x138', '\x2', '\x2', '\x6F3', '\x6FB', '\a', '\x122', 
		'\x2', '\x2', '\x6F4', '\x6FB', '\a', '\x139', '\x2', '\x2', '\x6F5', 
		'\x6F6', '\a', '\x2E7', '\x2', '\x2', '\x6F6', '\x6FB', '\a', '\xAD', 
		'\x2', '\x2', '\x6F7', '\x6F8', '\a', '\x30F', '\x2', '\x2', '\x6F8', 
		'\x6F9', '\a', '\x12F', '\x2', '\x2', '\x6F9', '\x6FB', '\a', '\x1B9', 
		'\x2', '\x2', '\x6FA', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6D9', 
		'\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6DA', '\x3', '\x2', '\x2', '\x2', 
		'\x6FA', '\x6DC', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6DE', '\x3', 
		'\x2', '\x2', '\x2', '\x6FA', '\x6DF', '\x3', '\x2', '\x2', '\x2', '\x6FA', 
		'\x6E0', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6E1', '\x3', '\x2', '\x2', 
		'\x2', '\x6FA', '\x6E2', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6E3', 
		'\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6E5', '\x3', '\x2', '\x2', '\x2', 
		'\x6FA', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6E9', '\x3', 
		'\x2', '\x2', '\x2', '\x6FA', '\x6EC', '\x3', '\x2', '\x2', '\x2', '\x6FA', 
		'\x6ED', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6EE', '\x3', '\x2', '\x2', 
		'\x2', '\x6FA', '\x6EF', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6F2', 
		'\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6F4', '\x3', '\x2', '\x2', '\x2', 
		'\x6FA', '\x6F5', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6F7', '\x3', 
		'\x2', '\x2', '\x2', '\x6FB', '\x95', '\x3', '\x2', '\x2', '\x2', '\x6FC', 
		'\x712', '\a', '\x273', '\x2', '\x2', '\x6FD', '\x712', '\a', '\x199', 
		'\x2', '\x2', '\x6FE', '\x6FF', '\a', '\x12', '\x2', '\x2', '\x6FF', '\x712', 
		'\a', '\xAD', '\x2', '\x2', '\x700', '\x712', '\a', '+', '\x2', '\x2', 
		'\x701', '\x712', '\a', '\x2FC', '\x2', '\x2', '\x702', '\x712', '\a', 
		'U', '\x2', '\x2', '\x703', '\x704', '\a', '\x20C', '\x2', '\x2', '\x704', 
		'\x712', '\a', '\x1B2', '\x2', '\x2', '\x705', '\x706', '\a', '\x20C', 
		'\x2', '\x2', '\x706', '\x712', '\a', '\x2E2', '\x2', '\x2', '\x707', 
		'\x712', '\a', '\x122', '\x2', '\x2', '\x708', '\x712', '\a', '\x12F', 
		'\x2', '\x2', '\x709', '\x70A', '\a', '\x2C3', '\x2', '\x2', '\x70A', 
		'\x70B', '\a', '\x291', '\x2', '\x2', '\x70B', '\x712', '\a', '\x235', 
		'\x2', '\x2', '\x70C', '\x70D', '\a', '\x2E7', '\x2', '\x2', '\x70D', 
		'\x712', '\a', '\xAD', '\x2', '\x2', '\x70E', '\x70F', '\a', '\x30F', 
		'\x2', '\x2', '\x70F', '\x710', '\a', '\x12F', '\x2', '\x2', '\x710', 
		'\x712', '\a', '\x1B9', '\x2', '\x2', '\x711', '\x6FC', '\x3', '\x2', 
		'\x2', '\x2', '\x711', '\x6FD', '\x3', '\x2', '\x2', '\x2', '\x711', '\x6FE', 
		'\x3', '\x2', '\x2', '\x2', '\x711', '\x700', '\x3', '\x2', '\x2', '\x2', 
		'\x711', '\x701', '\x3', '\x2', '\x2', '\x2', '\x711', '\x702', '\x3', 
		'\x2', '\x2', '\x2', '\x711', '\x703', '\x3', '\x2', '\x2', '\x2', '\x711', 
		'\x705', '\x3', '\x2', '\x2', '\x2', '\x711', '\x707', '\x3', '\x2', '\x2', 
		'\x2', '\x711', '\x708', '\x3', '\x2', '\x2', '\x2', '\x711', '\x709', 
		'\x3', '\x2', '\x2', '\x2', '\x711', '\x70C', '\x3', '\x2', '\x2', '\x2', 
		'\x711', '\x70E', '\x3', '\x2', '\x2', '\x2', '\x712', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x713', '\x714', '\t', '\r', '\x2', '\x2', '\x714', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x715', '\x716', '\t', '\xE', '\x2', 
		'\x2', '\x716', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x717', '\x718', 
		'\a', 'h', '\x2', '\x2', '\x718', '\x719', '\a', '\x1A3', '\x2', '\x2', 
		'\x719', '\x71A', '\a', '\x93', '\x2', '\x2', '\x71A', '\x71B', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x71B', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x71C', '\x71D', '\x5', '\xA0', 'Q', '\x2', '\x71D', '\x71E', '\x5', 
		'\xA2', 'R', '\x2', '\x71E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x71F', 
		'\x720', '\a', '\n', '\x2', '\x2', '\x720', '\x721', '\a', '\x1A3', '\x2', 
		'\x2', '\x721', '\x722', '\a', '\x93', '\x2', '\x2', '\x722', '\x723', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x723', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\x724', '\x725', '\a', '\x13E', '\x2', '\x2', '\x725', '\x735', 
		'\a', '\x336', '\x2', '\x2', '\x726', '\x727', '\a', '\x16', '\x2', '\x2', 
		'\x727', '\x728', '\a', '\x324', '\x2', '\x2', '\x728', '\x736', '\t', 
		'\xF', '\x2', '\x2', '\x729', '\x72A', '\a', '\x1FB', '\x2', '\x2', '\x72A', 
		'\x72B', '\a', '\x324', '\x2', '\x2', '\x72B', '\x736', '\a', '\x31C', 
		'\x2', '\x2', '\x72C', '\x72D', '\a', '\x217', '\x2', '\x2', '\x72D', 
		'\x72E', '\a', '\x324', '\x2', '\x2', '\x72E', '\x736', '\a', '\x31C', 
		'\x2', '\x2', '\x72F', '\x730', '\a', '\x1D3', '\x2', '\x2', '\x730', 
		'\x731', '\a', '\x324', '\x2', '\x2', '\x731', '\x736', '\t', '\t', '\x2', 
		'\x2', '\x732', '\x733', '\a', '\x2B1', '\x2', '\x2', '\x733', '\x734', 
		'\a', '\x324', '\x2', '\x2', '\x734', '\x736', '\a', '\x31C', '\x2', '\x2', 
		'\x735', '\x726', '\x3', '\x2', '\x2', '\x2', '\x735', '\x729', '\x3', 
		'\x2', '\x2', '\x2', '\x735', '\x72C', '\x3', '\x2', '\x2', '\x2', '\x735', 
		'\x72F', '\x3', '\x2', '\x2', '\x2', '\x735', '\x732', '\x3', '\x2', '\x2', 
		'\x2', '\x736', '\x737', '\x3', '\x2', '\x2', '\x2', '\x737', '\x883', 
		'\a', '\x337', '\x2', '\x2', '\x738', '\x739', '\a', '\x4', '\x2', '\x2', 
		'\x739', '\x73A', '\a', 'U', '\x2', '\x2', '\x73A', '\x883', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x73B', '\x73C', '\a', '\x2AA', '\x2', '\x2', '\x73C', 
		'\x73D', '\a', 'U', '\x2', '\x2', '\x73D', '\x883', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x73E', '\x73F', '\a', '\x4', '\x2', '\x2', '\x73F', '\x740', 
		'\a', '\x2AD', '\x2', '\x2', '\x740', '\x741', '\a', '\xE6', '\x2', '\x2', 
		'\x741', '\x742', '\a', '\x320', '\x2', '\x2', '\x742', '\x743', '\a', 
		'\x17D', '\x2', '\x2', '\x743', '\x747', '\a', '\x336', '\x2', '\x2', 
		'\x744', '\x745', '\a', '\x1F0', '\x2', '\x2', '\x745', '\x746', '\a', 
		'\x324', '\x2', '\x2', '\x746', '\x748', '\a', '\x320', '\x2', '\x2', 
		'\x747', '\x744', '\x3', '\x2', '\x2', '\x2', '\x747', '\x748', '\x3', 
		'\x2', '\x2', '\x2', '\x748', '\x74F', '\x3', '\x2', '\x2', '\x2', '\x749', 
		'\x74B', '\a', '\x338', '\x2', '\x2', '\x74A', '\x749', '\x3', '\x2', 
		'\x2', '\x2', '\x74A', '\x74B', '\x3', '\x2', '\x2', '\x2', '\x74B', '\x74C', 
		'\x3', '\x2', '\x2', '\x2', '\x74C', '\x74D', '\a', '\x18', '\x2', '\x2', 
		'\x74D', '\x74E', '\a', '\x324', '\x2', '\x2', '\x74E', '\x750', '\t', 
		'\x10', '\x2', '\x2', '\x74F', '\x74A', '\x3', '\x2', '\x2', '\x2', '\x74F', 
		'\x750', '\x3', '\x2', '\x2', '\x2', '\x750', '\x757', '\x3', '\x2', '\x2', 
		'\x2', '\x751', '\x753', '\a', '\x338', '\x2', '\x2', '\x752', '\x751', 
		'\x3', '\x2', '\x2', '\x2', '\x752', '\x753', '\x3', '\x2', '\x2', '\x2', 
		'\x753', '\x754', '\x3', '\x2', '\x2', '\x2', '\x754', '\x755', '\a', 
		'\x1F9', '\x2', '\x2', '\x755', '\x756', '\a', '\x324', '\x2', '\x2', 
		'\x756', '\x758', '\t', '\x11', '\x2', '\x2', '\x757', '\x752', '\x3', 
		'\x2', '\x2', '\x2', '\x757', '\x758', '\x3', '\x2', '\x2', '\x2', '\x758', 
		'\x75F', '\x3', '\x2', '\x2', '\x2', '\x759', '\x75B', '\a', '\x338', 
		'\x2', '\x2', '\x75A', '\x759', '\x3', '\x2', '\x2', '\x2', '\x75A', '\x75B', 
		'\x3', '\x2', '\x2', '\x2', '\x75B', '\x75C', '\x3', '\x2', '\x2', '\x2', 
		'\x75C', '\x75D', '\a', '\x2CA', '\x2', '\x2', '\x75D', '\x75E', '\a', 
		'\x324', '\x2', '\x2', '\x75E', '\x760', '\t', '\x11', '\x2', '\x2', '\x75F', 
		'\x75A', '\x3', '\x2', '\x2', '\x2', '\x75F', '\x760', '\x3', '\x2', '\x2', 
		'\x2', '\x760', '\x767', '\x3', '\x2', '\x2', '\x2', '\x761', '\x763', 
		'\a', '\x338', '\x2', '\x2', '\x762', '\x761', '\x3', '\x2', '\x2', '\x2', 
		'\x762', '\x763', '\x3', '\x2', '\x2', '\x2', '\x763', '\x764', '\x3', 
		'\x2', '\x2', '\x2', '\x764', '\x765', '\a', '\x1A5', '\x2', '\x2', '\x765', 
		'\x766', '\a', '\x324', '\x2', '\x2', '\x766', '\x768', '\a', '\x31C', 
		'\x2', '\x2', '\x767', '\x762', '\x3', '\x2', '\x2', '\x2', '\x767', '\x768', 
		'\x3', '\x2', '\x2', '\x2', '\x768', '\x772', '\x3', '\x2', '\x2', '\x2', 
		'\x769', '\x76B', '\a', '\x338', '\x2', '\x2', '\x76A', '\x769', '\x3', 
		'\x2', '\x2', '\x2', '\x76A', '\x76B', '\x3', '\x2', '\x2', '\x2', '\x76B', 
		'\x76C', '\x3', '\x2', '\x2', '\x2', '\x76C', '\x76D', '\a', '\x289', 
		'\x2', '\x2', '\x76D', '\x76E', '\a', '\x336', '\x2', '\x2', '\x76E', 
		'\x76F', '\a', '\a', '\x2', '\x2', '\x76F', '\x770', '\a', '\x324', '\x2', 
		'\x2', '\x770', '\x771', '\t', '\x12', '\x2', '\x2', '\x771', '\x773', 
		'\a', '\x337', '\x2', '\x2', '\x772', '\x76A', '\x3', '\x2', '\x2', '\x2', 
		'\x772', '\x773', '\x3', '\x2', '\x2', '\x2', '\x773', '\x77D', '\x3', 
		'\x2', '\x2', '\x2', '\x774', '\x776', '\a', '\x338', '\x2', '\x2', '\x775', 
		'\x774', '\x3', '\x2', '\x2', '\x2', '\x775', '\x776', '\x3', '\x2', '\x2', 
		'\x2', '\x776', '\x777', '\x3', '\x2', '\x2', '\x2', '\x777', '\x778', 
		'\a', '\x2C6', '\x2', '\x2', '\x778', '\x779', '\a', '\x336', '\x2', '\x2', 
		'\x779', '\x77A', '\a', '\a', '\x2', '\x2', '\x77A', '\x77B', '\a', '\x324', 
		'\x2', '\x2', '\x77B', '\x77C', '\a', '\x29E', '\x2', '\x2', '\x77C', 
		'\x77E', '\a', '\x337', '\x2', '\x2', '\x77D', '\x775', '\x3', '\x2', 
		'\x2', '\x2', '\x77D', '\x77E', '\x3', '\x2', '\x2', '\x2', '\x77E', '\x77F', 
		'\x3', '\x2', '\x2', '\x2', '\x77F', '\x883', '\a', '\x337', '\x2', '\x2', 
		'\x780', '\x781', '\a', '\x2C6', '\x2', '\x2', '\x781', '\x78A', '\a', 
		'\x336', '\x2', '\x2', '\x782', '\x783', '\a', '\a', '\x2', '\x2', '\x783', 
		'\x784', '\a', '\x324', '\x2', '\x2', '\x784', '\x78B', '\t', '\x13', 
		'\x2', '\x2', '\x785', '\x786', '\a', '\x29F', '\x2', '\x2', '\x786', 
		'\x787', '\a', '\x324', '\x2', '\x2', '\x787', '\x788', '\a', '\x336', 
		'\x2', '\x2', '\x788', '\x789', '\a', '\x320', '\x2', '\x2', '\x789', 
		'\x78B', '\a', '\x337', '\x2', '\x2', '\x78A', '\x782', '\x3', '\x2', 
		'\x2', '\x2', '\x78A', '\x785', '\x3', '\x2', '\x2', '\x2', '\x78B', '\x883', 
		'\x3', '\x2', '\x2', '\x2', '\x78C', '\x78D', '\a', '\x289', '\x2', '\x2', 
		'\x78D', '\x7A4', '\a', '\x336', '\x2', '\x2', '\x78E', '\x78F', '\a', 
		'\a', '\x2', '\x2', '\x78F', '\x790', '\a', '\x324', '\x2', '\x2', '\x790', 
		'\x7A5', '\t', '\x13', '\x2', '\x2', '\x791', '\x792', '\a', '\x29F', 
		'\x2', '\x2', '\x792', '\x793', '\a', '\x324', '\x2', '\x2', '\x793', 
		'\x79E', '\a', '\x336', '\x2', '\x2', '\x794', '\x796', '\a', '\x338', 
		'\x2', '\x2', '\x795', '\x794', '\x3', '\x2', '\x2', '\x2', '\x795', '\x796', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x797', '\x3', '\x2', '\x2', '\x2', 
		'\x797', '\x799', '\a', '\x320', '\x2', '\x2', '\x798', '\x795', '\x3', 
		'\x2', '\x2', '\x2', '\x799', '\x79C', '\x3', '\x2', '\x2', '\x2', '\x79A', 
		'\x798', '\x3', '\x2', '\x2', '\x2', '\x79A', '\x79B', '\x3', '\x2', '\x2', 
		'\x2', '\x79B', '\x79F', '\x3', '\x2', '\x2', '\x2', '\x79C', '\x79A', 
		'\x3', '\x2', '\x2', '\x2', '\x79D', '\x79F', '\a', '\xD6', '\x2', '\x2', 
		'\x79E', '\x79A', '\x3', '\x2', '\x2', '\x2', '\x79E', '\x79D', '\x3', 
		'\x2', '\x2', '\x2', '\x79F', '\x7A0', '\x3', '\x2', '\x2', '\x2', '\x7A0', 
		'\x7A5', '\a', '\x337', '\x2', '\x2', '\x7A1', '\x7A2', '\a', '\x2D0', 
		'\x2', '\x2', '\x7A2', '\x7A3', '\a', '\x324', '\x2', '\x2', '\x7A3', 
		'\x7A5', '\a', '\x31C', '\x2', '\x2', '\x7A4', '\x78E', '\x3', '\x2', 
		'\x2', '\x2', '\x7A4', '\x791', '\x3', '\x2', '\x2', '\x2', '\x7A4', '\x7A1', 
		'\x3', '\x2', '\x2', '\x2', '\x7A5', '\x883', '\x3', '\x2', '\x2', '\x2', 
		'\x7A6', '\x7A7', '\a', '\x25C', '\x2', '\x2', '\x7A7', '\x7A8', '\a', 
		'\x2AD', '\x2', '\x2', '\x7A8', '\x7A9', '\a', '\xE6', '\x2', '\x2', '\x7A9', 
		'\x7E3', '\a', '\x320', '\x2', '\x2', '\x7AA', '\x7AB', '\a', '\x17D', 
		'\x2', '\x2', '\x7AB', '\x7BB', '\a', '\x336', '\x2', '\x2', '\x7AC', 
		'\x7AD', '\a', '\x1F0', '\x2', '\x2', '\x7AD', '\x7AE', '\a', '\x324', 
		'\x2', '\x2', '\x7AE', '\x7BC', '\a', '\x320', '\x2', '\x2', '\x7AF', 
		'\x7B0', '\a', '\x18', '\x2', '\x2', '\x7B0', '\x7B1', '\a', '\x324', 
		'\x2', '\x2', '\x7B1', '\x7BC', '\t', '\x10', '\x2', '\x2', '\x7B2', '\x7B3', 
		'\a', '\x1F9', '\x2', '\x2', '\x7B3', '\x7B4', '\a', '\x324', '\x2', '\x2', 
		'\x7B4', '\x7BC', '\t', '\x11', '\x2', '\x2', '\x7B5', '\x7B6', '\a', 
		'\x2CA', '\x2', '\x2', '\x7B6', '\x7B7', '\a', '\x324', '\x2', '\x2', 
		'\x7B7', '\x7BC', '\t', '\x11', '\x2', '\x2', '\x7B8', '\x7B9', '\a', 
		'\x1A5', '\x2', '\x2', '\x7B9', '\x7BA', '\a', '\x324', '\x2', '\x2', 
		'\x7BA', '\x7BC', '\a', '\x31C', '\x2', '\x2', '\x7BB', '\x7AC', '\x3', 
		'\x2', '\x2', '\x2', '\x7BB', '\x7AF', '\x3', '\x2', '\x2', '\x2', '\x7BB', 
		'\x7B2', '\x3', '\x2', '\x2', '\x2', '\x7BB', '\x7B5', '\x3', '\x2', '\x2', 
		'\x2', '\x7BB', '\x7B8', '\x3', '\x2', '\x2', '\x2', '\x7BC', '\x7E4', 
		'\x3', '\x2', '\x2', '\x2', '\x7BD', '\x7BE', '\a', '\x2C6', '\x2', '\x2', 
		'\x7BE', '\x7C7', '\a', '\x336', '\x2', '\x2', '\x7BF', '\x7C0', '\a', 
		'\a', '\x2', '\x2', '\x7C0', '\x7C1', '\a', '\x324', '\x2', '\x2', '\x7C1', 
		'\x7C8', '\t', '\x13', '\x2', '\x2', '\x7C2', '\x7C3', '\a', '\x29F', 
		'\x2', '\x2', '\x7C3', '\x7C4', '\a', '\x324', '\x2', '\x2', '\x7C4', 
		'\x7C5', '\a', '\x336', '\x2', '\x2', '\x7C5', '\x7C6', '\a', '\x320', 
		'\x2', '\x2', '\x7C6', '\x7C8', '\a', '\x337', '\x2', '\x2', '\x7C7', 
		'\x7BF', '\x3', '\x2', '\x2', '\x2', '\x7C7', '\x7C2', '\x3', '\x2', '\x2', 
		'\x2', '\x7C8', '\x7E4', '\x3', '\x2', '\x2', '\x2', '\x7C9', '\x7CA', 
		'\a', '\x289', '\x2', '\x2', '\x7CA', '\x7E1', '\a', '\x336', '\x2', '\x2', 
		'\x7CB', '\x7CC', '\a', '\a', '\x2', '\x2', '\x7CC', '\x7CD', '\a', '\x324', 
		'\x2', '\x2', '\x7CD', '\x7E2', '\t', '\x13', '\x2', '\x2', '\x7CE', '\x7CF', 
		'\a', '\x29F', '\x2', '\x2', '\x7CF', '\x7D0', '\a', '\x324', '\x2', '\x2', 
		'\x7D0', '\x7DB', '\a', '\x336', '\x2', '\x2', '\x7D1', '\x7D3', '\a', 
		'\x338', '\x2', '\x2', '\x7D2', '\x7D1', '\x3', '\x2', '\x2', '\x2', '\x7D2', 
		'\x7D3', '\x3', '\x2', '\x2', '\x2', '\x7D3', '\x7D4', '\x3', '\x2', '\x2', 
		'\x2', '\x7D4', '\x7D6', '\a', '\x320', '\x2', '\x2', '\x7D5', '\x7D2', 
		'\x3', '\x2', '\x2', '\x2', '\x7D6', '\x7D9', '\x3', '\x2', '\x2', '\x2', 
		'\x7D7', '\x7D5', '\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7D8', '\x3', 
		'\x2', '\x2', '\x2', '\x7D8', '\x7DC', '\x3', '\x2', '\x2', '\x2', '\x7D9', 
		'\x7D7', '\x3', '\x2', '\x2', '\x2', '\x7DA', '\x7DC', '\a', '\xD6', '\x2', 
		'\x2', '\x7DB', '\x7D7', '\x3', '\x2', '\x2', '\x2', '\x7DB', '\x7DA', 
		'\x3', '\x2', '\x2', '\x2', '\x7DC', '\x7DD', '\x3', '\x2', '\x2', '\x2', 
		'\x7DD', '\x7E2', '\a', '\x337', '\x2', '\x2', '\x7DE', '\x7DF', '\a', 
		'\x2D0', '\x2', '\x2', '\x7DF', '\x7E0', '\a', '\x324', '\x2', '\x2', 
		'\x7E0', '\x7E2', '\a', '\x31C', '\x2', '\x2', '\x7E1', '\x7CB', '\x3', 
		'\x2', '\x2', '\x2', '\x7E1', '\x7CE', '\x3', '\x2', '\x2', '\x2', '\x7E1', 
		'\x7DE', '\x3', '\x2', '\x2', '\x2', '\x7E2', '\x7E4', '\x3', '\x2', '\x2', 
		'\x2', '\x7E3', '\x7AA', '\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7BD', 
		'\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7C9', '\x3', '\x2', '\x2', '\x2', 
		'\x7E4', '\x7E5', '\x3', '\x2', '\x2', '\x2', '\x7E5', '\x883', '\a', 
		'\x337', '\x2', '\x2', '\x7E6', '\x7E7', '\a', '\x2AA', '\x2', '\x2', 
		'\x7E7', '\x7E8', '\a', '\x2AD', '\x2', '\x2', '\x7E8', '\x7E9', '\a', 
		'\xE6', '\x2', '\x2', '\x7E9', '\x883', '\a', '\x320', '\x2', '\x2', '\x7EA', 
		'\x883', '\a', '\xAB', '\x2', '\x2', '\x7EB', '\x7EC', '\a', '\xAB', '\x2', 
		'\x2', '\x7EC', '\x7ED', '\a', '\x1A3', '\x2', '\x2', '\x7ED', '\x7EE', 
		'\a', '\x93', '\x2', '\x2', '\x7EE', '\x805', '\a', '\xE6', '\x2', '\x2', 
		'\x7EF', '\x7F1', '\a', '\x338', '\x2', '\x2', '\x7F0', '\x7EF', '\x3', 
		'\x2', '\x2', '\x2', '\x7F0', '\x7F1', '\x3', '\x2', '\x2', '\x2', '\x7F1', 
		'\x7F2', '\x3', '\x2', '\x2', '\x2', '\x7F2', '\x7F3', '\a', '\x320', 
		'\x2', '\x2', '\x7F3', '\x7F4', '\a', '\x17D', '\x2', '\x2', '\x7F4', 
		'\x7F5', '\a', '\x336', '\x2', '\x2', '\x7F5', '\x7F6', '\a', '\x237', 
		'\x2', '\x2', '\x7F6', '\x7F7', '\a', '\x324', '\x2', '\x2', '\x7F7', 
		'\x7F8', '\a', '\x320', '\x2', '\x2', '\x7F8', '\x7F9', '\a', '\x338', 
		'\x2', '\x2', '\x7F9', '\x7FA', '\a', '\x18', '\x2', '\x2', '\x7FA', '\x7FB', 
		'\a', '\x324', '\x2', '\x2', '\x7FB', '\x7FC', '\t', '\x10', '\x2', '\x2', 
		'\x7FC', '\x7FD', '\a', '\x338', '\x2', '\x2', '\x7FD', '\x7FE', '\a', 
		'\x1F9', '\x2', '\x2', '\x7FE', '\x7FF', '\a', '\x324', '\x2', '\x2', 
		'\x7FF', '\x800', '\a', '\x240', '\x2', '\x2', '\x800', '\x801', '\a', 
		'\x338', '\x2', '\x2', '\x801', '\x802', '\a', '\x2CA', '\x2', '\x2', 
		'\x802', '\x803', '\a', '\x324', '\x2', '\x2', '\x803', '\x804', '\t', 
		'\x11', '\x2', '\x2', '\x804', '\x806', '\a', '\x337', '\x2', '\x2', '\x805', 
		'\x7F0', '\x3', '\x2', '\x2', '\x2', '\x806', '\x807', '\x3', '\x2', '\x2', 
		'\x2', '\x807', '\x805', '\x3', '\x2', '\x2', '\x2', '\x807', '\x808', 
		'\x3', '\x2', '\x2', '\x2', '\x808', '\x883', '\x3', '\x2', '\x2', '\x2', 
		'\x809', '\x80A', '\a', '\x25C', '\x2', '\x2', '\x80A', '\x80B', '\a', 
		'\x1A3', '\x2', '\x2', '\x80B', '\x80C', '\a', '\x93', '\x2', '\x2', '\x80C', 
		'\x82F', '\a', '\xE6', '\x2', '\x2', '\x80D', '\x80F', '\a', '\x338', 
		'\x2', '\x2', '\x80E', '\x80D', '\x3', '\x2', '\x2', '\x2', '\x80E', '\x80F', 
		'\x3', '\x2', '\x2', '\x2', '\x80F', '\x810', '\x3', '\x2', '\x2', '\x2', 
		'\x810', '\x811', '\a', '\x320', '\x2', '\x2', '\x811', '\x812', '\a', 
		'\x17D', '\x2', '\x2', '\x812', '\x813', '\a', '\x336', '\x2', '\x2', 
		'\x813', '\x814', '\a', '\x237', '\x2', '\x2', '\x814', '\x815', '\a', 
		'\x324', '\x2', '\x2', '\x815', '\x81C', '\a', '\x320', '\x2', '\x2', 
		'\x816', '\x818', '\a', '\x338', '\x2', '\x2', '\x817', '\x816', '\x3', 
		'\x2', '\x2', '\x2', '\x817', '\x818', '\x3', '\x2', '\x2', '\x2', '\x818', 
		'\x819', '\x3', '\x2', '\x2', '\x2', '\x819', '\x81A', '\a', '\x18', '\x2', 
		'\x2', '\x81A', '\x81B', '\a', '\x324', '\x2', '\x2', '\x81B', '\x81D', 
		'\t', '\x10', '\x2', '\x2', '\x81C', '\x817', '\x3', '\x2', '\x2', '\x2', 
		'\x81C', '\x81D', '\x3', '\x2', '\x2', '\x2', '\x81D', '\x824', '\x3', 
		'\x2', '\x2', '\x2', '\x81E', '\x820', '\a', '\x338', '\x2', '\x2', '\x81F', 
		'\x81E', '\x3', '\x2', '\x2', '\x2', '\x81F', '\x820', '\x3', '\x2', '\x2', 
		'\x2', '\x820', '\x821', '\x3', '\x2', '\x2', '\x2', '\x821', '\x822', 
		'\a', '\x1F9', '\x2', '\x2', '\x822', '\x823', '\a', '\x324', '\x2', '\x2', 
		'\x823', '\x825', '\a', '\x240', '\x2', '\x2', '\x824', '\x81F', '\x3', 
		'\x2', '\x2', '\x2', '\x824', '\x825', '\x3', '\x2', '\x2', '\x2', '\x825', 
		'\x82C', '\x3', '\x2', '\x2', '\x2', '\x826', '\x828', '\a', '\x338', 
		'\x2', '\x2', '\x827', '\x826', '\x3', '\x2', '\x2', '\x2', '\x827', '\x828', 
		'\x3', '\x2', '\x2', '\x2', '\x828', '\x829', '\x3', '\x2', '\x2', '\x2', 
		'\x829', '\x82A', '\a', '\x2CA', '\x2', '\x2', '\x82A', '\x82B', '\a', 
		'\x324', '\x2', '\x2', '\x82B', '\x82D', '\t', '\x11', '\x2', '\x2', '\x82C', 
		'\x827', '\x3', '\x2', '\x2', '\x2', '\x82C', '\x82D', '\x3', '\x2', '\x2', 
		'\x2', '\x82D', '\x82E', '\x3', '\x2', '\x2', '\x2', '\x82E', '\x830', 
		'\a', '\x337', '\x2', '\x2', '\x82F', '\x80E', '\x3', '\x2', '\x2', '\x2', 
		'\x830', '\x831', '\x3', '\x2', '\x2', '\x2', '\x831', '\x82F', '\x3', 
		'\x2', '\x2', '\x2', '\x831', '\x832', '\x3', '\x2', '\x2', '\x2', '\x832', 
		'\x883', '\x3', '\x2', '\x2', '\x2', '\x833', '\x834', '\a', '\x92', '\x2', 
		'\x2', '\x834', '\x835', '\a', 'I', '\x2', '\x2', '\x835', '\x836', '\a', 
		'\r', '\x2', '\x2', '\x836', '\x883', '\a', 'U', '\x2', '\x2', '\x837', 
		'\x838', '\a', '^', '\x2', '\x2', '\x838', '\x839', '\a', 'I', '\x2', 
		'\x2', '\x839', '\x83A', '\a', '\r', '\x2', '\x2', '\x83A', '\x883', '\a', 
		'U', '\x2', '\x2', '\x83B', '\x883', '\a', '~', '\x2', '\x2', '\x83C', 
		'\x883', '\a', '\x207', '\x2', '\x2', '\x83D', '\x83E', '\a', '\x4', '\x2', 
		'\x2', '\x83E', '\x83F', '\a', '\x236', '\x2', '\x2', '\x83F', '\x840', 
		'\a', '\x320', '\x2', '\x2', '\x840', '\x862', '\a', '\x336', '\x2', '\x2', 
		'\x841', '\x842', '\a', '\x17D', '\x2', '\x2', '\x842', '\x843', '\a', 
		'\x1E0', '\x2', '\x2', '\x843', '\x844', '\a', '\xE6', '\x2', '\x2', '\x844', 
		'\x845', '\a', '\x336', '\x2', '\x2', '\x845', '\x846', '\a', '\xA7', 
		'\x2', '\x2', '\x846', '\x847', '\a', '\xA7', '\x2', '\x2', '\x847', '\x848', 
		'\x3', '\x2', '\x2', '\x2', '\x848', '\x863', '\a', '\x337', '\x2', '\x2', 
		'\x849', '\x84A', '\a', '\x17D', '\x2', '\x2', '\x84A', '\x84B', '\a', 
		'\x227', '\x2', '\x2', '\x84B', '\x857', '\a', '\x336', '\x2', '\x2', 
		'\x84C', '\x84E', '\a', '\x338', '\x2', '\x2', '\x84D', '\x84C', '\x3', 
		'\x2', '\x2', '\x2', '\x84D', '\x84E', '\x3', '\x2', '\x2', '\x2', '\x84E', 
		'\x84F', '\x3', '\x2', '\x2', '\x2', '\x84F', '\x854', '\a', '\x336', 
		'\x2', '\x2', '\x850', '\x851', '\a', '\xA7', '\x2', '\x2', '\x851', '\x852', 
		'\a', '\x338', '\x2', '\x2', '\x852', '\x855', '\a', '\xA7', '\x2', '\x2', 
		'\x853', '\x855', '\a', '\xA8', '\x2', '\x2', '\x854', '\x850', '\x3', 
		'\x2', '\x2', '\x2', '\x854', '\x853', '\x3', '\x2', '\x2', '\x2', '\x855', 
		'\x856', '\x3', '\x2', '\x2', '\x2', '\x856', '\x858', '\a', '\x337', 
		'\x2', '\x2', '\x857', '\x84D', '\x3', '\x2', '\x2', '\x2', '\x858', '\x859', 
		'\x3', '\x2', '\x2', '\x2', '\x859', '\x857', '\x3', '\x2', '\x2', '\x2', 
		'\x859', '\x85A', '\x3', '\x2', '\x2', '\x2', '\x85A', '\x85B', '\x3', 
		'\x2', '\x2', '\x2', '\x85B', '\x860', '\a', '\x337', '\x2', '\x2', '\x85C', 
		'\x85D', '\a', '\x338', '\x2', '\x2', '\x85D', '\x85E', '\a', '\x287', 
		'\x2', '\x2', '\x85E', '\x85F', '\a', '\x324', '\x2', '\x2', '\x85F', 
		'\x861', '\a', '\x31C', '\x2', '\x2', '\x860', '\x85C', '\x3', '\x2', 
		'\x2', '\x2', '\x860', '\x861', '\x3', '\x2', '\x2', '\x2', '\x861', '\x863', 
		'\x3', '\x2', '\x2', '\x2', '\x862', '\x841', '\x3', '\x2', '\x2', '\x2', 
		'\x862', '\x849', '\x3', '\x2', '\x2', '\x2', '\x863', '\x864', '\x3', 
		'\x2', '\x2', '\x2', '\x864', '\x883', '\a', '\x337', '\x2', '\x2', '\x865', 
		'\x866', '\a', '\x25C', '\x2', '\x2', '\x866', '\x873', '\a', '\x236', 
		'\x2', '\x2', '\x867', '\x868', '\a', '\x4', '\x2', '\x2', '\x868', '\x869', 
		'\a', '\x227', '\x2', '\x2', '\x869', '\x86D', '\a', '\x336', '\x2', '\x2', 
		'\x86A', '\x86B', '\a', '\xA7', '\x2', '\x2', '\x86B', '\x86E', '\a', 
		'\xA7', '\x2', '\x2', '\x86C', '\x86E', '\a', '\xA8', '\x2', '\x2', '\x86D', 
		'\x86A', '\x3', '\x2', '\x2', '\x2', '\x86D', '\x86C', '\x3', '\x2', '\x2', 
		'\x2', '\x86E', '\x86F', '\x3', '\x2', '\x2', '\x2', '\x86F', '\x874', 
		'\a', '\x337', '\x2', '\x2', '\x870', '\x871', '\a', '\x287', '\x2', '\x2', 
		'\x871', '\x872', '\a', '\x324', '\x2', '\x2', '\x872', '\x874', '\a', 
		'\x31C', '\x2', '\x2', '\x873', '\x867', '\x3', '\x2', '\x2', '\x2', '\x873', 
		'\x870', '\x3', '\x2', '\x2', '\x2', '\x874', '\x883', '\x3', '\x2', '\x2', 
		'\x2', '\x875', '\x876', '\a', '\x116', '\x2', '\x2', '\x876', '\x877', 
		'\a', '\x236', '\x2', '\x2', '\x877', '\x883', '\a', '\x320', '\x2', '\x2', 
		'\x878', '\x879', '\a', '\x2AA', '\x2', '\x2', '\x879', '\x87A', '\a', 
		'\x236', '\x2', '\x2', '\x87A', '\x883', '\a', '\x320', '\x2', '\x2', 
		'\x87B', '\x883', '\a', '\x274', '\x2', '\x2', '\x87C', '\x87D', '\a', 
		'\x17D', '\x2', '\x2', '\x87D', '\x87E', '\a', '\x336', '\x2', '\x2', 
		'\x87E', '\x87F', '\a', 'i', '\x2', '\x2', '\x87F', '\x880', '\a', '\x324', 
		'\x2', '\x2', '\x880', '\x881', '\a', '\xF9', '\x2', '\x2', '\x881', '\x883', 
		'\a', '\x337', '\x2', '\x2', '\x882', '\x724', '\x3', '\x2', '\x2', '\x2', 
		'\x882', '\x738', '\x3', '\x2', '\x2', '\x2', '\x882', '\x73B', '\x3', 
		'\x2', '\x2', '\x2', '\x882', '\x73E', '\x3', '\x2', '\x2', '\x2', '\x882', 
		'\x780', '\x3', '\x2', '\x2', '\x2', '\x882', '\x78C', '\x3', '\x2', '\x2', 
		'\x2', '\x882', '\x7A6', '\x3', '\x2', '\x2', '\x2', '\x882', '\x7E6', 
		'\x3', '\x2', '\x2', '\x2', '\x882', '\x7EA', '\x3', '\x2', '\x2', '\x2', 
		'\x882', '\x7EB', '\x3', '\x2', '\x2', '\x2', '\x882', '\x809', '\x3', 
		'\x2', '\x2', '\x2', '\x882', '\x833', '\x3', '\x2', '\x2', '\x2', '\x882', 
		'\x837', '\x3', '\x2', '\x2', '\x2', '\x882', '\x83B', '\x3', '\x2', '\x2', 
		'\x2', '\x882', '\x83C', '\x3', '\x2', '\x2', '\x2', '\x882', '\x83D', 
		'\x3', '\x2', '\x2', '\x2', '\x882', '\x865', '\x3', '\x2', '\x2', '\x2', 
		'\x882', '\x875', '\x3', '\x2', '\x2', '\x2', '\x882', '\x878', '\x3', 
		'\x2', '\x2', '\x2', '\x882', '\x87B', '\x3', '\x2', '\x2', '\x2', '\x882', 
		'\x87C', '\x3', '\x2', '\x2', '\x2', '\x883', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\x884', '\x885', '\t', '\x14', '\x2', '\x2', '\x885', '\x886', 
		'\a', '\x1AC', '\x2', '\x2', '\x886', '\x887', '\a', '\x28B', '\x2', '\x2', 
		'\x887', '\x888', '\x5', '\x3BA', '\x1DE', '\x2', '\x888', '\x889', '\a', 
		'\x86', '\x2', '\x2', '\x889', '\x88A', '\a', '\x46', '\x2', '\x2', '\x88A', 
		'\x88B', '\a', '\x13E', '\x2', '\x2', '\x88B', '\x895', '\a', '\x336', 
		'\x2', '\x2', '\x88C', '\x88D', '\a', '\x45', '\x2', '\x2', '\x88D', '\x890', 
		'\a', '\x324', '\x2', '\x2', '\x88E', '\x891', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x88F', '\x891', '\a', '\r', '\x2', '\x2', '\x890', '\x88E', '\x3', 
		'\x2', '\x2', '\x2', '\x890', '\x88F', '\x3', '\x2', '\x2', '\x2', '\x891', 
		'\x893', '\x3', '\x2', '\x2', '\x2', '\x892', '\x894', '\a', '\x338', 
		'\x2', '\x2', '\x893', '\x892', '\x3', '\x2', '\x2', '\x2', '\x893', '\x894', 
		'\x3', '\x2', '\x2', '\x2', '\x894', '\x896', '\x3', '\x2', '\x2', '\x2', 
		'\x895', '\x88C', '\x3', '\x2', '\x2', '\x2', '\x895', '\x896', '\x3', 
		'\x2', '\x2', '\x2', '\x896', '\x8A3', '\x3', '\x2', '\x2', '\x2', '\x897', 
		'\x898', '\a', '\xBB', '\x2', '\x2', '\x898', '\x89E', '\a', '\x324', 
		'\x2', '\x2', '\x899', '\x89B', '\a', 'g', '\x2', '\x2', '\x89A', '\x899', 
		'\x3', '\x2', '\x2', '\x2', '\x89A', '\x89B', '\x3', '\x2', '\x2', '\x2', 
		'\x89B', '\x89C', '\x3', '\x2', '\x2', '\x2', '\x89C', '\x89F', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x89D', '\x89F', '\a', '\r', '\x2', '\x2', '\x89E', 
		'\x89A', '\x3', '\x2', '\x2', '\x2', '\x89E', '\x89D', '\x3', '\x2', '\x2', 
		'\x2', '\x89F', '\x8A1', '\x3', '\x2', '\x2', '\x2', '\x8A0', '\x8A2', 
		'\a', '\x338', '\x2', '\x2', '\x8A1', '\x8A0', '\x3', '\x2', '\x2', '\x2', 
		'\x8A1', '\x8A2', '\x3', '\x2', '\x2', '\x2', '\x8A2', '\x8A4', '\x3', 
		'\x2', '\x2', '\x2', '\x8A3', '\x897', '\x3', '\x2', '\x2', '\x2', '\x8A3', 
		'\x8A4', '\x3', '\x2', '\x2', '\x2', '\x8A4', '\x8AE', '\x3', '\x2', '\x2', 
		'\x2', '\x8A5', '\x8A6', '\a', '\x2A9', '\x2', '\x2', '\x8A6', '\x8A9', 
		'\a', '\x324', '\x2', '\x2', '\x8A7', '\x8AA', '\a', '\x320', '\x2', '\x2', 
		'\x8A8', '\x8AA', '\a', '\r', '\x2', '\x2', '\x8A9', '\x8A7', '\x3', '\x2', 
		'\x2', '\x2', '\x8A9', '\x8A8', '\x3', '\x2', '\x2', '\x2', '\x8AA', '\x8AC', 
		'\x3', '\x2', '\x2', '\x2', '\x8AB', '\x8AD', '\a', '\x338', '\x2', '\x2', 
		'\x8AC', '\x8AB', '\x3', '\x2', '\x2', '\x2', '\x8AC', '\x8AD', '\x3', 
		'\x2', '\x2', '\x2', '\x8AD', '\x8AF', '\x3', '\x2', '\x2', '\x2', '\x8AE', 
		'\x8A5', '\x3', '\x2', '\x2', '\x2', '\x8AE', '\x8AF', '\x3', '\x2', '\x2', 
		'\x2', '\x8AF', '\x8B6', '\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8B1', 
		'\a', '\x28C', '\x2', '\x2', '\x8B1', '\x8B4', '\a', '\x324', '\x2', '\x2', 
		'\x8B2', '\x8B5', '\a', '\x31C', '\x2', '\x2', '\x8B3', '\x8B5', '\a', 
		'Z', '\x2', '\x2', '\x8B4', '\x8B2', '\x3', '\x2', '\x2', '\x2', '\x8B4', 
		'\x8B3', '\x3', '\x2', '\x2', '\x2', '\x8B5', '\x8B7', '\x3', '\x2', '\x2', 
		'\x2', '\x8B6', '\x8B0', '\x3', '\x2', '\x2', '\x2', '\x8B6', '\x8B7', 
		'\x3', '\x2', '\x2', '\x2', '\x8B7', '\x8B8', '\x3', '\x2', '\x2', '\x2', 
		'\x8B8', '\x8B9', '\a', '\x337', '\x2', '\x2', '\x8B9', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\x8BA', '\x8BB', '\a', 'h', '\x2', '\x2', '\x8BB', 
		'\x8BC', '\a', '\x1AC', '\x2', '\x2', '\x8BC', '\x8BD', '\a', '\x28B', 
		'\x2', '\x2', '\x8BD', '\x8BE', '\x5', '\x3BA', '\x1DE', '\x2', '\x8BE', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\x8BF', '\x8C0', '\a', '\n', '\x2', 
		'\x2', '\x8C0', '\x8C1', '\a', '+', '\x2', '\x2', '\x8C1', '\x8E9', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x8C2', '\x8C3', '\a', '\x2AA', '\x2', '\x2', 
		'\x8C3', '\x8EA', '\a', '\x28E', '\x2', '\x2', '\x8C4', '\x8C5', '\a', 
		'\x17D', '\x2', '\x2', '\x8C5', '\x8C6', '\a', '\x28D', '\x2', '\x2', 
		'\x8C6', '\x8C7', '\a', '\xAD', '\x2', '\x2', '\x8C7', '\x8DE', '\a', 
		'\x336', '\x2', '\x2', '\x8C8', '\x8C9', '\a', '\x82', '\x2', '\x2', '\x8C9', 
		'\x8CA', '\a', '\x324', '\x2', '\x2', '\x8CA', '\x8CC', '\a', '\x320', 
		'\x2', '\x2', '\x8CB', '\x8CD', '\a', '\x338', '\x2', '\x2', '\x8CC', 
		'\x8CB', '\x3', '\x2', '\x2', '\x2', '\x8CC', '\x8CD', '\x3', '\x2', '\x2', 
		'\x2', '\x8CD', '\x8DF', '\x3', '\x2', '\x2', '\x2', '\x8CE', '\x8CF', 
		'\a', '\x1D4', '\x2', '\x2', '\x8CF', '\x8D0', '\a', '&', '\x2', '\x2', 
		'\x8D0', '\x8D1', '\a', '\xF5', '\x2', '\x2', '\x8D1', '\x8D2', '\a', 
		'\x324', '\x2', '\x2', '\x8D2', '\x8D4', '\a', '\x320', '\x2', '\x2', 
		'\x8D3', '\x8D5', '\a', '\x338', '\x2', '\x2', '\x8D4', '\x8D3', '\x3', 
		'\x2', '\x2', '\x2', '\x8D4', '\x8D5', '\x3', '\x2', '\x2', '\x2', '\x8D5', 
		'\x8DF', '\x3', '\x2', '\x2', '\x2', '\x8D6', '\x8D7', '\a', '\x1EF', 
		'\x2', '\x2', '\x8D7', '\x8D8', '\a', '&', '\x2', '\x2', '\x8D8', '\x8D9', 
		'\a', '\xF5', '\x2', '\x2', '\x8D9', '\x8DA', '\a', '\x324', '\x2', '\x2', 
		'\x8DA', '\x8DC', '\a', '\x320', '\x2', '\x2', '\x8DB', '\x8DD', '\a', 
		'\x338', '\x2', '\x2', '\x8DC', '\x8DB', '\x3', '\x2', '\x2', '\x2', '\x8DC', 
		'\x8DD', '\x3', '\x2', '\x2', '\x2', '\x8DD', '\x8DF', '\x3', '\x2', '\x2', 
		'\x2', '\x8DE', '\x8C8', '\x3', '\x2', '\x2', '\x2', '\x8DE', '\x8CE', 
		'\x3', '\x2', '\x2', '\x2', '\x8DE', '\x8D6', '\x3', '\x2', '\x2', '\x2', 
		'\x8DF', '\x8E0', '\x3', '\x2', '\x2', '\x2', '\x8E0', '\x8DE', '\x3', 
		'\x2', '\x2', '\x2', '\x8E0', '\x8E1', '\x3', '\x2', '\x2', '\x2', '\x8E1', 
		'\x8E2', '\x3', '\x2', '\x2', '\x2', '\x8E2', '\x8EA', '\a', '\x337', 
		'\x2', '\x2', '\x8E3', '\x8E4', '\a', '\x17D', '\x2', '\x2', '\x8E4', 
		'\x8E5', '\a', '\x186', '\x2', '\x2', '\x8E5', '\x8E6', '\a', '\x86', 
		'\x2', '\x2', '\x8E6', '\x8E7', '\a', '\x1A6', '\x2', '\x2', '\x8E7', 
		'\x8E8', '\a', '\x324', '\x2', '\x2', '\x8E8', '\x8EA', '\t', '\t', '\x2', 
		'\x2', '\x8E9', '\x8C2', '\x3', '\x2', '\x2', '\x2', '\x8E9', '\x8C4', 
		'\x3', '\x2', '\x2', '\x2', '\x8E9', '\x8E3', '\x3', '\x2', '\x2', '\x2', 
		'\x8EA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x8EB', '\x8EC', '\a', '\n', 
		'\x2', '\x2', '\x8EC', '\x8ED', '\a', '\x38', '\x2', '\x2', '\x8ED', '\x8EE', 
		'\a', '\x1EF', '\x2', '\x2', '\x8EE', '\x8EF', '\a', '\xAD', '\x2', '\x2', 
		'\x8EF', '\x8F0', '\x5', '\x3BA', '\x1DE', '\x2', '\x8F0', '\x8F1', '\t', 
		'\x15', '\x2', '\x2', '\x8F1', '\x8F2', '\a', '\x305', '\x2', '\x2', '\x8F2', 
		'\x8F3', '\a', '\x336', '\x2', '\x2', '\x8F3', '\x8F4', '\a', '\x1BA', 
		'\x2', '\x2', '\x8F4', '\x8F5', '\a', '\x324', '\x2', '\x2', '\x8F5', 
		'\x8FE', '\x5', '\x3BA', '\x1DE', '\x2', '\x8F6', '\x8F7', '\a', '\x338', 
		'\x2', '\x2', '\x8F7', '\x8F8', '\a', '\x18E', '\x2', '\x2', '\x8F8', 
		'\x8F9', '\a', '\x324', '\x2', '\x2', '\x8F9', '\x8FA', '\a', '\x320', 
		'\x2', '\x2', '\x8FA', '\x8FB', '\a', '\x338', '\x2', '\x2', '\x8FB', 
		'\x8FC', '\a', '\x1EE', '\x2', '\x2', '\x8FC', '\x8FD', '\a', '\x324', 
		'\x2', '\x2', '\x8FD', '\x8FF', '\a', '\x321', '\x2', '\x2', '\x8FE', 
		'\x8F6', '\x3', '\x2', '\x2', '\x2', '\x8FE', '\x8FF', '\x3', '\x2', '\x2', 
		'\x2', '\x8FF', '\x900', '\x3', '\x2', '\x2', '\x2', '\x900', '\x901', 
		'\a', '\x337', '\x2', '\x2', '\x901', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\x902', '\x903', '\a', 'I', '\x2', '\x2', '\x903', '\x904', '\a', '\x38', 
		'\x2', '\x2', '\x904', '\x905', '\a', '\x1EF', '\x2', '\x2', '\x905', 
		'\x906', '\a', '\xAD', '\x2', '\x2', '\x906', '\x907', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x907', '\x908', '\a', '\x17D', '\x2', '\x2', '\x908', 
		'\x91C', '\a', '\x173', '\x2', '\x2', '\x909', '\x90B', '\a', '\x336', 
		'\x2', '\x2', '\x90A', '\x90C', '\a', '\x338', '\x2', '\x2', '\x90B', 
		'\x90A', '\x3', '\x2', '\x2', '\x2', '\x90B', '\x90C', '\x3', '\x2', '\x2', 
		'\x2', '\x90C', '\x90D', '\x3', '\x2', '\x2', '\x2', '\x90D', '\x90E', 
		'\a', '\x1BA', '\x2', '\x2', '\x90E', '\x90F', '\a', '\x324', '\x2', '\x2', 
		'\x90F', '\x910', '\x5', '\x3BA', '\x1DE', '\x2', '\x910', '\x911', '\a', 
		'\x338', '\x2', '\x2', '\x911', '\x912', '\a', '\x18E', '\x2', '\x2', 
		'\x912', '\x913', '\a', '\x324', '\x2', '\x2', '\x913', '\x914', '\a', 
		'\x320', '\x2', '\x2', '\x914', '\x915', '\a', '\x338', '\x2', '\x2', 
		'\x915', '\x916', '\a', '\x1EE', '\x2', '\x2', '\x916', '\x917', '\a', 
		'\x324', '\x2', '\x2', '\x917', '\x918', '\a', '\x321', '\x2', '\x2', 
		'\x918', '\x91A', '\a', '\x337', '\x2', '\x2', '\x919', '\x91B', '\a', 
		'\x338', '\x2', '\x2', '\x91A', '\x919', '\x3', '\x2', '\x2', '\x2', '\x91A', 
		'\x91B', '\x3', '\x2', '\x2', '\x2', '\x91B', '\x91D', '\x3', '\x2', '\x2', 
		'\x2', '\x91C', '\x909', '\x3', '\x2', '\x2', '\x2', '\x91D', '\x91E', 
		'\x3', '\x2', '\x2', '\x2', '\x91E', '\x91C', '\x3', '\x2', '\x2', '\x2', 
		'\x91E', '\x91F', '\x3', '\x2', '\x2', '\x2', '\x91F', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\x920', '\x921', '\a', 'h', '\x2', '\x2', '\x921', 
		'\x922', '\a', '+', '\x2', '\x2', '\x922', '\x923', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x923', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x924', '\x925', 
		'\a', 'h', '\x2', '\x2', '\x925', '\x926', '\a', '\x38', '\x2', '\x2', 
		'\x926', '\x927', '\a', '\x1EF', '\x2', '\x2', '\x927', '\x928', '\a', 
		'\xAD', '\x2', '\x2', '\x928', '\x929', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x929', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x92A', '\x92B', '\a', 'h', 
		'\x2', '\x2', '\x92B', '\x92C', '\a', '\x38', '\x2', '\x2', '\x92C', '\x92D', 
		'\a', '\xBE', '\x2', '\x2', '\x92D', '\x92E', '\a', '\xAD', '\x2', '\x2', 
		'\x92E', '\x92F', '\x5', '\x3BA', '\x1DE', '\x2', '\x92F', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x930', '\x931', '\a', 'h', '\x2', '\x2', '\x931', 
		'\x932', '\a', '\x44', '\x2', '\x2', '\x932', '\x933', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x933', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x934', 
		'\x935', '\a', 'h', '\x2', '\x2', '\x935', '\x936', '\a', '\x1C8', '\x2', 
		'\x2', '\x936', '\x937', '\x5', '\x3BA', '\x1DE', '\x2', '\x937', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\x938', '\x939', '\a', 'h', '\x2', '\x2', 
		'\x939', '\x93A', '\a', '\x1C9', '\x2', '\x2', '\x93A', '\x93B', '\a', 
		'\x292', '\x2', '\x2', '\x93B', '\x93C', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x93C', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x93D', '\x93E', '\a', 'h', 
		'\x2', '\x2', '\x93E', '\x941', '\a', 'U', '\x2', '\x2', '\x93F', '\x940', 
		'\a', '\x9A', '\x2', '\x2', '\x940', '\x942', '\a', 'x', '\x2', '\x2', 
		'\x941', '\x93F', '\x3', '\x2', '\x2', '\x2', '\x941', '\x942', '\x3', 
		'\x2', '\x2', '\x2', '\x942', '\x947', '\x3', '\x2', '\x2', '\x2', '\x943', 
		'\x945', '\a', '\x338', '\x2', '\x2', '\x944', '\x943', '\x3', '\x2', 
		'\x2', '\x2', '\x944', '\x945', '\x3', '\x2', '\x2', '\x2', '\x945', '\x946', 
		'\x3', '\x2', '\x2', '\x2', '\x946', '\x948', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x947', '\x944', '\x3', '\x2', '\x2', '\x2', '\x948', '\x949', 
		'\x3', '\x2', '\x2', '\x2', '\x949', '\x947', '\x3', '\x2', '\x2', '\x2', 
		'\x949', '\x94A', '\x3', '\x2', '\x2', '\x2', '\x94A', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\x94B', '\x94C', '\a', 'h', '\x2', '\x2', '\x94C', 
		'\x94D', '\a', 'U', '\x2', '\x2', '\x94D', '\x94E', '\a', '\x19A', '\x2', 
		'\x2', '\x94E', '\x94F', '\a', '\x146', '\x2', '\x2', '\x94F', '\x950', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x950', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\x951', '\x952', '\a', 'h', '\x2', '\x2', '\x952', '\x953', '\a', 
		'U', '\x2', '\x2', '\x953', '\x954', '\a', '\x2C0', '\x2', '\x2', '\x954', 
		'\x955', '\a', '\x1C8', '\x2', '\x2', '\x955', '\x956', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x956', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x957', 
		'\x958', '\a', 'h', '\x2', '\x2', '\x958', '\x95B', '\a', 'Z', '\x2', 
		'\x2', '\x959', '\x95A', '\a', '\x9A', '\x2', '\x2', '\x95A', '\x95C', 
		'\a', 'x', '\x2', '\x2', '\x95B', '\x959', '\x3', '\x2', '\x2', '\x2', 
		'\x95B', '\x95C', '\x3', '\x2', '\x2', '\x2', '\x95C', '\x95E', '\x3', 
		'\x2', '\x2', '\x2', '\x95D', '\x95F', '\a', '\x338', '\x2', '\x2', '\x95E', 
		'\x95D', '\x3', '\x2', '\x2', '\x2', '\x95E', '\x95F', '\x3', '\x2', '\x2', 
		'\x2', '\x95F', '\x963', '\x3', '\x2', '\x2', '\x2', '\x960', '\x961', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x961', '\x962', '\a', '\x331', '\x2', 
		'\x2', '\x962', '\x964', '\x3', '\x2', '\x2', '\x2', '\x963', '\x960', 
		'\x3', '\x2', '\x2', '\x2', '\x963', '\x964', '\x3', '\x2', '\x2', '\x2', 
		'\x964', '\x965', '\x3', '\x2', '\x2', '\x2', '\x965', '\x966', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x966', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\x967', '\x968', '\a', 'h', '\x2', '\x2', '\x968', '\x969', '\a', 'n', 
		'\x2', '\x2', '\x969', '\x96A', '\x5', '\x3BA', '\x1DE', '\x2', '\x96A', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\x96B', '\x96C', '\a', 'h', '\x2', 
		'\x2', '\x96C', '\x96D', '\a', '|', '\x2', '\x2', '\x96D', '\x96E', '\a', 
		'R', '\x2', '\x2', '\x96E', '\x96F', '\a', '\x145', '\x2', '\x2', '\x96F', 
		'\x970', '\x5', '\x3BA', '\x1DE', '\x2', '\x970', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\x971', '\x972', '\a', 'h', '\x2', '\x2', '\x972', '\x973', 
		'\a', '|', '\x2', '\x2', '\x973', '\x974', '\a', '\x82', '\x2', '\x2', 
		'\x974', '\x975', '\a', '\x209', '\x2', '\x2', '\x975', '\x976', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x976', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\x977', '\x978', '\a', 'h', '\x2', '\x2', '\x978', '\x979', '\a', '|', 
		'\x2', '\x2', '\x979', '\x97A', '\a', '\xB3', '\x2', '\x2', '\x97A', '\x97D', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x97B', '\x97C', '\a', '\x14', '\x2', 
		'\x2', '\x97C', '\x97E', '\x5', '\x3BA', '\x1DE', '\x2', '\x97D', '\x97B', 
		'\x3', '\x2', '\x2', '\x2', '\x97D', '\x97E', '\x3', '\x2', '\x2', '\x2', 
		'\x97E', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x97F', '\x980', '\a', 'h', 
		'\x2', '\x2', '\x980', '\x981', '\a', '|', '\x2', '\x2', '\x981', '\x982', 
		'\a', '\x2B3', '\x2', '\x2', '\x982', '\x983', '\a', '\x286', '\x2', '\x2', 
		'\x983', '\x984', '\x5', '\x3BA', '\x1DE', '\x2', '\x984', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\x985', '\x986', '\a', 'h', '\x2', '\x2', '\x986', 
		'\x987', '\a', '|', '\x2', '\x2', '\x987', '\x98B', '\a', '\x157', '\x2', 
		'\x2', '\x988', '\x989', '\x5', '\x3BA', '\x1DE', '\x2', '\x989', '\x98A', 
		'\a', '\x331', '\x2', '\x2', '\x98A', '\x98C', '\x3', '\x2', '\x2', '\x2', 
		'\x98B', '\x988', '\x3', '\x2', '\x2', '\x2', '\x98B', '\x98C', '\x3', 
		'\x2', '\x2', '\x2', '\x98C', '\x990', '\x3', '\x2', '\x2', '\x2', '\x98D', 
		'\x98E', '\x5', '\x3BA', '\x1DE', '\x2', '\x98E', '\x98F', '\a', '\x331', 
		'\x2', '\x2', '\x98F', '\x991', '\x3', '\x2', '\x2', '\x2', '\x990', '\x98D', 
		'\x3', '\x2', '\x2', '\x2', '\x990', '\x991', '\x3', '\x2', '\x2', '\x2', 
		'\x991', '\x992', '\x3', '\x2', '\x2', '\x2', '\x992', '\x993', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x993', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\x994', '\x995', '\a', 'h', '\x2', '\x2', '\x995', '\x996', '\a', 'r', 
		'\x2', '\x2', '\x996', '\x99B', '\a', '\xDE', '\x2', '\x2', '\x997', '\x999', 
		'\a', '\x338', '\x2', '\x2', '\x998', '\x997', '\x3', '\x2', '\x2', '\x2', 
		'\x998', '\x999', '\x3', '\x2', '\x2', '\x2', '\x999', '\x99A', '\x3', 
		'\x2', '\x2', '\x2', '\x99A', '\x99C', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x99B', '\x998', '\x3', '\x2', '\x2', '\x2', '\x99C', '\x99D', '\x3', 
		'\x2', '\x2', '\x2', '\x99D', '\x99B', '\x3', '\x2', '\x2', '\x2', '\x99D', 
		'\x99E', '\x3', '\x2', '\x2', '\x2', '\x99E', '\x99F', '\x3', '\x2', '\x2', 
		'\x2', '\x99F', '\x9A4', '\a', '\xE6', '\x2', '\x2', '\x9A0', '\x9A5', 
		'\a', '\x138', '\x2', '\x2', '\x9A1', '\x9A5', '\a', 'U', '\x2', '\x2', 
		'\x9A2', '\x9A3', '\a', '\x295', '\x2', '\x2', '\x9A3', '\x9A5', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x9A4', '\x9A0', '\x3', '\x2', '\x2', '\x2', 
		'\x9A4', '\x9A1', '\x3', '\x2', '\x2', '\x2', '\x9A4', '\x9A2', '\x3', 
		'\x2', '\x2', '\x2', '\x9A5', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x9A6', 
		'\x9A7', '\a', 'h', '\x2', '\x2', '\x9A7', '\x9A8', '\a', 'r', '\x2', 
		'\x2', '\x9A8', '\x9A9', '\a', '\x13C', '\x2', '\x2', '\x9A9', '\x9AA', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x9AA', '\x9AB', '\a', '\xE6', '\x2', 
		'\x2', '\x9AB', '\x9AC', '\a', '\x138', '\x2', '\x2', '\x9AC', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\x9AD', '\x9AE', '\a', 'h', '\x2', '\x2', 
		'\x9AE', '\x9AF', '\a', '\x20C', '\x2', '\x2', '\x9AF', '\x9B0', '\a', 
		'\x1B2', '\x2', '\x2', '\x9B0', '\x9B1', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x9B1', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x9B2', '\x9B3', '\a', 'h', 
		'\x2', '\x2', '\x9B3', '\x9B4', '\a', '\x20C', '\x2', '\x2', '\x9B4', 
		'\x9B5', '\a', '\x9F', '\x2', '\x2', '\x9B5', '\x9B9', '\a', '\xE6', '\x2', 
		'\x2', '\x9B6', '\x9B7', '\x5', '\x3BA', '\x1DE', '\x2', '\x9B7', '\x9B8', 
		'\a', '\x331', '\x2', '\x2', '\x9B8', '\x9BA', '\x3', '\x2', '\x2', '\x2', 
		'\x9B9', '\x9B6', '\x3', '\x2', '\x2', '\x2', '\x9B9', '\x9BA', '\x3', 
		'\x2', '\x2', '\x2', '\x9BA', '\x9BB', '\x3', '\x2', '\x2', '\x2', '\x9BB', 
		'\x9BC', '\x5', '\x3BA', '\x1DE', '\x2', '\x9BC', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\x9BD', '\x9BE', '\a', 'h', '\x2', '\x2', '\x9BE', '\x9BF', 
		'\a', '\x20C', '\x2', '\x2', '\x9BF', '\x9C0', '\a', '\x2E2', '\x2', '\x2', 
		'\x9C0', '\x9C1', '\x5', '\x3BA', '\x1DE', '\x2', '\x9C1', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\x9C2', '\x9C3', '\a', 'h', '\x2', '\x2', '\x9C3', 
		'\x9C4', '\a', '\x23D', '\x2', '\x2', '\x9C4', '\x9C5', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x9C5', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x9C6', 
		'\x9C7', '\a', 'h', '\x2', '\x2', '\x9C7', '\x9C8', '\a', '\xBE', '\x2', 
		'\x2', '\x9C8', '\x9C9', '\a', '\xAD', '\x2', '\x2', '\x9C9', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\x9CA', '\x9CB', '\a', 'h', '\x2', '\x2', 
		'\x9CB', '\x9CC', '\a', '\x252', '\x2', '\x2', '\x9CC', '\x9CD', '\a', 
		'\x2FC', '\x2', '\x2', '\x9CD', '\x9CE', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x9CE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x9CF', '\x9D0', '\a', 'h', 
		'\x2', '\x2', '\x9D0', '\x9D1', '\a', '\x281', '\x2', '\x2', '\x9D1', 
		'\x9D2', '\a', '\x8E', '\x2', '\x2', '\x9D2', '\x9D3', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x9D3', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x9D4', 
		'\x9D5', '\a', 'h', '\x2', '\x2', '\x9D5', '\x9D6', '\a', '\x281', '\x2', 
		'\x2', '\x9D6', '\x9D7', '\a', '\x130', '\x2', '\x2', '\x9D7', '\x9D8', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x9D8', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\x9D9', '\x9DA', '\a', 'h', '\x2', '\x2', '\x9DA', '\x9DE', '\a', 
		'\x295', '\x2', '\x2', '\x9DB', '\x9DC', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x9DC', '\x9DD', '\a', '\x331', '\x2', '\x2', '\x9DD', '\x9DF', '\x3', 
		'\x2', '\x2', '\x2', '\x9DE', '\x9DB', '\x3', '\x2', '\x2', '\x2', '\x9DE', 
		'\x9DF', '\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9E3', '\x3', '\x2', '\x2', 
		'\x2', '\x9E0', '\x9E1', '\x5', '\x3BA', '\x1DE', '\x2', '\x9E1', '\x9E2', 
		'\a', '\x331', '\x2', '\x2', '\x9E2', '\x9E4', '\x3', '\x2', '\x2', '\x2', 
		'\x9E3', '\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9E3', '\x9E4', '\x3', 
		'\x2', '\x2', '\x2', '\x9E4', '\x9E5', '\x3', '\x2', '\x2', '\x2', '\x9E5', 
		'\x9E6', '\x5', '\x3BA', '\x1DE', '\x2', '\x9E6', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\x9E7', '\x9E8', '\a', 'h', '\x2', '\x2', '\x9E8', '\x9E9', 
		'\a', '\x2A8', '\x2', '\x2', '\x9E9', '\x9EA', '\a', '\x139', '\x2', '\x2', 
		'\x9EA', '\x9EB', '\a', '\x1AA', '\x2', '\x2', '\x9EB', '\x9EC', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x9EC', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\x9ED', '\x9EE', '\a', 'h', '\x2', '\x2', '\x9EE', '\x9EF', '\a', '\x2B3', 
		'\x2', '\x2', '\x9EF', '\x9F0', '\a', '\x286', '\x2', '\x2', '\x9F0', 
		'\x9F1', '\x5', '\x3BA', '\x1DE', '\x2', '\x9F1', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '\x9F2', '\x9F3', '\a', 'h', '\x2', '\x2', '\x9F3', '\x9F6', 
		'\a', '\x122', '\x2', '\x2', '\x9F4', '\x9F5', '\a', '\x9A', '\x2', '\x2', 
		'\x9F5', '\x9F7', '\a', 'x', '\x2', '\x2', '\x9F6', '\x9F4', '\x3', '\x2', 
		'\x2', '\x2', '\x9F6', '\x9F7', '\x3', '\x2', '\x2', '\x2', '\x9F7', '\x9F8', 
		'\x3', '\x2', '\x2', '\x2', '\x9F8', '\x9F9', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x9F9', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x9FA', '\x9FB', 
		'\a', 'h', '\x2', '\x2', '\x9FB', '\x9FC', '\a', '\x2B9', '\x2', '\x2', 
		'\x9FC', '\x9FD', '\x5', '\x3BA', '\x1DE', '\x2', '\x9FD', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\x9FE', '\x9FF', '\a', 'h', '\x2', '\x2', '\x9FF', 
		'\xA02', '\a', '\x12B', '\x2', '\x2', '\xA00', '\xA01', '\a', '\x9A', 
		'\x2', '\x2', '\xA01', '\xA03', '\a', 'x', '\x2', '\x2', '\xA02', '\xA00', 
		'\x3', '\x2', '\x2', '\x2', '\xA02', '\xA03', '\x3', '\x2', '\x2', '\x2', 
		'\xA03', '\xA0D', '\x3', '\x2', '\x2', '\x2', '\xA04', '\xA06', '\a', 
		'\x338', '\x2', '\x2', '\xA05', '\xA04', '\x3', '\x2', '\x2', '\x2', '\xA05', 
		'\xA06', '\x3', '\x2', '\x2', '\x2', '\xA06', '\xA0A', '\x3', '\x2', '\x2', 
		'\x2', '\xA07', '\xA08', '\x5', '\x3BA', '\x1DE', '\x2', '\xA08', '\xA09', 
		'\a', '\x331', '\x2', '\x2', '\xA09', '\xA0B', '\x3', '\x2', '\x2', '\x2', 
		'\xA0A', '\xA07', '\x3', '\x2', '\x2', '\x2', '\xA0A', '\xA0B', '\x3', 
		'\x2', '\x2', '\x2', '\xA0B', '\xA0C', '\x3', '\x2', '\x2', '\x2', '\xA0C', 
		'\xA0E', '\x5', '\x3BA', '\x1DE', '\x2', '\xA0D', '\xA05', '\x3', '\x2', 
		'\x2', '\x2', '\xA0D', '\xA0E', '\x3', '\x2', '\x2', '\x2', '\xA0E', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xA0F', '\xA10', '\a', 'h', '\x2', '\x2', 
		'\xA10', '\xA13', '\a', '\x12F', '\x2', '\x2', '\xA11', '\xA12', '\a', 
		'\x9A', '\x2', '\x2', '\xA12', '\xA14', '\a', 'x', '\x2', '\x2', '\xA13', 
		'\xA11', '\x3', '\x2', '\x2', '\x2', '\xA13', '\xA14', '\x3', '\x2', '\x2', 
		'\x2', '\xA14', '\xA15', '\x3', '\x2', '\x2', '\x2', '\xA15', '\xA16', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xA16', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xA17', '\xA18', '\a', 'h', '\x2', '\x2', '\xA18', '\xA19', '\a', 
		'\x2C3', '\x2', '\x2', '\xA19', '\xA1A', '\a', '\x291', '\x2', '\x2', 
		'\xA1A', '\xA1B', '\a', '\x235', '\x2', '\x2', '\xA1B', '\xA1C', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xA1C', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xA1D', '\xA1E', '\a', 'h', '\x2', '\x2', '\xA1E', '\xA1F', '\a', '\x131', 
		'\x2', '\x2', '\xA1F', '\xA22', '\a', '\xFE', '\x2', '\x2', '\xA20', '\xA21', 
		'\a', '\x9A', '\x2', '\x2', '\xA21', '\xA23', '\a', 'x', '\x2', '\x2', 
		'\xA22', '\xA20', '\x3', '\x2', '\x2', '\x2', '\xA22', '\xA23', '\x3', 
		'\x2', '\x2', '\x2', '\xA23', '\xA27', '\x3', '\x2', '\x2', '\x2', '\xA24', 
		'\xA25', '\x5', '\x3BA', '\x1DE', '\x2', '\xA25', '\xA26', '\a', '\x331', 
		'\x2', '\x2', '\xA26', '\xA28', '\x3', '\x2', '\x2', '\x2', '\xA27', '\xA24', 
		'\x3', '\x2', '\x2', '\x2', '\xA27', '\xA28', '\x3', '\x2', '\x2', '\x2', 
		'\xA28', '\xA29', '\x3', '\x2', '\x2', '\x2', '\xA29', '\xA2A', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xA2A', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xA2B', '\xA2C', '\a', 'h', '\x2', '\x2', '\xA2C', '\xA2F', '\a', '\x137', 
		'\x2', '\x2', '\xA2D', '\xA2E', '\a', '\x9A', '\x2', '\x2', '\xA2E', '\xA30', 
		'\a', 'x', '\x2', '\x2', '\xA2F', '\xA2D', '\x3', '\x2', '\x2', '\x2', 
		'\xA2F', '\xA30', '\x3', '\x2', '\x2', '\x2', '\xA30', '\xA3F', '\x3', 
		'\x2', '\x2', '\x2', '\xA31', '\xA33', '\a', '\x338', '\x2', '\x2', '\xA32', 
		'\xA31', '\x3', '\x2', '\x2', '\x2', '\xA32', '\xA33', '\x3', '\x2', '\x2', 
		'\x2', '\xA33', '\xA37', '\x3', '\x2', '\x2', '\x2', '\xA34', '\xA35', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xA35', '\xA36', '\a', '\x331', '\x2', 
		'\x2', '\xA36', '\xA38', '\x3', '\x2', '\x2', '\x2', '\xA37', '\xA34', 
		'\x3', '\x2', '\x2', '\x2', '\xA37', '\xA38', '\x3', '\x2', '\x2', '\x2', 
		'\xA38', '\xA3C', '\x3', '\x2', '\x2', '\x2', '\xA39', '\xA3A', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xA3A', '\xA3B', '\a', '\x331', '\x2', '\x2', 
		'\xA3B', '\xA3D', '\x3', '\x2', '\x2', '\x2', '\xA3C', '\xA39', '\x3', 
		'\x2', '\x2', '\x2', '\xA3C', '\xA3D', '\x3', '\x2', '\x2', '\x2', '\xA3D', 
		'\xA3E', '\x3', '\x2', '\x2', '\x2', '\xA3E', '\xA40', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xA3F', '\xA32', '\x3', '\x2', '\x2', '\x2', '\xA3F', 
		'\xA40', '\x3', '\x2', '\x2', '\x2', '\xA40', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xA41', '\xA42', '\a', 'h', '\x2', '\x2', '\xA42', '\xA43', '\a', 
		'\x138', '\x2', '\x2', '\xA43', '\xA44', '\a', '\x19A', '\x2', '\x2', 
		'\xA44', '\xA45', '\x5', '\x3BA', '\x1DE', '\x2', '\xA45', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xA46', '\xA47', '\a', 'h', '\x2', '\x2', '\xA47', 
		'\xA48', '\a', '\x138', '\x2', '\x2', '\xA48', '\xA49', '\a', '\x19A', 
		'\x2', '\x2', '\xA49', '\xA4A', '\a', '\x146', '\x2', '\x2', '\xA4A', 
		'\xA4B', '\x5', '\x3BA', '\x1DE', '\x2', '\xA4B', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xA4C', '\xA4D', '\a', 'h', '\x2', '\x2', '\xA4D', '\xA4E', 
		'\a', '\x138', '\x2', '\x2', '\xA4E', '\xA4F', '\a', '\x122', '\x2', '\x2', 
		'\xA4F', '\xA50', '\x5', '\x3BA', '\x1DE', '\x2', '\xA50', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xA51', '\xA52', '\a', 'h', '\x2', '\x2', '\xA52', 
		'\xA53', '\a', '\x139', '\x2', '\x2', '\xA53', '\xA54', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xA54', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xA55', 
		'\xA57', '\a', 'h', '\x2', '\x2', '\xA56', '\xA58', '\a', '\x1C4', '\x2', 
		'\x2', '\xA57', '\xA56', '\x3', '\x2', '\x2', '\x2', '\xA57', '\xA58', 
		'\x3', '\x2', '\x2', '\x2', '\xA58', '\xA59', '\x3', '\x2', '\x2', '\x2', 
		'\xA59', '\xA5A', '\a', '\x2D4', '\x2', '\x2', '\xA5A', '\xA5E', '\a', 
		'\x8C', '\x2', '\x2', '\xA5B', '\xA5C', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xA5C', '\xA5D', '\a', '\x331', '\x2', '\x2', '\xA5D', '\xA5F', '\x3', 
		'\x2', '\x2', '\x2', '\xA5E', '\xA5B', '\x3', '\x2', '\x2', '\x2', '\xA5E', 
		'\xA5F', '\x3', '\x2', '\x2', '\x2', '\xA5F', '\xA60', '\x3', '\x2', '\x2', 
		'\x2', '\xA60', '\xA61', '\x5', '\x3BA', '\x1DE', '\x2', '\xA61', '\xA6D', 
		'\a', '&', '\x2', '\x2', '\xA62', '\xA64', '\a', '\x338', '\x2', '\x2', 
		'\xA63', '\xA62', '\x3', '\x2', '\x2', '\x2', '\xA63', '\xA64', '\x3', 
		'\x2', '\x2', '\x2', '\xA64', '\xA65', '\x3', '\x2', '\x2', '\x2', '\xA65', 
		'\xA66', '\a', '+', '\x2', '\x2', '\xA66', '\xA6E', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xA67', '\xA69', '\a', '\x338', '\x2', '\x2', '\xA68', '\xA67', 
		'\x3', '\x2', '\x2', '\x2', '\xA68', '\xA69', '\x3', '\x2', '\x2', '\x2', 
		'\xA69', '\xA6A', '\x3', '\x2', '\x2', '\x2', '\xA6A', '\xA6B', '\a', 
		'\x12', '\x2', '\x2', '\xA6B', '\xA6C', '\a', '\xAD', '\x2', '\x2', '\xA6C', 
		'\xA6E', '\x5', '\x3BA', '\x1DE', '\x2', '\xA6D', '\xA63', '\x3', '\x2', 
		'\x2', '\x2', '\xA6D', '\xA68', '\x3', '\x2', '\x2', '\x2', '\xA6E', '\xA6F', 
		'\x3', '\x2', '\x2', '\x2', '\xA6F', '\xA6D', '\x3', '\x2', '\x2', '\x2', 
		'\xA6F', '\xA70', '\x3', '\x2', '\x2', '\x2', '\xA70', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\xA71', '\xA72', '\a', 'h', '\x2', '\x2', '\xA72', 
		'\xA76', '\a', '\x14B', '\x2', '\x2', '\xA73', '\xA74', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xA74', '\xA75', '\a', '\x331', '\x2', '\x2', '\xA75', 
		'\xA77', '\x3', '\x2', '\x2', '\x2', '\xA76', '\xA73', '\x3', '\x2', '\x2', 
		'\x2', '\xA76', '\xA77', '\x3', '\x2', '\x2', '\x2', '\xA77', '\xA78', 
		'\x3', '\x2', '\x2', '\x2', '\xA78', '\xA79', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xA79', '\xA7A', '\a', '\x331', '\x2', '\x2', '\xA7A', '\xA7B', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xA7B', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\xA7C', '\xA7D', '\a', 'h', '\x2', '\x2', '\xA7D', '\xA7E', '\a', 
		'\x2E7', '\x2', '\x2', '\xA7E', '\xA7F', '\a', '\xAD', '\x2', '\x2', '\xA7F', 
		'\xA83', '\x5', '\x3BA', '\x1DE', '\x2', '\xA80', '\xA81', '\a', '\x2AA', 
		'\x2', '\x2', '\xA81', '\xA82', '\a', '\x292', '\x2', '\x2', '\xA82', 
		'\xA84', '\a', '\xAD', '\x2', '\x2', '\xA83', '\xA80', '\x3', '\x2', '\x2', 
		'\x2', '\xA83', '\xA84', '\x3', '\x2', '\x2', '\x2', '\xA84', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\xA85', '\xA86', '\a', 'h', '\x2', '\x2', 
		'\xA86', '\xA89', '\a', '\x2E9', '\x2', '\x2', '\xA87', '\xA88', '\a', 
		'\x9A', '\x2', '\x2', '\xA88', '\xA8A', '\a', 'x', '\x2', '\x2', '\xA89', 
		'\xA87', '\x3', '\x2', '\x2', '\x2', '\xA89', '\xA8A', '\x3', '\x2', '\x2', 
		'\x2', '\xA8A', '\xA8E', '\x3', '\x2', '\x2', '\x2', '\xA8B', '\xA8C', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xA8C', '\xA8D', '\a', '\x331', '\x2', 
		'\x2', '\xA8D', '\xA8F', '\x3', '\x2', '\x2', '\x2', '\xA8E', '\xA8B', 
		'\x3', '\x2', '\x2', '\x2', '\xA8E', '\xA8F', '\x3', '\x2', '\x2', '\x2', 
		'\xA8F', '\xA90', '\x3', '\x2', '\x2', '\x2', '\xA90', '\xA91', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xA91', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\xA92', '\xA93', '\a', 'h', '\x2', '\x2', '\xA93', '\xA96', '\a', '\x172', 
		'\x2', '\x2', '\xA94', '\xA95', '\a', '\x9A', '\x2', '\x2', '\xA95', '\xA97', 
		'\a', 'x', '\x2', '\x2', '\xA96', '\xA94', '\x3', '\x2', '\x2', '\x2', 
		'\xA96', '\xA97', '\x3', '\x2', '\x2', '\x2', '\xA97', '\xA98', '\x3', 
		'\x2', '\x2', '\x2', '\xA98', '\xA99', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xA99', '\x107', '\x3', '\x2', '\x2', '\x2', '\xA9A', '\xA9B', '\a', 
		'h', '\x2', '\x2', '\xA9B', '\xA9C', '\a', '\x30E', '\x2', '\x2', '\xA9C', 
		'\xA9D', '\a', '\x93', '\x2', '\x2', '\xA9D', '\xA9E', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xA9E', '\x109', '\x3', '\x2', '\x2', '\x2', '\xA9F', 
		'\xAA0', '\a', 'h', '\x2', '\x2', '\xAA0', '\xAA1', '\a', '\x30F', '\x2', 
		'\x2', '\xAA1', '\xAA2', '\a', '\x12F', '\x2', '\x2', '\xAA2', '\xAA6', 
		'\a', '\x1B9', '\x2', '\x2', '\xAA3', '\xAA4', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xAA4', '\xAA5', '\a', '\x331', '\x2', '\x2', '\xAA5', '\xAA7', 
		'\x3', '\x2', '\x2', '\x2', '\xAA6', '\xAA3', '\x3', '\x2', '\x2', '\x2', 
		'\xAA6', '\xAA7', '\x3', '\x2', '\x2', '\x2', '\xAA7', '\xAA8', '\x3', 
		'\x2', '\x2', '\x2', '\xAA8', '\xAA9', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xAA9', '\x10B', '\x3', '\x2', '\x2', '\x2', '\xAAA', '\xAAB', '\a', 
		'\x1E3', '\x2', '\x2', '\xAAB', '\xABA', '\a', '\x164', '\x2', '\x2', 
		'\xAAC', '\xAAE', '\a', '\x338', '\x2', '\x2', '\xAAD', '\xAAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAAD', '\xAAE', '\x3', '\x2', '\x2', '\x2', '\xAAE', 
		'\xAB2', '\x3', '\x2', '\x2', '\x2', '\xAAF', '\xAB0', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xAB0', '\xAB1', '\a', '\x331', '\x2', '\x2', '\xAB1', 
		'\xAB3', '\x3', '\x2', '\x2', '\x2', '\xAB2', '\xAAF', '\x3', '\x2', '\x2', 
		'\x2', '\xAB2', '\xAB3', '\x3', '\x2', '\x2', '\x2', '\xAB3', '\xAB4', 
		'\x3', '\x2', '\x2', '\x2', '\xAB4', '\xAB6', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xAB5', '\xAAD', '\x3', '\x2', '\x2', '\x2', '\xAB6', '\xAB7', 
		'\x3', '\x2', '\x2', '\x2', '\xAB7', '\xAB5', '\x3', '\x2', '\x2', '\x2', 
		'\xAB7', '\xAB8', '\x3', '\x2', '\x2', '\x2', '\xAB8', '\xABB', '\x3', 
		'\x2', '\x2', '\x2', '\xAB9', '\xABB', '\a', '\x6', '\x2', '\x2', '\xABA', 
		'\xAB5', '\x3', '\x2', '\x2', '\x2', '\xABA', '\xAB9', '\x3', '\x2', '\x2', 
		'\x2', '\xABB', '\xABC', '\x3', '\x2', '\x2', '\x2', '\xABC', '\xAC6', 
		'\a', '\xE6', '\x2', '\x2', '\xABD', '\xABE', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xABE', '\xABF', '\a', '\x331', '\x2', '\x2', '\xABF', '\xAC1', 
		'\x3', '\x2', '\x2', '\x2', '\xAC0', '\xABD', '\x3', '\x2', '\x2', '\x2', 
		'\xAC0', '\xAC1', '\x3', '\x2', '\x2', '\x2', '\xAC1', '\xAC2', '\x3', 
		'\x2', '\x2', '\x2', '\xAC2', '\xAC7', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xAC3', '\xAC7', '\a', 'U', '\x2', '\x2', '\xAC4', '\xAC5', '\a', '\x6', 
		'\x2', '\x2', '\xAC5', '\xAC7', '\a', '\x138', '\x2', '\x2', '\xAC6', 
		'\xAC0', '\x3', '\x2', '\x2', '\x2', '\xAC6', '\xAC3', '\x3', '\x2', '\x2', 
		'\x2', '\xAC6', '\xAC4', '\x3', '\x2', '\x2', '\x2', '\xAC7', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\xAC8', '\xAC9', '\a', '\x1EC', '\x2', '\x2', 
		'\xAC9', '\xAD8', '\a', '\x164', '\x2', '\x2', '\xACA', '\xACC', '\a', 
		'\x338', '\x2', '\x2', '\xACB', '\xACA', '\x3', '\x2', '\x2', '\x2', '\xACB', 
		'\xACC', '\x3', '\x2', '\x2', '\x2', '\xACC', '\xAD0', '\x3', '\x2', '\x2', 
		'\x2', '\xACD', '\xACE', '\x5', '\x3BA', '\x1DE', '\x2', '\xACE', '\xACF', 
		'\a', '\x331', '\x2', '\x2', '\xACF', '\xAD1', '\x3', '\x2', '\x2', '\x2', 
		'\xAD0', '\xACD', '\x3', '\x2', '\x2', '\x2', '\xAD0', '\xAD1', '\x3', 
		'\x2', '\x2', '\x2', '\xAD1', '\xAD2', '\x3', '\x2', '\x2', '\x2', '\xAD2', 
		'\xAD4', '\x5', '\x3BA', '\x1DE', '\x2', '\xAD3', '\xACB', '\x3', '\x2', 
		'\x2', '\x2', '\xAD4', '\xAD5', '\x3', '\x2', '\x2', '\x2', '\xAD5', '\xAD3', 
		'\x3', '\x2', '\x2', '\x2', '\xAD5', '\xAD6', '\x3', '\x2', '\x2', '\x2', 
		'\xAD6', '\xAD9', '\x3', '\x2', '\x2', '\x2', '\xAD7', '\xAD9', '\a', 
		'\x6', '\x2', '\x2', '\xAD8', '\xAD3', '\x3', '\x2', '\x2', '\x2', '\xAD8', 
		'\xAD7', '\x3', '\x2', '\x2', '\x2', '\xAD9', '\xADA', '\x3', '\x2', '\x2', 
		'\x2', '\xADA', '\xAE4', '\a', '\xE6', '\x2', '\x2', '\xADB', '\xADC', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xADC', '\xADD', '\a', '\x331', '\x2', 
		'\x2', '\xADD', '\xADF', '\x3', '\x2', '\x2', '\x2', '\xADE', '\xADB', 
		'\x3', '\x2', '\x2', '\x2', '\xADE', '\xADF', '\x3', '\x2', '\x2', '\x2', 
		'\xADF', '\xAE0', '\x3', '\x2', '\x2', '\x2', '\xAE0', '\xAE5', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xAE1', '\xAE5', '\a', 'U', '\x2', '\x2', '\xAE2', 
		'\xAE3', '\a', '\x6', '\x2', '\x2', '\xAE3', '\xAE5', '\a', '\x138', '\x2', 
		'\x2', '\xAE4', '\xADE', '\x3', '\x2', '\x2', '\x2', '\xAE4', '\xAE1', 
		'\x3', '\x2', '\x2', '\x2', '\xAE4', '\xAE2', '\x3', '\x2', '\x2', '\x2', 
		'\xAE5', '\x10F', '\x3', '\x2', '\x2', '\x2', '\xAE6', '\xAE7', '\a', 
		'\x23B', '\x2', '\x2', '\xAE7', '\xAE8', '\a', '\x157', '\x2', '\x2', 
		'\xAE8', '\xAE9', '\x5', '\x382', '\x1C2', '\x2', '\xAE9', '\xAEA', '\a', 
		'\x9C', '\x2', '\x2', '\xAEA', '\xAEB', '\t', '\x16', '\x2', '\x2', '\xAEB', 
		'\xAEF', '\a', '\x25B', '\x2', '\x2', '\xAEC', '\xAED', '\a', '\x30A', 
		'\x2', '\x2', '\xAED', '\xAF0', '\a', '\x31C', '\x2', '\x2', '\xAEE', 
		'\xAF0', '\a', '\x26E', '\x2', '\x2', '\xAEF', '\xAEC', '\x3', '\x2', 
		'\x2', '\x2', '\xAEF', '\xAEE', '\x3', '\x2', '\x2', '\x2', '\xAEF', '\xAF0', 
		'\x3', '\x2', '\x2', '\x2', '\xAF0', '\xAF2', '\x3', '\x2', '\x2', '\x2', 
		'\xAF1', '\xAF3', '\a', '\x339', '\x2', '\x2', '\xAF2', '\xAF1', '\x3', 
		'\x2', '\x2', '\x2', '\xAF2', '\xAF3', '\x3', '\x2', '\x2', '\x2', '\xAF3', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\xAF4', '\xAF5', '\a', '\x165', 
		'\x2', '\x2', '\xAF5', '\xAF6', '\a', '\x157', '\x2', '\x2', '\xAF6', 
		'\xB0A', '\x5', '\x382', '\x1C2', '\x2', '\xAF7', '\xAF8', '\a', '\x17D', 
		'\x2', '\x2', '\xAF8', '\xAF9', '\a', '\x336', '\x2', '\x2', '\xAF9', 
		'\xAFA', '\a', '\x282', '\x2', '\x2', '\xAFA', '\xB04', '\a', '\x336', 
		'\x2', '\x2', '\xAFB', '\xAFD', '\a', '\x338', '\x2', '\x2', '\xAFC', 
		'\xAFB', '\x3', '\x2', '\x2', '\x2', '\xAFC', '\xAFD', '\x3', '\x2', '\x2', 
		'\x2', '\xAFD', '\xB02', '\x3', '\x2', '\x2', '\x2', '\xAFE', '\xB03', 
		'\a', '\x31C', '\x2', '\x2', '\xAFF', '\xB00', '\a', '\x31C', '\x2', '\x2', 
		'\xB00', '\xB01', '\a', '\x15E', '\x2', '\x2', '\xB01', '\xB03', '\a', 
		'\x31C', '\x2', '\x2', '\xB02', '\xAFE', '\x3', '\x2', '\x2', '\x2', '\xB02', 
		'\xAFF', '\x3', '\x2', '\x2', '\x2', '\xB03', '\xB05', '\x3', '\x2', '\x2', 
		'\x2', '\xB04', '\xAFC', '\x3', '\x2', '\x2', '\x2', '\xB05', '\xB06', 
		'\x3', '\x2', '\x2', '\x2', '\xB06', '\xB04', '\x3', '\x2', '\x2', '\x2', 
		'\xB06', '\xB07', '\x3', '\x2', '\x2', '\x2', '\xB07', '\xB08', '\x3', 
		'\x2', '\x2', '\x2', '\xB08', '\xB09', '\a', '\x337', '\x2', '\x2', '\xB09', 
		'\xB0B', '\a', '\x337', '\x2', '\x2', '\xB0A', '\xAF7', '\x3', '\x2', 
		'\x2', '\x2', '\xB0A', '\xB0B', '\x3', '\x2', '\x2', '\x2', '\xB0B', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\xB0C', '\xB0D', '\a', 'I', '\x2', '\x2', 
		'\xB0D', '\xB0E', '\a', '\x38', '\x2', '\x2', '\xB0E', '\xB0F', '\a', 
		'\xBE', '\x2', '\x2', '\xB0F', '\xB10', '\a', '\xAD', '\x2', '\x2', '\xB10', 
		'\xB11', '\x5', '\x3BA', '\x1DE', '\x2', '\xB11', '\xB12', '\a', '\x17D', 
		'\x2', '\x2', '\xB12', '\xB13', '\a', '\x336', '\x2', '\x2', '\xB13', 
		'\xB14', '\a', '\xAF', '\x2', '\x2', '\xB14', '\xB15', '\a', '\x324', 
		'\x2', '\x2', '\xB15', '\xB16', '\a', '\x320', '\x2', '\x2', '\xB16', 
		'\xB17', '\a', '\x338', '\x2', '\x2', '\xB17', '\xB18', '\a', '\xAE', 
		'\x2', '\x2', '\xB18', '\xB19', '\a', '\x324', '\x2', '\x2', '\xB19', 
		'\xB1A', '\a', '\x320', '\x2', '\x2', '\xB1A', '\xB1B', '\a', '\x337', 
		'\x2', '\x2', '\xB1B', '\x115', '\x3', '\x2', '\x2', '\x2', '\xB1C', '\xB1D', 
		'\a', '\n', '\x2', '\x2', '\xB1D', '\xB1E', '\a', '\x1C8', '\x2', '\x2', 
		'\xB1E', '\xB1F', '\x5', '\x3BA', '\x1DE', '\x2', '\xB1F', '\xB20', '\a', 
		'\x17D', '\x2', '\x2', '\xB20', '\xB21', '\a', '\x97', '\x2', '\x2', '\xB21', 
		'\xB22', '\a', '\x324', '\x2', '\x2', '\xB22', '\xB27', '\a', '\x320', 
		'\x2', '\x2', '\xB23', '\xB24', '\a', '\x338', '\x2', '\x2', '\xB24', 
		'\xB25', '\a', '\x2C8', '\x2', '\x2', '\xB25', '\xB26', '\a', '\x324', 
		'\x2', '\x2', '\xB26', '\xB28', '\a', '\x320', '\x2', '\x2', '\xB27', 
		'\xB23', '\x3', '\x2', '\x2', '\x2', '\xB27', '\xB28', '\x3', '\x2', '\x2', 
		'\x2', '\xB28', '\x117', '\x3', '\x2', '\x2', '\x2', '\xB29', '\xB2A', 
		'\a', 'I', '\x2', '\x2', '\xB2A', '\xB2B', '\a', '\x1C8', '\x2', '\x2', 
		'\xB2B', '\xB2C', '\x5', '\x3BA', '\x1DE', '\x2', '\xB2C', '\xB2D', '\a', 
		'\x17D', '\x2', '\x2', '\xB2D', '\xB2E', '\a', '\x97', '\x2', '\x2', '\xB2E', 
		'\xB2F', '\a', '\x324', '\x2', '\x2', '\xB2F', '\xB34', '\a', '\x320', 
		'\x2', '\x2', '\xB30', '\xB31', '\a', '\x338', '\x2', '\x2', '\xB31', 
		'\xB32', '\a', '\x2C8', '\x2', '\x2', '\xB32', '\xB33', '\a', '\x324', 
		'\x2', '\x2', '\xB33', '\xB35', '\a', '\x320', '\x2', '\x2', '\xB34', 
		'\xB30', '\x3', '\x2', '\x2', '\x2', '\xB34', '\xB35', '\x3', '\x2', '\x2', 
		'\x2', '\xB35', '\xB3A', '\x3', '\x2', '\x2', '\x2', '\xB36', '\xB37', 
		'\a', '\x86', '\x2', '\x2', '\xB37', '\xB38', '\a', '\x1C9', '\x2', '\x2', 
		'\xB38', '\xB39', '\a', '\x292', '\x2', '\x2', '\xB39', '\xB3B', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xB3A', '\xB36', '\x3', '\x2', '\x2', '\x2', 
		'\xB3A', '\xB3B', '\x3', '\x2', '\x2', '\x2', '\xB3B', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\xB3C', '\xB3D', '\a', '\n', '\x2', '\x2', '\xB3D', 
		'\xB3E', '\a', '\x1C9', '\x2', '\x2', '\xB3E', '\xB3F', '\a', '\x292', 
		'\x2', '\x2', '\xB3F', '\xB44', '\x5', '\x3BA', '\x1DE', '\x2', '\xB40', 
		'\xB41', '\a', '\x8C', '\x2', '\x2', '\xB41', '\xB42', '\a', '\x82', '\x2', 
		'\x2', '\xB42', '\xB43', '\a', '\x324', '\x2', '\x2', '\xB43', '\xB45', 
		'\a', '\x320', '\x2', '\x2', '\xB44', '\xB40', '\x3', '\x2', '\x2', '\x2', 
		'\xB44', '\xB45', '\x3', '\x2', '\x2', '\x2', '\xB45', '\xB47', '\x3', 
		'\x2', '\x2', '\x2', '\xB46', '\xB48', '\t', '\x17', '\x2', '\x2', '\xB47', 
		'\xB46', '\x3', '\x2', '\x2', '\x2', '\xB47', '\xB48', '\x3', '\x2', '\x2', 
		'\x2', '\xB48', '\x11B', '\x3', '\x2', '\x2', '\x2', '\xB49', '\xB4A', 
		'\a', 'I', '\x2', '\x2', '\xB4A', '\xB4B', '\a', '\x1C9', '\x2', '\x2', 
		'\xB4B', '\xB4C', '\a', '\x292', '\x2', '\x2', '\xB4C', '\xB4D', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xB4D', '\xB4E', '\a', '\x8C', '\x2', '\x2', 
		'\xB4E', '\xB4F', '\a', '\x82', '\x2', '\x2', '\xB4F', '\xB50', '\a', 
		'\x324', '\x2', '\x2', '\xB50', '\xB51', '\a', '\x320', '\x2', '\x2', 
		'\xB51', '\x11D', '\x3', '\x2', '\x2', '\x2', '\xB52', '\xB53', '\a', 
		'I', '\x2', '\x2', '\xB53', '\xB54', '\a', 'r', '\x2', '\x2', '\xB54', 
		'\xB55', '\a', '\xDE', '\x2', '\x2', '\xB55', '\xB56', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xB56', '\xB5B', '\a', '\xE6', '\x2', '\x2', '\xB57', 
		'\xB5C', '\a', '\x138', '\x2', '\x2', '\xB58', '\xB5C', '\a', 'U', '\x2', 
		'\x2', '\xB59', '\xB5A', '\a', '\x295', '\x2', '\x2', '\xB5A', '\xB5C', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xB5B', '\xB57', '\x3', '\x2', '\x2', 
		'\x2', '\xB5B', '\xB58', '\x3', '\x2', '\x2', '\x2', '\xB5B', '\xB59', 
		'\x3', '\x2', '\x2', '\x2', '\xB5C', '\xB5F', '\x3', '\x2', '\x2', '\x2', 
		'\xB5D', '\xB5E', '\a', '\x17D', '\x2', '\x2', '\xB5E', '\xB60', '\a', 
		'\x80', '\x2', '\x2', '\xB5F', '\xB5D', '\x3', '\x2', '\x2', '\x2', '\xB5F', 
		'\xB60', '\x3', '\x2', '\x2', '\x2', '\xB60', '\xB61', '\x3', '\x2', '\x2', 
		'\x2', '\xB61', '\xB66', '\a', '\x86', '\x2', '\x2', '\xB62', '\xB64', 
		'\a', '\x338', '\x2', '\x2', '\xB63', '\xB62', '\x3', '\x2', '\x2', '\x2', 
		'\xB63', '\xB64', '\x3', '\x2', '\x2', '\x2', '\xB64', '\xB65', '\x3', 
		'\x2', '\x2', '\x2', '\xB65', '\xB67', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xB66', '\xB63', '\x3', '\x2', '\x2', '\x2', '\xB67', '\xB68', '\x3', 
		'\x2', '\x2', '\x2', '\xB68', '\xB66', '\x3', '\x2', '\x2', '\x2', '\xB68', 
		'\xB69', '\x3', '\x2', '\x2', '\x2', '\xB69', '\xB6A', '\x3', '\x2', '\x2', 
		'\x2', '\xB6A', '\xB6B', '\a', '\x15E', '\x2', '\x2', '\xB6B', '\xB6C', 
		'\a', '\x139', '\x2', '\x2', '\xB6C', '\xB6D', '\a', '\x320', '\x2', '\x2', 
		'\xB6D', '\xB6E', '\a', '\x338', '\x2', '\x2', '\xB6E', '\xB6F', '\a', 
		'\x320', '\x2', '\x2', '\xB6F', '\x11F', '\x3', '\x2', '\x2', '\x2', '\xB70', 
		'\xB71', '\t', '\x14', '\x2', '\x2', '\xB71', '\xB72', '\a', 'r', '\x2', 
		'\x2', '\xB72', '\xB73', '\a', '\x13C', '\x2', '\x2', '\xB73', '\xB74', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xB74', '\xB75', '\a', '\xE6', '\x2', 
		'\x2', '\xB75', '\xBB9', '\a', '\x138', '\x2', '\x2', '\xB76', '\xB78', 
		'\a', '\x338', '\x2', '\x2', '\xB77', '\xB76', '\x3', '\x2', '\x2', '\x2', 
		'\xB77', '\xB78', '\x3', '\x2', '\x2', '\x2', '\xB78', '\xB79', '\x3', 
		'\x2', '\x2', '\x2', '\xB79', '\xB7A', '\a', '\x4', '\x2', '\x2', '\xB7A', 
		'\xB7E', '\a', 'r', '\x2', '\x2', '\xB7B', '\xB7C', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xB7C', '\xB7D', '\a', '\x331', '\x2', '\x2', '\xB7D', '\xB7F', 
		'\x3', '\x2', '\x2', '\x2', '\xB7E', '\xB7B', '\x3', '\x2', '\x2', '\x2', 
		'\xB7E', '\xB7F', '\x3', '\x2', '\x2', '\x2', '\xB7F', '\xB80', '\x3', 
		'\x2', '\x2', '\x2', '\xB80', '\xB81', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xB81', '\xB82', '\a', '\x331', '\x2', '\x2', '\xB82', '\xB83', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xB83', '\xBB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB84', '\xB92', '\a', '\x336', '\x2', '\x2', '\xB85', '\xB8F', '\a', 
		'\x13E', '\x2', '\x2', '\xB86', '\xB88', '\a', '\x338', '\x2', '\x2', 
		'\xB87', '\xB86', '\x3', '\x2', '\x2', '\x2', '\xB87', '\xB88', '\x3', 
		'\x2', '\x2', '\x2', '\xB88', '\xB89', '\x3', '\x2', '\x2', '\x2', '\xB89', 
		'\xB8A', '\x5', '\x3BA', '\x1DE', '\x2', '\xB8A', '\xB8B', '\a', '\x324', 
		'\x2', '\x2', '\xB8B', '\xB8C', '\t', '\x18', '\x2', '\x2', '\xB8C', '\xB8E', 
		'\x3', '\x2', '\x2', '\x2', '\xB8D', '\xB87', '\x3', '\x2', '\x2', '\x2', 
		'\xB8E', '\xB91', '\x3', '\x2', '\x2', '\x2', '\xB8F', '\xB8D', '\x3', 
		'\x2', '\x2', '\x2', '\xB8F', '\xB90', '\x3', '\x2', '\x2', '\x2', '\xB90', 
		'\xB93', '\x3', '\x2', '\x2', '\x2', '\xB91', '\xB8F', '\x3', '\x2', '\x2', 
		'\x2', '\xB92', '\xB85', '\x3', '\x2', '\x2', '\x2', '\xB92', '\xB93', 
		'\x3', '\x2', '\x2', '\x2', '\xB93', '\xBA8', '\x3', '\x2', '\x2', '\x2', 
		'\xB94', '\xB95', '\a', '\x184', '\x2', '\x2', '\xB95', '\xBA2', '\a', 
		'\x336', '\x2', '\x2', '\xB96', '\xB98', '\a', '\x338', '\x2', '\x2', 
		'\xB97', '\xB96', '\x3', '\x2', '\x2', '\x2', '\xB97', '\xB98', '\x3', 
		'\x2', '\x2', '\x2', '\xB98', '\xB9C', '\x3', '\x2', '\x2', '\x2', '\xB99', 
		'\xB9A', '\x5', '\x3BA', '\x1DE', '\x2', '\xB9A', '\xB9B', '\a', '\x331', 
		'\x2', '\x2', '\xB9B', '\xB9D', '\x3', '\x2', '\x2', '\x2', '\xB9C', '\xB99', 
		'\x3', '\x2', '\x2', '\x2', '\xB9C', '\xB9D', '\x3', '\x2', '\x2', '\x2', 
		'\xB9D', '\xB9E', '\x3', '\x2', '\x2', '\x2', '\xB9E', '\xB9F', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xB9F', '\xBA0', '\a', '\x331', '\x2', '\x2', 
		'\xBA0', '\xBA1', '\x5', '\x3BA', '\x1DE', '\x2', '\xBA1', '\xBA3', '\x3', 
		'\x2', '\x2', '\x2', '\xBA2', '\xB97', '\x3', '\x2', '\x2', '\x2', '\xBA3', 
		'\xBA4', '\x3', '\x2', '\x2', '\x2', '\xBA4', '\xBA2', '\x3', '\x2', '\x2', 
		'\x2', '\xBA4', '\xBA5', '\x3', '\x2', '\x2', '\x2', '\xBA5', '\xBA6', 
		'\x3', '\x2', '\x2', '\x2', '\xBA6', '\xBA7', '\a', '\x337', '\x2', '\x2', 
		'\xBA7', '\xBA9', '\x3', '\x2', '\x2', '\x2', '\xBA8', '\xB94', '\x3', 
		'\x2', '\x2', '\x2', '\xBA9', '\xBAA', '\x3', '\x2', '\x2', '\x2', '\xBAA', 
		'\xBA8', '\x3', '\x2', '\x2', '\x2', '\xBAA', '\xBAB', '\x3', '\x2', '\x2', 
		'\x2', '\xBAB', '\xBAE', '\x3', '\x2', '\x2', '\x2', '\xBAC', '\xBAD', 
		'\a', '\x17A', '\x2', '\x2', '\xBAD', '\xBAF', '\x5', '\x122', '\x92', 
		'\x2', '\xBAE', '\xBAC', '\x3', '\x2', '\x2', '\x2', '\xBAE', '\xBAF', 
		'\x3', '\x2', '\x2', '\x2', '\xBAF', '\xBB0', '\x3', '\x2', '\x2', '\x2', 
		'\xBB0', '\xBB1', '\a', '\x337', '\x2', '\x2', '\xBB1', '\xBB3', '\x3', 
		'\x2', '\x2', '\x2', '\xBB2', '\xB84', '\x3', '\x2', '\x2', '\x2', '\xBB3', 
		'\xBB6', '\x3', '\x2', '\x2', '\x2', '\xBB4', '\xBB2', '\x3', '\x2', '\x2', 
		'\x2', '\xBB4', '\xBB5', '\x3', '\x2', '\x2', '\x2', '\xBB5', '\xBB8', 
		'\x3', '\x2', '\x2', '\x2', '\xBB6', '\xBB4', '\x3', '\x2', '\x2', '\x2', 
		'\xBB7', '\xB77', '\x3', '\x2', '\x2', '\x2', '\xBB8', '\xBBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBB9', '\xBB7', '\x3', '\x2', '\x2', '\x2', '\xBB9', 
		'\xBBA', '\x3', '\x2', '\x2', '\x2', '\xBBA', '\xBCC', '\x3', '\x2', '\x2', 
		'\x2', '\xBBB', '\xBB9', '\x3', '\x2', '\x2', '\x2', '\xBBC', '\xBBE', 
		'\a', '\x338', '\x2', '\x2', '\xBBD', '\xBBC', '\x3', '\x2', '\x2', '\x2', 
		'\xBBD', '\xBBE', '\x3', '\x2', '\x2', '\x2', '\xBBE', '\xBBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBBF', '\xBC0', '\a', 'h', '\x2', '\x2', '\xBC0', 
		'\xBC4', '\a', 'r', '\x2', '\x2', '\xBC1', '\xBC2', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xBC2', '\xBC3', '\a', '\x331', '\x2', '\x2', '\xBC3', '\xBC5', 
		'\x3', '\x2', '\x2', '\x2', '\xBC4', '\xBC1', '\x3', '\x2', '\x2', '\x2', 
		'\xBC4', '\xBC5', '\x3', '\x2', '\x2', '\x2', '\xBC5', '\xBC6', '\x3', 
		'\x2', '\x2', '\x2', '\xBC6', '\xBC7', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xBC7', '\xBC8', '\a', '\x331', '\x2', '\x2', '\xBC8', '\xBC9', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xBC9', '\xBCB', '\x3', '\x2', '\x2', '\x2', 
		'\xBCA', '\xBBD', '\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBCE', '\x3', 
		'\x2', '\x2', '\x2', '\xBCC', '\xBCA', '\x3', '\x2', '\x2', '\x2', '\xBCC', 
		'\xBCD', '\x3', '\x2', '\x2', '\x2', '\xBCD', '\xBF8', '\x3', '\x2', '\x2', 
		'\x2', '\xBCE', '\xBCC', '\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBD0', 
		'\a', '\x4', '\x2', '\x2', '\xBD0', '\xBD4', '\a', '\x15A', '\x2', '\x2', 
		'\xBD1', '\xBD2', '\x5', '\x3BA', '\x1DE', '\x2', '\xBD2', '\xBD3', '\a', 
		'\x331', '\x2', '\x2', '\xBD3', '\xBD5', '\x3', '\x2', '\x2', '\x2', '\xBD4', 
		'\xBD1', '\x3', '\x2', '\x2', '\x2', '\xBD4', '\xBD5', '\x3', '\x2', '\x2', 
		'\x2', '\xBD5', '\xBD6', '\x3', '\x2', '\x2', '\x2', '\xBD6', '\xBD7', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xBD7', '\xBD8', '\a', '\x331', '\x2', 
		'\x2', '\xBD8', '\xBD9', '\x5', '\x3BA', '\x1DE', '\x2', '\xBD9', '\xBF3', 
		'\x3', '\x2', '\x2', '\x2', '\xBDA', '\xBDB', '\a', '\x336', '\x2', '\x2', 
		'\xBDB', '\xBEB', '\a', '\x13E', '\x2', '\x2', '\xBDC', '\xBDE', '\a', 
		'\x338', '\x2', '\x2', '\xBDD', '\xBDC', '\x3', '\x2', '\x2', '\x2', '\xBDD', 
		'\xBDE', '\x3', '\x2', '\x2', '\x2', '\xBDE', '\xBDF', '\x3', '\x2', '\x2', 
		'\x2', '\xBDF', '\xBE0', '\x5', '\x3BA', '\x1DE', '\x2', '\xBE0', '\xBE9', 
		'\a', '\x324', '\x2', '\x2', '\xBE1', '\xBE3', '\a', '\x336', '\x2', '\x2', 
		'\xBE2', '\xBE1', '\x3', '\x2', '\x2', '\x2', '\xBE2', '\xBE3', '\x3', 
		'\x2', '\x2', '\x2', '\xBE3', '\xBE4', '\x3', '\x2', '\x2', '\x2', '\xBE4', 
		'\xBE6', '\a', '\x31C', '\x2', '\x2', '\xBE5', '\xBE7', '\a', '\x337', 
		'\x2', '\x2', '\xBE6', '\xBE5', '\x3', '\x2', '\x2', '\x2', '\xBE6', '\xBE7', 
		'\x3', '\x2', '\x2', '\x2', '\xBE7', '\xBEA', '\x3', '\x2', '\x2', '\x2', 
		'\xBE8', '\xBEA', '\a', '\x320', '\x2', '\x2', '\xBE9', '\xBE2', '\x3', 
		'\x2', '\x2', '\x2', '\xBE9', '\xBE8', '\x3', '\x2', '\x2', '\x2', '\xBEA', 
		'\xBEC', '\x3', '\x2', '\x2', '\x2', '\xBEB', '\xBDD', '\x3', '\x2', '\x2', 
		'\x2', '\xBEC', '\xBED', '\x3', '\x2', '\x2', '\x2', '\xBED', '\xBEB', 
		'\x3', '\x2', '\x2', '\x2', '\xBED', '\xBEE', '\x3', '\x2', '\x2', '\x2', 
		'\xBEE', '\xBEF', '\x3', '\x2', '\x2', '\x2', '\xBEF', '\xBF0', '\a', 
		'\x337', '\x2', '\x2', '\xBF0', '\xBF2', '\x3', '\x2', '\x2', '\x2', '\xBF1', 
		'\xBDA', '\x3', '\x2', '\x2', '\x2', '\xBF2', '\xBF5', '\x3', '\x2', '\x2', 
		'\x2', '\xBF3', '\xBF1', '\x3', '\x2', '\x2', '\x2', '\xBF3', '\xBF4', 
		'\x3', '\x2', '\x2', '\x2', '\xBF4', '\xBF7', '\x3', '\x2', '\x2', '\x2', 
		'\xBF5', '\xBF3', '\x3', '\x2', '\x2', '\x2', '\xBF6', '\xBCF', '\x3', 
		'\x2', '\x2', '\x2', '\xBF7', '\xBFA', '\x3', '\x2', '\x2', '\x2', '\xBF8', 
		'\xBF6', '\x3', '\x2', '\x2', '\x2', '\xBF8', '\xBF9', '\x3', '\x2', '\x2', 
		'\x2', '\xBF9', '\xC08', '\x3', '\x2', '\x2', '\x2', '\xBFA', '\xBF8', 
		'\x3', '\x2', '\x2', '\x2', '\xBFB', '\xBFC', '\a', 'h', '\x2', '\x2', 
		'\xBFC', '\xC00', '\a', '\x15A', '\x2', '\x2', '\xBFD', '\xBFE', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xBFE', '\xBFF', '\a', '\x331', '\x2', '\x2', 
		'\xBFF', '\xC01', '\x3', '\x2', '\x2', '\x2', '\xC00', '\xBFD', '\x3', 
		'\x2', '\x2', '\x2', '\xC00', '\xC01', '\x3', '\x2', '\x2', '\x2', '\xC01', 
		'\xC02', '\x3', '\x2', '\x2', '\x2', '\xC02', '\xC03', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xC03', '\xC04', '\a', '\x331', '\x2', '\x2', '\xC04', 
		'\xC05', '\x5', '\x3BA', '\x1DE', '\x2', '\xC05', '\xC07', '\x3', '\x2', 
		'\x2', '\x2', '\xC06', '\xBFB', '\x3', '\x2', '\x2', '\x2', '\xC07', '\xC0A', 
		'\x3', '\x2', '\x2', '\x2', '\xC08', '\xC06', '\x3', '\x2', '\x2', '\x2', 
		'\xC08', '\xC09', '\x3', '\x2', '\x2', '\x2', '\xC09', '\xC4C', '\x3', 
		'\x2', '\x2', '\x2', '\xC0A', '\xC08', '\x3', '\x2', '\x2', '\x2', '\xC0B', 
		'\xC0C', '\a', '\x17D', '\x2', '\x2', '\xC0C', '\xC14', '\a', '\x336', 
		'\x2', '\x2', '\xC0D', '\xC0F', '\a', '\x338', '\x2', '\x2', '\xC0E', 
		'\xC0D', '\x3', '\x2', '\x2', '\x2', '\xC0E', '\xC0F', '\x3', '\x2', '\x2', 
		'\x2', '\xC0F', '\xC10', '\x3', '\x2', '\x2', '\x2', '\xC10', '\xC11', 
		'\a', '\xBF', '\x2', '\x2', '\xC11', '\xC12', '\a', '\x324', '\x2', '\x2', 
		'\xC12', '\xC13', '\a', '\x31C', '\x2', '\x2', '\xC13', '\xC15', '\t', 
		'\x19', '\x2', '\x2', '\xC14', '\xC0E', '\x3', '\x2', '\x2', '\x2', '\xC14', 
		'\xC15', '\x3', '\x2', '\x2', '\x2', '\xC15', '\xC1C', '\x3', '\x2', '\x2', 
		'\x2', '\xC16', '\xC18', '\a', '\x338', '\x2', '\x2', '\xC17', '\xC16', 
		'\x3', '\x2', '\x2', '\x2', '\xC17', '\xC18', '\x3', '\x2', '\x2', '\x2', 
		'\xC18', '\xC19', '\x3', '\x2', '\x2', '\x2', '\xC19', '\xC1A', '\a', 
		't', '\x2', '\x2', '\xC1A', '\xC1B', '\a', '\x324', '\x2', '\x2', '\xC1B', 
		'\xC1D', '\t', '\x1A', '\x2', '\x2', '\xC1C', '\xC17', '\x3', '\x2', '\x2', 
		'\x2', '\xC1C', '\xC1D', '\x3', '\x2', '\x2', '\x2', '\xC1D', '\xC28', 
		'\x3', '\x2', '\x2', '\x2', '\xC1E', '\xC20', '\a', '\x338', '\x2', '\x2', 
		'\xC1F', '\xC1E', '\x3', '\x2', '\x2', '\x2', '\xC1F', '\xC20', '\x3', 
		'\x2', '\x2', '\x2', '\xC20', '\xC21', '\x3', '\x2', '\x2', '\x2', '\xC21', 
		'\xC22', '\a', '\xC2', '\x2', '\x2', '\xC22', '\xC26', '\a', '\x324', 
		'\x2', '\x2', '\xC23', '\xC24', '\a', '\x31C', '\x2', '\x2', '\xC24', 
		'\xC27', '\a', '\x2C7', '\x2', '\x2', '\xC25', '\xC27', '\a', '\xA0', 
		'\x2', '\x2', '\xC26', '\xC23', '\x3', '\x2', '\x2', '\x2', '\xC26', '\xC25', 
		'\x3', '\x2', '\x2', '\x2', '\xC27', '\xC29', '\x3', '\x2', '\x2', '\x2', 
		'\xC28', '\xC1F', '\x3', '\x2', '\x2', '\x2', '\xC28', '\xC29', '\x3', 
		'\x2', '\x2', '\x2', '\xC29', '\xC31', '\x3', '\x2', '\x2', '\x2', '\xC2A', 
		'\xC2C', '\a', '\x338', '\x2', '\x2', '\xC2B', '\xC2A', '\x3', '\x2', 
		'\x2', '\x2', '\xC2B', '\xC2C', '\x3', '\x2', '\x2', '\x2', '\xC2C', '\xC2D', 
		'\x3', '\x2', '\x2', '\x2', '\xC2D', '\xC2E', '\a', '\xC3', '\x2', '\x2', 
		'\xC2E', '\xC2F', '\a', '\x324', '\x2', '\x2', '\xC2F', '\xC30', '\a', 
		'\x31C', '\x2', '\x2', '\xC30', '\xC32', '\t', '\x19', '\x2', '\x2', '\xC31', 
		'\xC2B', '\x3', '\x2', '\x2', '\x2', '\xC31', '\xC32', '\x3', '\x2', '\x2', 
		'\x2', '\xC32', '\xC39', '\x3', '\x2', '\x2', '\x2', '\xC33', '\xC35', 
		'\a', '\x338', '\x2', '\x2', '\xC34', '\xC33', '\x3', '\x2', '\x2', '\x2', 
		'\xC34', '\xC35', '\x3', '\x2', '\x2', '\x2', '\xC35', '\xC36', '\x3', 
		'\x2', '\x2', '\x2', '\xC36', '\xC37', '\a', '\xC9', '\x2', '\x2', '\xC37', 
		'\xC38', '\a', '\x324', '\x2', '\x2', '\xC38', '\xC3A', '\t', '\x1B', 
		'\x2', '\x2', '\xC39', '\xC34', '\x3', '\x2', '\x2', '\x2', '\xC39', '\xC3A', 
		'\x3', '\x2', '\x2', '\x2', '\xC3A', '\xC41', '\x3', '\x2', '\x2', '\x2', 
		'\xC3B', '\xC3D', '\a', '\x338', '\x2', '\x2', '\xC3C', '\xC3B', '\x3', 
		'\x2', '\x2', '\x2', '\xC3C', '\xC3D', '\x3', '\x2', '\x2', '\x2', '\xC3D', 
		'\xC3E', '\x3', '\x2', '\x2', '\x2', '\xC3E', '\xC3F', '\a', '\x160', 
		'\x2', '\x2', '\xC3F', '\xC40', '\a', '\x324', '\x2', '\x2', '\xC40', 
		'\xC42', '\t', '\t', '\x2', '\x2', '\xC41', '\xC3C', '\x3', '\x2', '\x2', 
		'\x2', '\xC41', '\xC42', '\x3', '\x2', '\x2', '\x2', '\xC42', '\xC49', 
		'\x3', '\x2', '\x2', '\x2', '\xC43', '\xC45', '\a', '\x338', '\x2', '\x2', 
		'\xC44', '\xC43', '\x3', '\x2', '\x2', '\x2', '\xC44', '\xC45', '\x3', 
		'\x2', '\x2', '\x2', '\xC45', '\xC46', '\x3', '\x2', '\x2', '\x2', '\xC46', 
		'\xC47', '\a', '\x150', '\x2', '\x2', '\xC47', '\xC48', '\a', '\x324', 
		'\x2', '\x2', '\xC48', '\xC4A', '\t', '\t', '\x2', '\x2', '\xC49', '\xC44', 
		'\x3', '\x2', '\x2', '\x2', '\xC49', '\xC4A', '\x3', '\x2', '\x2', '\x2', 
		'\xC4A', '\xC4B', '\x3', '\x2', '\x2', '\x2', '\xC4B', '\xC4D', '\a', 
		'\x337', '\x2', '\x2', '\xC4C', '\xC0B', '\x3', '\x2', '\x2', '\x2', '\xC4C', 
		'\xC4D', '\x3', '\x2', '\x2', '\x2', '\xC4D', '\xC51', '\x3', '\x2', '\x2', 
		'\x2', '\xC4E', '\xC4F', '\a', '\x14C', '\x2', '\x2', '\xC4F', '\xC50', 
		'\a', '\x324', '\x2', '\x2', '\xC50', '\xC52', '\t', '\x1C', '\x2', '\x2', 
		'\xC51', '\xC4E', '\x3', '\x2', '\x2', '\x2', '\xC51', '\xC52', '\x3', 
		'\x2', '\x2', '\x2', '\xC52', '\x121', '\x3', '\x2', '\x2', '\x2', '\xC53', 
		'\xC55', '\a', '\x338', '\x2', '\x2', '\xC54', '\xC53', '\x3', '\x2', 
		'\x2', '\x2', '\xC54', '\xC55', '\x3', '\x2', '\x2', '\x2', '\xC55', '\xC57', 
		'\x3', '\x2', '\x2', '\x2', '\xC56', '\xC58', '\t', '\x1D', '\x2', '\x2', 
		'\xC57', '\xC56', '\x3', '\x2', '\x2', '\x2', '\xC57', '\xC58', '\x3', 
		'\x2', '\x2', '\x2', '\xC58', '\xC5A', '\x3', '\x2', '\x2', '\x2', '\xC59', 
		'\xC5B', '\a', '\xDD', '\x2', '\x2', '\xC5A', '\xC59', '\x3', '\x2', '\x2', 
		'\x2', '\xC5A', '\xC5B', '\x3', '\x2', '\x2', '\x2', '\xC5B', '\xC61', 
		'\x3', '\x2', '\x2', '\x2', '\xC5C', '\xC62', '\x5', '\x124', '\x93', 
		'\x2', '\xC5D', '\xC5E', '\a', '\x336', '\x2', '\x2', '\xC5E', '\xC5F', 
		'\x5', '\x122', '\x92', '\x2', '\xC5F', '\xC60', '\a', '\x337', '\x2', 
		'\x2', '\xC60', '\xC62', '\x3', '\x2', '\x2', '\x2', '\xC61', '\xC5C', 
		'\x3', '\x2', '\x2', '\x2', '\xC61', '\xC5D', '\x3', '\x2', '\x2', '\x2', 
		'\xC62', '\xC64', '\x3', '\x2', '\x2', '\x2', '\xC63', '\xC54', '\x3', 
		'\x2', '\x2', '\x2', '\xC64', '\xC65', '\x3', '\x2', '\x2', '\x2', '\xC65', 
		'\xC63', '\x3', '\x2', '\x2', '\x2', '\xC65', '\xC66', '\x3', '\x2', '\x2', 
		'\x2', '\xC66', '\x123', '\x3', '\x2', '\x2', '\x2', '\xC67', '\xC6D', 
		'\x5', '\x126', '\x94', '\x2', '\xC68', '\xC69', '\a', '\x336', '\x2', 
		'\x2', '\xC69', '\xC6A', '\x5', '\x122', '\x92', '\x2', '\xC6A', '\xC6B', 
		'\a', '\x337', '\x2', '\x2', '\xC6B', '\xC6D', '\x3', '\x2', '\x2', '\x2', 
		'\xC6C', '\xC67', '\x3', '\x2', '\x2', '\x2', '\xC6C', '\xC68', '\x3', 
		'\x2', '\x2', '\x2', '\xC6D', '\x125', '\x3', '\x2', '\x2', '\x2', '\xC6E', 
		'\xC8B', '\x5', '\x3BA', '\x1DE', '\x2', '\xC6F', '\xC7A', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xC70', '\xC71', '\x5', '\x3BA', '\x1DE', '\x2', '\xC71', 
		'\xC72', '\a', '\x331', '\x2', '\x2', '\xC72', '\xC74', '\x3', '\x2', 
		'\x2', '\x2', '\xC73', '\xC70', '\x3', '\x2', '\x2', '\x2', '\xC73', '\xC74', 
		'\x3', '\x2', '\x2', '\x2', '\xC74', '\xC75', '\x3', '\x2', '\x2', '\x2', 
		'\xC75', '\xC76', '\x5', '\x3BA', '\x1DE', '\x2', '\xC76', '\xC77', '\a', 
		'\x331', '\x2', '\x2', '\xC77', '\xC78', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xC78', '\xC7A', '\x3', '\x2', '\x2', '\x2', '\xC79', '\xC6F', '\x3', 
		'\x2', '\x2', '\x2', '\xC79', '\xC73', '\x3', '\x2', '\x2', '\x2', '\xC7A', 
		'\xC86', '\x3', '\x2', '\x2', '\x2', '\xC7B', '\xC87', '\a', '\x324', 
		'\x2', '\x2', '\xC7C', '\xC7D', '\a', '\x326', '\x2', '\x2', '\xC7D', 
		'\xC87', '\a', '\x325', '\x2', '\x2', '\xC7E', '\xC7F', '\a', '\x327', 
		'\x2', '\x2', '\xC7F', '\xC87', '\a', '\x324', '\x2', '\x2', '\xC80', 
		'\xC87', '\a', '\x325', '\x2', '\x2', '\xC81', '\xC82', '\a', '\x325', 
		'\x2', '\x2', '\xC82', '\xC87', '\a', '\x324', '\x2', '\x2', '\xC83', 
		'\xC87', '\a', '\x326', '\x2', '\x2', '\xC84', '\xC85', '\a', '\x326', 
		'\x2', '\x2', '\xC85', '\xC87', '\a', '\x324', '\x2', '\x2', '\xC86', 
		'\xC7B', '\x3', '\x2', '\x2', '\x2', '\xC86', '\xC7C', '\x3', '\x2', '\x2', 
		'\x2', '\xC86', '\xC7E', '\x3', '\x2', '\x2', '\x2', '\xC86', '\xC80', 
		'\x3', '\x2', '\x2', '\x2', '\xC86', '\xC81', '\x3', '\x2', '\x2', '\x2', 
		'\xC86', '\xC83', '\x3', '\x2', '\x2', '\x2', '\xC86', '\xC84', '\x3', 
		'\x2', '\x2', '\x2', '\xC87', '\xC88', '\x3', '\x2', '\x2', '\x2', '\xC88', 
		'\xC89', '\t', '\x18', '\x2', '\x2', '\xC89', '\xC8B', '\x3', '\x2', '\x2', 
		'\x2', '\xC8A', '\xC6E', '\x3', '\x2', '\x2', '\x2', '\xC8A', '\xC79', 
		'\x3', '\x2', '\x2', '\x2', '\xC8B', '\xCA7', '\x3', '\x2', '\x2', '\x2', 
		'\xC8C', '\xC8D', '\x5', '\x3BA', '\x1DE', '\x2', '\xC8D', '\xC8E', '\a', 
		'\x331', '\x2', '\x2', '\xC8E', '\xC90', '\x3', '\x2', '\x2', '\x2', '\xC8F', 
		'\xC8C', '\x3', '\x2', '\x2', '\x2', '\xC8F', '\xC90', '\x3', '\x2', '\x2', 
		'\x2', '\xC90', '\xC91', '\x3', '\x2', '\x2', '\x2', '\xC91', '\xC92', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xC92', '\xC93', '\a', '\x331', '\x2', 
		'\x2', '\xC93', '\xC94', '\x5', '\x3BA', '\x1DE', '\x2', '\xC94', '\xCA2', 
		'\a', '\x336', '\x2', '\x2', '\xC95', '\xCA3', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xC96', '\xC97', '\x5', '\x3BA', '\x1DE', '\x2', '\xC97', '\xC98', 
		'\a', '\x331', '\x2', '\x2', '\xC98', '\xC9A', '\x3', '\x2', '\x2', '\x2', 
		'\xC99', '\xC96', '\x3', '\x2', '\x2', '\x2', '\xC99', '\xC9A', '\x3', 
		'\x2', '\x2', '\x2', '\xC9A', '\xC9B', '\x3', '\x2', '\x2', '\x2', '\xC9B', 
		'\xC9C', '\x5', '\x3BA', '\x1DE', '\x2', '\xC9C', '\xC9D', '\a', '\x331', 
		'\x2', '\x2', '\xC9D', '\xC9E', '\x5', '\x3BA', '\x1DE', '\x2', '\xC9E', 
		'\xC9F', '\x3', '\x2', '\x2', '\x2', '\xC9F', '\xCA0', '\a', '\x338', 
		'\x2', '\x2', '\xCA0', '\xCA1', '\t', '\x18', '\x2', '\x2', '\xCA1', '\xCA3', 
		'\x3', '\x2', '\x2', '\x2', '\xCA2', '\xC95', '\x3', '\x2', '\x2', '\x2', 
		'\xCA2', '\xC99', '\x3', '\x2', '\x2', '\x2', '\xCA3', '\xCA4', '\x3', 
		'\x2', '\x2', '\x2', '\xCA4', '\xCA5', '\a', '\x337', '\x2', '\x2', '\xCA5', 
		'\xCA7', '\x3', '\x2', '\x2', '\x2', '\xCA6', '\xC8A', '\x3', '\x2', '\x2', 
		'\x2', '\xCA6', '\xC8F', '\x3', '\x2', '\x2', '\x2', '\xCA7', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\xCA8', '\xCA9', '\a', '\n', '\x2', '\x2', 
		'\xCA9', '\xCAA', '\a', '|', '\x2', '\x2', '\xCAA', '\xCAB', '\a', 'R', 
		'\x2', '\x2', '\xCAB', '\xCAC', '\a', '\x145', '\x2', '\x2', '\xCAC', 
		'\xCAD', '\x5', '\x3BA', '\x1DE', '\x2', '\xCAD', '\xCBD', '\a', '\x13E', 
		'\x2', '\x2', '\xCAE', '\xCAF', '\a', '\x23A', '\x2', '\x2', '\xCAF', 
		'\xCB0', '\a', '\x324', '\x2', '\x2', '\xCB0', '\xCB2', '\t', '\x1E', 
		'\x2', '\x2', '\xCB1', '\xCB3', '\a', '\x338', '\x2', '\x2', '\xCB2', 
		'\xCB1', '\x3', '\x2', '\x2', '\x2', '\xCB2', '\xCB3', '\x3', '\x2', '\x2', 
		'\x2', '\xCB3', '\xCBE', '\x3', '\x2', '\x2', '\x2', '\xCB4', '\xCB5', 
		'\a', '\x2B4', '\x2', '\x2', '\xCB5', '\xCB6', '\a', '\x324', '\x2', '\x2', 
		'\xCB6', '\xCB8', '\t', '\x1E', '\x2', '\x2', '\xCB7', '\xCB9', '\a', 
		'\x338', '\x2', '\x2', '\xCB8', '\xCB7', '\x3', '\x2', '\x2', '\x2', '\xCB8', 
		'\xCB9', '\x3', '\x2', '\x2', '\x2', '\xCB9', '\xCBE', '\x3', '\x2', '\x2', 
		'\x2', '\xCBA', '\xCBB', '\a', '\x1C8', '\x2', '\x2', '\xCBB', '\xCBC', 
		'\a', '\x324', '\x2', '\x2', '\xCBC', '\xCBE', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xCBD', '\xCAE', '\x3', '\x2', '\x2', '\x2', '\xCBD', '\xCB4', 
		'\x3', '\x2', '\x2', '\x2', '\xCBD', '\xCBA', '\x3', '\x2', '\x2', '\x2', 
		'\xCBE', '\xCBF', '\x3', '\x2', '\x2', '\x2', '\xCBF', '\xCBD', '\x3', 
		'\x2', '\x2', '\x2', '\xCBF', '\xCC0', '\x3', '\x2', '\x2', '\x2', '\xCC0', 
		'\xCD8', '\x3', '\x2', '\x2', '\x2', '\xCC1', '\xCC2', '\a', '\n', '\x2', 
		'\x2', '\xCC2', '\xCC3', '\a', '|', '\x2', '\x2', '\xCC3', '\xCC4', '\a', 
		'R', '\x2', '\x2', '\xCC4', '\xCC5', '\a', '\x145', '\x2', '\x2', '\xCC5', 
		'\xCC6', '\x5', '\x3BA', '\x1DE', '\x2', '\xCC6', '\xCC7', '\a', '\x17D', 
		'\x2', '\x2', '\xCC7', '\xCC8', '\a', '\x336', '\x2', '\x2', '\xCC8', 
		'\xCC9', '\a', '\x2FC', '\x2', '\x2', '\xCC9', '\xCCA', '\a', '\x324', 
		'\x2', '\x2', '\xCCA', '\xCCB', '\a', '\x1AB', '\x2', '\x2', '\xCCB', 
		'\xCCC', '\a', '\x338', '\x2', '\x2', '\xCCC', '\xCCD', '\a', '\x23A', 
		'\x2', '\x2', '\xCCD', '\xCCE', '\a', '\x324', '\x2', '\x2', '\xCCE', 
		'\xCD3', '\a', '\x320', '\x2', '\x2', '\xCCF', '\xCD0', '\a', '\x338', 
		'\x2', '\x2', '\xCD0', '\xCD1', '\a', '\x1C8', '\x2', '\x2', '\xCD1', 
		'\xCD2', '\a', '\x324', '\x2', '\x2', '\xCD2', '\xCD4', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xCD3', '\xCCF', '\x3', '\x2', '\x2', '\x2', '\xCD3', 
		'\xCD4', '\x3', '\x2', '\x2', '\x2', '\xCD4', '\xCD5', '\x3', '\x2', '\x2', 
		'\x2', '\xCD5', '\xCD6', '\a', '\x337', '\x2', '\x2', '\xCD6', '\xCD8', 
		'\x3', '\x2', '\x2', '\x2', '\xCD7', '\xCA8', '\x3', '\x2', '\x2', '\x2', 
		'\xCD7', '\xCC1', '\x3', '\x2', '\x2', '\x2', '\xCD8', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\xCD9', '\xCDA', '\a', '\n', '\x2', '\x2', '\xCDA', 
		'\xCDB', '\a', '|', '\x2', '\x2', '\xCDB', '\xCDC', '\a', '\xB3', '\x2', 
		'\x2', '\xCDC', '\xCDF', '\x5', '\x3BA', '\x1DE', '\x2', '\xCDD', '\xCDE', 
		'\a', '\x14', '\x2', '\x2', '\xCDE', '\xCE0', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xCDF', '\xCDD', '\x3', '\x2', '\x2', '\x2', '\xCDF', '\xCE0', 
		'\x3', '\x2', '\x2', '\x2', '\xCE0', '\xCE1', '\x3', '\x2', '\x2', '\x2', 
		'\xCE1', '\xCE2', '\t', '\x1F', '\x2', '\x2', '\xCE2', '\xCE3', '\a', 
		'\x336', '\x2', '\x2', '\xCE3', '\xCE4', '\a', '\x1BF', '\x2', '\x2', 
		'\xCE4', '\xCE8', '\a', '\x324', '\x2', '\x2', '\xCE5', '\xCE9', '\a', 
		'\x320', '\x2', '\x2', '\xCE6', '\xCE9', '\a', '\x321', '\x2', '\x2', 
		'\xCE7', '\xCE9', '\a', '\xD6', '\x2', '\x2', '\xCE8', '\xCE5', '\x3', 
		'\x2', '\x2', '\x2', '\xCE8', '\xCE6', '\x3', '\x2', '\x2', '\x2', '\xCE8', 
		'\xCE7', '\x3', '\x2', '\x2', '\x2', '\xCE9', '\xCEA', '\x3', '\x2', '\x2', 
		'\x2', '\xCEA', '\xCEB', '\a', '\x338', '\x2', '\x2', '\xCEB', '\xCEC', 
		'\a', '\xFD', '\x2', '\x2', '\xCEC', '\xCEE', '\a', '\x324', '\x2', '\x2', 
		'\xCED', '\xCEF', '\t', ' ', '\x2', '\x2', '\xCEE', '\xCED', '\x3', '\x2', 
		'\x2', '\x2', '\xCEE', '\xCEF', '\x3', '\x2', '\x2', '\x2', '\xCEF', '\xCF0', 
		'\x3', '\x2', '\x2', '\x2', '\xCF0', '\xCF1', '\a', '\x337', '\x2', '\x2', 
		'\xCF1', '\xCF2', '\x3', '\x2', '\x2', '\x2', '\xCF2', '\xCFC', '\a', 
		'\x17D', '\x2', '\x2', '\xCF3', '\xCF5', '\a', '\x338', '\x2', '\x2', 
		'\xCF4', '\xCF3', '\x3', '\x2', '\x2', '\x2', '\xCF4', '\xCF5', '\x3', 
		'\x2', '\x2', '\x2', '\xCF5', '\xCF6', '\x3', '\x2', '\x2', '\x2', '\xCF6', 
		'\xCF7', '\a', '\xB1', '\x2', '\x2', '\xCF7', '\xCF8', '\a', '\x324', 
		'\x2', '\x2', '\xCF8', '\xCFD', '\t', '!', '\x2', '\x2', '\xCF9', '\xCFA', 
		'\a', 'T', '\x2', '\x2', '\xCFA', '\xCFB', '\a', '\x324', '\x2', '\x2', 
		'\xCFB', '\xCFD', '\x5', '\x3BA', '\x1DE', '\x2', '\xCFC', '\xCF4', '\x3', 
		'\x2', '\x2', '\x2', '\xCFC', '\xCF9', '\x3', '\x2', '\x2', '\x2', '\xCFD', 
		'\xCFE', '\x3', '\x2', '\x2', '\x2', '\xCFE', '\xCFC', '\x3', '\x2', '\x2', 
		'\x2', '\xCFE', '\xCFF', '\x3', '\x2', '\x2', '\x2', '\xCFF', '\xD00', 
		'\x3', '\x2', '\x2', '\x2', '\xD00', '\xD01', '\a', '\x337', '\x2', '\x2', 
		'\xD01', '\x12B', '\x3', '\x2', '\x2', '\x2', '\xD02', '\xD03', '\a', 
		'I', '\x2', '\x2', '\xD03', '\xD04', '\a', '|', '\x2', '\x2', '\xD04', 
		'\xD05', '\a', '\xB3', '\x2', '\x2', '\xD05', '\xD08', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xD06', '\xD07', '\a', '\x14', '\x2', '\x2', '\xD07', 
		'\xD09', '\x5', '\x3BA', '\x1DE', '\x2', '\xD08', '\xD06', '\x3', '\x2', 
		'\x2', '\x2', '\xD08', '\xD09', '\x3', '\x2', '\x2', '\x2', '\xD09', '\xD0A', 
		'\x3', '\x2', '\x2', '\x2', '\xD0A', '\xD0C', '\a', '\x8C', '\x2', '\x2', 
		'\xD0B', '\xD0D', '\a', '\x338', '\x2', '\x2', '\xD0C', '\xD0B', '\x3', 
		'\x2', '\x2', '\x2', '\xD0C', '\xD0D', '\x3', '\x2', '\x2', '\x2', '\xD0D', 
		'\xD0F', '\x3', '\x2', '\x2', '\x2', '\xD0E', '\xD10', '\a', '\x336', 
		'\x2', '\x2', '\xD0F', '\xD0E', '\x3', '\x2', '\x2', '\x2', '\xD0F', '\xD10', 
		'\x3', '\x2', '\x2', '\x2', '\xD10', '\xD13', '\x3', '\x2', '\x2', '\x2', 
		'\xD11', '\xD12', '\a', '\x1BF', '\x2', '\x2', '\xD12', '\xD14', '\a', 
		'\x324', '\x2', '\x2', '\xD13', '\xD11', '\x3', '\x2', '\x2', '\x2', '\xD13', 
		'\xD14', '\x3', '\x2', '\x2', '\x2', '\xD14', '\xD18', '\x3', '\x2', '\x2', 
		'\x2', '\xD15', '\xD19', '\a', '\x320', '\x2', '\x2', '\xD16', '\xD19', 
		'\a', '\x321', '\x2', '\x2', '\xD17', '\xD19', '\a', '\xD6', '\x2', '\x2', 
		'\xD18', '\xD15', '\x3', '\x2', '\x2', '\x2', '\xD18', '\xD16', '\x3', 
		'\x2', '\x2', '\x2', '\xD18', '\xD17', '\x3', '\x2', '\x2', '\x2', '\xD19', 
		'\xD21', '\x3', '\x2', '\x2', '\x2', '\xD1A', '\xD1B', '\a', '\x338', 
		'\x2', '\x2', '\xD1B', '\xD1C', '\a', '\xFD', '\x2', '\x2', '\xD1C', '\xD1E', 
		'\a', '\x324', '\x2', '\x2', '\xD1D', '\xD1F', '\t', ' ', '\x2', '\x2', 
		'\xD1E', '\xD1D', '\x3', '\x2', '\x2', '\x2', '\xD1E', '\xD1F', '\x3', 
		'\x2', '\x2', '\x2', '\xD1F', '\xD20', '\x3', '\x2', '\x2', '\x2', '\xD20', 
		'\xD22', '\a', '\x337', '\x2', '\x2', '\xD21', '\xD1A', '\x3', '\x2', 
		'\x2', '\x2', '\xD21', '\xD22', '\x3', '\x2', '\x2', '\x2', '\xD22', '\xD32', 
		'\x3', '\x2', '\x2', '\x2', '\xD23', '\xD2D', '\a', '\x17D', '\x2', '\x2', 
		'\xD24', '\xD26', '\a', '\x338', '\x2', '\x2', '\xD25', '\xD24', '\x3', 
		'\x2', '\x2', '\x2', '\xD25', '\xD26', '\x3', '\x2', '\x2', '\x2', '\xD26', 
		'\xD27', '\x3', '\x2', '\x2', '\x2', '\xD27', '\xD28', '\a', '\xB1', '\x2', 
		'\x2', '\xD28', '\xD29', '\a', '\x324', '\x2', '\x2', '\xD29', '\xD2E', 
		'\t', '!', '\x2', '\x2', '\xD2A', '\xD2B', '\a', 'T', '\x2', '\x2', '\xD2B', 
		'\xD2C', '\a', '\x324', '\x2', '\x2', '\xD2C', '\xD2E', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xD2D', '\xD25', '\x3', '\x2', '\x2', '\x2', '\xD2D', 
		'\xD2A', '\x3', '\x2', '\x2', '\x2', '\xD2E', '\xD2F', '\x3', '\x2', '\x2', 
		'\x2', '\xD2F', '\xD2D', '\x3', '\x2', '\x2', '\x2', '\xD2F', '\xD30', 
		'\x3', '\x2', '\x2', '\x2', '\xD30', '\xD31', '\x3', '\x2', '\x2', '\x2', 
		'\xD31', '\xD33', '\a', '\x337', '\x2', '\x2', '\xD32', '\xD23', '\x3', 
		'\x2', '\x2', '\x2', '\xD32', '\xD33', '\x3', '\x2', '\x2', '\x2', '\xD33', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\xD34', '\xD35', '\a', '\n', '\x2', 
		'\x2', '\xD35', '\xD36', '\a', '|', '\x2', '\x2', '\xD36', '\xD37', '\a', 
		'\x2B3', '\x2', '\x2', '\xD37', '\xD3A', '\a', '\x286', '\x2', '\x2', 
		'\xD38', '\xD3B', '\x5', '\x3BA', '\x1DE', '\x2', '\xD39', '\xD3B', '\a', 
		'\x1D5', '\x2', '\x2', '\xD3A', '\xD38', '\x3', '\x2', '\x2', '\x2', '\xD3A', 
		'\xD39', '\x3', '\x2', '\x2', '\x2', '\xD3B', '\xD3C', '\x3', '\x2', '\x2', 
		'\x2', '\xD3C', '\xD3D', '\a', '\x17D', '\x2', '\x2', '\xD3D', '\xD3E', 
		'\a', '\x336', '\x2', '\x2', '\xD3E', '\xD3F', '\a', '\x244', '\x2', '\x2', 
		'\xD3F', '\xD40', '\a', '\x324', '\x2', '\x2', '\xD40', '\xD66', '\a', 
		'\x31C', '\x2', '\x2', '\xD41', '\xD43', '\a', '\x338', '\x2', '\x2', 
		'\xD42', '\xD41', '\x3', '\x2', '\x2', '\x2', '\xD42', '\xD43', '\x3', 
		'\x2', '\x2', '\x2', '\xD43', '\xD44', '\x3', '\x2', '\x2', '\x2', '\xD44', 
		'\xD45', '\a', '\x18B', '\x2', '\x2', '\xD45', '\xD46', '\a', '\x1C5', 
		'\x2', '\x2', '\xD46', '\xD54', '\a', '\x324', '\x2', '\x2', '\xD47', 
		'\xD55', '\a', '\x19C', '\x2', '\x2', '\xD48', '\xD4A', '\a', '\x338', 
		'\x2', '\x2', '\xD49', '\xD48', '\x3', '\x2', '\x2', '\x2', '\xD49', '\xD4A', 
		'\x3', '\x2', '\x2', '\x2', '\xD4A', '\xD4B', '\x3', '\x2', '\x2', '\x2', 
		'\xD4B', '\xD4C', '\a', '\x31C', '\x2', '\x2', '\xD4C', '\xD4D', '\a', 
		'\x15E', '\x2', '\x2', '\xD4D', '\xD51', '\a', '\x31C', '\x2', '\x2', 
		'\xD4E', '\xD4F', '\a', '\x338', '\x2', '\x2', '\xD4F', '\xD51', '\a', 
		'\x31C', '\x2', '\x2', '\xD50', '\xD49', '\x3', '\x2', '\x2', '\x2', '\xD50', 
		'\xD4E', '\x3', '\x2', '\x2', '\x2', '\xD51', '\xD52', '\x3', '\x2', '\x2', 
		'\x2', '\xD52', '\xD50', '\x3', '\x2', '\x2', '\x2', '\xD52', '\xD53', 
		'\x3', '\x2', '\x2', '\x2', '\xD53', '\xD55', '\x3', '\x2', '\x2', '\x2', 
		'\xD54', '\xD47', '\x3', '\x2', '\x2', '\x2', '\xD54', '\xD50', '\x3', 
		'\x2', '\x2', '\x2', '\xD55', '\xD67', '\x3', '\x2', '\x2', '\x2', '\xD56', 
		'\xD57', '\a', '\x270', '\x2', '\x2', '\xD57', '\xD62', '\a', '\x324', 
		'\x2', '\x2', '\xD58', '\xD5A', '\a', '\x338', '\x2', '\x2', '\xD59', 
		'\xD58', '\x3', '\x2', '\x2', '\x2', '\xD59', '\xD5A', '\x3', '\x2', '\x2', 
		'\x2', '\xD5A', '\xD5B', '\x3', '\x2', '\x2', '\x2', '\xD5B', '\xD5C', 
		'\a', '\x31C', '\x2', '\x2', '\xD5C', '\xD5D', '\a', '\x15E', '\x2', '\x2', 
		'\xD5D', '\xD63', '\a', '\x31C', '\x2', '\x2', '\xD5E', '\xD60', '\a', 
		'\x338', '\x2', '\x2', '\xD5F', '\xD5E', '\x3', '\x2', '\x2', '\x2', '\xD5F', 
		'\xD60', '\x3', '\x2', '\x2', '\x2', '\xD60', '\xD61', '\x3', '\x2', '\x2', 
		'\x2', '\xD61', '\xD63', '\a', '\x31C', '\x2', '\x2', '\xD62', '\xD59', 
		'\x3', '\x2', '\x2', '\x2', '\xD62', '\xD5F', '\x3', '\x2', '\x2', '\x2', 
		'\xD63', '\xD64', '\x3', '\x2', '\x2', '\x2', '\xD64', '\xD62', '\x3', 
		'\x2', '\x2', '\x2', '\xD64', '\xD65', '\x3', '\x2', '\x2', '\x2', '\xD65', 
		'\xD67', '\x3', '\x2', '\x2', '\x2', '\xD66', '\xD42', '\x3', '\x2', '\x2', 
		'\x2', '\xD66', '\xD56', '\x3', '\x2', '\x2', '\x2', '\xD67', '\xD6E', 
		'\x3', '\x2', '\x2', '\x2', '\xD68', '\xD6A', '\a', '\x338', '\x2', '\x2', 
		'\xD69', '\xD68', '\x3', '\x2', '\x2', '\x2', '\xD69', '\xD6A', '\x3', 
		'\x2', '\x2', '\x2', '\xD6A', '\xD6B', '\x3', '\x2', '\x2', '\x2', '\xD6B', 
		'\xD6C', '\a', '\x248', '\x2', '\x2', '\xD6C', '\xD6D', '\a', '\x324', 
		'\x2', '\x2', '\xD6D', '\xD6F', '\a', '\x31C', '\x2', '\x2', '\xD6E', 
		'\xD69', '\x3', '\x2', '\x2', '\x2', '\xD6E', '\xD6F', '\x3', '\x2', '\x2', 
		'\x2', '\xD6F', '\xD76', '\x3', '\x2', '\x2', '\x2', '\xD70', '\xD72', 
		'\a', '\x338', '\x2', '\x2', '\xD71', '\xD70', '\x3', '\x2', '\x2', '\x2', 
		'\xD71', '\xD72', '\x3', '\x2', '\x2', '\x2', '\xD72', '\xD73', '\x3', 
		'\x2', '\x2', '\x2', '\xD73', '\xD74', '\a', '\x249', '\x2', '\x2', '\xD74', 
		'\xD75', '\a', '\x324', '\x2', '\x2', '\xD75', '\xD77', '\a', '\x31C', 
		'\x2', '\x2', '\xD76', '\xD71', '\x3', '\x2', '\x2', '\x2', '\xD76', '\xD77', 
		'\x3', '\x2', '\x2', '\x2', '\xD77', '\xD78', '\x3', '\x2', '\x2', '\x2', 
		'\xD78', '\xD79', '\a', '\x337', '\x2', '\x2', '\xD79', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\xD7A', '\xD7B', '\a', 'I', '\x2', '\x2', '\xD7B', 
		'\xD7C', '\a', '|', '\x2', '\x2', '\xD7C', '\xD7D', '\a', '\x2B3', '\x2', 
		'\x2', '\xD7D', '\xD7E', '\a', '\x286', '\x2', '\x2', '\xD7E', '\xD7F', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xD7F', '\xD80', '\a', '\x17D', '\x2', 
		'\x2', '\xD80', '\xD81', '\a', '\x336', '\x2', '\x2', '\xD81', '\xD82', 
		'\a', '\x244', '\x2', '\x2', '\xD82', '\xD83', '\a', '\x324', '\x2', '\x2', 
		'\xD83', '\xDA9', '\a', '\x31C', '\x2', '\x2', '\xD84', '\xD86', '\a', 
		'\x338', '\x2', '\x2', '\xD85', '\xD84', '\x3', '\x2', '\x2', '\x2', '\xD85', 
		'\xD86', '\x3', '\x2', '\x2', '\x2', '\xD86', '\xD87', '\x3', '\x2', '\x2', 
		'\x2', '\xD87', '\xD88', '\a', '\x18B', '\x2', '\x2', '\xD88', '\xD89', 
		'\a', '\x1C5', '\x2', '\x2', '\xD89', '\xD97', '\a', '\x324', '\x2', '\x2', 
		'\xD8A', '\xD98', '\a', '\x19C', '\x2', '\x2', '\xD8B', '\xD8D', '\a', 
		'\x338', '\x2', '\x2', '\xD8C', '\xD8B', '\x3', '\x2', '\x2', '\x2', '\xD8C', 
		'\xD8D', '\x3', '\x2', '\x2', '\x2', '\xD8D', '\xD8E', '\x3', '\x2', '\x2', 
		'\x2', '\xD8E', '\xD8F', '\a', '\x31C', '\x2', '\x2', '\xD8F', '\xD90', 
		'\a', '\x15E', '\x2', '\x2', '\xD90', '\xD94', '\a', '\x31C', '\x2', '\x2', 
		'\xD91', '\xD92', '\a', '\x338', '\x2', '\x2', '\xD92', '\xD94', '\a', 
		'\x31C', '\x2', '\x2', '\xD93', '\xD8C', '\x3', '\x2', '\x2', '\x2', '\xD93', 
		'\xD91', '\x3', '\x2', '\x2', '\x2', '\xD94', '\xD95', '\x3', '\x2', '\x2', 
		'\x2', '\xD95', '\xD93', '\x3', '\x2', '\x2', '\x2', '\xD95', '\xD96', 
		'\x3', '\x2', '\x2', '\x2', '\xD96', '\xD98', '\x3', '\x2', '\x2', '\x2', 
		'\xD97', '\xD8A', '\x3', '\x2', '\x2', '\x2', '\xD97', '\xD93', '\x3', 
		'\x2', '\x2', '\x2', '\xD98', '\xDAA', '\x3', '\x2', '\x2', '\x2', '\xD99', 
		'\xD9A', '\a', '\x270', '\x2', '\x2', '\xD9A', '\xDA5', '\a', '\x324', 
		'\x2', '\x2', '\xD9B', '\xD9D', '\a', '\x338', '\x2', '\x2', '\xD9C', 
		'\xD9B', '\x3', '\x2', '\x2', '\x2', '\xD9C', '\xD9D', '\x3', '\x2', '\x2', 
		'\x2', '\xD9D', '\xD9E', '\x3', '\x2', '\x2', '\x2', '\xD9E', '\xD9F', 
		'\a', '\x31C', '\x2', '\x2', '\xD9F', '\xDA0', '\a', '\x15E', '\x2', '\x2', 
		'\xDA0', '\xDA6', '\a', '\x31C', '\x2', '\x2', '\xDA1', '\xDA3', '\a', 
		'\x338', '\x2', '\x2', '\xDA2', '\xDA1', '\x3', '\x2', '\x2', '\x2', '\xDA2', 
		'\xDA3', '\x3', '\x2', '\x2', '\x2', '\xDA3', '\xDA4', '\x3', '\x2', '\x2', 
		'\x2', '\xDA4', '\xDA6', '\a', '\x31C', '\x2', '\x2', '\xDA5', '\xD9C', 
		'\x3', '\x2', '\x2', '\x2', '\xDA5', '\xDA2', '\x3', '\x2', '\x2', '\x2', 
		'\xDA6', '\xDA7', '\x3', '\x2', '\x2', '\x2', '\xDA7', '\xDA5', '\x3', 
		'\x2', '\x2', '\x2', '\xDA7', '\xDA8', '\x3', '\x2', '\x2', '\x2', '\xDA8', 
		'\xDAA', '\x3', '\x2', '\x2', '\x2', '\xDA9', '\xD85', '\x3', '\x2', '\x2', 
		'\x2', '\xDA9', '\xD99', '\x3', '\x2', '\x2', '\x2', '\xDAA', '\xDB1', 
		'\x3', '\x2', '\x2', '\x2', '\xDAB', '\xDAD', '\a', '\x338', '\x2', '\x2', 
		'\xDAC', '\xDAB', '\x3', '\x2', '\x2', '\x2', '\xDAC', '\xDAD', '\x3', 
		'\x2', '\x2', '\x2', '\xDAD', '\xDAE', '\x3', '\x2', '\x2', '\x2', '\xDAE', 
		'\xDAF', '\a', '\x248', '\x2', '\x2', '\xDAF', '\xDB0', '\a', '\x324', 
		'\x2', '\x2', '\xDB0', '\xDB2', '\a', '\x31C', '\x2', '\x2', '\xDB1', 
		'\xDAC', '\x3', '\x2', '\x2', '\x2', '\xDB1', '\xDB2', '\x3', '\x2', '\x2', 
		'\x2', '\xDB2', '\xDB9', '\x3', '\x2', '\x2', '\x2', '\xDB3', '\xDB5', 
		'\a', '\x338', '\x2', '\x2', '\xDB4', '\xDB3', '\x3', '\x2', '\x2', '\x2', 
		'\xDB4', '\xDB5', '\x3', '\x2', '\x2', '\x2', '\xDB5', '\xDB6', '\x3', 
		'\x2', '\x2', '\x2', '\xDB6', '\xDB7', '\a', '\x249', '\x2', '\x2', '\xDB7', 
		'\xDB8', '\a', '\x324', '\x2', '\x2', '\xDB8', '\xDBA', '\a', '\x31C', 
		'\x2', '\x2', '\xDB9', '\xDB4', '\x3', '\x2', '\x2', '\x2', '\xDB9', '\xDBA', 
		'\x3', '\x2', '\x2', '\x2', '\xDBA', '\xDBB', '\x3', '\x2', '\x2', '\x2', 
		'\xDBB', '\xDBC', '\a', '\x337', '\x2', '\x2', '\xDBC', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\xDBD', '\xDBE', '\a', '\n', '\x2', '\x2', '\xDBE', 
		'\xDBF', '\a', '\x20C', '\x2', '\x2', '\xDBF', '\xDC0', '\a', '\x1B2', 
		'\x2', '\x2', '\xDC0', '\xDCB', '\x5', '\x3BA', '\x1DE', '\x2', '\xDC1', 
		'\xDC6', '\a', '\x2A2', '\x2', '\x2', '\xDC2', '\xDC3', '\a', '\x17D', 
		'\x2', '\x2', '\xDC3', '\xDC4', '\a', '\x183', '\x2', '\x2', '\xDC4', 
		'\xDC5', '\a', '\x324', '\x2', '\x2', '\xDC5', '\xDC7', '\t', '\t', '\x2', 
		'\x2', '\xDC6', '\xDC2', '\x3', '\x2', '\x2', '\x2', '\xDC6', '\xDC7', 
		'\x3', '\x2', '\x2', '\x2', '\xDC7', '\xDCC', '\x3', '\x2', '\x2', '\x2', 
		'\xDC8', '\xDCC', '\a', '\x2AB', '\x2', '\x2', '\xDC9', '\xDCA', '\a', 
		'\x10', '\x2', '\x2', '\xDCA', '\xDCC', '\a', 'Z', '\x2', '\x2', '\xDCB', 
		'\xDC1', '\x3', '\x2', '\x2', '\x2', '\xDCB', '\xDC8', '\x3', '\x2', '\x2', 
		'\x2', '\xDCB', '\xDC9', '\x3', '\x2', '\x2', '\x2', '\xDCC', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\xDCD', '\xDCE', '\a', 'I', '\x2', '\x2', 
		'\xDCE', '\xDCF', '\a', '\x20C', '\x2', '\x2', '\xDCF', '\xDD0', '\a', 
		'\x1B2', '\x2', '\x2', '\xDD0', '\xDD4', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xDD1', '\xDD2', '\a', '\xE6', '\x2', '\x2', '\xDD2', '\xDD3', '\a', 
		'\x1FE', '\x2', '\x2', '\xDD3', '\xDD5', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xDD4', '\xDD1', '\x3', '\x2', '\x2', '\x2', '\xDD4', '\xDD5', '\x3', 
		'\x2', '\x2', '\x2', '\xDD5', '\xDD9', '\x3', '\x2', '\x2', '\x2', '\xDD6', 
		'\xDD7', '\a', '\x9C', '\x2', '\x2', '\xDD7', '\xDD8', '\a', '\x284', 
		'\x2', '\x2', '\xDD8', '\xDDA', '\a', '\x320', '\x2', '\x2', '\xDD9', 
		'\xDD6', '\x3', '\x2', '\x2', '\x2', '\xDD9', '\xDDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDDA', '\xDDF', '\x3', '\x2', '\x2', '\x2', '\xDDB', '\xDDC', 
		'\a', '\x17D', '\x2', '\x2', '\xDDC', '\xDDD', '\a', '\x183', '\x2', '\x2', 
		'\xDDD', '\xDDE', '\a', '\x324', '\x2', '\x2', '\xDDE', '\xDE0', '\t', 
		'\t', '\x2', '\x2', '\xDDF', '\xDDB', '\x3', '\x2', '\x2', '\x2', '\xDDF', 
		'\xDE0', '\x3', '\x2', '\x2', '\x2', '\xDE0', '\xDE3', '\x3', '\x2', '\x2', 
		'\x2', '\xDE1', '\xDE2', '\a', '\x10', '\x2', '\x2', '\xDE2', '\xDE4', 
		'\a', 'Z', '\x2', '\x2', '\xDE3', '\xDE1', '\x3', '\x2', '\x2', '\x2', 
		'\xDE3', '\xDE4', '\x3', '\x2', '\x2', '\x2', '\xDE4', '\xDE7', '\x3', 
		'\x2', '\x2', '\x2', '\xDE5', '\xDE6', '\a', '\x14', '\x2', '\x2', '\xDE6', 
		'\xDE8', '\x5', '\x3BA', '\x1DE', '\x2', '\xDE7', '\xDE5', '\x3', '\x2', 
		'\x2', '\x2', '\xDE7', '\xDE8', '\x3', '\x2', '\x2', '\x2', '\xDE8', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\xDE9', '\xDEA', '\a', '\n', '\x2', '\x2', 
		'\xDEA', '\xDEB', '\a', '\x20C', '\x2', '\x2', '\xDEB', '\xDEC', '\a', 
		'\x2E2', '\x2', '\x2', '\xDEC', '\xDFA', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xDED', '\xDEE', '\a', '\x4', '\x2', '\x2', '\xDEE', '\xDEF', '\a', '\x320', 
		'\x2', '\x2', '\xDEF', '\xDF0', '\a', '\xB1', '\x2', '\x2', '\xDF0', '\xDFB', 
		'\t', '\"', '\x2', '\x2', '\xDF1', '\xDF8', '\a', 'h', '\x2', '\x2', '\xDF2', 
		'\xDF3', '\a', '\x320', '\x2', '\x2', '\xDF3', '\xDF4', '\a', '\xB1', 
		'\x2', '\x2', '\xDF4', '\xDF9', '\t', '\"', '\x2', '\x2', '\xDF5', '\xDF6', 
		'\a', '\x6', '\x2', '\x2', '\xDF6', '\xDF9', '\t', '\"', '\x2', '\x2', 
		'\xDF7', '\xDF9', '\a', '\x6', '\x2', '\x2', '\xDF8', '\xDF2', '\x3', 
		'\x2', '\x2', '\x2', '\xDF8', '\xDF5', '\x3', '\x2', '\x2', '\x2', '\xDF8', 
		'\xDF7', '\x3', '\x2', '\x2', '\x2', '\xDF9', '\xDFB', '\x3', '\x2', '\x2', 
		'\x2', '\xDFA', '\xDED', '\x3', '\x2', '\x2', '\x2', '\xDFA', '\xDF1', 
		'\x3', '\x2', '\x2', '\x2', '\xDFB', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\xDFC', '\xDFD', '\a', 'I', '\x2', '\x2', '\xDFD', '\xDFE', '\a', '\x20C', 
		'\x2', '\x2', '\xDFE', '\xDFF', '\a', '\x2E2', '\x2', '\x2', '\xDFF', 
		'\xE0B', '\x5', '\x3BA', '\x1DE', '\x2', '\xE00', '\xE09', '\a', '\x8C', 
		'\x2', '\x2', '\xE01', '\xE02', '\x5', '\x3BA', '\x1DE', '\x2', '\xE02', 
		'\xE03', '\a', '\x331', '\x2', '\x2', '\xE03', '\xE05', '\x3', '\x2', 
		'\x2', '\x2', '\xE04', '\xE01', '\x3', '\x2', '\x2', '\x2', '\xE04', '\xE05', 
		'\x3', '\x2', '\x2', '\x2', '\xE05', '\xE06', '\x3', '\x2', '\x2', '\x2', 
		'\xE06', '\xE0A', '\x5', '\x3BA', '\x1DE', '\x2', '\xE07', '\xE08', '\a', 
		'\x155', '\x2', '\x2', '\xE08', '\xE0A', '\a', '\x2E2', '\x2', '\x2', 
		'\xE09', '\xE04', '\x3', '\x2', '\x2', '\x2', '\xE09', '\xE07', '\x3', 
		'\x2', '\x2', '\x2', '\xE0A', '\xE0C', '\x3', '\x2', '\x2', '\x2', '\xE0B', 
		'\xE00', '\x3', '\x2', '\x2', '\x2', '\xE0B', '\xE0C', '\x3', '\x2', '\x2', 
		'\x2', '\xE0C', '\xE0F', '\x3', '\x2', '\x2', '\x2', '\xE0D', '\xE0E', 
		'\a', '\x14', '\x2', '\x2', '\xE0E', '\xE10', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xE0F', '\xE0D', '\x3', '\x2', '\x2', '\x2', '\xE0F', '\xE10', 
		'\x3', '\x2', '\x2', '\x2', '\xE10', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\xE11', '\xE12', '\a', '\n', '\x2', '\x2', '\xE12', '\xE13', '\a', '\x23D', 
		'\x2', '\x2', '\xE13', '\xE57', '\x5', '\x3BA', '\x1DE', '\x2', '\xE14', 
		'\xE16', '\t', '\x17', '\x2', '\x2', '\xE15', '\xE14', '\x3', '\x2', '\x2', 
		'\x2', '\xE15', '\xE16', '\x3', '\x2', '\x2', '\x2', '\xE16', '\xE58', 
		'\x3', '\x2', '\x2', '\x2', '\xE17', '\xE25', '\a', '\x17D', '\x2', '\x2', 
		'\xE18', '\xE19', '\a', '\xF5', '\x2', '\x2', '\xE19', '\xE1D', '\a', 
		'\x324', '\x2', '\x2', '\xE1A', '\xE1E', '\a', '\x320', '\x2', '\x2', 
		'\xE1B', '\xE1C', '\a', '\x321', '\x2', '\x2', '\xE1C', '\xE1E', '\a', 
		'\x95', '\x2', '\x2', '\xE1D', '\xE1A', '\x3', '\x2', '\x2', '\x2', '\xE1D', 
		'\xE1B', '\x3', '\x2', '\x2', '\x2', '\xE1E', '\xE22', '\x3', '\x2', '\x2', 
		'\x2', '\xE1F', '\xE21', '\t', '#', '\x2', '\x2', '\xE20', '\xE1F', '\x3', 
		'\x2', '\x2', '\x2', '\xE21', '\xE24', '\x3', '\x2', '\x2', '\x2', '\xE22', 
		'\xE20', '\x3', '\x2', '\x2', '\x2', '\xE22', '\xE23', '\x3', '\x2', '\x2', 
		'\x2', '\xE23', '\xE26', '\x3', '\x2', '\x2', '\x2', '\xE24', '\xE22', 
		'\x3', '\x2', '\x2', '\x2', '\xE25', '\xE18', '\x3', '\x2', '\x2', '\x2', 
		'\xE25', '\xE26', '\x3', '\x2', '\x2', '\x2', '\xE26', '\xE30', '\x3', 
		'\x2', '\x2', '\x2', '\xE27', '\xE28', '\a', '\xE5', '\x2', '\x2', '\xE28', 
		'\xE29', '\a', '\x324', '\x2', '\x2', '\xE29', '\xE2D', '\a', '\x320', 
		'\x2', '\x2', '\xE2A', '\xE2C', '\t', '#', '\x2', '\x2', '\xE2B', '\xE2A', 
		'\x3', '\x2', '\x2', '\x2', '\xE2C', '\xE2F', '\x3', '\x2', '\x2', '\x2', 
		'\xE2D', '\xE2B', '\x3', '\x2', '\x2', '\x2', '\xE2D', '\xE2E', '\x3', 
		'\x2', '\x2', '\x2', '\xE2E', '\xE31', '\x3', '\x2', '\x2', '\x2', '\xE2F', 
		'\xE2D', '\x3', '\x2', '\x2', '\x2', '\xE30', '\xE27', '\x3', '\x2', '\x2', 
		'\x2', '\xE30', '\xE31', '\x3', '\x2', '\x2', '\x2', '\xE31', '\xE35', 
		'\x3', '\x2', '\x2', '\x2', '\xE32', '\xE33', '\a', '[', '\x2', '\x2', 
		'\xE33', '\xE34', '\a', '\x324', '\x2', '\x2', '\xE34', '\xE36', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xE35', '\xE32', '\x3', '\x2', '\x2', '\x2', 
		'\xE35', '\xE36', '\x3', '\x2', '\x2', '\x2', '\xE36', '\xE3A', '\x3', 
		'\x2', '\x2', '\x2', '\xE37', '\xE38', '\a', '\x1D7', '\x2', '\x2', '\xE38', 
		'\xE39', '\a', '\x324', '\x2', '\x2', '\xE39', '\xE3B', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xE3A', '\xE37', '\x3', '\x2', '\x2', '\x2', '\xE3A', 
		'\xE3B', '\x3', '\x2', '\x2', '\x2', '\xE3B', '\xE3F', '\x3', '\x2', '\x2', 
		'\x2', '\xE3C', '\xE3D', '\a', '\x25F', '\x2', '\x2', '\xE3D', '\xE3E', 
		'\a', '\x324', '\x2', '\x2', '\xE3E', '\xE40', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xE3F', '\xE3C', '\x3', '\x2', '\x2', '\x2', '\xE3F', '\xE40', 
		'\x3', '\x2', '\x2', '\x2', '\xE40', '\xE44', '\x3', '\x2', '\x2', '\x2', 
		'\xE41', '\xE42', '\a', '\x30', '\x2', '\x2', '\xE42', '\xE43', '\a', 
		'\x324', '\x2', '\x2', '\xE43', '\xE45', '\t', '\t', '\x2', '\x2', '\xE44', 
		'\xE41', '\x3', '\x2', '\x2', '\x2', '\xE44', '\xE45', '\x3', '\x2', '\x2', 
		'\x2', '\xE45', '\xE49', '\x3', '\x2', '\x2', '\x2', '\xE46', '\xE47', 
		'\a', '\x31', '\x2', '\x2', '\xE47', '\xE48', '\a', '\x324', '\x2', '\x2', 
		'\xE48', '\xE4A', '\t', '\t', '\x2', '\x2', '\xE49', '\xE46', '\x3', '\x2', 
		'\x2', '\x2', '\xE49', '\xE4A', '\x3', '\x2', '\x2', '\x2', '\xE4A', '\xE4E', 
		'\x3', '\x2', '\x2', '\x2', '\xE4B', '\xE4C', '\a', '\x1C8', '\x2', '\x2', 
		'\xE4C', '\xE4D', '\a', '\x324', '\x2', '\x2', '\xE4D', '\xE4F', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xE4E', '\xE4B', '\x3', '\x2', '\x2', '\x2', 
		'\xE4E', '\xE4F', '\x3', '\x2', '\x2', '\x2', '\xE4F', '\xE52', '\x3', 
		'\x2', '\x2', '\x2', '\xE50', '\xE51', '\a', '\x265', '\x2', '\x2', '\xE51', 
		'\xE53', '\a', '\x1C8', '\x2', '\x2', '\xE52', '\xE50', '\x3', '\x2', 
		'\x2', '\x2', '\xE52', '\xE53', '\x3', '\x2', '\x2', '\x2', '\xE53', '\xE58', 
		'\x3', '\x2', '\x2', '\x2', '\xE54', '\xE55', '\t', '\x15', '\x2', '\x2', 
		'\xE55', '\xE56', '\a', '\x1C8', '\x2', '\x2', '\xE56', '\xE58', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xE57', '\xE15', '\x3', '\x2', '\x2', '\x2', 
		'\xE57', '\xE17', '\x3', '\x2', '\x2', '\x2', '\xE57', '\xE54', '\x3', 
		'\x2', '\x2', '\x2', '\xE58', '\x13B', '\x3', '\x2', '\x2', '\x2', '\xE59', 
		'\xE5A', '\a', 'I', '\x2', '\x2', '\xE5A', '\xE5B', '\a', '\x23D', '\x2', 
		'\x2', '\xE5B', '\xEB6', '\x5', '\x3BA', '\x1DE', '\x2', '\xE5C', '\xE6A', 
		'\a', '\x17D', '\x2', '\x2', '\xE5D', '\xE5E', '\a', '\xF5', '\x2', '\x2', 
		'\xE5E', '\xE62', '\a', '\x324', '\x2', '\x2', '\xE5F', '\xE63', '\a', 
		'\x320', '\x2', '\x2', '\xE60', '\xE61', '\a', '\x321', '\x2', '\x2', 
		'\xE61', '\xE63', '\a', '\x95', '\x2', '\x2', '\xE62', '\xE5F', '\x3', 
		'\x2', '\x2', '\x2', '\xE62', '\xE60', '\x3', '\x2', '\x2', '\x2', '\xE63', 
		'\xE67', '\x3', '\x2', '\x2', '\x2', '\xE64', '\xE66', '\t', '#', '\x2', 
		'\x2', '\xE65', '\xE64', '\x3', '\x2', '\x2', '\x2', '\xE66', '\xE69', 
		'\x3', '\x2', '\x2', '\x2', '\xE67', '\xE65', '\x3', '\x2', '\x2', '\x2', 
		'\xE67', '\xE68', '\x3', '\x2', '\x2', '\x2', '\xE68', '\xE6B', '\x3', 
		'\x2', '\x2', '\x2', '\xE69', '\xE67', '\x3', '\x2', '\x2', '\x2', '\xE6A', 
		'\xE5D', '\x3', '\x2', '\x2', '\x2', '\xE6A', '\xE6B', '\x3', '\x2', '\x2', 
		'\x2', '\xE6B', '\xE72', '\x3', '\x2', '\x2', '\x2', '\xE6C', '\xE6E', 
		'\a', '\x338', '\x2', '\x2', '\xE6D', '\xE6C', '\x3', '\x2', '\x2', '\x2', 
		'\xE6D', '\xE6E', '\x3', '\x2', '\x2', '\x2', '\xE6E', '\xE6F', '\x3', 
		'\x2', '\x2', '\x2', '\xE6F', '\xE70', '\a', '\x141', '\x2', '\x2', '\xE70', 
		'\xE71', '\a', '\x324', '\x2', '\x2', '\xE71', '\xE73', '\a', '\x321', 
		'\x2', '\x2', '\xE72', '\xE6D', '\x3', '\x2', '\x2', '\x2', '\xE72', '\xE73', 
		'\x3', '\x2', '\x2', '\x2', '\xE73', '\xE7A', '\x3', '\x2', '\x2', '\x2', 
		'\xE74', '\xE76', '\a', '\x338', '\x2', '\x2', '\xE75', '\xE74', '\x3', 
		'\x2', '\x2', '\x2', '\xE75', '\xE76', '\x3', '\x2', '\x2', '\x2', '\xE76', 
		'\xE77', '\x3', '\x2', '\x2', '\x2', '\xE77', '\xE78', '\a', '[', '\x2', 
		'\x2', '\xE78', '\xE79', '\a', '\x324', '\x2', '\x2', '\xE79', '\xE7B', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xE7A', '\xE75', '\x3', '\x2', '\x2', 
		'\x2', '\xE7A', '\xE7B', '\x3', '\x2', '\x2', '\x2', '\xE7B', '\xE82', 
		'\x3', '\x2', '\x2', '\x2', '\xE7C', '\xE7E', '\a', '\x338', '\x2', '\x2', 
		'\xE7D', '\xE7C', '\x3', '\x2', '\x2', '\x2', '\xE7D', '\xE7E', '\x3', 
		'\x2', '\x2', '\x2', '\xE7E', '\xE7F', '\x3', '\x2', '\x2', '\x2', '\xE7F', 
		'\xE80', '\a', '\x1D7', '\x2', '\x2', '\xE80', '\xE81', '\a', '\x324', 
		'\x2', '\x2', '\xE81', '\xE83', '\x5', '\x3BA', '\x1DE', '\x2', '\xE82', 
		'\xE7D', '\x3', '\x2', '\x2', '\x2', '\xE82', '\xE83', '\x3', '\x2', '\x2', 
		'\x2', '\xE83', '\xE8A', '\x3', '\x2', '\x2', '\x2', '\xE84', '\xE86', 
		'\a', '\x338', '\x2', '\x2', '\xE85', '\xE84', '\x3', '\x2', '\x2', '\x2', 
		'\xE85', '\xE86', '\x3', '\x2', '\x2', '\x2', '\xE86', '\xE87', '\x3', 
		'\x2', '\x2', '\x2', '\xE87', '\xE88', '\a', '\x31', '\x2', '\x2', '\xE88', 
		'\xE89', '\a', '\x324', '\x2', '\x2', '\xE89', '\xE8B', '\t', '\t', '\x2', 
		'\x2', '\xE8A', '\xE85', '\x3', '\x2', '\x2', '\x2', '\xE8A', '\xE8B', 
		'\x3', '\x2', '\x2', '\x2', '\xE8B', '\xE92', '\x3', '\x2', '\x2', '\x2', 
		'\xE8C', '\xE8E', '\a', '\x338', '\x2', '\x2', '\xE8D', '\xE8C', '\x3', 
		'\x2', '\x2', '\x2', '\xE8D', '\xE8E', '\x3', '\x2', '\x2', '\x2', '\xE8E', 
		'\xE8F', '\x3', '\x2', '\x2', '\x2', '\xE8F', '\xE90', '\a', '\x30', '\x2', 
		'\x2', '\xE90', '\xE91', '\a', '\x324', '\x2', '\x2', '\xE91', '\xE93', 
		'\t', '\t', '\x2', '\x2', '\xE92', '\xE8D', '\x3', '\x2', '\x2', '\x2', 
		'\xE92', '\xE93', '\x3', '\x2', '\x2', '\x2', '\xE93', '\xE9A', '\x3', 
		'\x2', '\x2', '\x2', '\xE94', '\xE96', '\a', '\x338', '\x2', '\x2', '\xE95', 
		'\xE94', '\x3', '\x2', '\x2', '\x2', '\xE95', '\xE96', '\x3', '\x2', '\x2', 
		'\x2', '\xE96', '\xE97', '\x3', '\x2', '\x2', '\x2', '\xE97', '\xE98', 
		'\a', '\x1C8', '\x2', '\x2', '\xE98', '\xE99', '\a', '\x324', '\x2', '\x2', 
		'\xE99', '\xE9B', '\x5', '\x3BA', '\x1DE', '\x2', '\xE9A', '\xE95', '\x3', 
		'\x2', '\x2', '\x2', '\xE9A', '\xE9B', '\x3', '\x2', '\x2', '\x2', '\xE9B', 
		'\xEB7', '\x3', '\x2', '\x2', '\x2', '\xE9C', '\xEB4', '\a', '\x8C', '\x2', 
		'\x2', '\xE9D', '\xE9E', '\a', '\x17C', '\x2', '\x2', '\xE9E', '\xEA5', 
		'\a', '\x17D', '\x2', '\x2', '\xE9F', '\xEA1', '\a', '\x338', '\x2', '\x2', 
		'\xEA0', '\xE9F', '\x3', '\x2', '\x2', '\x2', '\xEA0', '\xEA1', '\x3', 
		'\x2', '\x2', '\x2', '\xEA1', '\xEA2', '\x3', '\x2', '\x2', '\x2', '\xEA2', 
		'\xEA3', '\a', '[', '\x2', '\x2', '\xEA3', '\xEA4', '\a', '\x324', '\x2', 
		'\x2', '\xEA4', '\xEA6', '\x5', '\x3BA', '\x1DE', '\x2', '\xEA5', '\xEA0', 
		'\x3', '\x2', '\x2', '\x2', '\xEA5', '\xEA6', '\x3', '\x2', '\x2', '\x2', 
		'\xEA6', '\xEAD', '\x3', '\x2', '\x2', '\x2', '\xEA7', '\xEA9', '\a', 
		'\x338', '\x2', '\x2', '\xEA8', '\xEA7', '\x3', '\x2', '\x2', '\x2', '\xEA8', 
		'\xEA9', '\x3', '\x2', '\x2', '\x2', '\xEA9', '\xEAA', '\x3', '\x2', '\x2', 
		'\x2', '\xEAA', '\xEAB', '\a', '\x1D7', '\x2', '\x2', '\xEAB', '\xEAC', 
		'\a', '\x324', '\x2', '\x2', '\xEAC', '\xEAE', '\a', '\x320', '\x2', '\x2', 
		'\xEAD', '\xEA8', '\x3', '\x2', '\x2', '\x2', '\xEAD', '\xEAE', '\x3', 
		'\x2', '\x2', '\x2', '\xEAE', '\xEB5', '\x3', '\x2', '\x2', '\x2', '\xEAF', 
		'\xEB0', '\a', '+', '\x2', '\x2', '\xEB0', '\xEB5', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xEB1', '\xEB2', '\a', '\x12', '\x2', '\x2', '\xEB2', '\xEB3', 
		'\a', '\xAD', '\x2', '\x2', '\xEB3', '\xEB5', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xEB4', '\xE9D', '\x3', '\x2', '\x2', '\x2', '\xEB4', '\xEAF', 
		'\x3', '\x2', '\x2', '\x2', '\xEB4', '\xEB1', '\x3', '\x2', '\x2', '\x2', 
		'\xEB5', '\xEB7', '\x3', '\x2', '\x2', '\x2', '\xEB6', '\xE5C', '\x3', 
		'\x2', '\x2', '\x2', '\xEB6', '\xE9C', '\x3', '\x2', '\x2', '\x2', '\xEB7', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\xEB8', '\xEB9', '\a', '\n', '\x2', 
		'\x2', '\xEB9', '\xEBA', '\a', '\x23D', '\x2', '\x2', '\xEBA', '\xECC', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xEBB', '\xEBD', '\t', '\x17', '\x2', 
		'\x2', '\xEBC', '\xEBB', '\x3', '\x2', '\x2', '\x2', '\xEBC', '\xEBD', 
		'\x3', '\x2', '\x2', '\x2', '\xEBD', '\xECD', '\x3', '\x2', '\x2', '\x2', 
		'\xEBE', '\xECA', '\a', '\x17D', '\x2', '\x2', '\xEBF', '\xEC0', '\a', 
		'\xF5', '\x2', '\x2', '\xEC0', '\xEC1', '\a', '\x324', '\x2', '\x2', '\xEC1', 
		'\xEC5', '\a', '\x320', '\x2', '\x2', '\xEC2', '\xEC3', '\a', '\xE5', 
		'\x2', '\x2', '\xEC3', '\xEC4', '\a', '\x324', '\x2', '\x2', '\xEC4', 
		'\xEC6', '\a', '\x320', '\x2', '\x2', '\xEC5', '\xEC2', '\x3', '\x2', 
		'\x2', '\x2', '\xEC5', '\xEC6', '\x3', '\x2', '\x2', '\x2', '\xEC6', '\xECB', 
		'\x3', '\x2', '\x2', '\x2', '\xEC7', '\xEC8', '\a', '\x25F', '\x2', '\x2', 
		'\xEC8', '\xEC9', '\a', '\x324', '\x2', '\x2', '\xEC9', '\xECB', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xECA', '\xEBF', '\x3', '\x2', '\x2', '\x2', 
		'\xECA', '\xEC7', '\x3', '\x2', '\x2', '\x2', '\xECB', '\xECD', '\x3', 
		'\x2', '\x2', '\x2', '\xECC', '\xEBC', '\x3', '\x2', '\x2', '\x2', '\xECC', 
		'\xEBE', '\x3', '\x2', '\x2', '\x2', '\xECD', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\xECE', '\xECF', '\a', 'I', '\x2', '\x2', '\xECF', '\xED0', '\a', 
		'\x23D', '\x2', '\x2', '\xED0', '\xED1', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xED1', '\xED2', '\a', '\x17D', '\x2', '\x2', '\xED2', '\xED3', '\a', 
		'\xF5', '\x2', '\x2', '\xED3', '\xED4', '\a', '\x324', '\x2', '\x2', '\xED4', 
		'\xED8', '\a', '\x320', '\x2', '\x2', '\xED5', '\xED6', '\a', '\x141', 
		'\x2', '\x2', '\xED6', '\xED7', '\a', '\x324', '\x2', '\x2', '\xED7', 
		'\xED9', '\a', '\x321', '\x2', '\x2', '\xED8', '\xED5', '\x3', '\x2', 
		'\x2', '\x2', '\xED8', '\xED9', '\x3', '\x2', '\x2', '\x2', '\xED9', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\xEDA', '\xEDB', '\a', '\n', '\x2', '\x2', 
		'\xEDB', '\xEDC', '\a', '\x23D', '\x2', '\x2', '\xEDC', '\xEF4', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xEDD', '\xEDF', '\t', '\x17', '\x2', '\x2', 
		'\xEDE', '\xEDD', '\x3', '\x2', '\x2', '\x2', '\xEDE', '\xEDF', '\x3', 
		'\x2', '\x2', '\x2', '\xEDF', '\xEF5', '\x3', '\x2', '\x2', '\x2', '\xEE0', 
		'\xEF2', '\a', '\x17D', '\x2', '\x2', '\xEE1', '\xEE2', '\a', '\xF5', 
		'\x2', '\x2', '\xEE2', '\xEE3', '\a', '\x324', '\x2', '\x2', '\xEE3', 
		'\xEED', '\a', '\x320', '\x2', '\x2', '\xEE4', '\xEE5', '\a', '\xE5', 
		'\x2', '\x2', '\xEE5', '\xEE6', '\a', '\x324', '\x2', '\x2', '\xEE6', 
		'\xEEA', '\a', '\x320', '\x2', '\x2', '\xEE7', '\xEE9', '\t', '#', '\x2', 
		'\x2', '\xEE8', '\xEE7', '\x3', '\x2', '\x2', '\x2', '\xEE9', '\xEEC', 
		'\x3', '\x2', '\x2', '\x2', '\xEEA', '\xEE8', '\x3', '\x2', '\x2', '\x2', 
		'\xEEA', '\xEEB', '\x3', '\x2', '\x2', '\x2', '\xEEB', '\xEEE', '\x3', 
		'\x2', '\x2', '\x2', '\xEEC', '\xEEA', '\x3', '\x2', '\x2', '\x2', '\xEED', 
		'\xEE4', '\x3', '\x2', '\x2', '\x2', '\xEED', '\xEEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEEE', '\xEF3', '\x3', '\x2', '\x2', '\x2', '\xEEF', '\xEF0', 
		'\a', '\x25F', '\x2', '\x2', '\xEF0', '\xEF1', '\a', '\x324', '\x2', '\x2', 
		'\xEF1', '\xEF3', '\x5', '\x3BA', '\x1DE', '\x2', '\xEF2', '\xEE1', '\x3', 
		'\x2', '\x2', '\x2', '\xEF2', '\xEEF', '\x3', '\x2', '\x2', '\x2', '\xEF3', 
		'\xEF5', '\x3', '\x2', '\x2', '\x2', '\xEF4', '\xEDE', '\x3', '\x2', '\x2', 
		'\x2', '\xEF4', '\xEE0', '\x3', '\x2', '\x2', '\x2', '\xEF5', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\xEF6', '\xEF7', '\a', 'I', '\x2', '\x2', 
		'\xEF7', '\xEF8', '\a', '\x23D', '\x2', '\x2', '\xEF8', '\xF09', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xEF9', '\xEFA', '\a', '\x17D', '\x2', '\x2', 
		'\xEFA', '\xEFB', '\a', '\xF5', '\x2', '\x2', '\xEFB', '\xEFC', '\a', 
		'\x324', '\x2', '\x2', '\xEFC', '\xEFE', '\a', '\x320', '\x2', '\x2', 
		'\xEFD', '\xEFF', '\a', '\xCF', '\x2', '\x2', '\xEFE', '\xEFD', '\x3', 
		'\x2', '\x2', '\x2', '\xEFE', '\xEFF', '\x3', '\x2', '\x2', '\x2', '\xEFF', 
		'\xF05', '\x3', '\x2', '\x2', '\x2', '\xF00', '\xF01', '\a', '\x30', '\x2', 
		'\x2', '\xF01', '\xF03', '\a', '\x324', '\x2', '\x2', '\xF02', '\xF04', 
		'\t', '\t', '\x2', '\x2', '\xF03', '\xF02', '\x3', '\x2', '\x2', '\x2', 
		'\xF03', '\xF04', '\x3', '\x2', '\x2', '\x2', '\xF04', '\xF06', '\x3', 
		'\x2', '\x2', '\x2', '\xF05', '\xF00', '\x3', '\x2', '\x2', '\x2', '\xF05', 
		'\xF06', '\x3', '\x2', '\x2', '\x2', '\xF06', '\xF0A', '\x3', '\x2', '\x2', 
		'\x2', '\xF07', '\xF08', '\a', '\x8C', '\x2', '\x2', '\xF08', '\xF0A', 
		'\a', '\x17C', '\x2', '\x2', '\xF09', '\xEF9', '\x3', '\x2', '\x2', '\x2', 
		'\xF09', '\xF07', '\x3', '\x2', '\x2', '\x2', '\xF0A', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\xF0B', '\xF0C', '\a', '\n', '\x2', '\x2', '\xF0C', 
		'\xF0D', '\a', '\xBE', '\x2', '\x2', '\xF0D', '\xF23', '\a', '\xAD', '\x2', 
		'\x2', '\xF0E', '\xF10', '\a', '\x206', '\x2', '\x2', '\xF0F', '\xF0E', 
		'\x3', '\x2', '\x2', '\x2', '\xF0F', '\xF10', '\x3', '\x2', '\x2', '\x2', 
		'\xF10', '\xF11', '\x3', '\x2', '\x2', '\x2', '\xF11', '\xF12', '\a', 
		'\x110', '\x2', '\x2', '\xF12', '\xF13', '\a', '\x17D', '\x2', '\x2', 
		'\xF13', '\xF14', '\a', '\x1EF', '\x2', '\x2', '\xF14', '\xF15', '\a', 
		'&', '\x2', '\x2', '\xF15', '\xF16', '\a', '\xF5', '\x2', '\x2', '\xF16', 
		'\xF17', '\a', '\x324', '\x2', '\x2', '\xF17', '\xF24', '\a', '\x320', 
		'\x2', '\x2', '\xF18', '\xF19', '\t', '\x15', '\x2', '\x2', '\xF19', '\xF1A', 
		'\a', '\x1EF', '\x2', '\x2', '\xF1A', '\xF21', '\a', '&', '\x2', '\x2', 
		'\xF1B', '\xF1C', '\a', '\x139', '\x2', '\x2', '\xF1C', '\xF1D', '\a', 
		'\xBE', '\x2', '\x2', '\xF1D', '\xF22', '\a', '\xAD', '\x2', '\x2', '\xF1E', 
		'\xF1F', '\a', '\xF5', '\x2', '\x2', '\xF1F', '\xF20', '\a', '\x324', 
		'\x2', '\x2', '\xF20', '\xF22', '\a', '\x320', '\x2', '\x2', '\xF21', 
		'\xF1B', '\x3', '\x2', '\x2', '\x2', '\xF21', '\xF1E', '\x3', '\x2', '\x2', 
		'\x2', '\xF22', '\xF24', '\x3', '\x2', '\x2', '\x2', '\xF23', '\xF0F', 
		'\x3', '\x2', '\x2', '\x2', '\xF23', '\xF18', '\x3', '\x2', '\x2', '\x2', 
		'\xF24', '\x147', '\x3', '\x2', '\x2', '\x2', '\xF25', '\xF26', '\a', 
		'I', '\x2', '\x2', '\xF26', '\xF27', '\a', '\xBE', '\x2', '\x2', '\xF27', 
		'\xF28', '\a', '\xAD', '\x2', '\x2', '\xF28', '\xF29', '\a', '\x1EF', 
		'\x2', '\x2', '\xF29', '\xF2A', '\a', '&', '\x2', '\x2', '\xF2A', '\xF2B', 
		'\a', '\xF5', '\x2', '\x2', '\xF2B', '\xF2C', '\a', '\x324', '\x2', '\x2', 
		'\xF2C', '\xF2D', '\a', '\x320', '\x2', '\x2', '\xF2D', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\xF2E', '\xF2F', '\a', '\n', '\x2', '\x2', '\xF2F', 
		'\xF30', '\a', '\xBE', '\x2', '\x2', '\xF30', '\xF4C', '\a', '\xAD', '\x2', 
		'\x2', '\xF31', '\xF33', '\a', '\x206', '\x2', '\x2', '\xF32', '\xF31', 
		'\x3', '\x2', '\x2', '\x2', '\xF32', '\xF33', '\x3', '\x2', '\x2', '\x2', 
		'\xF33', '\xF34', '\x3', '\x2', '\x2', '\x2', '\xF34', '\xF35', '\a', 
		'\x110', '\x2', '\x2', '\xF35', '\xF36', '\a', '\x17D', '\x2', '\x2', 
		'\xF36', '\xF37', '\a', '\x1EF', '\x2', '\x2', '\xF37', '\xF38', '\a', 
		'&', '\x2', '\x2', '\xF38', '\xF39', '\a', '\xF5', '\x2', '\x2', '\xF39', 
		'\xF3A', '\a', '\x324', '\x2', '\x2', '\xF3A', '\xF4D', '\a', '\x320', 
		'\x2', '\x2', '\xF3B', '\xF3C', '\a', '\x4', '\x2', '\x2', '\xF3C', '\xF3D', 
		'\a', '\x1EF', '\x2', '\x2', '\xF3D', '\xF44', '\a', '&', '\x2', '\x2', 
		'\xF3E', '\xF3F', '\a', '\x139', '\x2', '\x2', '\xF3F', '\xF40', '\a', 
		'\xBE', '\x2', '\x2', '\xF40', '\xF45', '\a', '\xAD', '\x2', '\x2', '\xF41', 
		'\xF42', '\a', '\xF5', '\x2', '\x2', '\xF42', '\xF43', '\a', '\x324', 
		'\x2', '\x2', '\xF43', '\xF45', '\a', '\x320', '\x2', '\x2', '\xF44', 
		'\xF3E', '\x3', '\x2', '\x2', '\x2', '\xF44', '\xF41', '\x3', '\x2', '\x2', 
		'\x2', '\xF45', '\xF4D', '\x3', '\x2', '\x2', '\x2', '\xF46', '\xF47', 
		'\a', 'h', '\x2', '\x2', '\xF47', '\xF48', '\a', '\x1EF', '\x2', '\x2', 
		'\xF48', '\xF49', '\a', '&', '\x2', '\x2', '\xF49', '\xF4A', '\a', '\xF5', 
		'\x2', '\x2', '\xF4A', '\xF4B', '\a', '\x324', '\x2', '\x2', '\xF4B', 
		'\xF4D', '\a', '\x320', '\x2', '\x2', '\xF4C', '\xF32', '\x3', '\x2', 
		'\x2', '\x2', '\xF4C', '\xF3B', '\x3', '\x2', '\x2', '\x2', '\xF4C', '\xF46', 
		'\x3', '\x2', '\x2', '\x2', '\xF4D', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\xF4E', '\xF4F', '\a', 'I', '\x2', '\x2', '\xF4F', '\xF50', '\a', '\xBE', 
		'\x2', '\x2', '\xF50', '\xF56', '\a', '\xAD', '\x2', '\x2', '\xF51', '\xF52', 
		'\a', '\x1EF', '\x2', '\x2', '\xF52', '\xF53', '\a', '&', '\x2', '\x2', 
		'\xF53', '\xF54', '\a', '\xF5', '\x2', '\x2', '\xF54', '\xF55', '\a', 
		'\x324', '\x2', '\x2', '\xF55', '\xF57', '\a', '\x320', '\x2', '\x2', 
		'\xF56', '\xF51', '\x3', '\x2', '\x2', '\x2', '\xF56', '\xF57', '\x3', 
		'\x2', '\x2', '\x2', '\xF57', '\x14D', '\x3', '\x2', '\x2', '\x2', '\xF58', 
		'\xF59', '\a', '\n', '\x2', '\x2', '\xF59', '\xF5A', '\a', '\x252', '\x2', 
		'\x2', '\xF5A', '\xF5B', '\a', '\x2FC', '\x2', '\x2', '\xF5B', '\xF5C', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\xF5C', '\xF5D', '\a', '\x304', '\x2', 
		'\x2', '\xF5D', '\xF66', '\a', '\x324', '\x2', '\x2', '\xF5E', '\xF67', 
		'\a', '\xD6', '\x2', '\x2', '\xF5F', '\xF67', '\a', '\x1EB', '\x2', '\x2', 
		'\xF60', '\xF67', '\a', '\x30B', '\x2', '\x2', '\xF61', '\xF62', '\a', 
		'\x303', '\x2', '\x2', '\xF62', '\xF63', '\a', '\x17D', '\x2', '\x2', 
		'\xF63', '\xF64', '\a', '\x12F', '\x2', '\x2', '\xF64', '\xF65', '\a', 
		'\x1B9', '\x2', '\x2', '\xF65', '\xF67', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xF66', '\xF5E', '\x3', '\x2', '\x2', '\x2', '\xF66', '\xF5F', '\x3', 
		'\x2', '\x2', '\x2', '\xF66', '\xF60', '\x3', '\x2', '\x2', '\x2', '\xF66', 
		'\xF61', '\x3', '\x2', '\x2', '\x2', '\xF67', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\xF68', '\xF69', '\a', '\n', '\x2', '\x2', '\xF69', '\xF6A', '\a', 
		'\x281', '\x2', '\x2', '\xF6A', '\xF6B', '\a', '\x8E', '\x2', '\x2', '\xF6B', 
		'\xF6C', '\x5', '\x3BA', '\x1DE', '\x2', '\xF6C', '\xF6D', '\a', '\x336', 
		'\x2', '\x2', '\xF6D', '\xF6E', '\a', '\x337', '\x2', '\x2', '\xF6E', 
		'\xF6F', '\t', '$', '\x2', '\x2', '\xF6F', '\xF70', '\a', '\x298', '\x2', 
		'\x2', '\xF70', '\xF71', '\a', '\x336', '\x2', '\x2', '\xF71', '\xF72', 
		'\a', '\x31C', '\x2', '\x2', '\xF72', '\xF73', '\a', '\x337', '\x2', '\x2', 
		'\xF73', '\x151', '\x3', '\x2', '\x2', '\x2', '\xF74', '\xF75', '\a', 
		'\n', '\x2', '\x2', '\xF75', '\xF76', '\a', '\x281', '\x2', '\x2', '\xF76', 
		'\xF77', '\a', '\x130', '\x2', '\x2', '\xF77', '\xF78', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xF78', '\xF79', '\a', '\x264', '\x2', '\x2', '\xF79', 
		'\xF7B', '\a', '\x171', '\x2', '\x2', '\xF7A', '\xF7C', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\xF7B', '\xF7A', '\x3', '\x2', '\x2', '\x2', '\xF7B', 
		'\xF7C', '\x3', '\x2', '\x2', '\x2', '\xF7C', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\xF7D', '\xF7E', '\a', '\n', '\x2', '\x2', '\xF7E', '\xF7F', '\a', 
		'\x2A8', '\x2', '\x2', '\xF7F', '\xF80', '\a', '\x139', '\x2', '\x2', 
		'\xF80', '\xF81', '\a', '\x1AA', '\x2', '\x2', '\xF81', '\xF82', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xF82', '\xF86', '\a', '\x17D', '\x2', '\x2', 
		'\xF83', '\xF84', '\a', '\x172', '\x2', '\x2', '\xF84', '\xF85', '\a', 
		'\x324', '\x2', '\x2', '\xF85', '\xF87', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\xF86', '\xF83', '\x3', '\x2', '\x2', '\x2', '\xF86', '\xF87', '\x3', 
		'\x2', '\x2', '\x2', '\xF87', '\xF8C', '\x3', '\x2', '\x2', '\x2', '\xF88', 
		'\xF89', '\a', '\x338', '\x2', '\x2', '\xF89', '\xF8A', '\a', '\f', '\x2', 
		'\x2', '\xF8A', '\xF8B', '\a', '\x324', '\x2', '\x2', '\xF8B', '\xF8D', 
		'\t', '\t', '\x2', '\x2', '\xF8C', '\xF88', '\x3', '\x2', '\x2', '\x2', 
		'\xF8C', '\xF8D', '\x3', '\x2', '\x2', '\x2', '\xF8D', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\xF8E', '\xF8F', '\a', 'I', '\x2', '\x2', '\xF8F', 
		'\xF90', '\a', '\x2A8', '\x2', '\x2', '\xF90', '\xF91', '\a', '\x139', 
		'\x2', '\x2', '\xF91', '\xF92', '\a', '\x1AA', '\x2', '\x2', '\xF92', 
		'\xF95', '\x5', '\x3BA', '\x1DE', '\x2', '\xF93', '\xF94', '\a', '\x14', 
		'\x2', '\x2', '\xF94', '\xF96', '\x5', '\x3BA', '\x1DE', '\x2', '\xF95', 
		'\xF93', '\x3', '\x2', '\x2', '\x2', '\xF95', '\xF96', '\x3', '\x2', '\x2', 
		'\x2', '\xF96', '\xF97', '\x3', '\x2', '\x2', '\x2', '\xF97', '\xF98', 
		'\a', '\x15E', '\x2', '\x2', '\xF98', '\xF99', '\a', '\x139', '\x2', '\x2', 
		'\xF99', '\xF9A', '\a', '\x320', '\x2', '\x2', '\xF9A', '\xF9E', '\a', 
		'\x17D', '\x2', '\x2', '\xF9B', '\xF9C', '\a', '\x172', '\x2', '\x2', 
		'\xF9C', '\xF9D', '\a', '\x324', '\x2', '\x2', '\xF9D', '\xF9F', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\xF9E', '\xF9B', '\x3', '\x2', '\x2', '\x2', 
		'\xF9E', '\xF9F', '\x3', '\x2', '\x2', '\x2', '\xF9F', '\xFA4', '\x3', 
		'\x2', '\x2', '\x2', '\xFA0', '\xFA1', '\a', '\x338', '\x2', '\x2', '\xFA1', 
		'\xFA2', '\a', '\f', '\x2', '\x2', '\xFA2', '\xFA3', '\a', '\x324', '\x2', 
		'\x2', '\xFA3', '\xFA5', '\t', '\t', '\x2', '\x2', '\xFA4', '\xFA0', '\x3', 
		'\x2', '\x2', '\x2', '\xFA4', '\xFA5', '\x3', '\x2', '\x2', '\x2', '\xFA5', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\xFA6', '\xFA7', '\a', 'I', '\x2', 
		'\x2', '\xFA7', '\xFA8', '\a', '\x2B3', '\x2', '\x2', '\xFA8', '\xFA9', 
		'\a', '\x286', '\x2', '\x2', '\xFA9', '\x1010', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\xFAA', '\xFAB', '\a', '\x17D', '\x2', '\x2', '\xFAB', '\xFB2', 
		'\a', '\x336', '\x2', '\x2', '\xFAC', '\xFAE', '\a', '\x338', '\x2', '\x2', 
		'\xFAD', '\xFAC', '\x3', '\x2', '\x2', '\x2', '\xFAD', '\xFAE', '\x3', 
		'\x2', '\x2', '\x2', '\xFAE', '\xFAF', '\x3', '\x2', '\x2', '\x2', '\xFAF', 
		'\xFB0', '\a', '\x255', '\x2', '\x2', '\xFB0', '\xFB1', '\a', '\x324', 
		'\x2', '\x2', '\xFB1', '\xFB3', '\a', '\x31C', '\x2', '\x2', '\xFB2', 
		'\xFAD', '\x3', '\x2', '\x2', '\x2', '\xFB2', '\xFB3', '\x3', '\x2', '\x2', 
		'\x2', '\xFB3', '\xFBA', '\x3', '\x2', '\x2', '\x2', '\xFB4', '\xFB6', 
		'\a', '\x338', '\x2', '\x2', '\xFB5', '\xFB4', '\x3', '\x2', '\x2', '\x2', 
		'\xFB5', '\xFB6', '\x3', '\x2', '\x2', '\x2', '\xFB6', '\xFB7', '\x3', 
		'\x2', '\x2', '\x2', '\xFB7', '\xFB8', '\a', '\x244', '\x2', '\x2', '\xFB8', 
		'\xFB9', '\a', '\x324', '\x2', '\x2', '\xFB9', '\xFBB', '\a', '\x31C', 
		'\x2', '\x2', '\xFBA', '\xFB5', '\x3', '\x2', '\x2', '\x2', '\xFBA', '\xFBB', 
		'\x3', '\x2', '\x2', '\x2', '\xFBB', '\xFC2', '\x3', '\x2', '\x2', '\x2', 
		'\xFBC', '\xFBE', '\a', '\x338', '\x2', '\x2', '\xFBD', '\xFBC', '\x3', 
		'\x2', '\x2', '\x2', '\xFBD', '\xFBE', '\x3', '\x2', '\x2', '\x2', '\xFBE', 
		'\xFBF', '\x3', '\x2', '\x2', '\x2', '\xFBF', '\xFC0', '\a', '\x1B0', 
		'\x2', '\x2', '\xFC0', '\xFC1', '\a', '\x324', '\x2', '\x2', '\xFC1', 
		'\xFC3', '\a', '\x31C', '\x2', '\x2', '\xFC2', '\xFBD', '\x3', '\x2', 
		'\x2', '\x2', '\xFC2', '\xFC3', '\x3', '\x2', '\x2', '\x2', '\xFC3', '\xFED', 
		'\x3', '\x2', '\x2', '\x2', '\xFC4', '\xFC6', '\a', '\x338', '\x2', '\x2', 
		'\xFC5', '\xFC4', '\x3', '\x2', '\x2', '\x2', '\xFC5', '\xFC6', '\x3', 
		'\x2', '\x2', '\x2', '\xFC6', '\xFC7', '\x3', '\x2', '\x2', '\x2', '\xFC7', 
		'\xFC8', '\a', '\x18B', '\x2', '\x2', '\xFC8', '\xFC9', '\a', '\x12E', 
		'\x2', '\x2', '\xFC9', '\xFEB', '\a', '\x324', '\x2', '\x2', '\xFCA', 
		'\xFEC', '\a', '\x19C', '\x2', '\x2', '\xFCB', '\xFD5', '\a', '\x336', 
		'\x2', '\x2', '\xFCC', '\xFCE', '\a', '\x338', '\x2', '\x2', '\xFCD', 
		'\xFCC', '\x3', '\x2', '\x2', '\x2', '\xFCD', '\xFCE', '\x3', '\x2', '\x2', 
		'\x2', '\xFCE', '\xFD3', '\x3', '\x2', '\x2', '\x2', '\xFCF', '\xFD4', 
		'\a', '\x31C', '\x2', '\x2', '\xFD0', '\xFD1', '\a', '\x31C', '\x2', '\x2', 
		'\xFD1', '\xFD2', '\a', '\x15E', '\x2', '\x2', '\xFD2', '\xFD4', '\a', 
		'\x31C', '\x2', '\x2', '\xFD3', '\xFCF', '\x3', '\x2', '\x2', '\x2', '\xFD3', 
		'\xFD0', '\x3', '\x2', '\x2', '\x2', '\xFD4', '\xFD6', '\x3', '\x2', '\x2', 
		'\x2', '\xFD5', '\xFCD', '\x3', '\x2', '\x2', '\x2', '\xFD6', '\xFD7', 
		'\x3', '\x2', '\x2', '\x2', '\xFD7', '\xFD5', '\x3', '\x2', '\x2', '\x2', 
		'\xFD7', '\xFD8', '\x3', '\x2', '\x2', '\x2', '\xFD8', '\xFD9', '\x3', 
		'\x2', '\x2', '\x2', '\xFD9', '\xFEC', '\a', '\x337', '\x2', '\x2', '\xFDA', 
		'\xFDB', '\a', '\x270', '\x2', '\x2', '\xFDB', '\xFDC', '\a', '\x324', 
		'\x2', '\x2', '\xFDC', '\xFE6', '\a', '\x336', '\x2', '\x2', '\xFDD', 
		'\xFDF', '\a', '\x338', '\x2', '\x2', '\xFDE', '\xFDD', '\x3', '\x2', 
		'\x2', '\x2', '\xFDE', '\xFDF', '\x3', '\x2', '\x2', '\x2', '\xFDF', '\xFE4', 
		'\x3', '\x2', '\x2', '\x2', '\xFE0', '\xFE5', '\a', '\x31C', '\x2', '\x2', 
		'\xFE1', '\xFE2', '\a', '\x31C', '\x2', '\x2', '\xFE2', '\xFE3', '\a', 
		'\x15E', '\x2', '\x2', '\xFE3', '\xFE5', '\a', '\x31C', '\x2', '\x2', 
		'\xFE4', '\xFE0', '\x3', '\x2', '\x2', '\x2', '\xFE4', '\xFE1', '\x3', 
		'\x2', '\x2', '\x2', '\xFE5', '\xFE7', '\x3', '\x2', '\x2', '\x2', '\xFE6', 
		'\xFDE', '\x3', '\x2', '\x2', '\x2', '\xFE7', '\xFE8', '\x3', '\x2', '\x2', 
		'\x2', '\xFE8', '\xFE6', '\x3', '\x2', '\x2', '\x2', '\xFE8', '\xFE9', 
		'\x3', '\x2', '\x2', '\x2', '\xFE9', '\xFEA', '\x3', '\x2', '\x2', '\x2', 
		'\xFEA', '\xFEC', '\a', '\x337', '\x2', '\x2', '\xFEB', '\xFCA', '\x3', 
		'\x2', '\x2', '\x2', '\xFEB', '\xFCB', '\x3', '\x2', '\x2', '\x2', '\xFEB', 
		'\xFDA', '\x3', '\x2', '\x2', '\x2', '\xFEC', '\xFEE', '\x3', '\x2', '\x2', 
		'\x2', '\xFED', '\xFC5', '\x3', '\x2', '\x2', '\x2', '\xFED', '\xFEE', 
		'\x3', '\x2', '\x2', '\x2', '\xFEE', '\xFF5', '\x3', '\x2', '\x2', '\x2', 
		'\xFEF', '\xFF1', '\a', '\x338', '\x2', '\x2', '\xFF0', '\xFEF', '\x3', 
		'\x2', '\x2', '\x2', '\xFF0', '\xFF1', '\x3', '\x2', '\x2', '\x2', '\xFF1', 
		'\xFF2', '\x3', '\x2', '\x2', '\x2', '\xFF2', '\xFF3', '\a', '\x257', 
		'\x2', '\x2', '\xFF3', '\xFF4', '\a', '\x324', '\x2', '\x2', '\xFF4', 
		'\xFF6', '\a', '\x31C', '\x2', '\x2', '\xFF5', '\xFF0', '\x3', '\x2', 
		'\x2', '\x2', '\xFF5', '\xFF6', '\x3', '\x2', '\x2', '\x2', '\xFF6', '\xFFD', 
		'\x3', '\x2', '\x2', '\x2', '\xFF7', '\xFF9', '\a', '\x338', '\x2', '\x2', 
		'\xFF8', '\xFF7', '\x3', '\x2', '\x2', '\x2', '\xFF8', '\xFF9', '\x3', 
		'\x2', '\x2', '\x2', '\xFF9', '\xFFA', '\x3', '\x2', '\x2', '\x2', '\xFFA', 
		'\xFFB', '\a', '\x248', '\x2', '\x2', '\xFFB', '\xFFC', '\a', '\x324', 
		'\x2', '\x2', '\xFFC', '\xFFE', '\a', '\x31C', '\x2', '\x2', '\xFFD', 
		'\xFF8', '\x3', '\x2', '\x2', '\x2', '\xFFD', '\xFFE', '\x3', '\x2', '\x2', 
		'\x2', '\xFFE', '\x1005', '\x3', '\x2', '\x2', '\x2', '\xFFF', '\x1001', 
		'\a', '\x338', '\x2', '\x2', '\x1000', '\xFFF', '\x3', '\x2', '\x2', '\x2', 
		'\x1000', '\x1001', '\x3', '\x2', '\x2', '\x2', '\x1001', '\x1002', '\x3', 
		'\x2', '\x2', '\x2', '\x1002', '\x1003', '\a', '\x256', '\x2', '\x2', 
		'\x1003', '\x1004', '\a', '\x324', '\x2', '\x2', '\x1004', '\x1006', '\a', 
		'\x31C', '\x2', '\x2', '\x1005', '\x1000', '\x3', '\x2', '\x2', '\x2', 
		'\x1005', '\x1006', '\x3', '\x2', '\x2', '\x2', '\x1006', '\x100D', '\x3', 
		'\x2', '\x2', '\x2', '\x1007', '\x1009', '\a', '\x338', '\x2', '\x2', 
		'\x1008', '\x1007', '\x3', '\x2', '\x2', '\x2', '\x1008', '\x1009', '\x3', 
		'\x2', '\x2', '\x2', '\x1009', '\x100A', '\x3', '\x2', '\x2', '\x2', '\x100A', 
		'\x100B', '\a', '\x247', '\x2', '\x2', '\x100B', '\x100C', '\a', '\x324', 
		'\x2', '\x2', '\x100C', '\x100E', '\a', '\x31C', '\x2', '\x2', '\x100D', 
		'\x1008', '\x3', '\x2', '\x2', '\x2', '\x100D', '\x100E', '\x3', '\x2', 
		'\x2', '\x2', '\x100E', '\x100F', '\x3', '\x2', '\x2', '\x2', '\x100F', 
		'\x1011', '\a', '\x337', '\x2', '\x2', '\x1010', '\xFAA', '\x3', '\x2', 
		'\x2', '\x2', '\x1010', '\x1011', '\x3', '\x2', '\x2', '\x2', '\x1011', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x1012', '\x1013', '\a', '\n', '\x2', 
		'\x2', '\x1013', '\x1014', '\a', '\x2B3', '\x2', '\x2', '\x1014', '\x102A', 
		'\a', '\x91', '\x2', '\x2', '\x1015', '\x102B', '\t', '%', '\x2', '\x2', 
		'\x1016', '\x1017', '\a', '\x17D', '\x2', '\x2', '\x1017', '\x1018', '\a', 
		'\x336', '\x2', '\x2', '\x1018', '\x1019', '\a', '\x32', '\x2', '\x2', 
		'\x1019', '\x101F', '\a', '\x324', '\x2', '\x2', '\x101A', '\x101B', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x101B', '\x101C', '\a', '\x331', '\x2', '\x2', 
		'\x101C', '\x101D', '\x5', '\x3BA', '\x1DE', '\x2', '\x101D', '\x1020', 
		'\x3', '\x2', '\x2', '\x2', '\x101E', '\x1020', '\a', '\xE0', '\x2', '\x2', 
		'\x101F', '\x101A', '\x3', '\x2', '\x2', '\x2', '\x101F', '\x101E', '\x3', 
		'\x2', '\x2', '\x2', '\x1020', '\x1021', '\x3', '\x2', '\x2', '\x2', '\x1021', 
		'\x102B', '\a', '\x337', '\x2', '\x2', '\x1022', '\x1023', '\a', '\x115', 
		'\x2', '\x2', '\x1023', '\x102B', '\a', '\x14B', '\x2', '\x2', '\x1024', 
		'\x1025', '\a', '\x17D', '\x2', '\x2', '\x1025', '\x1026', '\a', '\x336', 
		'\x2', '\x2', '\x1026', '\x1027', '\a', '\xC5', '\x2', '\x2', '\x1027', 
		'\x1028', '\a', '\x324', '\x2', '\x2', '\x1028', '\x1029', '\a', '\x31C', 
		'\x2', '\x2', '\x1029', '\x102B', '\a', '\x337', '\x2', '\x2', '\x102A', 
		'\x1015', '\x3', '\x2', '\x2', '\x2', '\x102A', '\x1016', '\x3', '\x2', 
		'\x2', '\x2', '\x102A', '\x1022', '\x3', '\x2', '\x2', '\x2', '\x102A', 
		'\x1024', '\x3', '\x2', '\x2', '\x2', '\x102B', '\x15B', '\x3', '\x2', 
		'\x2', '\x2', '\x102C', '\x102D', '\a', '\n', '\x2', '\x2', '\x102D', 
		'\x102E', '\a', '\x122', '\x2', '\x2', '\x102E', '\x1036', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x102F', '\x1030', '\t', '\x15', '\x2', '\x2', '\x1030', 
		'\x1031', '\a', '\xC8', '\x2', '\x2', '\x1031', '\x1037', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1032', '\x1033', '\a', '\x17D', '\x2', '\x2', '\x1033', 
		'\x1034', '\a', '\x25F', '\x2', '\x2', '\x1034', '\x1035', '\a', '\x324', 
		'\x2', '\x2', '\x1035', '\x1037', '\x5', '\x3BA', '\x1DE', '\x2', '\x1036', 
		'\x102F', '\x3', '\x2', '\x2', '\x2', '\x1036', '\x1032', '\x3', '\x2', 
		'\x2', '\x2', '\x1037', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x1038', 
		'\x1039', '\a', 'I', '\x2', '\x2', '\x1039', '\x103A', '\a', '\x122', 
		'\x2', '\x2', '\x103A', '\x103D', '\x5', '\x3BA', '\x1DE', '\x2', '\x103B', 
		'\x103C', '\a', '\x14', '\x2', '\x2', '\x103C', '\x103E', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x103D', '\x103B', '\x3', '\x2', '\x2', '\x2', '\x103D', 
		'\x103E', '\x3', '\x2', '\x2', '\x2', '\x103E', '\x15F', '\x3', '\x2', 
		'\x2', '\x2', '\x103F', '\x1040', '\a', 'I', '\x2', '\x2', '\x1040', '\x1041', 
		'\a', '\x2B9', '\x2', '\x2', '\x1041', '\x1044', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1042', '\x1043', '\a', '\x14', '\x2', '\x2', '\x1043', '\x1045', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x1044', '\x1042', '\x3', '\x2', '\x2', 
		'\x2', '\x1044', '\x1045', '\x3', '\x2', '\x2', '\x2', '\x1045', '\x1046', 
		'\x3', '\x2', '\x2', '\x2', '\x1046', '\x104D', '\a', '\x17D', '\x2', 
		'\x2', '\x1047', '\x1049', '\a', '\x338', '\x2', '\x2', '\x1048', '\x1047', 
		'\x3', '\x2', '\x2', '\x2', '\x1048', '\x1049', '\x3', '\x2', '\x2', '\x2', 
		'\x1049', '\x104A', '\x3', '\x2', '\x2', '\x2', '\x104A', '\x104B', '\a', 
		'\x13B', '\x2', '\x2', '\x104B', '\x104C', '\a', '\x324', '\x2', '\x2', 
		'\x104C', '\x104E', '\a', '\x320', '\x2', '\x2', '\x104D', '\x1048', '\x3', 
		'\x2', '\x2', '\x2', '\x104D', '\x104E', '\x3', '\x2', '\x2', '\x2', '\x104E', 
		'\x1055', '\x3', '\x2', '\x2', '\x2', '\x104F', '\x1051', '\a', '\x338', 
		'\x2', '\x2', '\x1050', '\x104F', '\x3', '\x2', '\x2', '\x2', '\x1050', 
		'\x1051', '\x3', '\x2', '\x2', '\x2', '\x1051', '\x1052', '\x3', '\x2', 
		'\x2', '\x2', '\x1052', '\x1053', '\a', '\x1AD', '\x2', '\x2', '\x1053', 
		'\x1054', '\a', '\x324', '\x2', '\x2', '\x1054', '\x1056', '\a', '\x320', 
		'\x2', '\x2', '\x1055', '\x1050', '\x3', '\x2', '\x2', '\x2', '\x1055', 
		'\x1056', '\x3', '\x2', '\x2', '\x2', '\x1056', '\x105D', '\x3', '\x2', 
		'\x2', '\x2', '\x1057', '\x1059', '\a', '\x338', '\x2', '\x2', '\x1058', 
		'\x1057', '\x3', '\x2', '\x2', '\x2', '\x1058', '\x1059', '\x3', '\x2', 
		'\x2', '\x2', '\x1059', '\x105A', '\x3', '\x2', '\x2', '\x2', '\x105A', 
		'\x105B', '\a', '\xB4', '\x2', '\x2', '\x105B', '\x105C', '\a', '\x324', 
		'\x2', '\x2', '\x105C', '\x105E', '\a', '\x31C', '\x2', '\x2', '\x105D', 
		'\x1058', '\x3', '\x2', '\x2', '\x2', '\x105D', '\x105E', '\x3', '\x2', 
		'\x2', '\x2', '\x105E', '\x1060', '\x3', '\x2', '\x2', '\x2', '\x105F', 
		'\x1061', '\a', '\x338', '\x2', '\x2', '\x1060', '\x105F', '\x3', '\x2', 
		'\x2', '\x2', '\x1060', '\x1061', '\x3', '\x2', '\x2', '\x2', '\x1061', 
		'\x1062', '\x3', '\x2', '\x2', '\x2', '\x1062', '\x1063', '\a', '\x187', 
		'\x2', '\x2', '\x1063', '\x1064', '\a', '\x324', '\x2', '\x2', '\x1064', 
		'\x1069', '\t', '&', '\x2', '\x2', '\x1065', '\x1066', '\a', '\x338', 
		'\x2', '\x2', '\x1066', '\x1067', '\a', '\x259', '\x2', '\x2', '\x1067', 
		'\x1068', '\a', '\x324', '\x2', '\x2', '\x1068', '\x106A', '\t', '&', 
		'\x2', '\x2', '\x1069', '\x1065', '\x3', '\x2', '\x2', '\x2', '\x1069', 
		'\x106A', '\x3', '\x2', '\x2', '\x2', '\x106A', '\x161', '\x3', '\x2', 
		'\x2', '\x2', '\x106B', '\x106C', '\a', 'I', '\x2', '\x2', '\x106C', '\x1070', 
		'\a', '\x12B', '\x2', '\x2', '\x106D', '\x106E', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x106E', '\x106F', '\a', '\x331', '\x2', '\x2', '\x106F', '\x1071', 
		'\x3', '\x2', '\x2', '\x2', '\x1070', '\x106D', '\x3', '\x2', '\x2', '\x2', 
		'\x1070', '\x1071', '\x3', '\x2', '\x2', '\x2', '\x1071', '\x1072', '\x3', 
		'\x2', '\x2', '\x2', '\x1072', '\x1073', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x1073', '\x1074', '\a', '\x10', '\x2', '\x2', '\x1074', '\x1075', '\x5', 
		'\x2E2', '\x172', '\x2', '\x1075', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x1076', '\x1077', '\a', '\n', '\x2', '\x2', '\x1077', '\x1078', '\a', 
		'\x12F', '\x2', '\x2', '\x1078', '\x1079', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x1079', '\x1083', '\a', '\x163', '\x2', '\x2', '\x107A', '\x1080', '\a', 
		'\x273', '\x2', '\x2', '\x107B', '\x1080', '\a', '\x2FC', '\x2', '\x2', 
		'\x107C', '\x107D', '\a', '\x30F', '\x2', '\x2', '\x107D', '\x107E', '\a', 
		'\x12F', '\x2', '\x2', '\x107E', '\x1080', '\a', '\x1B9', '\x2', '\x2', 
		'\x107F', '\x107A', '\x3', '\x2', '\x2', '\x2', '\x107F', '\x107B', '\x3', 
		'\x2', '\x2', '\x2', '\x107F', '\x107C', '\x3', '\x2', '\x2', '\x2', '\x1080', 
		'\x1081', '\x3', '\x2', '\x2', '\x2', '\x1081', '\x1082', '\a', '\x33A', 
		'\x2', '\x2', '\x1082', '\x1084', '\a', '\x33A', '\x2', '\x2', '\x1083', 
		'\x107F', '\x3', '\x2', '\x2', '\x2', '\x1083', '\x1084', '\x3', '\x2', 
		'\x2', '\x2', '\x1084', '\x1085', '\x3', '\x2', '\x2', '\x2', '\x1085', 
		'\x1088', '\x5', '\x3BA', '\x1DE', '\x2', '\x1086', '\x1087', '\a', '\x331', 
		'\x2', '\x2', '\x1087', '\x1089', '\x5', '\x3BA', '\x1DE', '\x2', '\x1088', 
		'\x1086', '\x3', '\x2', '\x2', '\x2', '\x1088', '\x1089', '\x3', '\x2', 
		'\x2', '\x2', '\x1089', '\x165', '\x3', '\x2', '\x2', '\x2', '\x108A', 
		'\x108B', '\a', 'I', '\x2', '\x2', '\x108B', '\x1093', '\a', '\x12F', 
		'\x2', '\x2', '\x108C', '\x1094', '\x5', '\x3BA', '\x1DE', '\x2', '\x108D', 
		'\x108E', '\a', '\x14', '\x2', '\x2', '\x108E', '\x1094', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x108F', '\x1090', '\x5', '\x3BA', '\x1DE', '\x2', '\x1090', 
		'\x1091', '\a', '\x14', '\x2', '\x2', '\x1091', '\x1092', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1092', '\x1094', '\x3', '\x2', '\x2', '\x2', '\x1093', 
		'\x108C', '\x3', '\x2', '\x2', '\x2', '\x1093', '\x108D', '\x3', '\x2', 
		'\x2', '\x2', '\x1093', '\x108F', '\x3', '\x2', '\x2', '\x2', '\x1094', 
		'\x10B1', '\x3', '\x2', '\x2', '\x2', '\x1095', '\x10B0', '\x5', '\x1EE', 
		'\xF8', '\x2', '\x1096', '\x10B0', '\x5', '\x1F2', '\xFA', '\x2', '\x1097', 
		'\x1098', '\t', '\'', '\x2', '\x2', '\x1098', '\x1099', '\t', '(', '\x2', 
		'\x2', '\x1099', '\x109D', '\a', '\xE6', '\x2', '\x2', '\x109A', '\x109B', 
		'\a', '\x12F', '\x2', '\x2', '\x109B', '\x109C', '\a', '\x33A', '\x2', 
		'\x2', '\x109C', '\x109E', '\a', '\x33A', '\x2', '\x2', '\x109D', '\x109A', 
		'\x3', '\x2', '\x2', '\x2', '\x109D', '\x109E', '\x3', '\x2', '\x2', '\x2', 
		'\x109E', '\x109F', '\x3', '\x2', '\x2', '\x2', '\x109F', '\x10A0', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x10A0', '\x10A1', '\a', '\x15E', '\x2', '\x2', 
		'\x10A1', '\x10A2', '\x5', '\x3BA', '\x1DE', '\x2', '\x10A2', '\x10B0', 
		'\x3', '\x2', '\x2', '\x2', '\x10A3', '\x10A4', '\a', '\x11E', '\x2', 
		'\x2', '\x10A4', '\x10A5', '\t', '(', '\x2', '\x2', '\x10A5', '\x10A9', 
		'\a', '\xE6', '\x2', '\x2', '\x10A6', '\x10A7', '\a', '\x12F', '\x2', 
		'\x2', '\x10A7', '\x10A8', '\a', '\x33A', '\x2', '\x2', '\x10A8', '\x10AA', 
		'\a', '\x33A', '\x2', '\x2', '\x10A9', '\x10A6', '\x3', '\x2', '\x2', 
		'\x2', '\x10A9', '\x10AA', '\x3', '\x2', '\x2', '\x2', '\x10AA', '\x10AB', 
		'\x3', '\x2', '\x2', '\x2', '\x10AB', '\x10AC', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x10AC', '\x10AD', '\a', '\x8C', '\x2', '\x2', '\x10AD', '\x10AE', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x10AE', '\x10B0', '\x3', '\x2', '\x2', 
		'\x2', '\x10AF', '\x1095', '\x3', '\x2', '\x2', '\x2', '\x10AF', '\x1096', 
		'\x3', '\x2', '\x2', '\x2', '\x10AF', '\x1097', '\x3', '\x2', '\x2', '\x2', 
		'\x10AF', '\x10A3', '\x3', '\x2', '\x2', '\x2', '\x10B0', '\x10B3', '\x3', 
		'\x2', '\x2', '\x2', '\x10B1', '\x10AF', '\x3', '\x2', '\x2', '\x2', '\x10B1', 
		'\x10B2', '\x3', '\x2', '\x2', '\x2', '\x10B2', '\x167', '\x3', '\x2', 
		'\x2', '\x2', '\x10B3', '\x10B1', '\x3', '\x2', '\x2', '\x2', '\x10B4', 
		'\x10B5', '\a', 'I', '\x2', '\x2', '\x10B5', '\x10B6', '\a', '\x12F', 
		'\x2', '\x2', '\x10B6', '\x10B9', '\x5', '\x3BA', '\x1DE', '\x2', '\x10B7', 
		'\x10B8', '\a', '\x14', '\x2', '\x2', '\x10B8', '\x10BA', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x10B9', '\x10B7', '\x3', '\x2', '\x2', '\x2', '\x10B9', 
		'\x10BA', '\x3', '\x2', '\x2', '\x2', '\x10BA', '\x169', '\x3', '\x2', 
		'\x2', '\x2', '\x10BB', '\x10BC', '\a', '\n', '\x2', '\x2', '\x10BC', 
		'\x10BD', '\a', '\x12F', '\x2', '\x2', '\x10BD', '\x10BE', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x10BE', '\x10C2', '\a', '\x163', '\x2', '\x2', '\x10BF', 
		'\x10C0', '\a', '\x273', '\x2', '\x2', '\x10C0', '\x10C1', '\a', '\x33A', 
		'\x2', '\x2', '\x10C1', '\x10C3', '\a', '\x33A', '\x2', '\x2', '\x10C2', 
		'\x10BF', '\x3', '\x2', '\x2', '\x2', '\x10C2', '\x10C3', '\x3', '\x2', 
		'\x2', '\x2', '\x10C3', '\x10C4', '\x3', '\x2', '\x2', '\x2', '\x10C4', 
		'\x10C7', '\x5', '\x3BA', '\x1DE', '\x2', '\x10C5', '\x10C6', '\a', '\x331', 
		'\x2', '\x2', '\x10C6', '\x10C8', '\a', '\x31D', '\x2', '\x2', '\x10C7', 
		'\x10C5', '\x3', '\x2', '\x2', '\x2', '\x10C7', '\x10C8', '\x3', '\x2', 
		'\x2', '\x2', '\x10C8', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x10C9', 
		'\x10CA', '\a', 'I', '\x2', '\x2', '\x10CA', '\x10CB', '\a', '\x2C3', 
		'\x2', '\x2', '\x10CB', '\x10CC', '\a', '\x291', '\x2', '\x2', '\x10CC', 
		'\x10CD', '\a', '\x235', '\x2', '\x2', '\x10CD', '\x10D5', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x10CE', '\x10D2', '\a', '\x8C', '\x2', '\x2', '\x10CF', 
		'\x10D0', '\x5', '\x3BA', '\x1DE', '\x2', '\x10D0', '\x10D1', '\a', '\x331', 
		'\x2', '\x2', '\x10D1', '\x10D3', '\x3', '\x2', '\x2', '\x2', '\x10D2', 
		'\x10CF', '\x3', '\x2', '\x2', '\x2', '\x10D2', '\x10D3', '\x3', '\x2', 
		'\x2', '\x2', '\x10D3', '\x10D4', '\x3', '\x2', '\x2', '\x2', '\x10D4', 
		'\x10D6', '\x5', '\x3BA', '\x1DE', '\x2', '\x10D5', '\x10CE', '\x3', '\x2', 
		'\x2', '\x2', '\x10D5', '\x10D6', '\x3', '\x2', '\x2', '\x2', '\x10D6', 
		'\x10D9', '\x3', '\x2', '\x2', '\x2', '\x10D7', '\x10D8', '\a', '\x14', 
		'\x2', '\x2', '\x10D8', '\x10DA', '\x5', '\x3BA', '\x1DE', '\x2', '\x10D9', 
		'\x10D7', '\x3', '\x2', '\x2', '\x2', '\x10D9', '\x10DA', '\x3', '\x2', 
		'\x2', '\x2', '\x10DA', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x10DB', 
		'\x10DC', '\a', 'I', '\x2', '\x2', '\x10DC', '\x10DD', '\a', '\x131', 
		'\x2', '\x2', '\x10DD', '\x10E1', '\a', '\xFE', '\x2', '\x2', '\x10DE', 
		'\x10DF', '\x5', '\x3BA', '\x1DE', '\x2', '\x10DF', '\x10E0', '\a', '\x331', 
		'\x2', '\x2', '\x10E0', '\x10E2', '\x3', '\x2', '\x2', '\x2', '\x10E1', 
		'\x10DE', '\x3', '\x2', '\x2', '\x2', '\x10E1', '\x10E2', '\x3', '\x2', 
		'\x2', '\x2', '\x10E2', '\x10E3', '\x3', '\x2', '\x2', '\x2', '\x10E3', 
		'\x110C', '\x5', '\x3BA', '\x1DE', '\x2', '\x10E4', '\x10E6', '\a', '\x338', 
		'\x2', '\x2', '\x10E5', '\x10E4', '\x3', '\x2', '\x2', '\x2', '\x10E5', 
		'\x10E6', '\x3', '\x2', '\x2', '\x2', '\x10E6', '\x10E7', '\x3', '\x2', 
		'\x2', '\x2', '\x10E7', '\x10E9', '\a', '\x4', '\x2', '\x2', '\x10E8', 
		'\x10EA', '\t', ')', '\x2', '\x2', '\x10E9', '\x10E8', '\x3', '\x2', '\x2', 
		'\x2', '\x10E9', '\x10EA', '\x3', '\x2', '\x2', '\x2', '\x10EA', '\x10EB', 
		'\x3', '\x2', '\x2', '\x2', '\x10EB', '\x10EC', '\a', '\x100', '\x2', 
		'\x2', '\x10EC', '\x10ED', '\x5', '\x3BA', '\x1DE', '\x2', '\x10ED', '\x10EE', 
		'\a', '\x331', '\x2', '\x2', '\x10EE', '\x10EF', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x10EF', '\x10F4', '\a', '\x336', '\x2', '\x2', '\x10F0', '\x10F2', 
		'\a', '\x338', '\x2', '\x2', '\x10F1', '\x10F0', '\x3', '\x2', '\x2', 
		'\x2', '\x10F1', '\x10F2', '\x3', '\x2', '\x2', '\x2', '\x10F2', '\x10F3', 
		'\x3', '\x2', '\x2', '\x2', '\x10F3', '\x10F5', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x10F4', '\x10F1', '\x3', '\x2', '\x2', '\x2', '\x10F5', '\x10F6', 
		'\x3', '\x2', '\x2', '\x2', '\x10F6', '\x10F4', '\x3', '\x2', '\x2', '\x2', 
		'\x10F6', '\x10F7', '\x3', '\x2', '\x2', '\x2', '\x10F7', '\x10F8', '\x3', 
		'\x2', '\x2', '\x2', '\x10F8', '\x10F9', '\a', '\x337', '\x2', '\x2', 
		'\x10F9', '\x10FA', '\a', '\xE6', '\x2', '\x2', '\x10FA', '\x10FB', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x10FB', '\x10FC', '\a', '\x331', '\x2', '\x2', 
		'\x10FC', '\x1109', '\x5', '\x3BA', '\x1DE', '\x2', '\x10FD', '\x10FF', 
		'\a', '\x338', '\x2', '\x2', '\x10FE', '\x10FD', '\x3', '\x2', '\x2', 
		'\x2', '\x10FE', '\x10FF', '\x3', '\x2', '\x2', '\x2', '\x10FF', '\x1100', 
		'\x3', '\x2', '\x2', '\x2', '\x1100', '\x1101', '\a', '\x18C', '\x2', 
		'\x2', '\x1101', '\x1108', '\t', '*', '\x2', '\x2', '\x1102', '\x1104', 
		'\a', '\x338', '\x2', '\x2', '\x1103', '\x1102', '\x3', '\x2', '\x2', 
		'\x2', '\x1103', '\x1104', '\x3', '\x2', '\x2', '\x2', '\x1104', '\x1105', 
		'\x3', '\x2', '\x2', '\x2', '\x1105', '\x1106', '\a', '\x1B', '\x2', '\x2', 
		'\x1106', '\x1108', '\t', '+', '\x2', '\x2', '\x1107', '\x10FE', '\x3', 
		'\x2', '\x2', '\x2', '\x1107', '\x1103', '\x3', '\x2', '\x2', '\x2', '\x1108', 
		'\x110B', '\x3', '\x2', '\x2', '\x2', '\x1109', '\x1107', '\x3', '\x2', 
		'\x2', '\x2', '\x1109', '\x110A', '\x3', '\x2', '\x2', '\x2', '\x110A', 
		'\x110D', '\x3', '\x2', '\x2', '\x2', '\x110B', '\x1109', '\x3', '\x2', 
		'\x2', '\x2', '\x110C', '\x10E5', '\x3', '\x2', '\x2', '\x2', '\x110D', 
		'\x110E', '\x3', '\x2', '\x2', '\x2', '\x110E', '\x110C', '\x3', '\x2', 
		'\x2', '\x2', '\x110E', '\x110F', '\x3', '\x2', '\x2', '\x2', '\x110F', 
		'\x111A', '\x3', '\x2', '\x2', '\x2', '\x1110', '\x1111', '\a', '\x17D', 
		'\x2', '\x2', '\x1111', '\x1112', '\a', '\x336', '\x2', '\x2', '\x1112', 
		'\x1113', '\a', '\x14C', '\x2', '\x2', '\x1113', '\x1114', '\a', '\x324', 
		'\x2', '\x2', '\x1114', '\x1117', '\t', '\t', '\x2', '\x2', '\x1115', 
		'\x1116', '\a', '\x2BF', '\x2', '\x2', '\x1116', '\x1118', '\t', '\t', 
		'\x2', '\x2', '\x1117', '\x1115', '\x3', '\x2', '\x2', '\x2', '\x1117', 
		'\x1118', '\x3', '\x2', '\x2', '\x2', '\x1118', '\x1119', '\x3', '\x2', 
		'\x2', '\x2', '\x1119', '\x111B', '\a', '\x337', '\x2', '\x2', '\x111A', 
		'\x1110', '\x3', '\x2', '\x2', '\x2', '\x111A', '\x111B', '\x3', '\x2', 
		'\x2', '\x2', '\x111B', '\x111F', '\x3', '\x2', '\x2', '\x2', '\x111C', 
		'\x111D', '\a', '\xDD', '\x2', '\x2', '\x111D', '\x111E', '\a', '\x86', 
		'\x2', '\x2', '\x111E', '\x1120', '\a', '\x113', '\x2', '\x2', '\x111F', 
		'\x111C', '\x3', '\x2', '\x2', '\x2', '\x111F', '\x1120', '\x3', '\x2', 
		'\x2', '\x2', '\x1120', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x1121', 
		'\x1122', '\a', '\n', '\x2', '\x2', '\x1122', '\x1126', '\a', '\x137', 
		'\x2', '\x2', '\x1123', '\x1124', '\x5', '\x3BA', '\x1DE', '\x2', '\x1124', 
		'\x1125', '\a', '\x331', '\x2', '\x2', '\x1125', '\x1127', '\x3', '\x2', 
		'\x2', '\x2', '\x1126', '\x1123', '\x3', '\x2', '\x2', '\x2', '\x1126', 
		'\x1127', '\x3', '\x2', '\x2', '\x2', '\x1127', '\x1128', '\x3', '\x2', 
		'\x2', '\x2', '\x1128', '\x112E', '\x5', '\x3BA', '\x1DE', '\x2', '\x1129', 
		'\x112C', '\a', '\x116', '\x2', '\x2', '\x112A', '\x112B', '\a', '\x17D', 
		'\x2', '\x2', '\x112B', '\x112D', '\a', '\x31C', '\x2', '\x2', '\x112C', 
		'\x112A', '\x3', '\x2', '\x2', '\x2', '\x112C', '\x112D', '\x3', '\x2', 
		'\x2', '\x2', '\x112D', '\x112F', '\x3', '\x2', '\x2', '\x2', '\x112E', 
		'\x1129', '\x3', '\x2', '\x2', '\x2', '\x112E', '\x112F', '\x3', '\x2', 
		'\x2', '\x2', '\x112F', '\x1133', '\x3', '\x2', '\x2', '\x2', '\x1130', 
		'\x1131', '\a', '\x9E', '\x2', '\x2', '\x1131', '\x1132', '\a', '&', '\x2', 
		'\x2', '\x1132', '\x1134', '\a', '\x31C', '\x2', '\x2', '\x1133', '\x1130', 
		'\x3', '\x2', '\x2', '\x2', '\x1133', '\x1134', '\x3', '\x2', '\x2', '\x2', 
		'\x1134', '\x1139', '\x3', '\x2', '\x2', '\x2', '\x1135', '\x1136', '\a', 
		'\xCD', '\x2', '\x2', '\x1136', '\x113A', '\a', '\x31C', '\x2', '\x2', 
		'\x1137', '\x1138', '\a', '\x265', '\x2', '\x2', '\x1138', '\x113A', '\a', 
		'\xCD', '\x2', '\x2', '\x1139', '\x1135', '\x3', '\x2', '\x2', '\x2', 
		'\x1139', '\x1137', '\x3', '\x2', '\x2', '\x2', '\x1139', '\x113A', '\x3', 
		'\x2', '\x2', '\x2', '\x113A', '\x113F', '\x3', '\x2', '\x2', '\x2', '\x113B', 
		'\x113C', '\a', '\xC1', '\x2', '\x2', '\x113C', '\x1140', '\a', '\x31C', 
		'\x2', '\x2', '\x113D', '\x113E', '\a', '\x265', '\x2', '\x2', '\x113E', 
		'\x1140', '\a', '\xC1', '\x2', '\x2', '\x113F', '\x113B', '\x3', '\x2', 
		'\x2', '\x2', '\x113F', '\x113D', '\x3', '\x2', '\x2', '\x2', '\x113F', 
		'\x1140', '\x3', '\x2', '\x2', '\x2', '\x1140', '\x1144', '\x3', '\x2', 
		'\x2', '\x2', '\x1141', '\x1145', '\a', 'Q', '\x2', '\x2', '\x1142', '\x1143', 
		'\a', '\x265', '\x2', '\x2', '\x1143', '\x1145', '\a', 'Q', '\x2', '\x2', 
		'\x1144', '\x1141', '\x3', '\x2', '\x2', '\x2', '\x1144', '\x1142', '\x3', 
		'\x2', '\x2', '\x2', '\x1144', '\x1145', '\x3', '\x2', '\x2', '\x2', '\x1145', 
		'\x114A', '\x3', '\x2', '\x2', '\x2', '\x1146', '\x1147', '\a', '\'', 
		'\x2', '\x2', '\x1147', '\x114B', '\a', '\x31C', '\x2', '\x2', '\x1148', 
		'\x1149', '\a', '\x265', '\x2', '\x2', '\x1149', '\x114B', '\a', '\'', 
		'\x2', '\x2', '\x114A', '\x1146', '\x3', '\x2', '\x2', '\x2', '\x114A', 
		'\x1148', '\x3', '\x2', '\x2', '\x2', '\x114A', '\x114B', '\x3', '\x2', 
		'\x2', '\x2', '\x114B', '\x171', '\x3', '\x2', '\x2', '\x2', '\x114C', 
		'\x114D', '\a', 'I', '\x2', '\x2', '\x114D', '\x1151', '\a', '\x137', 
		'\x2', '\x2', '\x114E', '\x114F', '\x5', '\x3BA', '\x1DE', '\x2', '\x114F', 
		'\x1150', '\a', '\x331', '\x2', '\x2', '\x1150', '\x1152', '\x3', '\x2', 
		'\x2', '\x2', '\x1151', '\x114E', '\x3', '\x2', '\x2', '\x2', '\x1151', 
		'\x1152', '\x3', '\x2', '\x2', '\x2', '\x1152', '\x1153', '\x3', '\x2', 
		'\x2', '\x2', '\x1153', '\x1156', '\x5', '\x3BA', '\x1DE', '\x2', '\x1154', 
		'\x1155', '\a', '\x10', '\x2', '\x2', '\x1155', '\x1157', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x1156', '\x1154', '\x3', '\x2', '\x2', '\x2', '\x1156', 
		'\x1157', '\x3', '\x2', '\x2', '\x2', '\x1157', '\x115B', '\x3', '\x2', 
		'\x2', '\x2', '\x1158', '\x1159', '\a', '\x14E', '\x2', '\x2', '\x1159', 
		'\x115A', '\a', '\x17D', '\x2', '\x2', '\x115A', '\x115C', '\a', '\x31C', 
		'\x2', '\x2', '\x115B', '\x1158', '\x3', '\x2', '\x2', '\x2', '\x115B', 
		'\x115C', '\x3', '\x2', '\x2', '\x2', '\x115C', '\x1163', '\x3', '\x2', 
		'\x2', '\x2', '\x115D', '\x115E', '\a', '\x9E', '\x2', '\x2', '\x115E', 
		'\x1160', '\a', '&', '\x2', '\x2', '\x115F', '\x1161', '\a', '\x33F', 
		'\x2', '\x2', '\x1160', '\x115F', '\x3', '\x2', '\x2', '\x2', '\x1160', 
		'\x1161', '\x3', '\x2', '\x2', '\x2', '\x1161', '\x1162', '\x3', '\x2', 
		'\x2', '\x2', '\x1162', '\x1164', '\a', '\x31C', '\x2', '\x2', '\x1163', 
		'\x115D', '\x3', '\x2', '\x2', '\x2', '\x1163', '\x1164', '\x3', '\x2', 
		'\x2', '\x2', '\x1164', '\x116B', '\x3', '\x2', '\x2', '\x2', '\x1165', 
		'\x1167', '\a', '\xCD', '\x2', '\x2', '\x1166', '\x1168', '\a', '\x31C', 
		'\x2', '\x2', '\x1167', '\x1166', '\x3', '\x2', '\x2', '\x2', '\x1167', 
		'\x1168', '\x3', '\x2', '\x2', '\x2', '\x1168', '\x116C', '\x3', '\x2', 
		'\x2', '\x2', '\x1169', '\x116A', '\a', '\x265', '\x2', '\x2', '\x116A', 
		'\x116C', '\a', '\xCD', '\x2', '\x2', '\x116B', '\x1165', '\x3', '\x2', 
		'\x2', '\x2', '\x116B', '\x1169', '\x3', '\x2', '\x2', '\x2', '\x116B', 
		'\x116C', '\x3', '\x2', '\x2', '\x2', '\x116C', '\x1173', '\x3', '\x2', 
		'\x2', '\x2', '\x116D', '\x116F', '\a', '\xC1', '\x2', '\x2', '\x116E', 
		'\x1170', '\a', '\x31C', '\x2', '\x2', '\x116F', '\x116E', '\x3', '\x2', 
		'\x2', '\x2', '\x116F', '\x1170', '\x3', '\x2', '\x2', '\x2', '\x1170', 
		'\x1174', '\x3', '\x2', '\x2', '\x2', '\x1171', '\x1172', '\a', '\x265', 
		'\x2', '\x2', '\x1172', '\x1174', '\a', '\xC1', '\x2', '\x2', '\x1173', 
		'\x116D', '\x3', '\x2', '\x2', '\x2', '\x1173', '\x1171', '\x3', '\x2', 
		'\x2', '\x2', '\x1173', '\x1174', '\x3', '\x2', '\x2', '\x2', '\x1174', 
		'\x1178', '\x3', '\x2', '\x2', '\x2', '\x1175', '\x1179', '\a', 'Q', '\x2', 
		'\x2', '\x1176', '\x1177', '\a', '\x265', '\x2', '\x2', '\x1177', '\x1179', 
		'\a', 'Q', '\x2', '\x2', '\x1178', '\x1175', '\x3', '\x2', '\x2', '\x2', 
		'\x1178', '\x1176', '\x3', '\x2', '\x2', '\x2', '\x1178', '\x1179', '\x3', 
		'\x2', '\x2', '\x2', '\x1179', '\x1180', '\x3', '\x2', '\x2', '\x2', '\x117A', 
		'\x117C', '\a', '\'', '\x2', '\x2', '\x117B', '\x117D', '\a', '\x31C', 
		'\x2', '\x2', '\x117C', '\x117B', '\x3', '\x2', '\x2', '\x2', '\x117C', 
		'\x117D', '\x3', '\x2', '\x2', '\x2', '\x117D', '\x1181', '\x3', '\x2', 
		'\x2', '\x2', '\x117E', '\x117F', '\a', '\x265', '\x2', '\x2', '\x117F', 
		'\x1181', '\a', '\'', '\x2', '\x2', '\x1180', '\x117A', '\x3', '\x2', 
		'\x2', '\x2', '\x1180', '\x117E', '\x3', '\x2', '\x2', '\x2', '\x1180', 
		'\x1181', '\x3', '\x2', '\x2', '\x2', '\x1181', '\x173', '\x3', '\x2', 
		'\x2', '\x2', '\x1182', '\x1183', '\a', '\n', '\x2', '\x2', '\x1183', 
		'\x1184', '\a', '\x138', '\x2', '\x2', '\x1184', '\x1185', '\a', '\x19A', 
		'\x2', '\x2', '\x1185', '\x1209', '\x5', '\x3BA', '\x1DE', '\x2', '\x1186', 
		'\x11B3', '\a', '\x15E', '\x2', '\x2', '\x1187', '\x1188', '\a', '\x82', 
		'\x2', '\x2', '\x1188', '\x11AD', '\a', '\x336', '\x2', '\x2', '\x1189', 
		'\x118B', '\a', '\x338', '\x2', '\x2', '\x118A', '\x1189', '\x3', '\x2', 
		'\x2', '\x2', '\x118A', '\x118B', '\x3', '\x2', '\x2', '\x2', '\x118B', 
		'\x118C', '\x3', '\x2', '\x2', '\x2', '\x118C', '\x118D', '\a', '\x200', 
		'\x2', '\x2', '\x118D', '\x118E', '\a', '\x324', '\x2', '\x2', '\x118E', 
		'\x11AC', '\a', '\x320', '\x2', '\x2', '\x118F', '\x1191', '\a', '\x338', 
		'\x2', '\x2', '\x1190', '\x118F', '\x3', '\x2', '\x2', '\x2', '\x1190', 
		'\x1191', '\x3', '\x2', '\x2', '\x2', '\x1191', '\x1192', '\x3', '\x2', 
		'\x2', '\x2', '\x1192', '\x1193', '\a', '\x24E', '\x2', '\x2', '\x1193', 
		'\x1197', '\a', '\x324', '\x2', '\x2', '\x1194', '\x1195', '\a', '\x31C', 
		'\x2', '\x2', '\x1195', '\x1198', '\t', ',', '\x2', '\x2', '\x1196', '\x1198', 
		'\a', '\x301', '\x2', '\x2', '\x1197', '\x1194', '\x3', '\x2', '\x2', 
		'\x2', '\x1197', '\x1196', '\x3', '\x2', '\x2', '\x2', '\x1198', '\x11AC', 
		'\x3', '\x2', '\x2', '\x2', '\x1199', '\x119B', '\a', '\x338', '\x2', 
		'\x2', '\x119A', '\x1199', '\x3', '\x2', '\x2', '\x2', '\x119A', '\x119B', 
		'\x3', '\x2', '\x2', '\x2', '\x119B', '\x119C', '\x3', '\x2', '\x2', '\x2', 
		'\x119C', '\x119D', '\a', '\x24B', '\x2', '\x2', '\x119D', '\x119E', '\a', 
		'\x324', '\x2', '\x2', '\x119E', '\x11AC', '\t', '-', '\x2', '\x2', '\x119F', 
		'\x11A1', '\a', '\x338', '\x2', '\x2', '\x11A0', '\x119F', '\x3', '\x2', 
		'\x2', '\x2', '\x11A0', '\x11A1', '\x3', '\x2', '\x2', '\x2', '\x11A1', 
		'\x11A2', '\x3', '\x2', '\x2', '\x2', '\x11A2', '\x11A3', '\a', '\x246', 
		'\x2', '\x2', '\x11A3', '\x11A4', '\a', '\x324', '\x2', '\x2', '\x11A4', 
		'\x11AC', '\a', '\x31C', '\x2', '\x2', '\x11A5', '\x11A7', '\a', '\x338', 
		'\x2', '\x2', '\x11A6', '\x11A5', '\x3', '\x2', '\x2', '\x2', '\x11A6', 
		'\x11A7', '\x3', '\x2', '\x2', '\x2', '\x11A7', '\x11A8', '\x3', '\x2', 
		'\x2', '\x2', '\x11A8', '\x11A9', '\a', '\x2B2', '\x2', '\x2', '\x11A9', 
		'\x11AA', '\a', '\x324', '\x2', '\x2', '\x11AA', '\x11AC', '\t', '\t', 
		'\x2', '\x2', '\x11AB', '\x118A', '\x3', '\x2', '\x2', '\x2', '\x11AB', 
		'\x1190', '\x3', '\x2', '\x2', '\x2', '\x11AB', '\x119A', '\x3', '\x2', 
		'\x2', '\x2', '\x11AB', '\x11A0', '\x3', '\x2', '\x2', '\x2', '\x11AB', 
		'\x11A6', '\x3', '\x2', '\x2', '\x2', '\x11AC', '\x11AF', '\x3', '\x2', 
		'\x2', '\x2', '\x11AD', '\x11AB', '\x3', '\x2', '\x2', '\x2', '\x11AD', 
		'\x11AE', '\x3', '\x2', '\x2', '\x2', '\x11AE', '\x11B0', '\x3', '\x2', 
		'\x2', '\x2', '\x11AF', '\x11AD', '\x3', '\x2', '\x2', '\x2', '\x11B0', 
		'\x11B4', '\a', '\x337', '\x2', '\x2', '\x11B1', '\x11B4', '\a', '\x196', 
		'\x2', '\x2', '\x11B2', '\x11B4', '\a', '\x2C9', '\x2', '\x2', '\x11B3', 
		'\x1187', '\x3', '\x2', '\x2', '\x2', '\x11B3', '\x11B1', '\x3', '\x2', 
		'\x2', '\x2', '\x11B3', '\x11B2', '\x3', '\x2', '\x2', '\x2', '\x11B4', 
		'\x11B6', '\x3', '\x2', '\x2', '\x2', '\x11B5', '\x1186', '\x3', '\x2', 
		'\x2', '\x2', '\x11B5', '\x11B6', '\x3', '\x2', '\x2', '\x2', '\x11B6', 
		'\x11D1', '\x3', '\x2', '\x2', '\x2', '\x11B7', '\x11B8', '\a', '\x17D', 
		'\x2', '\x2', '\x11B8', '\x11CD', '\a', '\x336', '\x2', '\x2', '\x11B9', 
		'\x11BB', '\a', '\x338', '\x2', '\x2', '\x11BA', '\x11B9', '\x3', '\x2', 
		'\x2', '\x2', '\x11BA', '\x11BB', '\x3', '\x2', '\x2', '\x2', '\x11BB', 
		'\x11BC', '\x3', '\x2', '\x2', '\x2', '\x11BC', '\x11BD', '\a', '\x296', 
		'\x2', '\x2', '\x11BD', '\x11BE', '\a', '\x324', '\x2', '\x2', '\x11BE', 
		'\x11CC', '\a', '\x31C', '\x2', '\x2', '\x11BF', '\x11C1', '\a', '\x338', 
		'\x2', '\x2', '\x11C0', '\x11BF', '\x3', '\x2', '\x2', '\x2', '\x11C0', 
		'\x11C1', '\x3', '\x2', '\x2', '\x2', '\x11C1', '\x11C2', '\x3', '\x2', 
		'\x2', '\x2', '\x11C2', '\x11C3', '\a', '\xE7', '\x2', '\x2', '\x11C3', 
		'\x11C4', '\a', '\x324', '\x2', '\x2', '\x11C4', '\x11CC', '\t', '.', 
		'\x2', '\x2', '\x11C5', '\x11C7', '\a', '\x338', '\x2', '\x2', '\x11C6', 
		'\x11C5', '\x3', '\x2', '\x2', '\x2', '\x11C6', '\x11C7', '\x3', '\x2', 
		'\x2', '\x2', '\x11C7', '\x11C8', '\x3', '\x2', '\x2', '\x2', '\x11C8', 
		'\x11C9', '\a', '\x14C', '\x2', '\x2', '\x11C9', '\x11CA', '\a', '\x324', 
		'\x2', '\x2', '\x11CA', '\x11CC', '\t', '\t', '\x2', '\x2', '\x11CB', 
		'\x11BA', '\x3', '\x2', '\x2', '\x2', '\x11CB', '\x11C0', '\x3', '\x2', 
		'\x2', '\x2', '\x11CB', '\x11C6', '\x3', '\x2', '\x2', '\x2', '\x11CC', 
		'\x11CF', '\x3', '\x2', '\x2', '\x2', '\x11CD', '\x11CB', '\x3', '\x2', 
		'\x2', '\x2', '\x11CD', '\x11CE', '\x3', '\x2', '\x2', '\x2', '\x11CE', 
		'\x11D0', '\x3', '\x2', '\x2', '\x2', '\x11CF', '\x11CD', '\x3', '\x2', 
		'\x2', '\x2', '\x11D0', '\x11D2', '\a', '\x337', '\x2', '\x2', '\x11D1', 
		'\x11B7', '\x3', '\x2', '\x2', '\x2', '\x11D1', '\x11D2', '\x3', '\x2', 
		'\x2', '\x2', '\x11D2', '\x1201', '\x3', '\x2', '\x2', '\x2', '\x11D3', 
		'\x11FF', '\a', '\x17A', '\x2', '\x2', '\x11D4', '\x11D6', '\a', '\x338', 
		'\x2', '\x2', '\x11D5', '\x11D4', '\x3', '\x2', '\x2', '\x2', '\x11D5', 
		'\x11D6', '\x3', '\x2', '\x2', '\x2', '\x11D6', '\x11D8', '\x3', '\x2', 
		'\x2', '\x2', '\x11D7', '\x11D9', '\a', '\xDD', '\x2', '\x2', '\x11D8', 
		'\x11D7', '\x3', '\x2', '\x2', '\x2', '\x11D8', '\x11D9', '\x3', '\x2', 
		'\x2', '\x2', '\x11D9', '\x11DA', '\x3', '\x2', '\x2', '\x2', '\x11DA', 
		'\x11E6', '\x5', '\x3BA', '\x1DE', '\x2', '\x11DB', '\x11E7', '\a', '\x324', 
		'\x2', '\x2', '\x11DC', '\x11DD', '\a', '\x326', '\x2', '\x2', '\x11DD', 
		'\x11E7', '\a', '\x325', '\x2', '\x2', '\x11DE', '\x11DF', '\a', '\x327', 
		'\x2', '\x2', '\x11DF', '\x11E7', '\a', '\x324', '\x2', '\x2', '\x11E0', 
		'\x11E7', '\a', '\x325', '\x2', '\x2', '\x11E1', '\x11E2', '\a', '\x325', 
		'\x2', '\x2', '\x11E2', '\x11E7', '\a', '\x324', '\x2', '\x2', '\x11E3', 
		'\x11E7', '\a', '\x326', '\x2', '\x2', '\x11E4', '\x11E5', '\a', '\x326', 
		'\x2', '\x2', '\x11E5', '\x11E7', '\a', '\x324', '\x2', '\x2', '\x11E6', 
		'\x11DB', '\x3', '\x2', '\x2', '\x2', '\x11E6', '\x11DC', '\x3', '\x2', 
		'\x2', '\x2', '\x11E6', '\x11DE', '\x3', '\x2', '\x2', '\x2', '\x11E6', 
		'\x11E0', '\x3', '\x2', '\x2', '\x2', '\x11E6', '\x11E1', '\x3', '\x2', 
		'\x2', '\x2', '\x11E6', '\x11E3', '\x3', '\x2', '\x2', '\x2', '\x11E6', 
		'\x11E4', '\x3', '\x2', '\x2', '\x2', '\x11E7', '\x11E8', '\x3', '\x2', 
		'\x2', '\x2', '\x11E8', '\x11E9', '\t', '\x18', '\x2', '\x2', '\x11E9', 
		'\x1200', '\x3', '\x2', '\x2', '\x2', '\x11EA', '\x11EC', '\a', '\x338', 
		'\x2', '\x2', '\x11EB', '\x11EA', '\x3', '\x2', '\x2', '\x2', '\x11EB', 
		'\x11EC', '\x3', '\x2', '\x2', '\x2', '\x11EC', '\x11ED', '\x3', '\x2', 
		'\x2', '\x2', '\x11ED', '\x11EF', '\t', '\x1D', '\x2', '\x2', '\x11EE', 
		'\x11F0', '\a', '\xDD', '\x2', '\x2', '\x11EF', '\x11EE', '\x3', '\x2', 
		'\x2', '\x2', '\x11EF', '\x11F0', '\x3', '\x2', '\x2', '\x2', '\x11F0', 
		'\x11FC', '\x3', '\x2', '\x2', '\x2', '\x11F1', '\x11FD', '\a', '\x324', 
		'\x2', '\x2', '\x11F2', '\x11F3', '\a', '\x326', '\x2', '\x2', '\x11F3', 
		'\x11FD', '\a', '\x325', '\x2', '\x2', '\x11F4', '\x11F5', '\a', '\x327', 
		'\x2', '\x2', '\x11F5', '\x11FD', '\a', '\x324', '\x2', '\x2', '\x11F6', 
		'\x11FD', '\a', '\x325', '\x2', '\x2', '\x11F7', '\x11F8', '\a', '\x325', 
		'\x2', '\x2', '\x11F8', '\x11FD', '\a', '\x324', '\x2', '\x2', '\x11F9', 
		'\x11FD', '\a', '\x326', '\x2', '\x2', '\x11FA', '\x11FB', '\a', '\x326', 
		'\x2', '\x2', '\x11FB', '\x11FD', '\a', '\x324', '\x2', '\x2', '\x11FC', 
		'\x11F1', '\x3', '\x2', '\x2', '\x2', '\x11FC', '\x11F2', '\x3', '\x2', 
		'\x2', '\x2', '\x11FC', '\x11F4', '\x3', '\x2', '\x2', '\x2', '\x11FC', 
		'\x11F6', '\x3', '\x2', '\x2', '\x2', '\x11FC', '\x11F7', '\x3', '\x2', 
		'\x2', '\x2', '\x11FC', '\x11F9', '\x3', '\x2', '\x2', '\x2', '\x11FC', 
		'\x11FA', '\x3', '\x2', '\x2', '\x2', '\x11FD', '\x11FE', '\x3', '\x2', 
		'\x2', '\x2', '\x11FE', '\x1200', '\t', '\x18', '\x2', '\x2', '\x11FF', 
		'\x11D5', '\x3', '\x2', '\x2', '\x2', '\x11FF', '\x11EB', '\x3', '\x2', 
		'\x2', '\x2', '\x1200', '\x1202', '\x3', '\x2', '\x2', '\x2', '\x1201', 
		'\x11D3', '\x3', '\x2', '\x2', '\x2', '\x1201', '\x1202', '\x3', '\x2', 
		'\x2', '\x2', '\x1202', '\x120A', '\x3', '\x2', '\x2', '\x2', '\x1203', 
		'\x1204', '\a', '\x2AA', '\x2', '\x2', '\x1204', '\x120A', '\a', '\x17A', 
		'\x2', '\x2', '\x1205', '\x1206', '\a', '\x25C', '\x2', '\x2', '\x1206', 
		'\x1207', '\a', '\x25F', '\x2', '\x2', '\x1207', '\x1208', '\a', '\x324', 
		'\x2', '\x2', '\x1208', '\x120A', '\x5', '\x3BA', '\x1DE', '\x2', '\x1209', 
		'\x11B5', '\x3', '\x2', '\x2', '\x2', '\x1209', '\x1203', '\x3', '\x2', 
		'\x2', '\x2', '\x1209', '\x1205', '\x3', '\x2', '\x2', '\x2', '\x120A', 
		'\x175', '\x3', '\x2', '\x2', '\x2', '\x120B', '\x120C', '\a', 'I', '\x2', 
		'\x2', '\x120C', '\x120D', '\a', '\x138', '\x2', '\x2', '\x120D', '\x120E', 
		'\a', '\x19A', '\x2', '\x2', '\x120E', '\x1298', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x120F', '\x123C', '\a', '\x15E', '\x2', '\x2', '\x1210', '\x1211', 
		'\a', '\x82', '\x2', '\x2', '\x1211', '\x1236', '\a', '\x336', '\x2', 
		'\x2', '\x1212', '\x1214', '\a', '\x338', '\x2', '\x2', '\x1213', '\x1212', 
		'\x3', '\x2', '\x2', '\x2', '\x1213', '\x1214', '\x3', '\x2', '\x2', '\x2', 
		'\x1214', '\x1215', '\x3', '\x2', '\x2', '\x2', '\x1215', '\x1216', '\a', 
		'\x200', '\x2', '\x2', '\x1216', '\x1217', '\a', '\x324', '\x2', '\x2', 
		'\x1217', '\x1235', '\a', '\x320', '\x2', '\x2', '\x1218', '\x121A', '\a', 
		'\x338', '\x2', '\x2', '\x1219', '\x1218', '\x3', '\x2', '\x2', '\x2', 
		'\x1219', '\x121A', '\x3', '\x2', '\x2', '\x2', '\x121A', '\x121B', '\x3', 
		'\x2', '\x2', '\x2', '\x121B', '\x121C', '\a', '\x24E', '\x2', '\x2', 
		'\x121C', '\x1220', '\a', '\x324', '\x2', '\x2', '\x121D', '\x121E', '\a', 
		'\x31C', '\x2', '\x2', '\x121E', '\x1221', '\t', ',', '\x2', '\x2', '\x121F', 
		'\x1221', '\a', '\x301', '\x2', '\x2', '\x1220', '\x121D', '\x3', '\x2', 
		'\x2', '\x2', '\x1220', '\x121F', '\x3', '\x2', '\x2', '\x2', '\x1221', 
		'\x1235', '\x3', '\x2', '\x2', '\x2', '\x1222', '\x1224', '\a', '\x338', 
		'\x2', '\x2', '\x1223', '\x1222', '\x3', '\x2', '\x2', '\x2', '\x1223', 
		'\x1224', '\x3', '\x2', '\x2', '\x2', '\x1224', '\x1225', '\x3', '\x2', 
		'\x2', '\x2', '\x1225', '\x1226', '\a', '\x24B', '\x2', '\x2', '\x1226', 
		'\x1227', '\a', '\x324', '\x2', '\x2', '\x1227', '\x1235', '\t', '-', 
		'\x2', '\x2', '\x1228', '\x122A', '\a', '\x338', '\x2', '\x2', '\x1229', 
		'\x1228', '\x3', '\x2', '\x2', '\x2', '\x1229', '\x122A', '\x3', '\x2', 
		'\x2', '\x2', '\x122A', '\x122B', '\x3', '\x2', '\x2', '\x2', '\x122B', 
		'\x122C', '\a', '\x246', '\x2', '\x2', '\x122C', '\x122D', '\a', '\x324', 
		'\x2', '\x2', '\x122D', '\x1235', '\a', '\x31C', '\x2', '\x2', '\x122E', 
		'\x1230', '\a', '\x338', '\x2', '\x2', '\x122F', '\x122E', '\x3', '\x2', 
		'\x2', '\x2', '\x122F', '\x1230', '\x3', '\x2', '\x2', '\x2', '\x1230', 
		'\x1231', '\x3', '\x2', '\x2', '\x2', '\x1231', '\x1232', '\a', '\x2B2', 
		'\x2', '\x2', '\x1232', '\x1233', '\a', '\x324', '\x2', '\x2', '\x1233', 
		'\x1235', '\t', '\t', '\x2', '\x2', '\x1234', '\x1213', '\x3', '\x2', 
		'\x2', '\x2', '\x1234', '\x1219', '\x3', '\x2', '\x2', '\x2', '\x1234', 
		'\x1223', '\x3', '\x2', '\x2', '\x2', '\x1234', '\x1229', '\x3', '\x2', 
		'\x2', '\x2', '\x1234', '\x122F', '\x3', '\x2', '\x2', '\x2', '\x1235', 
		'\x1238', '\x3', '\x2', '\x2', '\x2', '\x1236', '\x1234', '\x3', '\x2', 
		'\x2', '\x2', '\x1236', '\x1237', '\x3', '\x2', '\x2', '\x2', '\x1237', 
		'\x1239', '\x3', '\x2', '\x2', '\x2', '\x1238', '\x1236', '\x3', '\x2', 
		'\x2', '\x2', '\x1239', '\x123D', '\a', '\x337', '\x2', '\x2', '\x123A', 
		'\x123D', '\a', '\x196', '\x2', '\x2', '\x123B', '\x123D', '\a', '\x2C9', 
		'\x2', '\x2', '\x123C', '\x1210', '\x3', '\x2', '\x2', '\x2', '\x123C', 
		'\x123A', '\x3', '\x2', '\x2', '\x2', '\x123C', '\x123B', '\x3', '\x2', 
		'\x2', '\x2', '\x123D', '\x123F', '\x3', '\x2', '\x2', '\x2', '\x123E', 
		'\x120F', '\x3', '\x2', '\x2', '\x2', '\x123E', '\x123F', '\x3', '\x2', 
		'\x2', '\x2', '\x123F', '\x1260', '\x3', '\x2', '\x2', '\x2', '\x1240', 
		'\x1241', '\a', '\x17D', '\x2', '\x2', '\x1241', '\x125C', '\a', '\x336', 
		'\x2', '\x2', '\x1242', '\x1244', '\a', '\x338', '\x2', '\x2', '\x1243', 
		'\x1242', '\x3', '\x2', '\x2', '\x2', '\x1243', '\x1244', '\x3', '\x2', 
		'\x2', '\x2', '\x1244', '\x1245', '\x3', '\x2', '\x2', '\x2', '\x1245', 
		'\x1246', '\a', '\x296', '\x2', '\x2', '\x1246', '\x1247', '\a', '\x324', 
		'\x2', '\x2', '\x1247', '\x125B', '\a', '\x31C', '\x2', '\x2', '\x1248', 
		'\x124A', '\a', '\x338', '\x2', '\x2', '\x1249', '\x1248', '\x3', '\x2', 
		'\x2', '\x2', '\x1249', '\x124A', '\x3', '\x2', '\x2', '\x2', '\x124A', 
		'\x124B', '\x3', '\x2', '\x2', '\x2', '\x124B', '\x124C', '\a', '\xE7', 
		'\x2', '\x2', '\x124C', '\x124D', '\a', '\x324', '\x2', '\x2', '\x124D', 
		'\x125B', '\t', '.', '\x2', '\x2', '\x124E', '\x1250', '\a', '\x338', 
		'\x2', '\x2', '\x124F', '\x124E', '\x3', '\x2', '\x2', '\x2', '\x124F', 
		'\x1250', '\x3', '\x2', '\x2', '\x2', '\x1250', '\x1251', '\x3', '\x2', 
		'\x2', '\x2', '\x1251', '\x1252', '\a', '\x14C', '\x2', '\x2', '\x1252', 
		'\x1253', '\a', '\x324', '\x2', '\x2', '\x1253', '\x125B', '\t', '\t', 
		'\x2', '\x2', '\x1254', '\x1256', '\a', '\x338', '\x2', '\x2', '\x1255', 
		'\x1254', '\x3', '\x2', '\x2', '\x2', '\x1255', '\x1256', '\x3', '\x2', 
		'\x2', '\x2', '\x1256', '\x1257', '\x3', '\x2', '\x2', '\x2', '\x1257', 
		'\x1258', '\a', '\x19B', '\x2', '\x2', '\x1258', '\x1259', '\a', '\x324', 
		'\x2', '\x2', '\x1259', '\x125B', '\x5', '\x3BA', '\x1DE', '\x2', '\x125A', 
		'\x1243', '\x3', '\x2', '\x2', '\x2', '\x125A', '\x1249', '\x3', '\x2', 
		'\x2', '\x2', '\x125A', '\x124F', '\x3', '\x2', '\x2', '\x2', '\x125A', 
		'\x1255', '\x3', '\x2', '\x2', '\x2', '\x125B', '\x125E', '\x3', '\x2', 
		'\x2', '\x2', '\x125C', '\x125A', '\x3', '\x2', '\x2', '\x2', '\x125C', 
		'\x125D', '\x3', '\x2', '\x2', '\x2', '\x125D', '\x125F', '\x3', '\x2', 
		'\x2', '\x2', '\x125E', '\x125C', '\x3', '\x2', '\x2', '\x2', '\x125F', 
		'\x1261', '\a', '\x337', '\x2', '\x2', '\x1260', '\x1240', '\x3', '\x2', 
		'\x2', '\x2', '\x1260', '\x1261', '\x3', '\x2', '\x2', '\x2', '\x1261', 
		'\x1290', '\x3', '\x2', '\x2', '\x2', '\x1262', '\x128E', '\a', '\x17A', 
		'\x2', '\x2', '\x1263', '\x1265', '\a', '\x338', '\x2', '\x2', '\x1264', 
		'\x1263', '\x3', '\x2', '\x2', '\x2', '\x1264', '\x1265', '\x3', '\x2', 
		'\x2', '\x2', '\x1265', '\x1267', '\x3', '\x2', '\x2', '\x2', '\x1266', 
		'\x1268', '\a', '\xDD', '\x2', '\x2', '\x1267', '\x1266', '\x3', '\x2', 
		'\x2', '\x2', '\x1267', '\x1268', '\x3', '\x2', '\x2', '\x2', '\x1268', 
		'\x1269', '\x3', '\x2', '\x2', '\x2', '\x1269', '\x1275', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x126A', '\x1276', '\a', '\x324', '\x2', '\x2', '\x126B', 
		'\x126C', '\a', '\x326', '\x2', '\x2', '\x126C', '\x1276', '\a', '\x325', 
		'\x2', '\x2', '\x126D', '\x126E', '\a', '\x327', '\x2', '\x2', '\x126E', 
		'\x1276', '\a', '\x324', '\x2', '\x2', '\x126F', '\x1276', '\a', '\x325', 
		'\x2', '\x2', '\x1270', '\x1271', '\a', '\x325', '\x2', '\x2', '\x1271', 
		'\x1276', '\a', '\x324', '\x2', '\x2', '\x1272', '\x1276', '\a', '\x326', 
		'\x2', '\x2', '\x1273', '\x1274', '\a', '\x326', '\x2', '\x2', '\x1274', 
		'\x1276', '\a', '\x324', '\x2', '\x2', '\x1275', '\x126A', '\x3', '\x2', 
		'\x2', '\x2', '\x1275', '\x126B', '\x3', '\x2', '\x2', '\x2', '\x1275', 
		'\x126D', '\x3', '\x2', '\x2', '\x2', '\x1275', '\x126F', '\x3', '\x2', 
		'\x2', '\x2', '\x1275', '\x1270', '\x3', '\x2', '\x2', '\x2', '\x1275', 
		'\x1272', '\x3', '\x2', '\x2', '\x2', '\x1275', '\x1273', '\x3', '\x2', 
		'\x2', '\x2', '\x1276', '\x1277', '\x3', '\x2', '\x2', '\x2', '\x1277', 
		'\x1278', '\t', '\x18', '\x2', '\x2', '\x1278', '\x128F', '\x3', '\x2', 
		'\x2', '\x2', '\x1279', '\x127B', '\a', '\x338', '\x2', '\x2', '\x127A', 
		'\x1279', '\x3', '\x2', '\x2', '\x2', '\x127A', '\x127B', '\x3', '\x2', 
		'\x2', '\x2', '\x127B', '\x127C', '\x3', '\x2', '\x2', '\x2', '\x127C', 
		'\x127E', '\t', '\x1D', '\x2', '\x2', '\x127D', '\x127F', '\a', '\xDD', 
		'\x2', '\x2', '\x127E', '\x127D', '\x3', '\x2', '\x2', '\x2', '\x127E', 
		'\x127F', '\x3', '\x2', '\x2', '\x2', '\x127F', '\x128B', '\x3', '\x2', 
		'\x2', '\x2', '\x1280', '\x128C', '\a', '\x324', '\x2', '\x2', '\x1281', 
		'\x1282', '\a', '\x326', '\x2', '\x2', '\x1282', '\x128C', '\a', '\x325', 
		'\x2', '\x2', '\x1283', '\x1284', '\a', '\x327', '\x2', '\x2', '\x1284', 
		'\x128C', '\a', '\x324', '\x2', '\x2', '\x1285', '\x128C', '\a', '\x325', 
		'\x2', '\x2', '\x1286', '\x1287', '\a', '\x325', '\x2', '\x2', '\x1287', 
		'\x128C', '\a', '\x324', '\x2', '\x2', '\x1288', '\x128C', '\a', '\x326', 
		'\x2', '\x2', '\x1289', '\x128A', '\a', '\x326', '\x2', '\x2', '\x128A', 
		'\x128C', '\a', '\x324', '\x2', '\x2', '\x128B', '\x1280', '\x3', '\x2', 
		'\x2', '\x2', '\x128B', '\x1281', '\x3', '\x2', '\x2', '\x2', '\x128B', 
		'\x1283', '\x3', '\x2', '\x2', '\x2', '\x128B', '\x1285', '\x3', '\x2', 
		'\x2', '\x2', '\x128B', '\x1286', '\x3', '\x2', '\x2', '\x2', '\x128B', 
		'\x1288', '\x3', '\x2', '\x2', '\x2', '\x128B', '\x1289', '\x3', '\x2', 
		'\x2', '\x2', '\x128C', '\x128D', '\x3', '\x2', '\x2', '\x2', '\x128D', 
		'\x128F', '\t', '\x18', '\x2', '\x2', '\x128E', '\x1264', '\x3', '\x2', 
		'\x2', '\x2', '\x128E', '\x127A', '\x3', '\x2', '\x2', '\x2', '\x128F', 
		'\x1291', '\x3', '\x2', '\x2', '\x2', '\x1290', '\x1262', '\x3', '\x2', 
		'\x2', '\x2', '\x1290', '\x1291', '\x3', '\x2', '\x2', '\x2', '\x1291', 
		'\x1299', '\x3', '\x2', '\x2', '\x2', '\x1292', '\x1293', '\a', '\x2AA', 
		'\x2', '\x2', '\x1293', '\x1299', '\a', '\x17A', '\x2', '\x2', '\x1294', 
		'\x1295', '\a', '\x25C', '\x2', '\x2', '\x1295', '\x1296', '\a', '\x25F', 
		'\x2', '\x2', '\x1296', '\x1297', '\a', '\x324', '\x2', '\x2', '\x1297', 
		'\x1299', '\x5', '\x3BA', '\x1DE', '\x2', '\x1298', '\x123E', '\x3', '\x2', 
		'\x2', '\x2', '\x1298', '\x1292', '\x3', '\x2', '\x2', '\x2', '\x1298', 
		'\x1294', '\x3', '\x2', '\x2', '\x2', '\x1299', '\x177', '\x3', '\x2', 
		'\x2', '\x2', '\x129A', '\x129B', '\a', '\n', '\x2', '\x2', '\x129B', 
		'\x129C', '\a', '\x138', '\x2', '\x2', '\x129C', '\x129D', '\a', '\x19A', 
		'\x2', '\x2', '\x129D', '\x129E', '\a', '\x146', '\x2', '\x2', '\x129E', 
		'\x12A3', '\x5', '\x3BA', '\x1DE', '\x2', '\x129F', '\x12A0', '\a', '\x86', 
		'\x2', '\x2', '\x12A0', '\x12A1', '\a', '\x138', '\x2', '\x2', '\x12A1', 
		'\x12A2', '\a', '\x19A', '\x2', '\x2', '\x12A2', '\x12A4', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x12A3', '\x129F', '\x3', '\x2', '\x2', '\x2', '\x12A3', 
		'\x12A4', '\x3', '\x2', '\x2', '\x2', '\x12A4', '\x12AC', '\x3', '\x2', 
		'\x2', '\x2', '\x12A5', '\x12A6', '\t', '\x15', '\x2', '\x2', '\x12A6', 
		'\x12A7', '\a', '\x336', '\x2', '\x2', '\x12A7', '\x12A8', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x12A8', '\x12A9', '\a', '\x337', '\x2', '\x2', '\x12A9', 
		'\x12AB', '\x3', '\x2', '\x2', '\x2', '\x12AA', '\x12A5', '\x3', '\x2', 
		'\x2', '\x2', '\x12AB', '\x12AE', '\x3', '\x2', '\x2', '\x2', '\x12AC', 
		'\x12AA', '\x3', '\x2', '\x2', '\x2', '\x12AC', '\x12AD', '\x3', '\x2', 
		'\x2', '\x2', '\x12AD', '\x12B5', '\x3', '\x2', '\x2', '\x2', '\x12AE', 
		'\x12AC', '\x3', '\x2', '\x2', '\x2', '\x12AF', '\x12B0', '\a', '\x17D', 
		'\x2', '\x2', '\x12B0', '\x12B1', '\a', '\x336', '\x2', '\x2', '\x12B1', 
		'\x12B2', '\a', '\x14C', '\x2', '\x2', '\x12B2', '\x12B3', '\a', '\x324', 
		'\x2', '\x2', '\x12B3', '\x12B4', '\t', '\t', '\x2', '\x2', '\x12B4', 
		'\x12B6', '\a', '\x337', '\x2', '\x2', '\x12B5', '\x12AF', '\x3', '\x2', 
		'\x2', '\x2', '\x12B5', '\x12B6', '\x3', '\x2', '\x2', '\x2', '\x12B6', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x12B7', '\x12B8', '\a', 'I', '\x2', 
		'\x2', '\x12B8', '\x12B9', '\a', '\x138', '\x2', '\x2', '\x12B9', '\x12BA', 
		'\a', '\x19A', '\x2', '\x2', '\x12BA', '\x12BB', '\a', '\x146', '\x2', 
		'\x2', '\x12BB', '\x12C0', '\x5', '\x3BA', '\x1DE', '\x2', '\x12BC', '\x12BD', 
		'\a', '\x86', '\x2', '\x2', '\x12BD', '\x12BE', '\a', '\x138', '\x2', 
		'\x2', '\x12BE', '\x12BF', '\a', '\x19A', '\x2', '\x2', '\x12BF', '\x12C1', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x12C0', '\x12BC', '\x3', '\x2', '\x2', 
		'\x2', '\x12C0', '\x12C1', '\x3', '\x2', '\x2', '\x2', '\x12C1', '\x12C9', 
		'\x3', '\x2', '\x2', '\x2', '\x12C2', '\x12C3', '\a', '\x4', '\x2', '\x2', 
		'\x12C3', '\x12C4', '\a', '\x336', '\x2', '\x2', '\x12C4', '\x12C5', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x12C5', '\x12C6', '\a', '\x337', '\x2', '\x2', 
		'\x12C6', '\x12C8', '\x3', '\x2', '\x2', '\x2', '\x12C7', '\x12C2', '\x3', 
		'\x2', '\x2', '\x2', '\x12C8', '\x12CB', '\x3', '\x2', '\x2', '\x2', '\x12C9', 
		'\x12C7', '\x3', '\x2', '\x2', '\x2', '\x12C9', '\x12CA', '\x3', '\x2', 
		'\x2', '\x2', '\x12CA', '\x12D2', '\x3', '\x2', '\x2', '\x2', '\x12CB', 
		'\x12C9', '\x3', '\x2', '\x2', '\x2', '\x12CC', '\x12CD', '\a', '\x17D', 
		'\x2', '\x2', '\x12CD', '\x12CE', '\a', '\x336', '\x2', '\x2', '\x12CE', 
		'\x12CF', '\a', '\x14C', '\x2', '\x2', '\x12CF', '\x12D0', '\a', '\x324', 
		'\x2', '\x2', '\x12D0', '\x12D1', '\t', '\t', '\x2', '\x2', '\x12D1', 
		'\x12D3', '\a', '\x337', '\x2', '\x2', '\x12D2', '\x12CC', '\x3', '\x2', 
		'\x2', '\x2', '\x12D2', '\x12D3', '\x3', '\x2', '\x2', '\x2', '\x12D3', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x12D4', '\x12D5', '\a', '\n', '\x2', 
		'\x2', '\x12D5', '\x12D6', '\a', '\x138', '\x2', '\x2', '\x12D6', '\x12D7', 
		'\a', '<', '\x2', '\x2', '\x12D7', '\x1341', '\a', '\x13E', '\x2', '\x2', 
		'\x12D8', '\x12D9', '\a', '\x105', '\x2', '\x2', '\x12D9', '\x12FD', '\a', 
		'\x18B', '\x2', '\x2', '\x12DA', '\x12DB', '\a', '\x1C5', '\x2', '\x2', 
		'\x12DB', '\x12EB', '\a', '\x324', '\x2', '\x2', '\x12DC', '\x12EC', '\a', 
		'\x19C', '\x2', '\x2', '\x12DD', '\x12DF', '\a', '\x338', '\x2', '\x2', 
		'\x12DE', '\x12DD', '\x3', '\x2', '\x2', '\x2', '\x12DE', '\x12DF', '\x3', 
		'\x2', '\x2', '\x2', '\x12DF', '\x12E0', '\x3', '\x2', '\x2', '\x2', '\x12E0', 
		'\x12E8', '\a', '\x31C', '\x2', '\x2', '\x12E1', '\x12E3', '\a', '\x338', 
		'\x2', '\x2', '\x12E2', '\x12E1', '\x3', '\x2', '\x2', '\x2', '\x12E2', 
		'\x12E3', '\x3', '\x2', '\x2', '\x2', '\x12E3', '\x12E4', '\x3', '\x2', 
		'\x2', '\x2', '\x12E4', '\x12E5', '\a', '\x31C', '\x2', '\x2', '\x12E5', 
		'\x12E6', '\a', '\x15E', '\x2', '\x2', '\x12E6', '\x12E8', '\a', '\x31C', 
		'\x2', '\x2', '\x12E7', '\x12DE', '\x3', '\x2', '\x2', '\x2', '\x12E7', 
		'\x12E2', '\x3', '\x2', '\x2', '\x2', '\x12E8', '\x12E9', '\x3', '\x2', 
		'\x2', '\x2', '\x12E9', '\x12E7', '\x3', '\x2', '\x2', '\x2', '\x12E9', 
		'\x12EA', '\x3', '\x2', '\x2', '\x2', '\x12EA', '\x12EC', '\x3', '\x2', 
		'\x2', '\x2', '\x12EB', '\x12DC', '\x3', '\x2', '\x2', '\x2', '\x12EB', 
		'\x12E7', '\x3', '\x2', '\x2', '\x2', '\x12EC', '\x12FE', '\x3', '\x2', 
		'\x2', '\x2', '\x12ED', '\x12EE', '\a', '\x270', '\x2', '\x2', '\x12EE', 
		'\x12F9', '\a', '\x324', '\x2', '\x2', '\x12EF', '\x12F1', '\a', '\x338', 
		'\x2', '\x2', '\x12F0', '\x12EF', '\x3', '\x2', '\x2', '\x2', '\x12F0', 
		'\x12F1', '\x3', '\x2', '\x2', '\x2', '\x12F1', '\x12F2', '\x3', '\x2', 
		'\x2', '\x2', '\x12F2', '\x12FA', '\a', '\x31C', '\x2', '\x2', '\x12F3', 
		'\x12F5', '\a', '\x338', '\x2', '\x2', '\x12F4', '\x12F3', '\x3', '\x2', 
		'\x2', '\x2', '\x12F4', '\x12F5', '\x3', '\x2', '\x2', '\x2', '\x12F5', 
		'\x12F6', '\x3', '\x2', '\x2', '\x2', '\x12F6', '\x12F7', '\a', '\x31C', 
		'\x2', '\x2', '\x12F7', '\x12F8', '\a', '\x15E', '\x2', '\x2', '\x12F8', 
		'\x12FA', '\a', '\x31C', '\x2', '\x2', '\x12F9', '\x12F0', '\x3', '\x2', 
		'\x2', '\x2', '\x12F9', '\x12F4', '\x3', '\x2', '\x2', '\x2', '\x12FA', 
		'\x12FB', '\x3', '\x2', '\x2', '\x2', '\x12FB', '\x12F9', '\x3', '\x2', 
		'\x2', '\x2', '\x12FB', '\x12FC', '\x3', '\x2', '\x2', '\x2', '\x12FC', 
		'\x12FE', '\x3', '\x2', '\x2', '\x2', '\x12FD', '\x12DA', '\x3', '\x2', 
		'\x2', '\x2', '\x12FD', '\x12ED', '\x3', '\x2', '\x2', '\x2', '\x12FE', 
		'\x1342', '\x3', '\x2', '\x2', '\x2', '\x12FF', '\x1300', '\a', '`', '\x2', 
		'\x2', '\x1300', '\x1310', '\a', '\xBC', '\x2', '\x2', '\x1301', '\x1311', 
		'\a', '\xE6', '\x2', '\x2', '\x1302', '\x1311', '\a', '\xE3', '\x2', '\x2', 
		'\x1303', '\x1304', '\a', '\x284', '\x2', '\x2', '\x1304', '\x1305', '\a', 
		'\x324', '\x2', '\x2', '\x1305', '\x1311', '\t', '/', '\x2', '\x2', '\x1306', 
		'\x1307', '\a', '\xC4', '\x2', '\x2', '\x1307', '\x130B', '\a', '\x324', 
		'\x2', '\x2', '\x1308', '\x1309', '\a', '\x31C', '\x2', '\x2', '\x1309', 
		'\x130C', '\a', '\x24F', '\x2', '\x2', '\x130A', '\x130C', '\a', 'Z', 
		'\x2', '\x2', '\x130B', '\x1308', '\x3', '\x2', '\x2', '\x2', '\x130B', 
		'\x130A', '\x3', '\x2', '\x2', '\x2', '\x130C', '\x1311', '\x3', '\x2', 
		'\x2', '\x2', '\x130D', '\x130E', '\a', '\x246', '\x2', '\x2', '\x130E', 
		'\x130F', '\a', '\x324', '\x2', '\x2', '\x130F', '\x1311', '\t', '\x30', 
		'\x2', '\x2', '\x1310', '\x1301', '\x3', '\x2', '\x2', '\x2', '\x1310', 
		'\x1302', '\x3', '\x2', '\x2', '\x2', '\x1310', '\x1303', '\x3', '\x2', 
		'\x2', '\x2', '\x1310', '\x1306', '\x3', '\x2', '\x2', '\x2', '\x1310', 
		'\x130D', '\x3', '\x2', '\x2', '\x2', '\x1311', '\x1342', '\x3', '\x2', 
		'\x2', '\x2', '\x1312', '\x1313', '\a', '~', '\x2', '\x2', '\x1313', '\x1314', 
		'\a', '\x34', '\x2', '\x2', '\x1314', '\x1326', '\a', '\x291', '\x2', 
		'\x2', '\x1315', '\x1316', '\a', '\x175', '\x2', '\x2', '\x1316', '\x1317', 
		'\a', '\x324', '\x2', '\x2', '\x1317', '\x1327', '\t', '/', '\x2', '\x2', 
		'\x1318', '\x1319', '\a', '\x148', '\x2', '\x2', '\x1319', '\x131A', '\a', 
		'\x324', '\x2', '\x2', '\x131A', '\x1327', '\t', '/', '\x2', '\x2', '\x131B', 
		'\x131C', '\a', '\x149', '\x2', '\x2', '\x131C', '\x131D', '\a', '\x324', 
		'\x2', '\x2', '\x131D', '\x1327', '\t', '/', '\x2', '\x2', '\x131E', '\x131F', 
		'\a', '\x14A', '\x2', '\x2', '\x131F', '\x1327', '\t', '/', '\x2', '\x2', 
		'\x1320', '\x1321', '\a', '\x7F', '\x2', '\x2', '\x1321', '\x1322', '\a', 
		'\x324', '\x2', '\x2', '\x1322', '\x1327', '\t', '/', '\x2', '\x2', '\x1323', 
		'\x1324', '\a', '\x96', '\x2', '\x2', '\x1324', '\x1325', '\a', '\x324', 
		'\x2', '\x2', '\x1325', '\x1327', '\t', '\x30', '\x2', '\x2', '\x1326', 
		'\x1315', '\x3', '\x2', '\x2', '\x2', '\x1326', '\x1318', '\x3', '\x2', 
		'\x2', '\x2', '\x1326', '\x131B', '\x3', '\x2', '\x2', '\x2', '\x1326', 
		'\x131E', '\x3', '\x2', '\x2', '\x2', '\x1326', '\x1320', '\x3', '\x2', 
		'\x2', '\x2', '\x1326', '\x1323', '\x3', '\x2', '\x2', '\x2', '\x1327', 
		'\x1342', '\x3', '\x2', '\x2', '\x2', '\x1328', '\x1329', '\a', '\x215', 
		'\x2', '\x2', '\x1329', '\x132A', '\a', '\x34', '\x2', '\x2', '\x132A', 
		'\x132B', '\a', '\x41', '\x2', '\x2', '\x132B', '\x132C', '\a', '\x324', 
		'\x2', '\x2', '\x132C', '\x1342', '\t', '\x31', '\x2', '\x2', '\x132D', 
		'\x132E', '\a', '#', '\x2', '\x2', '\x132E', '\x132F', '\a', '\x286', 
		'\x2', '\x2', '\x132F', '\x133C', '\a', '{', '\x2', '\x2', '\x1330', '\x1331', 
		'\a', '\xE6', '\x2', '\x2', '\x1331', '\x1332', '\a', '\x336', '\x2', 
		'\x2', '\x1332', '\x1333', '\a', '\x83', '\x2', '\x2', '\x1333', '\x1334', 
		'\a', '\x324', '\x2', '\x2', '\x1334', '\x1335', '\a', '\x320', '\x2', 
		'\x2', '\x1335', '\x1336', '\a', '\x338', '\x2', '\x2', '\x1336', '\x1337', 
		'\a', '\x2D7', '\x2', '\x2', '\x1337', '\x1338', '\a', '\x324', '\x2', 
		'\x2', '\x1338', '\x1339', '\a', '\x31C', '\x2', '\x2', '\x1339', '\x133A', 
		'\t', '\x32', '\x2', '\x2', '\x133A', '\x133D', '\a', '\x337', '\x2', 
		'\x2', '\x133B', '\x133D', '\a', '\xE3', '\x2', '\x2', '\x133C', '\x1330', 
		'\x3', '\x2', '\x2', '\x2', '\x133C', '\x133B', '\x3', '\x2', '\x2', '\x2', 
		'\x133D', '\x1342', '\x3', '\x2', '\x2', '\x2', '\x133E', '\x133F', '\a', 
		'\x13E', '\x2', '\x2', '\x133F', '\x1340', '\a', '\x143', '\x2', '\x2', 
		'\x1340', '\x1342', '\t', '\t', '\x2', '\x2', '\x1341', '\x12D8', '\x3', 
		'\x2', '\x2', '\x2', '\x1341', '\x12FF', '\x3', '\x2', '\x2', '\x2', '\x1341', 
		'\x1312', '\x3', '\x2', '\x2', '\x2', '\x1341', '\x1328', '\x3', '\x2', 
		'\x2', '\x2', '\x1341', '\x132D', '\x3', '\x2', '\x2', '\x2', '\x1341', 
		'\x133E', '\x3', '\x2', '\x2', '\x2', '\x1342', '\x17D', '\x3', '\x2', 
		'\x2', '\x2', '\x1343', '\x1344', '\a', '\n', '\x2', '\x2', '\x1344', 
		'\x1345', '\a', '\x138', '\x2', '\x2', '\x1345', '\x1346', '\a', '\x122', 
		'\x2', '\x2', '\x1346', '\x134E', '\x5', '\x3BA', '\x1DE', '\x2', '\x1347', 
		'\x1348', '\t', '\x15', '\x2', '\x2', '\x1348', '\x1349', '\a', '\xC8', 
		'\x2', '\x2', '\x1349', '\x134F', '\x5', '\x3BA', '\x1DE', '\x2', '\x134A', 
		'\x134B', '\a', '\x17D', '\x2', '\x2', '\x134B', '\x134C', '\a', '\x25F', 
		'\x2', '\x2', '\x134C', '\x134D', '\a', '\x324', '\x2', '\x2', '\x134D', 
		'\x134F', '\x5', '\x3BA', '\x1DE', '\x2', '\x134E', '\x1347', '\x3', '\x2', 
		'\x2', '\x2', '\x134E', '\x134A', '\x3', '\x2', '\x2', '\x2', '\x134F', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x1350', '\x1351', '\a', 'I', '\x2', 
		'\x2', '\x1351', '\x1352', '\a', '\x138', '\x2', '\x2', '\x1352', '\x1353', 
		'\a', '\x122', '\x2', '\x2', '\x1353', '\x1356', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1354', '\x1355', '\a', '\x14', '\x2', '\x2', '\x1355', '\x1357', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x1356', '\x1354', '\x3', '\x2', '\x2', 
		'\x2', '\x1356', '\x1357', '\x3', '\x2', '\x2', '\x2', '\x1357', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x1358', '\x1359', '\a', '\n', '\x2', '\x2', 
		'\x1359', '\x135A', '\a', '\x138', '\x2', '\x2', '\x135A', '\x135B', '\a', 
		'\x122', '\x2', '\x2', '\x135B', '\x135C', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x135C', '\x135D', '\t', '\x15', '\x2', '\x2', '\x135D', '\x135E', '\a', 
		'\xC8', '\x2', '\x2', '\x135E', '\x135F', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x135F', '\x183', '\x3', '\x2', '\x2', '\x2', '\x1360', '\x1361', '\a', 
		'\n', '\x2', '\x2', '\x1361', '\x1362', '\a', '\x139', '\x2', '\x2', '\x1362', 
		'\x136A', '\x5', '\x3BA', '\x1DE', '\x2', '\x1363', '\x1364', '\a', '\xE6', 
		'\x2', '\x2', '\x1364', '\x1365', '\a', '\x295', '\x2', '\x2', '\x1365', 
		'\x1366', '\x5', '\x3BA', '\x1DE', '\x2', '\x1366', '\x1367', '\a', '\x331', 
		'\x2', '\x2', '\x1367', '\x1368', '\x3', '\x2', '\x2', '\x2', '\x1368', 
		'\x1369', '\x5', '\x3BA', '\x1DE', '\x2', '\x1369', '\x136B', '\x3', '\x2', 
		'\x2', '\x2', '\x136A', '\x1363', '\x3', '\x2', '\x2', '\x2', '\x136A', 
		'\x136B', '\x3', '\x2', '\x2', '\x2', '\x136B', '\x1373', '\x3', '\x2', 
		'\x2', '\x2', '\x136C', '\x136E', '\a', '\x338', '\x2', '\x2', '\x136D', 
		'\x136C', '\x3', '\x2', '\x2', '\x2', '\x136D', '\x136E', '\x3', '\x2', 
		'\x2', '\x2', '\x136E', '\x136F', '\x3', '\x2', '\x2', '\x2', '\x136F', 
		'\x1370', '\t', '\x15', '\x2', '\x2', '\x1370', '\x1372', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1371', '\x136D', '\x3', '\x2', '\x2', '\x2', '\x1372', 
		'\x1375', '\x3', '\x2', '\x2', '\x2', '\x1373', '\x1371', '\x3', '\x2', 
		'\x2', '\x2', '\x1373', '\x1374', '\x3', '\x2', '\x2', '\x2', '\x1374', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x1375', '\x1373', '\x3', '\x2', 
		'\x2', '\x2', '\x1376', '\x1377', '\a', 'I', '\x2', '\x2', '\x1377', '\x1378', 
		'\a', '\x139', '\x2', '\x2', '\x1378', '\x137B', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1379', '\x137A', '\a', '\x14', '\x2', '\x2', '\x137A', '\x137C', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x137B', '\x1379', '\x3', '\x2', '\x2', 
		'\x2', '\x137B', '\x137C', '\x3', '\x2', '\x2', '\x2', '\x137C', '\x137D', 
		'\x3', '\x2', '\x2', '\x2', '\x137D', '\x137E', '\a', '\xE6', '\x2', '\x2', 
		'\x137E', '\x1382', '\a', '\x295', '\x2', '\x2', '\x137F', '\x1380', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x1380', '\x1381', '\a', '\x331', '\x2', '\x2', 
		'\x1381', '\x1383', '\x3', '\x2', '\x2', '\x2', '\x1382', '\x137F', '\x3', 
		'\x2', '\x2', '\x2', '\x1382', '\x1383', '\x3', '\x2', '\x2', '\x2', '\x1383', 
		'\x1384', '\x3', '\x2', '\x2', '\x2', '\x1384', '\x1392', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1385', '\x138D', '\a', '\x336', '\x2', '\x2', '\x1386', 
		'\x1388', '\a', '\x338', '\x2', '\x2', '\x1387', '\x1386', '\x3', '\x2', 
		'\x2', '\x2', '\x1387', '\x1388', '\x3', '\x2', '\x2', '\x2', '\x1388', 
		'\x138B', '\x3', '\x2', '\x2', '\x2', '\x1389', '\x138C', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x138A', '\x138C', '\a', 'Z', '\x2', '\x2', '\x138B', 
		'\x1389', '\x3', '\x2', '\x2', '\x2', '\x138B', '\x138A', '\x3', '\x2', 
		'\x2', '\x2', '\x138C', '\x138E', '\x3', '\x2', '\x2', '\x2', '\x138D', 
		'\x1387', '\x3', '\x2', '\x2', '\x2', '\x138E', '\x138F', '\x3', '\x2', 
		'\x2', '\x2', '\x138F', '\x138D', '\x3', '\x2', '\x2', '\x2', '\x138F', 
		'\x1390', '\x3', '\x2', '\x2', '\x2', '\x1390', '\x1391', '\x3', '\x2', 
		'\x2', '\x2', '\x1391', '\x1393', '\a', '\x337', '\x2', '\x2', '\x1392', 
		'\x1385', '\x3', '\x2', '\x2', '\x2', '\x1392', '\x1393', '\x3', '\x2', 
		'\x2', '\x2', '\x1393', '\x187', '\x3', '\x2', '\x2', '\x2', '\x1394', 
		'\x1395', '\a', '\n', '\x2', '\x2', '\x1395', '\x1396', '\a', '\x139', 
		'\x2', '\x2', '\x1396', '\x1397', '\a', '\xBE', '\x2', '\x2', '\x1397', 
		'\x13AD', '\a', '\xAD', '\x2', '\x2', '\x1398', '\x139A', '\a', '\x206', 
		'\x2', '\x2', '\x1399', '\x1398', '\x3', '\x2', '\x2', '\x2', '\x1399', 
		'\x139A', '\x3', '\x2', '\x2', '\x2', '\x139A', '\x139B', '\x3', '\x2', 
		'\x2', '\x2', '\x139B', '\x13AE', '\a', '\x110', '\x2', '\x2', '\x139C', 
		'\x13AB', '\a', '\x17D', '\x2', '\x2', '\x139D', '\x139E', '\a', '\x276', 
		'\x2', '\x2', '\x139E', '\x139F', '\a', '\x324', '\x2', '\x2', '\x139F', 
		'\x13A0', '\a', '\x320', '\x2', '\x2', '\x13A0', '\x13A1', '\a', '\x338', 
		'\x2', '\x2', '\x13A1', '\x13A2', '\a', '\xE5', '\x2', '\x2', '\x13A2', 
		'\x13A3', '\a', '\x324', '\x2', '\x2', '\x13A3', '\x13AC', '\a', '\x320', 
		'\x2', '\x2', '\x13A4', '\x13A5', '\a', '\x261', '\x2', '\x2', '\x13A5', 
		'\x13A6', '\a', '\x324', '\x2', '\x2', '\x13A6', '\x13A7', '\a', '\x320', 
		'\x2', '\x2', '\x13A7', '\x13A8', '\a', '\x338', '\x2', '\x2', '\x13A8', 
		'\x13A9', '\a', '\x263', '\x2', '\x2', '\x13A9', '\x13AA', '\a', '\x324', 
		'\x2', '\x2', '\x13AA', '\x13AC', '\a', '\x320', '\x2', '\x2', '\x13AB', 
		'\x139D', '\x3', '\x2', '\x2', '\x2', '\x13AB', '\x13A4', '\x3', '\x2', 
		'\x2', '\x2', '\x13AB', '\x13AC', '\x3', '\x2', '\x2', '\x2', '\x13AC', 
		'\x13AE', '\x3', '\x2', '\x2', '\x2', '\x13AD', '\x1399', '\x3', '\x2', 
		'\x2', '\x2', '\x13AD', '\x139C', '\x3', '\x2', '\x2', '\x2', '\x13AE', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x13AF', '\x13B0', '\a', '\n', '\x2', 
		'\x2', '\x13B0', '\x13B1', '\a', '\x2E7', '\x2', '\x2', '\x13B1', '\x13B2', 
		'\a', '\xAD', '\x2', '\x2', '\x13B2', '\x13B3', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x13B3', '\x13B4', '\t', '\x15', '\x2', '\x2', '\x13B4', '\x13B5', 
		'\a', '\x1EF', '\x2', '\x2', '\x13B5', '\x13C1', '\a', '&', '\x2', '\x2', 
		'\x13B6', '\x13B7', '\a', '+', '\x2', '\x2', '\x13B7', '\x13C2', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x13B8', '\x13B9', '\a', '\xF5', '\x2', '\x2', 
		'\x13B9', '\x13BA', '\a', '\x324', '\x2', '\x2', '\x13BA', '\x13C2', '\a', 
		'\x320', '\x2', '\x2', '\x13BB', '\x13BC', '\a', '\x2E7', '\x2', '\x2', 
		'\x13BC', '\x13BD', '\a', '\xAD', '\x2', '\x2', '\x13BD', '\x13C2', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x13BE', '\x13BF', '\a', '\x12', '\x2', '\x2', 
		'\x13BF', '\x13C0', '\a', '\xAD', '\x2', '\x2', '\x13C0', '\x13C2', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x13C1', '\x13B6', '\x3', '\x2', '\x2', '\x2', 
		'\x13C1', '\x13B8', '\x3', '\x2', '\x2', '\x2', '\x13C1', '\x13BB', '\x3', 
		'\x2', '\x2', '\x2', '\x13C1', '\x13BE', '\x3', '\x2', '\x2', '\x2', '\x13C2', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x13C3', '\x13C4', '\a', '\n', '\x2', 
		'\x2', '\x13C4', '\x13C5', '\a', '\x2E7', '\x2', '\x2', '\x13C5', '\x13C6', 
		'\a', '\xAD', '\x2', '\x2', '\x13C6', '\x13C9', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x13C7', '\x13C8', '\a', '\x14', '\x2', '\x2', '\x13C8', '\x13CA', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x13C9', '\x13C7', '\x3', '\x2', '\x2', 
		'\x2', '\x13C9', '\x13CA', '\x3', '\x2', '\x2', '\x2', '\x13CA', '\x13CE', 
		'\x3', '\x2', '\x2', '\x2', '\x13CB', '\x13CC', '\a', '\x8C', '\x2', '\x2', 
		'\x13CC', '\x13CD', '\a', '\x292', '\x2', '\x2', '\x13CD', '\x13CF', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x13CE', '\x13CB', '\x3', '\x2', '\x2', '\x2', 
		'\x13CE', '\x13CF', '\x3', '\x2', '\x2', '\x2', '\x13CF', '\x13D0', '\x3', 
		'\x2', '\x2', '\x2', '\x13D0', '\x13F1', '\a', '\x17D', '\x2', '\x2', 
		'\x13D1', '\x13D2', '\a', '\x22D', '\x2', '\x2', '\x13D2', '\x13D3', '\a', 
		'\x324', '\x2', '\x2', '\x13D3', '\x13E1', '\a', '\x320', '\x2', '\x2', 
		'\x13D4', '\x13D5', '\a', '\x18E', '\x2', '\x2', '\x13D5', '\x13D6', '\a', 
		'\x324', '\x2', '\x2', '\x13D6', '\x13E1', '\t', '\x33', '\x2', '\x2', 
		'\x13D7', '\x13D8', '\a', '\x21B', '\x2', '\x2', '\x13D8', '\x13D9', '\a', 
		'\x324', '\x2', '\x2', '\x13D9', '\x13E1', '\a', '\x320', '\x2', '\x2', 
		'\x13DA', '\x13DB', '\a', '\x293', '\x2', '\x2', '\x13DB', '\x13DC', '\a', 
		'\x324', '\x2', '\x2', '\x13DC', '\x13E1', '\a', '\x320', '\x2', '\x2', 
		'\x13DD', '\x13DE', '\a', '\x1C7', '\x2', '\x2', '\x13DE', '\x13DF', '\a', 
		'\x324', '\x2', '\x2', '\x13DF', '\x13E1', '\t', '\f', '\x2', '\x2', '\x13E0', 
		'\x13D1', '\x3', '\x2', '\x2', '\x2', '\x13E0', '\x13D4', '\x3', '\x2', 
		'\x2', '\x2', '\x13E0', '\x13D7', '\x3', '\x2', '\x2', '\x2', '\x13E0', 
		'\x13DA', '\x3', '\x2', '\x2', '\x2', '\x13E0', '\x13DD', '\x3', '\x2', 
		'\x2', '\x2', '\x13E1', '\x13F2', '\x3', '\x2', '\x2', '\x2', '\x13E2', 
		'\x13E3', '\a', '\x1EF', '\x2', '\x2', '\x13E3', '\x13EF', '\a', '&', 
		'\x2', '\x2', '\x13E4', '\x13E5', '\a', '+', '\x2', '\x2', '\x13E5', '\x13F0', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x13E6', '\x13E7', '\a', '\xF5', '\x2', 
		'\x2', '\x13E7', '\x13E8', '\a', '\x324', '\x2', '\x2', '\x13E8', '\x13F0', 
		'\a', '\x320', '\x2', '\x2', '\x13E9', '\x13EA', '\a', '\x2E7', '\x2', 
		'\x2', '\x13EA', '\x13EB', '\a', '\xAD', '\x2', '\x2', '\x13EB', '\x13F0', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x13EC', '\x13ED', '\a', '\x12', '\x2', 
		'\x2', '\x13ED', '\x13EE', '\a', '\xAD', '\x2', '\x2', '\x13EE', '\x13F0', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x13EF', '\x13E4', '\x3', '\x2', '\x2', 
		'\x2', '\x13EF', '\x13E6', '\x3', '\x2', '\x2', '\x2', '\x13EF', '\x13E9', 
		'\x3', '\x2', '\x2', '\x2', '\x13EF', '\x13EC', '\x3', '\x2', '\x2', '\x2', 
		'\x13F0', '\x13F2', '\x3', '\x2', '\x2', '\x2', '\x13F1', '\x13E0', '\x3', 
		'\x2', '\x2', '\x2', '\x13F1', '\x13E2', '\x3', '\x2', '\x2', '\x2', '\x13F2', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x13F3', '\x13F4', '\a', 'I', '\x2', 
		'\x2', '\x13F4', '\x13F8', '\a', '\x2E9', '\x2', '\x2', '\x13F5', '\x13F6', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x13F6', '\x13F7', '\a', '\x331', '\x2', 
		'\x2', '\x13F7', '\x13F9', '\x3', '\x2', '\x2', '\x2', '\x13F8', '\x13F5', 
		'\x3', '\x2', '\x2', '\x2', '\x13F8', '\x13F9', '\x3', '\x2', '\x2', '\x2', 
		'\x13F9', '\x13FA', '\x3', '\x2', '\x2', '\x2', '\x13FA', '\x13FB', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x13FB', '\x1416', '\a', '\x86', '\x2', '\x2', 
		'\x13FC', '\x13FD', '\x5', '\x3BA', '\x1DE', '\x2', '\x13FD', '\x13FE', 
		'\a', '\x331', '\x2', '\x2', '\x13FE', '\x1400', '\x3', '\x2', '\x2', 
		'\x2', '\x13FF', '\x13FC', '\x3', '\x2', '\x2', '\x2', '\x13FF', '\x1400', 
		'\x3', '\x2', '\x2', '\x2', '\x1400', '\x1404', '\x3', '\x2', '\x2', '\x2', 
		'\x1401', '\x1402', '\x5', '\x3BA', '\x1DE', '\x2', '\x1402', '\x1403', 
		'\a', '\x331', '\x2', '\x2', '\x1403', '\x1405', '\x3', '\x2', '\x2', 
		'\x2', '\x1404', '\x1401', '\x3', '\x2', '\x2', '\x2', '\x1404', '\x1405', 
		'\x3', '\x2', '\x2', '\x2', '\x1405', '\x1409', '\x3', '\x2', '\x2', '\x2', 
		'\x1406', '\x1407', '\x5', '\x3BA', '\x1DE', '\x2', '\x1407', '\x1408', 
		'\a', '\x331', '\x2', '\x2', '\x1408', '\x140A', '\x3', '\x2', '\x2', 
		'\x2', '\x1409', '\x1406', '\x3', '\x2', '\x2', '\x2', '\x1409', '\x140A', 
		'\x3', '\x2', '\x2', '\x2', '\x140A', '\x140B', '\x3', '\x2', '\x2', '\x2', 
		'\x140B', '\x1417', '\x5', '\x3BA', '\x1DE', '\x2', '\x140C', '\x140D', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x140D', '\x140E', '\a', '\x331', '\x2', 
		'\x2', '\x140E', '\x1410', '\x3', '\x2', '\x2', '\x2', '\x140F', '\x140C', 
		'\x3', '\x2', '\x2', '\x2', '\x140F', '\x1410', '\x3', '\x2', '\x2', '\x2', 
		'\x1410', '\x1414', '\x3', '\x2', '\x2', '\x2', '\x1411', '\x1412', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x1412', '\x1413', '\a', '\x331', '\x2', '\x2', 
		'\x1413', '\x1415', '\x3', '\x2', '\x2', '\x2', '\x1414', '\x1411', '\x3', 
		'\x2', '\x2', '\x2', '\x1414', '\x1415', '\x3', '\x2', '\x2', '\x2', '\x1415', 
		'\x1417', '\x3', '\x2', '\x2', '\x2', '\x1416', '\x13FF', '\x3', '\x2', 
		'\x2', '\x2', '\x1416', '\x140F', '\x3', '\x2', '\x2', '\x2', '\x1417', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x1418', '\x1419', '\a', '\n', '\x2', 
		'\x2', '\x1419', '\x141A', '\a', '\x172', '\x2', '\x2', '\x141A', '\x141B', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x141B', '\x144E', '\a', '\x17D', '\x2', 
		'\x2', '\x141C', '\x141E', '\a', '\x338', '\x2', '\x2', '\x141D', '\x141C', 
		'\x3', '\x2', '\x2', '\x2', '\x141D', '\x141E', '\x3', '\x2', '\x2', '\x2', 
		'\x141E', '\x141F', '\x3', '\x2', '\x2', '\x2', '\x141F', '\x1420', '\a', 
		'\x25F', '\x2', '\x2', '\x1420', '\x1421', '\a', '\x324', '\x2', '\x2', 
		'\x1421', '\x144F', '\x5', '\x3BA', '\x1DE', '\x2', '\x1422', '\x1424', 
		'\a', '\x338', '\x2', '\x2', '\x1423', '\x1422', '\x3', '\x2', '\x2', 
		'\x2', '\x1423', '\x1424', '\x3', '\x2', '\x2', '\x2', '\x1424', '\x1425', 
		'\x3', '\x2', '\x2', '\x2', '\x1425', '\x1426', '\a', '\\', '\x2', '\x2', 
		'\x1426', '\x1429', '\a', '\x324', '\x2', '\x2', '\x1427', '\x142A', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x1428', '\x142A', '\a', '\xE0', '\x2', '\x2', 
		'\x1429', '\x1427', '\x3', '\x2', '\x2', '\x2', '\x1429', '\x1428', '\x3', 
		'\x2', '\x2', '\x2', '\x142A', '\x144F', '\x3', '\x2', '\x2', '\x2', '\x142B', 
		'\x142D', '\a', '\x338', '\x2', '\x2', '\x142C', '\x142B', '\x3', '\x2', 
		'\x2', '\x2', '\x142C', '\x142D', '\x3', '\x2', '\x2', '\x2', '\x142D', 
		'\x142E', '\x3', '\x2', '\x2', '\x2', '\x142E', '\x142F', '\a', '\x23D', 
		'\x2', '\x2', '\x142F', '\x1430', '\a', '\x324', '\x2', '\x2', '\x1430', 
		'\x144F', '\x5', '\x3BA', '\x1DE', '\x2', '\x1431', '\x1433', '\a', '\x338', 
		'\x2', '\x2', '\x1432', '\x1431', '\x3', '\x2', '\x2', '\x2', '\x1432', 
		'\x1433', '\x3', '\x2', '\x2', '\x2', '\x1433', '\x1434', '\x3', '\x2', 
		'\x2', '\x2', '\x1434', '\x1435', '\a', '\xF5', '\x2', '\x2', '\x1435', 
		'\x1436', '\a', '\x324', '\x2', '\x2', '\x1436', '\x143A', '\a', '\x320', 
		'\x2', '\x2', '\x1437', '\x1438', '\a', '\xE5', '\x2', '\x2', '\x1438', 
		'\x1439', '\a', '\x324', '\x2', '\x2', '\x1439', '\x143B', '\a', '\x320', 
		'\x2', '\x2', '\x143A', '\x1437', '\x3', '\x2', '\x2', '\x2', '\x143B', 
		'\x143C', '\x3', '\x2', '\x2', '\x2', '\x143C', '\x143A', '\x3', '\x2', 
		'\x2', '\x2', '\x143C', '\x143D', '\x3', '\x2', '\x2', '\x2', '\x143D', 
		'\x144F', '\x3', '\x2', '\x2', '\x2', '\x143E', '\x1440', '\a', '\x338', 
		'\x2', '\x2', '\x143F', '\x143E', '\x3', '\x2', '\x2', '\x2', '\x143F', 
		'\x1440', '\x3', '\x2', '\x2', '\x2', '\x1440', '\x1441', '\x3', '\x2', 
		'\x2', '\x2', '\x1441', '\x1442', '\a', '\x1D7', '\x2', '\x2', '\x1442', 
		'\x1446', '\a', '\x324', '\x2', '\x2', '\x1443', '\x1447', '\a', '\xD6', 
		'\x2', '\x2', '\x1444', '\x1447', '\a', '\x31C', '\x2', '\x2', '\x1445', 
		'\x1447', '\x5', '\x3BA', '\x1DE', '\x2', '\x1446', '\x1443', '\x3', '\x2', 
		'\x2', '\x2', '\x1446', '\x1444', '\x3', '\x2', '\x2', '\x2', '\x1446', 
		'\x1445', '\x3', '\x2', '\x2', '\x2', '\x1447', '\x144F', '\x3', '\x2', 
		'\x2', '\x2', '\x1448', '\x144A', '\a', '\x338', '\x2', '\x2', '\x1449', 
		'\x1448', '\x3', '\x2', '\x2', '\x2', '\x1449', '\x144A', '\x3', '\x2', 
		'\x2', '\x2', '\x144A', '\x144B', '\x3', '\x2', '\x2', '\x2', '\x144B', 
		'\x144C', '\a', '\x18F', '\x2', '\x2', '\x144C', '\x144D', '\a', '\x324', 
		'\x2', '\x2', '\x144D', '\x144F', '\t', '\t', '\x2', '\x2', '\x144E', 
		'\x141D', '\x3', '\x2', '\x2', '\x2', '\x144E', '\x1423', '\x3', '\x2', 
		'\x2', '\x2', '\x144E', '\x142C', '\x3', '\x2', '\x2', '\x2', '\x144E', 
		'\x1432', '\x3', '\x2', '\x2', '\x2', '\x144E', '\x143F', '\x3', '\x2', 
		'\x2', '\x2', '\x144E', '\x1449', '\x3', '\x2', '\x2', '\x2', '\x144F', 
		'\x1450', '\x3', '\x2', '\x2', '\x2', '\x1450', '\x144E', '\x3', '\x2', 
		'\x2', '\x2', '\x1450', '\x1451', '\x3', '\x2', '\x2', '\x2', '\x1451', 
		'\x191', '\x3', '\x2', '\x2', '\x2', '\x1452', '\x1453', '\a', 'I', '\x2', 
		'\x2', '\x1453', '\x1454', '\a', '\x172', '\x2', '\x2', '\x1454', '\x1458', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x1455', '\x1456', '\t', '\x34', '\x2', 
		'\x2', '\x1456', '\x1457', '\a', '\x23D', '\x2', '\x2', '\x1457', '\x1459', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x1458', '\x1455', '\x3', '\x2', '\x2', 
		'\x2', '\x1458', '\x1459', '\x3', '\x2', '\x2', '\x2', '\x1459', '\x146C', 
		'\x3', '\x2', '\x2', '\x2', '\x145A', '\x1469', '\a', '\x17D', '\x2', 
		'\x2', '\x145B', '\x145D', '\a', '\x338', '\x2', '\x2', '\x145C', '\x145B', 
		'\x3', '\x2', '\x2', '\x2', '\x145C', '\x145D', '\x3', '\x2', '\x2', '\x2', 
		'\x145D', '\x145E', '\x3', '\x2', '\x2', '\x2', '\x145E', '\x145F', '\a', 
		'\\', '\x2', '\x2', '\x145F', '\x1460', '\a', '\x324', '\x2', '\x2', '\x1460', 
		'\x1468', '\x5', '\x3BA', '\x1DE', '\x2', '\x1461', '\x1463', '\a', '\x338', 
		'\x2', '\x2', '\x1462', '\x1461', '\x3', '\x2', '\x2', '\x2', '\x1462', 
		'\x1463', '\x3', '\x2', '\x2', '\x2', '\x1463', '\x1464', '\x3', '\x2', 
		'\x2', '\x2', '\x1464', '\x1465', '\a', '\x18F', '\x2', '\x2', '\x1465', 
		'\x1466', '\a', '\x324', '\x2', '\x2', '\x1466', '\x1468', '\t', '\t', 
		'\x2', '\x2', '\x1467', '\x145C', '\x3', '\x2', '\x2', '\x2', '\x1467', 
		'\x1462', '\x3', '\x2', '\x2', '\x2', '\x1468', '\x146B', '\x3', '\x2', 
		'\x2', '\x2', '\x1469', '\x1467', '\x3', '\x2', '\x2', '\x2', '\x1469', 
		'\x146A', '\x3', '\x2', '\x2', '\x2', '\x146A', '\x146D', '\x3', '\x2', 
		'\x2', '\x2', '\x146B', '\x1469', '\x3', '\x2', '\x2', '\x2', '\x146C', 
		'\x145A', '\x3', '\x2', '\x2', '\x2', '\x146C', '\x146D', '\x3', '\x2', 
		'\x2', '\x2', '\x146D', '\x14E5', '\x3', '\x2', '\x2', '\x2', '\x146E', 
		'\x146F', '\a', 'I', '\x2', '\x2', '\x146F', '\x14C0', '\a', '\x172', 
		'\x2', '\x2', '\x1470', '\x1493', '\x5', '\x3BA', '\x1DE', '\x2', '\x1471', 
		'\x1490', '\a', '\x17D', '\x2', '\x2', '\x1472', '\x1474', '\a', '\x338', 
		'\x2', '\x2', '\x1473', '\x1472', '\x3', '\x2', '\x2', '\x2', '\x1473', 
		'\x1474', '\x3', '\x2', '\x2', '\x2', '\x1474', '\x1475', '\x3', '\x2', 
		'\x2', '\x2', '\x1475', '\x1476', '\a', '\\', '\x2', '\x2', '\x1476', 
		'\x1477', '\a', '\x324', '\x2', '\x2', '\x1477', '\x148F', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1478', '\x147A', '\a', '\x338', '\x2', '\x2', '\x1479', 
		'\x1478', '\x3', '\x2', '\x2', '\x2', '\x1479', '\x147A', '\x3', '\x2', 
		'\x2', '\x2', '\x147A', '\x147B', '\x3', '\x2', '\x2', '\x2', '\x147B', 
		'\x147C', '\a', '\x1D7', '\x2', '\x2', '\x147C', '\x1480', '\a', '\x324', 
		'\x2', '\x2', '\x147D', '\x1481', '\a', '\xD6', '\x2', '\x2', '\x147E', 
		'\x1481', '\a', '\x31C', '\x2', '\x2', '\x147F', '\x1481', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1480', '\x147D', '\x3', '\x2', '\x2', '\x2', '\x1480', 
		'\x147E', '\x3', '\x2', '\x2', '\x2', '\x1480', '\x147F', '\x3', '\x2', 
		'\x2', '\x2', '\x1481', '\x148F', '\x3', '\x2', '\x2', '\x2', '\x1482', 
		'\x1484', '\a', '\x338', '\x2', '\x2', '\x1483', '\x1482', '\x3', '\x2', 
		'\x2', '\x2', '\x1483', '\x1484', '\x3', '\x2', '\x2', '\x2', '\x1484', 
		'\x1485', '\x3', '\x2', '\x2', '\x2', '\x1485', '\x1486', '\a', '\x141', 
		'\x2', '\x2', '\x1486', '\x1487', '\a', '\x324', '\x2', '\x2', '\x1487', 
		'\x148F', '\a', '\x321', '\x2', '\x2', '\x1488', '\x148A', '\a', '\x338', 
		'\x2', '\x2', '\x1489', '\x1488', '\x3', '\x2', '\x2', '\x2', '\x1489', 
		'\x148A', '\x3', '\x2', '\x2', '\x2', '\x148A', '\x148B', '\x3', '\x2', 
		'\x2', '\x2', '\x148B', '\x148C', '\a', '\x18F', '\x2', '\x2', '\x148C', 
		'\x148D', '\a', '\x324', '\x2', '\x2', '\x148D', '\x148F', '\t', '\t', 
		'\x2', '\x2', '\x148E', '\x1473', '\x3', '\x2', '\x2', '\x2', '\x148E', 
		'\x1479', '\x3', '\x2', '\x2', '\x2', '\x148E', '\x1483', '\x3', '\x2', 
		'\x2', '\x2', '\x148E', '\x1489', '\x3', '\x2', '\x2', '\x2', '\x148F', 
		'\x1492', '\x3', '\x2', '\x2', '\x2', '\x1490', '\x148E', '\x3', '\x2', 
		'\x2', '\x2', '\x1490', '\x1491', '\x3', '\x2', '\x2', '\x2', '\x1491', 
		'\x1494', '\x3', '\x2', '\x2', '\x2', '\x1492', '\x1490', '\x3', '\x2', 
		'\x2', '\x2', '\x1493', '\x1471', '\x3', '\x2', '\x2', '\x2', '\x1493', 
		'\x1494', '\x3', '\x2', '\x2', '\x2', '\x1494', '\x14C1', '\x3', '\x2', 
		'\x2', '\x2', '\x1495', '\x1496', '\x5', '\x3BA', '\x1DE', '\x2', '\x1496', 
		'\x1497', '\a', '\x17D', '\x2', '\x2', '\x1497', '\x1498', '\a', '\xF5', 
		'\x2', '\x2', '\x1498', '\x1499', '\a', '\x324', '\x2', '\x2', '\x1499', 
		'\x14B8', '\a', '\x320', '\x2', '\x2', '\x149A', '\x149C', '\a', '\x338', 
		'\x2', '\x2', '\x149B', '\x149A', '\x3', '\x2', '\x2', '\x2', '\x149B', 
		'\x149C', '\x3', '\x2', '\x2', '\x2', '\x149C', '\x149D', '\x3', '\x2', 
		'\x2', '\x2', '\x149D', '\x149E', '\a', '\\', '\x2', '\x2', '\x149E', 
		'\x149F', '\a', '\x324', '\x2', '\x2', '\x149F', '\x14B7', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x14A0', '\x14A2', '\a', '\x338', '\x2', '\x2', '\x14A1', 
		'\x14A0', '\x3', '\x2', '\x2', '\x2', '\x14A1', '\x14A2', '\x3', '\x2', 
		'\x2', '\x2', '\x14A2', '\x14A3', '\x3', '\x2', '\x2', '\x2', '\x14A3', 
		'\x14A4', '\a', '\x1D7', '\x2', '\x2', '\x14A4', '\x14A8', '\a', '\x324', 
		'\x2', '\x2', '\x14A5', '\x14A9', '\a', '\xD6', '\x2', '\x2', '\x14A6', 
		'\x14A9', '\a', '\x31C', '\x2', '\x2', '\x14A7', '\x14A9', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x14A8', '\x14A5', '\x3', '\x2', '\x2', '\x2', '\x14A8', 
		'\x14A6', '\x3', '\x2', '\x2', '\x2', '\x14A8', '\x14A7', '\x3', '\x2', 
		'\x2', '\x2', '\x14A9', '\x14B7', '\x3', '\x2', '\x2', '\x2', '\x14AA', 
		'\x14AC', '\a', '\x338', '\x2', '\x2', '\x14AB', '\x14AA', '\x3', '\x2', 
		'\x2', '\x2', '\x14AB', '\x14AC', '\x3', '\x2', '\x2', '\x2', '\x14AC', 
		'\x14AD', '\x3', '\x2', '\x2', '\x2', '\x14AD', '\x14AE', '\a', '\x141', 
		'\x2', '\x2', '\x14AE', '\x14AF', '\a', '\x324', '\x2', '\x2', '\x14AF', 
		'\x14B7', '\a', '\x321', '\x2', '\x2', '\x14B0', '\x14B2', '\a', '\x338', 
		'\x2', '\x2', '\x14B1', '\x14B0', '\x3', '\x2', '\x2', '\x2', '\x14B1', 
		'\x14B2', '\x3', '\x2', '\x2', '\x2', '\x14B2', '\x14B3', '\x3', '\x2', 
		'\x2', '\x2', '\x14B3', '\x14B4', '\a', '\x18F', '\x2', '\x2', '\x14B4', 
		'\x14B5', '\a', '\x324', '\x2', '\x2', '\x14B5', '\x14B7', '\t', '\t', 
		'\x2', '\x2', '\x14B6', '\x149B', '\x3', '\x2', '\x2', '\x2', '\x14B6', 
		'\x14A1', '\x3', '\x2', '\x2', '\x2', '\x14B6', '\x14AB', '\x3', '\x2', 
		'\x2', '\x2', '\x14B6', '\x14B1', '\x3', '\x2', '\x2', '\x2', '\x14B7', 
		'\x14BA', '\x3', '\x2', '\x2', '\x2', '\x14B8', '\x14B6', '\x3', '\x2', 
		'\x2', '\x2', '\x14B8', '\x14B9', '\x3', '\x2', '\x2', '\x2', '\x14B9', 
		'\x14C1', '\x3', '\x2', '\x2', '\x2', '\x14BA', '\x14B8', '\x3', '\x2', 
		'\x2', '\x2', '\x14BB', '\x14BC', '\x5', '\x3BA', '\x1DE', '\x2', '\x14BC', 
		'\x14BD', '\a', '\x8C', '\x2', '\x2', '\x14BD', '\x14BE', '\a', '|', '\x2', 
		'\x2', '\x14BE', '\x14BF', '\a', '\x292', '\x2', '\x2', '\x14BF', '\x14C1', 
		'\x3', '\x2', '\x2', '\x2', '\x14C0', '\x1470', '\x3', '\x2', '\x2', '\x2', 
		'\x14C0', '\x1495', '\x3', '\x2', '\x2', '\x2', '\x14C0', '\x14BB', '\x3', 
		'\x2', '\x2', '\x2', '\x14C1', '\x14E5', '\x3', '\x2', '\x2', '\x2', '\x14C2', 
		'\x14C3', '\a', 'I', '\x2', '\x2', '\x14C3', '\x14C4', '\a', '\x172', 
		'\x2', '\x2', '\x14C4', '\x14DF', '\x5', '\x3BA', '\x1DE', '\x2', '\x14C5', 
		'\x14C6', '\a', '\x17F', '\x2', '\x2', '\x14C6', '\x14D5', '\a', '\x23D', 
		'\x2', '\x2', '\x14C7', '\x14C9', '\a', '\x338', '\x2', '\x2', '\x14C8', 
		'\x14C7', '\x3', '\x2', '\x2', '\x2', '\x14C8', '\x14C9', '\x3', '\x2', 
		'\x2', '\x2', '\x14C9', '\x14CA', '\x3', '\x2', '\x2', '\x2', '\x14CA', 
		'\x14CB', '\a', '\\', '\x2', '\x2', '\x14CB', '\x14CC', '\a', '\x324', 
		'\x2', '\x2', '\x14CC', '\x14D4', '\x5', '\x3BA', '\x1DE', '\x2', '\x14CD', 
		'\x14CF', '\a', '\x338', '\x2', '\x2', '\x14CE', '\x14CD', '\x3', '\x2', 
		'\x2', '\x2', '\x14CE', '\x14CF', '\x3', '\x2', '\x2', '\x2', '\x14CF', 
		'\x14D0', '\x3', '\x2', '\x2', '\x2', '\x14D0', '\x14D1', '\a', '\x18F', 
		'\x2', '\x2', '\x14D1', '\x14D2', '\a', '\x324', '\x2', '\x2', '\x14D2', 
		'\x14D4', '\t', '\t', '\x2', '\x2', '\x14D3', '\x14C8', '\x3', '\x2', 
		'\x2', '\x2', '\x14D3', '\x14CE', '\x3', '\x2', '\x2', '\x2', '\x14D4', 
		'\x14D7', '\x3', '\x2', '\x2', '\x2', '\x14D5', '\x14D3', '\x3', '\x2', 
		'\x2', '\x2', '\x14D5', '\x14D6', '\x3', '\x2', '\x2', '\x2', '\x14D6', 
		'\x14E0', '\x3', '\x2', '\x2', '\x2', '\x14D7', '\x14D5', '\x3', '\x2', 
		'\x2', '\x2', '\x14D8', '\x14D9', '\t', '\x34', '\x2', '\x2', '\x14D9', 
		'\x14DA', '\a', '+', '\x2', '\x2', '\x14DA', '\x14E0', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x14DB', '\x14DC', '\t', '\x34', '\x2', '\x2', '\x14DC', 
		'\x14DD', '\a', '\x12', '\x2', '\x2', '\x14DD', '\x14DE', '\a', '\xAD', 
		'\x2', '\x2', '\x14DE', '\x14E0', '\x5', '\x3BA', '\x1DE', '\x2', '\x14DF', 
		'\x14C5', '\x3', '\x2', '\x2', '\x2', '\x14DF', '\x14D8', '\x3', '\x2', 
		'\x2', '\x2', '\x14DF', '\x14DB', '\x3', '\x2', '\x2', '\x2', '\x14E0', 
		'\x14E5', '\x3', '\x2', '\x2', '\x2', '\x14E1', '\x14E2', '\a', 'I', '\x2', 
		'\x2', '\x14E2', '\x14E3', '\a', '\x172', '\x2', '\x2', '\x14E3', '\x14E5', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x14E4', '\x1452', '\x3', '\x2', '\x2', 
		'\x2', '\x14E4', '\x146E', '\x3', '\x2', '\x2', '\x2', '\x14E4', '\x14C2', 
		'\x3', '\x2', '\x2', '\x2', '\x14E4', '\x14E1', '\x3', '\x2', '\x2', '\x2', 
		'\x14E5', '\x193', '\x3', '\x2', '\x2', '\x2', '\x14E6', '\x14E7', '\a', 
		'I', '\x2', '\x2', '\x14E7', '\x14E8', '\a', '\x172', '\x2', '\x2', '\x14E8', 
		'\x14EE', '\x5', '\x3BA', '\x1DE', '\x2', '\x14E9', '\x14EA', '\t', '\x34', 
		'\x2', '\x2', '\x14EA', '\x14EB', '\a', '\x23D', '\x2', '\x2', '\x14EB', 
		'\x14EF', '\x5', '\x3BA', '\x1DE', '\x2', '\x14EC', '\x14ED', '\a', '\x17F', 
		'\x2', '\x2', '\x14ED', '\x14EF', '\a', '\x23D', '\x2', '\x2', '\x14EE', 
		'\x14E9', '\x3', '\x2', '\x2', '\x2', '\x14EE', '\x14EC', '\x3', '\x2', 
		'\x2', '\x2', '\x14EE', '\x14EF', '\x3', '\x2', '\x2', '\x2', '\x14EF', 
		'\x14F4', '\x3', '\x2', '\x2', '\x2', '\x14F0', '\x14F1', '\a', '\x17D', 
		'\x2', '\x2', '\x14F1', '\x14F2', '\a', '\\', '\x2', '\x2', '\x14F2', 
		'\x14F3', '\a', '\x324', '\x2', '\x2', '\x14F3', '\x14F5', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x14F4', '\x14F0', '\x3', '\x2', '\x2', '\x2', '\x14F4', 
		'\x14F5', '\x3', '\x2', '\x2', '\x2', '\x14F5', '\x1503', '\x3', '\x2', 
		'\x2', '\x2', '\x14F6', '\x14F7', '\a', 'I', '\x2', '\x2', '\x14F7', '\x14F8', 
		'\a', '\x172', '\x2', '\x2', '\x14F8', '\x14F9', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x14F9', '\x14FA', '\a', '\x8C', '\x2', '\x2', '\x14FA', '\x14FB', 
		'\a', '|', '\x2', '\x2', '\x14FB', '\x1500', '\a', '\x292', '\x2', '\x2', 
		'\x14FC', '\x14FD', '\a', '\x17D', '\x2', '\x2', '\x14FD', '\x14FE', '\a', 
		'\\', '\x2', '\x2', '\x14FE', '\x14FF', '\a', '\x324', '\x2', '\x2', '\x14FF', 
		'\x1501', '\x5', '\x3BA', '\x1DE', '\x2', '\x1500', '\x14FC', '\x3', '\x2', 
		'\x2', '\x2', '\x1500', '\x1501', '\x3', '\x2', '\x2', '\x2', '\x1501', 
		'\x1503', '\x3', '\x2', '\x2', '\x2', '\x1502', '\x14E6', '\x3', '\x2', 
		'\x2', '\x2', '\x1502', '\x14F6', '\x3', '\x2', '\x2', '\x2', '\x1503', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x1504', '\x1505', '\a', '\n', '\x2', 
		'\x2', '\x1505', '\x1506', '\a', '\x172', '\x2', '\x2', '\x1506', '\x1507', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x1507', '\x1520', '\a', '\x17D', '\x2', 
		'\x2', '\x1508', '\x150A', '\a', '\x338', '\x2', '\x2', '\x1509', '\x1508', 
		'\x3', '\x2', '\x2', '\x2', '\x1509', '\x150A', '\x3', '\x2', '\x2', '\x2', 
		'\x150A', '\x150B', '\x3', '\x2', '\x2', '\x2', '\x150B', '\x150C', '\a', 
		'\x25F', '\x2', '\x2', '\x150C', '\x150D', '\a', '\x324', '\x2', '\x2', 
		'\x150D', '\x1521', '\x5', '\x3BA', '\x1DE', '\x2', '\x150E', '\x1510', 
		'\a', '\x338', '\x2', '\x2', '\x150F', '\x150E', '\x3', '\x2', '\x2', 
		'\x2', '\x150F', '\x1510', '\x3', '\x2', '\x2', '\x2', '\x1510', '\x1511', 
		'\x3', '\x2', '\x2', '\x2', '\x1511', '\x1512', '\a', '\\', '\x2', '\x2', 
		'\x1512', '\x1513', '\a', '\x324', '\x2', '\x2', '\x1513', '\x1521', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x1514', '\x1516', '\a', '\x338', '\x2', '\x2', 
		'\x1515', '\x1514', '\x3', '\x2', '\x2', '\x2', '\x1515', '\x1516', '\x3', 
		'\x2', '\x2', '\x2', '\x1516', '\x1517', '\x3', '\x2', '\x2', '\x2', '\x1517', 
		'\x1518', '\a', '\x23D', '\x2', '\x2', '\x1518', '\x1519', '\a', '\x324', 
		'\x2', '\x2', '\x1519', '\x1521', '\x5', '\x3BA', '\x1DE', '\x2', '\x151A', 
		'\x151C', '\a', '\x338', '\x2', '\x2', '\x151B', '\x151A', '\x3', '\x2', 
		'\x2', '\x2', '\x151B', '\x151C', '\x3', '\x2', '\x2', '\x2', '\x151C', 
		'\x151D', '\x3', '\x2', '\x2', '\x2', '\x151D', '\x151E', '\a', '\x18F', 
		'\x2', '\x2', '\x151E', '\x151F', '\a', '\x324', '\x2', '\x2', '\x151F', 
		'\x1521', '\t', '\t', '\x2', '\x2', '\x1520', '\x1509', '\x3', '\x2', 
		'\x2', '\x2', '\x1520', '\x150F', '\x3', '\x2', '\x2', '\x2', '\x1520', 
		'\x1515', '\x3', '\x2', '\x2', '\x2', '\x1520', '\x151B', '\x3', '\x2', 
		'\x2', '\x2', '\x1521', '\x1522', '\x3', '\x2', '\x2', '\x2', '\x1522', 
		'\x1520', '\x3', '\x2', '\x2', '\x2', '\x1522', '\x1523', '\x3', '\x2', 
		'\x2', '\x2', '\x1523', '\x197', '\x3', '\x2', '\x2', '\x2', '\x1524', 
		'\x1525', '\a', '\n', '\x2', '\x2', '\x1525', '\x1526', '\a', '\x30E', 
		'\x2', '\x2', '\x1526', '\x1529', '\a', '\x93', '\x2', '\x2', '\x1527', 
		'\x152A', '\x5', '\x3BA', '\x1DE', '\x2', '\x1528', '\x152A', '\a', '\x1D5', 
		'\x2', '\x2', '\x1529', '\x1527', '\x3', '\x2', '\x2', '\x2', '\x1529', 
		'\x1528', '\x3', '\x2', '\x2', '\x2', '\x152A', '\x154A', '\x3', '\x2', 
		'\x2', '\x2', '\x152B', '\x152C', '\a', '\x17D', '\x2', '\x2', '\x152C', 
		'\x1545', '\a', '\x336', '\x2', '\x2', '\x152D', '\x152E', '\a', '\x21F', 
		'\x2', '\x2', '\x152E', '\x152F', '\a', '\x324', '\x2', '\x2', '\x152F', 
		'\x1546', '\t', '\x35', '\x2', '\x2', '\x1530', '\x1532', '\a', '\x338', 
		'\x2', '\x2', '\x1531', '\x1530', '\x3', '\x2', '\x2', '\x2', '\x1531', 
		'\x1532', '\x3', '\x2', '\x2', '\x2', '\x1532', '\x1533', '\x3', '\x2', 
		'\x2', '\x2', '\x1533', '\x1534', '\a', '\x2AF', '\x2', '\x2', '\x1534', 
		'\x1535', '\a', '\x324', '\x2', '\x2', '\x1535', '\x1546', '\a', '\x31C', 
		'\x2', '\x2', '\x1536', '\x1538', '\a', '\x338', '\x2', '\x2', '\x1537', 
		'\x1536', '\x3', '\x2', '\x2', '\x2', '\x1537', '\x1538', '\x3', '\x2', 
		'\x2', '\x2', '\x1538', '\x1539', '\x3', '\x2', '\x2', '\x2', '\x1539', 
		'\x153A', '\a', '\x2AE', '\x2', '\x2', '\x153A', '\x153B', '\a', '\x324', 
		'\x2', '\x2', '\x153B', '\x1546', '\a', '\x31C', '\x2', '\x2', '\x153C', 
		'\x153D', '\a', '\x2B0', '\x2', '\x2', '\x153D', '\x153E', '\a', '\x324', 
		'\x2', '\x2', '\x153E', '\x1546', '\a', '\x31C', '\x2', '\x2', '\x153F', 
		'\x1540', '\a', '\x245', '\x2', '\x2', '\x1540', '\x1541', '\a', '\x324', 
		'\x2', '\x2', '\x1541', '\x1546', '\a', '\x31C', '\x2', '\x2', '\x1542', 
		'\x1543', '\a', '\x212', '\x2', '\x2', '\x1543', '\x1544', '\a', '\x324', 
		'\x2', '\x2', '\x1544', '\x1546', '\a', '\x31C', '\x2', '\x2', '\x1545', 
		'\x152D', '\x3', '\x2', '\x2', '\x2', '\x1545', '\x1531', '\x3', '\x2', 
		'\x2', '\x2', '\x1545', '\x1537', '\x3', '\x2', '\x2', '\x2', '\x1545', 
		'\x153C', '\x3', '\x2', '\x2', '\x2', '\x1545', '\x153F', '\x3', '\x2', 
		'\x2', '\x2', '\x1545', '\x1542', '\x3', '\x2', '\x2', '\x2', '\x1546', 
		'\x1547', '\x3', '\x2', '\x2', '\x2', '\x1547', '\x1545', '\x3', '\x2', 
		'\x2', '\x2', '\x1547', '\x1548', '\x3', '\x2', '\x2', '\x2', '\x1548', 
		'\x1549', '\x3', '\x2', '\x2', '\x2', '\x1549', '\x154B', '\a', '\x337', 
		'\x2', '\x2', '\x154A', '\x152B', '\x3', '\x2', '\x2', '\x2', '\x154A', 
		'\x154B', '\x3', '\x2', '\x2', '\x2', '\x154B', '\x1551', '\x3', '\x2', 
		'\x2', '\x2', '\x154C', '\x154F', '\a', '\x302', '\x2', '\x2', '\x154D', 
		'\x1550', '\x5', '\x3BA', '\x1DE', '\x2', '\x154E', '\x1550', '\a', '\x1D5', 
		'\x2', '\x2', '\x154F', '\x154D', '\x3', '\x2', '\x2', '\x2', '\x154F', 
		'\x154E', '\x3', '\x2', '\x2', '\x2', '\x1550', '\x1552', '\x3', '\x2', 
		'\x2', '\x2', '\x1551', '\x154C', '\x3', '\x2', '\x2', '\x2', '\x1551', 
		'\x1552', '\x3', '\x2', '\x2', '\x2', '\x1552', '\x199', '\x3', '\x2', 
		'\x2', '\x2', '\x1553', '\x1554', '\a', 'I', '\x2', '\x2', '\x1554', '\x1555', 
		'\a', '\x30E', '\x2', '\x2', '\x1555', '\x1556', '\a', '\x93', '\x2', 
		'\x2', '\x1556', '\x1576', '\x5', '\x3BA', '\x1DE', '\x2', '\x1557', '\x1558', 
		'\a', '\x17D', '\x2', '\x2', '\x1558', '\x1571', '\a', '\x336', '\x2', 
		'\x2', '\x1559', '\x155A', '\a', '\x21F', '\x2', '\x2', '\x155A', '\x155B', 
		'\a', '\x324', '\x2', '\x2', '\x155B', '\x1572', '\t', '\x35', '\x2', 
		'\x2', '\x155C', '\x155E', '\a', '\x338', '\x2', '\x2', '\x155D', '\x155C', 
		'\x3', '\x2', '\x2', '\x2', '\x155D', '\x155E', '\x3', '\x2', '\x2', '\x2', 
		'\x155E', '\x155F', '\x3', '\x2', '\x2', '\x2', '\x155F', '\x1560', '\a', 
		'\x2AF', '\x2', '\x2', '\x1560', '\x1561', '\a', '\x324', '\x2', '\x2', 
		'\x1561', '\x1572', '\a', '\x31C', '\x2', '\x2', '\x1562', '\x1564', '\a', 
		'\x338', '\x2', '\x2', '\x1563', '\x1562', '\x3', '\x2', '\x2', '\x2', 
		'\x1563', '\x1564', '\x3', '\x2', '\x2', '\x2', '\x1564', '\x1565', '\x3', 
		'\x2', '\x2', '\x2', '\x1565', '\x1566', '\a', '\x2AE', '\x2', '\x2', 
		'\x1566', '\x1567', '\a', '\x324', '\x2', '\x2', '\x1567', '\x1572', '\a', 
		'\x31C', '\x2', '\x2', '\x1568', '\x1569', '\a', '\x2B0', '\x2', '\x2', 
		'\x1569', '\x156A', '\a', '\x324', '\x2', '\x2', '\x156A', '\x1572', '\a', 
		'\x31C', '\x2', '\x2', '\x156B', '\x156C', '\a', '\x245', '\x2', '\x2', 
		'\x156C', '\x156D', '\a', '\x324', '\x2', '\x2', '\x156D', '\x1572', '\a', 
		'\x31C', '\x2', '\x2', '\x156E', '\x156F', '\a', '\x212', '\x2', '\x2', 
		'\x156F', '\x1570', '\a', '\x324', '\x2', '\x2', '\x1570', '\x1572', '\a', 
		'\x31C', '\x2', '\x2', '\x1571', '\x1559', '\x3', '\x2', '\x2', '\x2', 
		'\x1571', '\x155D', '\x3', '\x2', '\x2', '\x2', '\x1571', '\x1563', '\x3', 
		'\x2', '\x2', '\x2', '\x1571', '\x1568', '\x3', '\x2', '\x2', '\x2', '\x1571', 
		'\x156B', '\x3', '\x2', '\x2', '\x2', '\x1571', '\x156E', '\x3', '\x2', 
		'\x2', '\x2', '\x1572', '\x1573', '\x3', '\x2', '\x2', '\x2', '\x1573', 
		'\x1571', '\x3', '\x2', '\x2', '\x2', '\x1573', '\x1574', '\x3', '\x2', 
		'\x2', '\x2', '\x1574', '\x1575', '\x3', '\x2', '\x2', '\x2', '\x1575', 
		'\x1577', '\a', '\x337', '\x2', '\x2', '\x1576', '\x1557', '\x3', '\x2', 
		'\x2', '\x2', '\x1576', '\x1577', '\x3', '\x2', '\x2', '\x2', '\x1577', 
		'\x1585', '\x3', '\x2', '\x2', '\x2', '\x1578', '\x157B', '\a', '\x302', 
		'\x2', '\x2', '\x1579', '\x157C', '\x5', '\x3BA', '\x1DE', '\x2', '\x157A', 
		'\x157C', '\a', '\x1D5', '\x2', '\x2', '\x157B', '\x1579', '\x3', '\x2', 
		'\x2', '\x2', '\x157B', '\x157A', '\x3', '\x2', '\x2', '\x2', '\x157B', 
		'\x157C', '\x3', '\x2', '\x2', '\x2', '\x157C', '\x1583', '\x3', '\x2', 
		'\x2', '\x2', '\x157D', '\x157F', '\a', '\x338', '\x2', '\x2', '\x157E', 
		'\x157D', '\x3', '\x2', '\x2', '\x2', '\x157E', '\x157F', '\x3', '\x2', 
		'\x2', '\x2', '\x157F', '\x1580', '\x3', '\x2', '\x2', '\x2', '\x1580', 
		'\x1581', '\a', '|', '\x2', '\x2', '\x1581', '\x1584', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1582', '\x1584', '\a', '\x1D5', '\x2', '\x2', '\x1583', 
		'\x157E', '\x3', '\x2', '\x2', '\x2', '\x1583', '\x1582', '\x3', '\x2', 
		'\x2', '\x2', '\x1583', '\x1584', '\x3', '\x2', '\x2', '\x2', '\x1584', 
		'\x1586', '\x3', '\x2', '\x2', '\x2', '\x1585', '\x1578', '\x3', '\x2', 
		'\x2', '\x2', '\x1585', '\x1586', '\x3', '\x2', '\x2', '\x2', '\x1586', 
		'\x19B', '\x3', '\x2', '\x2', '\x2', '\x1587', '\x1588', '\a', 'I', '\x2', 
		'\x2', '\x1588', '\x1589', '\a', '\x30F', '\x2', '\x2', '\x1589', '\x158A', 
		'\a', '\x12F', '\x2', '\x2', '\x158A', '\x158E', '\a', '\x1B9', '\x2', 
		'\x2', '\x158B', '\x158C', '\x5', '\x3BA', '\x1DE', '\x2', '\x158C', '\x158D', 
		'\a', '\x331', '\x2', '\x2', '\x158D', '\x158F', '\x3', '\x2', '\x2', 
		'\x2', '\x158E', '\x158B', '\x3', '\x2', '\x2', '\x2', '\x158E', '\x158F', 
		'\x3', '\x2', '\x2', '\x2', '\x158F', '\x1590', '\x3', '\x2', '\x2', '\x2', 
		'\x1590', '\x1591', '\x5', '\x3BA', '\x1DE', '\x2', '\x1591', '\x1595', 
		'\a', '\x10', '\x2', '\x2', '\x1592', '\x1596', '\a', '\x320', '\x2', 
		'\x2', '\x1593', '\x1596', '\x5', '\x3BA', '\x1DE', '\x2', '\x1594', '\x1596', 
		'\a', '\x31B', '\x2', '\x2', '\x1595', '\x1592', '\x3', '\x2', '\x2', 
		'\x2', '\x1595', '\x1593', '\x3', '\x2', '\x2', '\x2', '\x1595', '\x1594', 
		'\x3', '\x2', '\x2', '\x2', '\x1596', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x1597', '\x1598', '\a', 'I', '\x2', '\x2', '\x1598', '\x159B', '\a', 
		'\x295', '\x2', '\x2', '\x1599', '\x159C', '\x5', '\x380', '\x1C1', '\x2', 
		'\x159A', '\x159C', '\x5', '\x3BA', '\x1DE', '\x2', '\x159B', '\x1599', 
		'\x3', '\x2', '\x2', '\x2', '\x159B', '\x159A', '\x3', '\x2', '\x2', '\x2', 
		'\x159C', '\x159E', '\x3', '\x2', '\x2', '\x2', '\x159D', '\x159F', '\x5', 
		'\x1A0', '\xD1', '\x2', '\x159E', '\x159D', '\x3', '\x2', '\x2', '\x2', 
		'\x159E', '\x159F', '\x3', '\x2', '\x2', '\x2', '\x159F', '\x15A3', '\x3', 
		'\x2', '\x2', '\x2', '\x15A0', '\x15A1', '\a', '\xE6', '\x2', '\x2', '\x15A1', 
		'\x15A4', '\x5', '\x3BA', '\x1DE', '\x2', '\x15A2', '\x15A4', '\a', 'Z', 
		'\x2', '\x2', '\x15A3', '\x15A0', '\x3', '\x2', '\x2', '\x2', '\x15A3', 
		'\x15A2', '\x3', '\x2', '\x2', '\x2', '\x15A3', '\x15A4', '\x3', '\x2', 
		'\x2', '\x2', '\x15A4', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x15A5', 
		'\x15AC', '\a', '\x17D', '\x2', '\x2', '\x15A6', '\x15A7', '\a', '\x2DF', 
		'\x2', '\x2', '\x15A7', '\x15A8', '\a', '\x324', '\x2', '\x2', '\x15A8', 
		'\x15AA', '\t', '\t', '\x2', '\x2', '\x15A9', '\x15AB', '\a', '\x338', 
		'\x2', '\x2', '\x15AA', '\x15A9', '\x3', '\x2', '\x2', '\x2', '\x15AA', 
		'\x15AB', '\x3', '\x2', '\x2', '\x2', '\x15AB', '\x15AD', '\x3', '\x2', 
		'\x2', '\x2', '\x15AC', '\x15A6', '\x3', '\x2', '\x2', '\x2', '\x15AC', 
		'\x15AD', '\x3', '\x2', '\x2', '\x2', '\x15AD', '\x15B4', '\x3', '\x2', 
		'\x2', '\x2', '\x15AE', '\x15AF', '\a', '\x2B6', '\x2', '\x2', '\x15AF', 
		'\x15B0', '\a', '\x324', '\x2', '\x2', '\x15B0', '\x15B2', '\t', '\t', 
		'\x2', '\x2', '\x15B1', '\x15B3', '\a', '\x338', '\x2', '\x2', '\x15B2', 
		'\x15B1', '\x3', '\x2', '\x2', '\x2', '\x15B2', '\x15B3', '\x3', '\x2', 
		'\x2', '\x2', '\x15B3', '\x15B5', '\x3', '\x2', '\x2', '\x2', '\x15B4', 
		'\x15AE', '\x3', '\x2', '\x2', '\x2', '\x15B4', '\x15B5', '\x3', '\x2', 
		'\x2', '\x2', '\x15B5', '\x15E3', '\x3', '\x2', '\x2', '\x2', '\x15B6', 
		'\x15B7', '\a', '\x185', '\x2', '\x2', '\x15B7', '\x15DD', '\a', '\x336', 
		'\x2', '\x2', '\x15B8', '\x15B9', '\a', '\x2DF', '\x2', '\x2', '\x15B9', 
		'\x15BA', '\a', '\x324', '\x2', '\x2', '\x15BA', '\x15BC', '\t', '\t', 
		'\x2', '\x2', '\x15BB', '\x15BD', '\a', '\x338', '\x2', '\x2', '\x15BC', 
		'\x15BB', '\x3', '\x2', '\x2', '\x2', '\x15BC', '\x15BD', '\x3', '\x2', 
		'\x2', '\x2', '\x15BD', '\x15BF', '\x3', '\x2', '\x2', '\x2', '\x15BE', 
		'\x15B8', '\x3', '\x2', '\x2', '\x2', '\x15BE', '\x15BF', '\x3', '\x2', 
		'\x2', '\x2', '\x15BF', '\x15C6', '\x3', '\x2', '\x2', '\x2', '\x15C0', 
		'\x15C1', '\a', '\x290', '\x2', '\x2', '\x15C1', '\x15C2', '\a', '\x324', 
		'\x2', '\x2', '\x15C2', '\x15C4', '\x5', '\x388', '\x1C5', '\x2', '\x15C3', 
		'\x15C5', '\a', '\x338', '\x2', '\x2', '\x15C4', '\x15C3', '\x3', '\x2', 
		'\x2', '\x2', '\x15C4', '\x15C5', '\x3', '\x2', '\x2', '\x2', '\x15C5', 
		'\x15C7', '\x3', '\x2', '\x2', '\x2', '\x15C6', '\x15C0', '\x3', '\x2', 
		'\x2', '\x2', '\x15C6', '\x15C7', '\x3', '\x2', '\x2', '\x2', '\x15C7', 
		'\x15CE', '\x3', '\x2', '\x2', '\x2', '\x15C8', '\x15C9', '\a', '\x24A', 
		'\x2', '\x2', '\x15C9', '\x15CA', '\a', '\x324', '\x2', '\x2', '\x15CA', 
		'\x15CC', '\a', '\x31C', '\x2', '\x2', '\x15CB', '\x15CD', '\a', '\x338', 
		'\x2', '\x2', '\x15CC', '\x15CB', '\x3', '\x2', '\x2', '\x2', '\x15CC', 
		'\x15CD', '\x3', '\x2', '\x2', '\x2', '\x15CD', '\x15CF', '\x3', '\x2', 
		'\x2', '\x2', '\x15CE', '\x15C8', '\x3', '\x2', '\x2', '\x2', '\x15CE', 
		'\x15CF', '\x3', '\x2', '\x2', '\x2', '\x15CF', '\x15DA', '\x3', '\x2', 
		'\x2', '\x2', '\x15D0', '\x15D1', '\a', 'w', '\x2', '\x2', '\x15D1', '\x15D5', 
		'\a', '\x10', '\x2', '\x2', '\x15D2', '\x15D6', '\a', '\x2CB', '\x2', 
		'\x2', '\x15D3', '\x15D6', '\a', '\x320', '\x2', '\x2', '\x15D4', '\x15D6', 
		'\a', '\x27E', '\x2', '\x2', '\x15D5', '\x15D2', '\x3', '\x2', '\x2', 
		'\x2', '\x15D5', '\x15D3', '\x3', '\x2', '\x2', '\x2', '\x15D5', '\x15D4', 
		'\x3', '\x2', '\x2', '\x2', '\x15D6', '\x15D8', '\x3', '\x2', '\x2', '\x2', 
		'\x15D7', '\x15D9', '\a', '\x338', '\x2', '\x2', '\x15D8', '\x15D7', '\x3', 
		'\x2', '\x2', '\x2', '\x15D8', '\x15D9', '\x3', '\x2', '\x2', '\x2', '\x15D9', 
		'\x15DB', '\x3', '\x2', '\x2', '\x2', '\x15DA', '\x15D0', '\x3', '\x2', 
		'\x2', '\x2', '\x15DA', '\x15DB', '\x3', '\x2', '\x2', '\x2', '\x15DB', 
		'\x15DE', '\x3', '\x2', '\x2', '\x2', '\x15DC', '\x15DE', '\a', 'h', '\x2', 
		'\x2', '\x15DD', '\x15BE', '\x3', '\x2', '\x2', '\x2', '\x15DD', '\x15DC', 
		'\x3', '\x2', '\x2', '\x2', '\x15DE', '\x15DF', '\x3', '\x2', '\x2', '\x2', 
		'\x15DF', '\x15E1', '\a', '\x337', '\x2', '\x2', '\x15E0', '\x15E2', '\a', 
		'\x338', '\x2', '\x2', '\x15E1', '\x15E0', '\x3', '\x2', '\x2', '\x2', 
		'\x15E1', '\x15E2', '\x3', '\x2', '\x2', '\x2', '\x15E2', '\x15E4', '\x3', 
		'\x2', '\x2', '\x2', '\x15E3', '\x15B6', '\x3', '\x2', '\x2', '\x2', '\x15E3', 
		'\x15E4', '\x3', '\x2', '\x2', '\x2', '\x15E4', '\x15EC', '\x3', '\x2', 
		'\x2', '\x2', '\x15E5', '\x15E6', '\a', '\x285', '\x2', '\x2', '\x15E6', 
		'\x15E7', '\a', '\x336', '\x2', '\x2', '\x15E7', '\x15E8', '\a', '\x2DF', 
		'\x2', '\x2', '\x15E8', '\x15E9', '\a', '\x324', '\x2', '\x2', '\x15E9', 
		'\x15EA', '\t', '\t', '\x2', '\x2', '\x15EA', '\x15EB', '\x3', '\x2', 
		'\x2', '\x2', '\x15EB', '\x15ED', '\a', '\x337', '\x2', '\x2', '\x15EC', 
		'\x15E5', '\x3', '\x2', '\x2', '\x2', '\x15EC', '\x15ED', '\x3', '\x2', 
		'\x2', '\x2', '\x15ED', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x15EE', 
		'\x15EF', '\a', '\n', '\x2', '\x2', '\x15EF', '\x15F2', '\a', '\x295', 
		'\x2', '\x2', '\x15F0', '\x15F3', '\x5', '\x380', '\x1C1', '\x2', '\x15F1', 
		'\x15F3', '\x5', '\x3BA', '\x1DE', '\x2', '\x15F2', '\x15F0', '\x3', '\x2', 
		'\x2', '\x2', '\x15F2', '\x15F1', '\x3', '\x2', '\x2', '\x2', '\x15F3', 
		'\x15F6', '\x3', '\x2', '\x2', '\x2', '\x15F4', '\x15F7', '\x5', '\x1A0', 
		'\xD1', '\x2', '\x15F5', '\x15F7', '\x5', '\x1A4', '\xD3', '\x2', '\x15F6', 
		'\x15F4', '\x3', '\x2', '\x2', '\x2', '\x15F6', '\x15F5', '\x3', '\x2', 
		'\x2', '\x2', '\x15F7', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x15F8', 
		'\x15FE', '\a', '\x2A2', '\x2', '\x2', '\x15F9', '\x15FA', '\a', '\x17D', 
		'\x2', '\x2', '\x15FA', '\x15FB', '\a', '\x336', '\x2', '\x2', '\x15FB', 
		'\x15FC', '\x5', '\x1A6', '\xD4', '\x2', '\x15FC', '\x15FD', '\a', '\x337', 
		'\x2', '\x2', '\x15FD', '\x15FF', '\x3', '\x2', '\x2', '\x2', '\x15FE', 
		'\x15F9', '\x3', '\x2', '\x2', '\x2', '\x15FE', '\x15FF', '\x3', '\x2', 
		'\x2', '\x2', '\x15FF', '\x160E', '\x3', '\x2', '\x2', '\x2', '\x1600', 
		'\x1605', '\a', '\x2AB', '\x2', '\x2', '\x1601', '\x1602', '\a', '\x17D', 
		'\x2', '\x2', '\x1602', '\x1603', '\a', '\x238', '\x2', '\x2', '\x1603', 
		'\x1604', '\a', '\x324', '\x2', '\x2', '\x1604', '\x1606', '\t', '\t', 
		'\x2', '\x2', '\x1605', '\x1601', '\x3', '\x2', '\x2', '\x2', '\x1605', 
		'\x1606', '\x3', '\x2', '\x2', '\x2', '\x1606', '\x160E', '\x3', '\x2', 
		'\x2', '\x2', '\x1607', '\x1608', '\a', '\x25D', '\x2', '\x2', '\x1608', 
		'\x160B', '\a', '\x15E', '\x2', '\x2', '\x1609', '\x160C', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x160A', '\x160C', '\a', 'Z', '\x2', '\x2', '\x160B', 
		'\x1609', '\x3', '\x2', '\x2', '\x2', '\x160B', '\x160A', '\x3', '\x2', 
		'\x2', '\x2', '\x160C', '\x160E', '\x3', '\x2', '\x2', '\x2', '\x160D', 
		'\x15F8', '\x3', '\x2', '\x2', '\x2', '\x160D', '\x1600', '\x3', '\x2', 
		'\x2', '\x2', '\x160D', '\x1607', '\x3', '\x2', '\x2', '\x2', '\x160E', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x160F', '\x1610', '\a', '\x24C', 
		'\x2', '\x2', '\x1610', '\x1611', '\a', '\x324', '\x2', '\x2', '\x1611', 
		'\x1612', '\a', '\x31C', '\x2', '\x2', '\x1612', '\x1A7', '\x3', '\x2', 
		'\x2', '\x2', '\x1613', '\x1614', '\a', 'I', '\x2', '\x2', '\x1614', '\x1615', 
		'\a', '\x44', '\x2', '\x2', '\x1615', '\x1618', '\x5', '\x3A4', '\x1D3', 
		'\x2', '\x1616', '\x1617', '\a', '\x14', '\x2', '\x2', '\x1617', '\x1619', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x1618', '\x1616', '\x3', '\x2', '\x2', 
		'\x2', '\x1618', '\x1619', '\x3', '\x2', '\x2', '\x2', '\x1619', '\x161A', 
		'\x3', '\x2', '\x2', '\x2', '\x161A', '\x1625', '\a', '\x336', '\x2', 
		'\x2', '\x161B', '\x161E', '\x5', '\x3BA', '\x1DE', '\x2', '\x161C', '\x161E', 
		'\a', 'Z', '\x2', '\x2', '\x161D', '\x161B', '\x3', '\x2', '\x2', '\x2', 
		'\x161D', '\x161C', '\x3', '\x2', '\x2', '\x2', '\x161E', '\x161F', '\x3', 
		'\x2', '\x2', '\x2', '\x161F', '\x1620', '\a', '\x2CE', '\x2', '\x2', 
		'\x1620', '\x1621', '\a', '&', '\x2', '\x2', '\x1621', '\x1623', '\t', 
		'\x36', '\x2', '\x2', '\x1622', '\x1624', '\a', '\x338', '\x2', '\x2', 
		'\x1623', '\x1622', '\x3', '\x2', '\x2', '\x2', '\x1623', '\x1624', '\x3', 
		'\x2', '\x2', '\x2', '\x1624', '\x1626', '\x3', '\x2', '\x2', '\x2', '\x1625', 
		'\x161D', '\x3', '\x2', '\x2', '\x2', '\x1626', '\x1627', '\x3', '\x2', 
		'\x2', '\x2', '\x1627', '\x1625', '\x3', '\x2', '\x2', '\x2', '\x1627', 
		'\x1628', '\x3', '\x2', '\x2', '\x2', '\x1628', '\x1629', '\x3', '\x2', 
		'\x2', '\x2', '\x1629', '\x162A', '\a', '\x337', '\x2', '\x2', '\x162A', 
		'\x1A9', '\x3', '\x2', '\x2', '\x2', '\x162B', '\x1632', '\x5', '\x3A0', 
		'\x1D1', '\x2', '\x162C', '\x1632', '\x5', '\x3A2', '\x1D2', '\x2', '\x162D', 
		'\x1632', '\x5', '\x3A8', '\x1D5', '\x2', '\x162E', '\x1632', '\x5', '\x3AC', 
		'\x1D7', '\x2', '\x162F', '\x1632', '\x5', '\x3B0', '\x1D9', '\x2', '\x1630', 
		'\x1632', '\x5', '\x3AA', '\x1D6', '\x2', '\x1631', '\x162B', '\x3', '\x2', 
		'\x2', '\x2', '\x1631', '\x162C', '\x3', '\x2', '\x2', '\x2', '\x1631', 
		'\x162D', '\x3', '\x2', '\x2', '\x2', '\x1631', '\x162E', '\x3', '\x2', 
		'\x2', '\x2', '\x1631', '\x162F', '\x3', '\x2', '\x2', '\x2', '\x1631', 
		'\x1630', '\x3', '\x2', '\x2', '\x2', '\x1632', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', '\x1633', '\x1634', '\a', 'I', '\x2', '\x2', '\x1634', '\x1635', 
		'\a', '\x252', '\x2', '\x2', '\x1635', '\x1636', '\a', '\x2FC', '\x2', 
		'\x2', '\x1636', '\x1639', '\x5', '\x3BA', '\x1DE', '\x2', '\x1637', '\x1638', 
		'\a', '\x14', '\x2', '\x2', '\x1638', '\x163A', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1639', '\x1637', '\x3', '\x2', '\x2', '\x2', '\x1639', '\x163A', 
		'\x3', '\x2', '\x2', '\x2', '\x163A', '\x163B', '\x3', '\x2', '\x2', '\x2', 
		'\x163B', '\x163C', '\a', '\x304', '\x2', '\x2', '\x163C', '\x1645', '\a', 
		'\x324', '\x2', '\x2', '\x163D', '\x1646', '\a', '\xD6', '\x2', '\x2', 
		'\x163E', '\x1646', '\a', '\x1EB', '\x2', '\x2', '\x163F', '\x1646', '\a', 
		'\x30B', '\x2', '\x2', '\x1640', '\x1641', '\a', '\x303', '\x2', '\x2', 
		'\x1641', '\x1642', '\a', '\x17D', '\x2', '\x2', '\x1642', '\x1643', '\a', 
		'\x12F', '\x2', '\x2', '\x1643', '\x1644', '\a', '\x1B9', '\x2', '\x2', 
		'\x1644', '\x1646', '\x5', '\x3BA', '\x1DE', '\x2', '\x1645', '\x163D', 
		'\x3', '\x2', '\x2', '\x2', '\x1645', '\x163E', '\x3', '\x2', '\x2', '\x2', 
		'\x1645', '\x163F', '\x3', '\x2', '\x2', '\x2', '\x1645', '\x1640', '\x3', 
		'\x2', '\x2', '\x2', '\x1646', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1647', 
		'\x1649', '\x5', '\x2DA', '\x16E', '\x2', '\x1648', '\x1647', '\x3', '\x2', 
		'\x2', '\x2', '\x1648', '\x1649', '\x3', '\x2', '\x2', '\x2', '\x1649', 
		'\x164A', '\x3', '\x2', '\x2', '\x2', '\x164A', '\x1652', '\a', '\xCA', 
		'\x2', '\x2', '\x164B', '\x164C', '\a', '\x15F', '\x2', '\x2', '\x164C', 
		'\x164D', '\a', '\x336', '\x2', '\x2', '\x164D', '\x164E', '\x5', '\x2CC', 
		'\x167', '\x2', '\x164E', '\x1650', '\a', '\x337', '\x2', '\x2', '\x164F', 
		'\x1651', '\a', '\xF6', '\x2', '\x2', '\x1650', '\x164F', '\x3', '\x2', 
		'\x2', '\x2', '\x1650', '\x1651', '\x3', '\x2', '\x2', '\x2', '\x1651', 
		'\x1653', '\x3', '\x2', '\x2', '\x2', '\x1652', '\x164B', '\x3', '\x2', 
		'\x2', '\x2', '\x1652', '\x1653', '\x3', '\x2', '\x2', '\x2', '\x1653', 
		'\x1655', '\x3', '\x2', '\x2', '\x2', '\x1654', '\x1656', '\a', '\xA6', 
		'\x2', '\x2', '\x1655', '\x1654', '\x3', '\x2', '\x2', '\x2', '\x1655', 
		'\x1656', '\x3', '\x2', '\x2', '\x2', '\x1656', '\x1657', '\x3', '\x2', 
		'\x2', '\x2', '\x1657', '\x1659', '\x5', '\x38C', '\x1C7', '\x2', '\x1658', 
		'\x165A', '\x5', '\x34E', '\x1A8', '\x2', '\x1659', '\x1658', '\x3', '\x2', 
		'\x2', '\x2', '\x1659', '\x165A', '\x3', '\x2', '\x2', '\x2', '\x165A', 
		'\x165C', '\x3', '\x2', '\x2', '\x2', '\x165B', '\x165D', '\x5', '\x348', 
		'\x1A5', '\x2', '\x165C', '\x165B', '\x3', '\x2', '\x2', '\x2', '\x165C', 
		'\x165D', '\x3', '\x2', '\x2', '\x2', '\x165D', '\x165E', '\x3', '\x2', 
		'\x2', '\x2', '\x165E', '\x165F', '\a', '\x302', '\x2', '\x2', '\x165F', 
		'\x1660', '\x5', '\x314', '\x18B', '\x2', '\x1660', '\x1661', '\a', '\xE6', 
		'\x2', '\x2', '\x1661', '\x166C', '\x5', '\x2E2', '\x172', '\x2', '\x1662', 
		'\x1663', '\a', '\x179', '\x2', '\x2', '\x1663', '\x1666', '\a', '\xBD', 
		'\x2', '\x2', '\x1664', '\x1665', '\a', '\v', '\x2', '\x2', '\x1665', 
		'\x1667', '\x5', '\x2E2', '\x172', '\x2', '\x1666', '\x1664', '\x3', '\x2', 
		'\x2', '\x2', '\x1666', '\x1667', '\x3', '\x2', '\x2', '\x2', '\x1667', 
		'\x1668', '\x3', '\x2', '\x2', '\x2', '\x1668', '\x1669', '\a', '\x15D', 
		'\x2', '\x2', '\x1669', '\x166B', '\x5', '\x1B0', '\xD9', '\x2', '\x166A', 
		'\x1662', '\x3', '\x2', '\x2', '\x2', '\x166B', '\x166E', '\x3', '\x2', 
		'\x2', '\x2', '\x166C', '\x166A', '\x3', '\x2', '\x2', '\x2', '\x166C', 
		'\x166D', '\x3', '\x2', '\x2', '\x2', '\x166D', '\x167C', '\x3', '\x2', 
		'\x2', '\x2', '\x166E', '\x166C', '\x3', '\x2', '\x2', '\x2', '\x166F', 
		'\x1670', '\a', '\x179', '\x2', '\x2', '\x1670', '\x1671', '\a', '\xDD', 
		'\x2', '\x2', '\x1671', '\x1674', '\a', '\xBD', '\x2', '\x2', '\x1672', 
		'\x1673', '\a', '&', '\x2', '\x2', '\x1673', '\x1675', '\a', '\x15A', 
		'\x2', '\x2', '\x1674', '\x1672', '\x3', '\x2', '\x2', '\x2', '\x1674', 
		'\x1675', '\x3', '\x2', '\x2', '\x2', '\x1675', '\x1678', '\x3', '\x2', 
		'\x2', '\x2', '\x1676', '\x1677', '\a', '\v', '\x2', '\x2', '\x1677', 
		'\x1679', '\x5', '\x2E2', '\x172', '\x2', '\x1678', '\x1676', '\x3', '\x2', 
		'\x2', '\x2', '\x1678', '\x1679', '\x3', '\x2', '\x2', '\x2', '\x1679', 
		'\x167A', '\x3', '\x2', '\x2', '\x2', '\x167A', '\x167B', '\a', '\x15D', 
		'\x2', '\x2', '\x167B', '\x167D', '\x5', '\x1B2', '\xDA', '\x2', '\x167C', 
		'\x166F', '\x3', '\x2', '\x2', '\x2', '\x167C', '\x167D', '\x3', '\x2', 
		'\x2', '\x2', '\x167D', '\x168B', '\x3', '\x2', '\x2', '\x2', '\x167E', 
		'\x167F', '\a', '\x179', '\x2', '\x2', '\x167F', '\x1680', '\a', '\xDD', 
		'\x2', '\x2', '\x1680', '\x1681', '\a', '\xBD', '\x2', '\x2', '\x1681', 
		'\x1682', '\a', '&', '\x2', '\x2', '\x1682', '\x1685', '\a', '\x145', 
		'\x2', '\x2', '\x1683', '\x1684', '\a', '\v', '\x2', '\x2', '\x1684', 
		'\x1686', '\x5', '\x2E2', '\x172', '\x2', '\x1685', '\x1683', '\x3', '\x2', 
		'\x2', '\x2', '\x1685', '\x1686', '\x3', '\x2', '\x2', '\x2', '\x1686', 
		'\x1687', '\x3', '\x2', '\x2', '\x2', '\x1687', '\x1688', '\a', '\x15D', 
		'\x2', '\x2', '\x1688', '\x168A', '\x5', '\x1B0', '\xD9', '\x2', '\x1689', 
		'\x167E', '\x3', '\x2', '\x2', '\x2', '\x168A', '\x168D', '\x3', '\x2', 
		'\x2', '\x2', '\x168B', '\x1689', '\x3', '\x2', '\x2', '\x2', '\x168B', 
		'\x168C', '\x3', '\x2', '\x2', '\x2', '\x168C', '\x168F', '\x3', '\x2', 
		'\x2', '\x2', '\x168D', '\x168B', '\x3', '\x2', '\x2', '\x2', '\x168E', 
		'\x1690', '\x5', '\x1C4', '\xE3', '\x2', '\x168F', '\x168E', '\x3', '\x2', 
		'\x2', '\x2', '\x168F', '\x1690', '\x3', '\x2', '\x2', '\x2', '\x1690', 
		'\x1692', '\x3', '\x2', '\x2', '\x2', '\x1691', '\x1693', '\x5', '\x300', 
		'\x181', '\x2', '\x1692', '\x1691', '\x3', '\x2', '\x2', '\x2', '\x1692', 
		'\x1693', '\x3', '\x2', '\x2', '\x2', '\x1693', '\x1694', '\x3', '\x2', 
		'\x2', '\x2', '\x1694', '\x1695', '\a', '\x339', '\x2', '\x2', '\x1695', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1696', '\x1697', '\a', '\x16D', 
		'\x2', '\x2', '\x1697', '\x1698', '\a', '\x13E', '\x2', '\x2', '\x1698', 
		'\x169D', '\x5', '\x2DE', '\x170', '\x2', '\x1699', '\x169A', '\a', '\x338', 
		'\x2', '\x2', '\x169A', '\x169C', '\x5', '\x2DE', '\x170', '\x2', '\x169B', 
		'\x1699', '\x3', '\x2', '\x2', '\x2', '\x169C', '\x169F', '\x3', '\x2', 
		'\x2', '\x2', '\x169D', '\x169B', '\x3', '\x2', '\x2', '\x2', '\x169D', 
		'\x169E', '\x3', '\x2', '\x2', '\x2', '\x169E', '\x16A2', '\x3', '\x2', 
		'\x2', '\x2', '\x169F', '\x169D', '\x3', '\x2', '\x2', '\x2', '\x16A0', 
		'\x16A2', '\a', ']', '\x2', '\x2', '\x16A1', '\x1696', '\x3', '\x2', '\x2', 
		'\x2', '\x16A1', '\x16A0', '\x3', '\x2', '\x2', '\x2', '\x16A2', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x16A3', '\x16A8', '\a', '\xA3', '\x2', '\x2', 
		'\x16A4', '\x16A5', '\a', '\x336', '\x2', '\x2', '\x16A5', '\x16A6', '\x5', 
		'\x392', '\x1CA', '\x2', '\x16A6', '\x16A7', '\a', '\x337', '\x2', '\x2', 
		'\x16A7', '\x16A9', '\x3', '\x2', '\x2', '\x2', '\x16A8', '\x16A4', '\x3', 
		'\x2', '\x2', '\x2', '\x16A8', '\x16A9', '\x3', '\x2', '\x2', '\x2', '\x16A9', 
		'\x16AD', '\x3', '\x2', '\x2', '\x2', '\x16AA', '\x16AE', '\x5', '\x358', 
		'\x1AD', '\x2', '\x16AB', '\x16AC', '\a', 'Z', '\x2', '\x2', '\x16AC', 
		'\x16AE', '\a', '\x173', '\x2', '\x2', '\x16AD', '\x16AA', '\x3', '\x2', 
		'\x2', '\x2', '\x16AD', '\x16AB', '\x3', '\x2', '\x2', '\x2', '\x16AE', 
		'\x1B3', '\x3', '\x2', '\x2', '\x2', '\x16AF', '\x16B1', '\x5', '\x2DA', 
		'\x16E', '\x2', '\x16B0', '\x16AF', '\x3', '\x2', '\x2', '\x2', '\x16B0', 
		'\x16B1', '\x3', '\x2', '\x2', '\x2', '\x16B1', '\x16B2', '\x3', '\x2', 
		'\x2', '\x2', '\x16B2', '\x16BC', '\a', ']', '\x2', '\x2', '\x16B3', '\x16B4', 
		'\a', '\x15F', '\x2', '\x2', '\x16B4', '\x16B5', '\a', '\x336', '\x2', 
		'\x2', '\x16B5', '\x16B6', '\x5', '\x2CC', '\x167', '\x2', '\x16B6', '\x16B8', 
		'\a', '\x337', '\x2', '\x2', '\x16B7', '\x16B9', '\a', '\xF6', '\x2', 
		'\x2', '\x16B8', '\x16B7', '\x3', '\x2', '\x2', '\x2', '\x16B8', '\x16B9', 
		'\x3', '\x2', '\x2', '\x2', '\x16B9', '\x16BD', '\x3', '\x2', '\x2', '\x2', 
		'\x16BA', '\x16BB', '\a', '\x15F', '\x2', '\x2', '\x16BB', '\x16BD', '\a', 
		'\x31C', '\x2', '\x2', '\x16BC', '\x16B3', '\x3', '\x2', '\x2', '\x2', 
		'\x16BC', '\x16BA', '\x3', '\x2', '\x2', '\x2', '\x16BC', '\x16BD', '\x3', 
		'\x2', '\x2', '\x2', '\x16BD', '\x16BF', '\x3', '\x2', '\x2', '\x2', '\x16BE', 
		'\x16C0', '\a', '\x8C', '\x2', '\x2', '\x16BF', '\x16BE', '\x3', '\x2', 
		'\x2', '\x2', '\x16BF', '\x16C0', '\x3', '\x2', '\x2', '\x2', '\x16C0', 
		'\x16C1', '\x3', '\x2', '\x2', '\x2', '\x16C1', '\x16C3', '\x5', '\x1B6', 
		'\xDC', '\x2', '\x16C2', '\x16C4', '\x5', '\x34E', '\x1A8', '\x2', '\x16C3', 
		'\x16C2', '\x3', '\x2', '\x2', '\x2', '\x16C3', '\x16C4', '\x3', '\x2', 
		'\x2', '\x2', '\x16C4', '\x16C6', '\x3', '\x2', '\x2', '\x2', '\x16C5', 
		'\x16C7', '\x5', '\x1C4', '\xE3', '\x2', '\x16C6', '\x16C5', '\x3', '\x2', 
		'\x2', '\x2', '\x16C6', '\x16C7', '\x3', '\x2', '\x2', '\x2', '\x16C7', 
		'\x16CA', '\x3', '\x2', '\x2', '\x2', '\x16C8', '\x16C9', '\a', '\x8C', 
		'\x2', '\x2', '\x16C9', '\x16CB', '\x5', '\x314', '\x18B', '\x2', '\x16CA', 
		'\x16C8', '\x3', '\x2', '\x2', '\x2', '\x16CA', '\x16CB', '\x3', '\x2', 
		'\x2', '\x2', '\x16CB', '\x16D9', '\x3', '\x2', '\x2', '\x2', '\x16CC', 
		'\x16D7', '\a', '\x17A', '\x2', '\x2', '\x16CD', '\x16D8', '\x5', '\x2E2', 
		'\x172', '\x2', '\x16CE', '\x16CF', '\a', 'K', '\x2', '\x2', '\x16CF', 
		'\x16D5', '\a', '\xE2', '\x2', '\x2', '\x16D0', '\x16D2', '\a', '\x210', 
		'\x2', '\x2', '\x16D1', '\x16D0', '\x3', '\x2', '\x2', '\x2', '\x16D1', 
		'\x16D2', '\x3', '\x2', '\x2', '\x2', '\x16D2', '\x16D3', '\x3', '\x2', 
		'\x2', '\x2', '\x16D3', '\x16D6', '\x5', '\x394', '\x1CB', '\x2', '\x16D4', 
		'\x16D6', '\a', '\x31B', '\x2', '\x2', '\x16D5', '\x16D1', '\x3', '\x2', 
		'\x2', '\x2', '\x16D5', '\x16D4', '\x3', '\x2', '\x2', '\x2', '\x16D6', 
		'\x16D8', '\x3', '\x2', '\x2', '\x2', '\x16D7', '\x16CD', '\x3', '\x2', 
		'\x2', '\x2', '\x16D7', '\x16CE', '\x3', '\x2', '\x2', '\x2', '\x16D8', 
		'\x16DA', '\x3', '\x2', '\x2', '\x2', '\x16D9', '\x16CC', '\x3', '\x2', 
		'\x2', '\x2', '\x16D9', '\x16DA', '\x3', '\x2', '\x2', '\x2', '\x16DA', 
		'\x16DC', '\x3', '\x2', '\x2', '\x2', '\x16DB', '\x16DD', '\x5', '\x2F8', 
		'\x17D', '\x2', '\x16DC', '\x16DB', '\x3', '\x2', '\x2', '\x2', '\x16DC', 
		'\x16DD', '\x3', '\x2', '\x2', '\x2', '\x16DD', '\x16DF', '\x3', '\x2', 
		'\x2', '\x2', '\x16DE', '\x16E0', '\x5', '\x300', '\x181', '\x2', '\x16DF', 
		'\x16DE', '\x3', '\x2', '\x2', '\x2', '\x16DF', '\x16E0', '\x3', '\x2', 
		'\x2', '\x2', '\x16E0', '\x16E2', '\x3', '\x2', '\x2', '\x2', '\x16E1', 
		'\x16E3', '\a', '\x339', '\x2', '\x2', '\x16E2', '\x16E1', '\x3', '\x2', 
		'\x2', '\x2', '\x16E2', '\x16E3', '\x3', '\x2', '\x2', '\x2', '\x16E3', 
		'\x1B5', '\x3', '\x2', '\x2', '\x2', '\x16E4', '\x16E9', '\x5', '\x38C', 
		'\x1C7', '\x2', '\x16E5', '\x16E9', '\x5', '\x34A', '\x1A6', '\x2', '\x16E6', 
		'\x16E9', '\x5', '\x25C', '\x12F', '\x2', '\x16E7', '\x16E9', '\a', '\x31B', 
		'\x2', '\x2', '\x16E8', '\x16E4', '\x3', '\x2', '\x2', '\x2', '\x16E8', 
		'\x16E5', '\x3', '\x2', '\x2', '\x2', '\x16E8', '\x16E6', '\x3', '\x2', 
		'\x2', '\x2', '\x16E8', '\x16E7', '\x3', '\x2', '\x2', '\x2', '\x16E9', 
		'\x1B7', '\x3', '\x2', '\x2', '\x2', '\x16EA', '\x16EC', '\x5', '\x2DA', 
		'\x16E', '\x2', '\x16EB', '\x16EA', '\x3', '\x2', '\x2', '\x2', '\x16EB', 
		'\x16EC', '\x3', '\x2', '\x2', '\x2', '\x16EC', '\x16ED', '\x3', '\x2', 
		'\x2', '\x2', '\x16ED', '\x16F5', '\a', '\xA3', '\x2', '\x2', '\x16EE', 
		'\x16EF', '\a', '\x15F', '\x2', '\x2', '\x16EF', '\x16F0', '\a', '\x336', 
		'\x2', '\x2', '\x16F0', '\x16F1', '\x5', '\x2CC', '\x167', '\x2', '\x16F1', 
		'\x16F3', '\a', '\x337', '\x2', '\x2', '\x16F2', '\x16F4', '\a', '\xF6', 
		'\x2', '\x2', '\x16F3', '\x16F2', '\x3', '\x2', '\x2', '\x2', '\x16F3', 
		'\x16F4', '\x3', '\x2', '\x2', '\x2', '\x16F4', '\x16F6', '\x3', '\x2', 
		'\x2', '\x2', '\x16F5', '\x16EE', '\x3', '\x2', '\x2', '\x2', '\x16F5', 
		'\x16F6', '\x3', '\x2', '\x2', '\x2', '\x16F6', '\x16F8', '\x3', '\x2', 
		'\x2', '\x2', '\x16F7', '\x16F9', '\a', '\xA6', '\x2', '\x2', '\x16F8', 
		'\x16F7', '\x3', '\x2', '\x2', '\x2', '\x16F8', '\x16F9', '\x3', '\x2', 
		'\x2', '\x2', '\x16F9', '\x16FC', '\x3', '\x2', '\x2', '\x2', '\x16FA', 
		'\x16FD', '\x5', '\x38C', '\x1C7', '\x2', '\x16FB', '\x16FD', '\x5', '\x25C', 
		'\x12F', '\x2', '\x16FC', '\x16FA', '\x3', '\x2', '\x2', '\x2', '\x16FC', 
		'\x16FB', '\x3', '\x2', '\x2', '\x2', '\x16FD', '\x16FF', '\x3', '\x2', 
		'\x2', '\x2', '\x16FE', '\x1700', '\x5', '\x34E', '\x1A8', '\x2', '\x16FF', 
		'\x16FE', '\x3', '\x2', '\x2', '\x2', '\x16FF', '\x1700', '\x3', '\x2', 
		'\x2', '\x2', '\x1700', '\x1705', '\x3', '\x2', '\x2', '\x2', '\x1701', 
		'\x1702', '\a', '\x336', '\x2', '\x2', '\x1702', '\x1703', '\x5', '\x392', 
		'\x1CA', '\x2', '\x1703', '\x1704', '\a', '\x337', '\x2', '\x2', '\x1704', 
		'\x1706', '\x3', '\x2', '\x2', '\x2', '\x1705', '\x1701', '\x3', '\x2', 
		'\x2', '\x2', '\x1705', '\x1706', '\x3', '\x2', '\x2', '\x2', '\x1706', 
		'\x1708', '\x3', '\x2', '\x2', '\x2', '\x1707', '\x1709', '\x5', '\x1C4', 
		'\xE3', '\x2', '\x1708', '\x1707', '\x3', '\x2', '\x2', '\x2', '\x1708', 
		'\x1709', '\x3', '\x2', '\x2', '\x2', '\x1709', '\x170A', '\x3', '\x2', 
		'\x2', '\x2', '\x170A', '\x170C', '\x5', '\x1BA', '\xDE', '\x2', '\x170B', 
		'\x170D', '\x5', '\x2F8', '\x17D', '\x2', '\x170C', '\x170B', '\x3', '\x2', 
		'\x2', '\x2', '\x170C', '\x170D', '\x3', '\x2', '\x2', '\x2', '\x170D', 
		'\x170F', '\x3', '\x2', '\x2', '\x2', '\x170E', '\x1710', '\x5', '\x300', 
		'\x181', '\x2', '\x170F', '\x170E', '\x3', '\x2', '\x2', '\x2', '\x170F', 
		'\x1710', '\x3', '\x2', '\x2', '\x2', '\x1710', '\x1712', '\x3', '\x2', 
		'\x2', '\x2', '\x1711', '\x1713', '\a', '\x339', '\x2', '\x2', '\x1712', 
		'\x1711', '\x3', '\x2', '\x2', '\x2', '\x1712', '\x1713', '\x3', '\x2', 
		'\x2', '\x2', '\x1713', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1714', 
		'\x171A', '\x5', '\x358', '\x1AD', '\x2', '\x1715', '\x171A', '\x5', '\x332', 
		'\x19A', '\x2', '\x1716', '\x171A', '\x5', '\x270', '\x139', '\x2', '\x1717', 
		'\x1718', '\a', 'Z', '\x2', '\x2', '\x1718', '\x171A', '\a', '\x173', 
		'\x2', '\x2', '\x1719', '\x1714', '\x3', '\x2', '\x2', '\x2', '\x1719', 
		'\x1715', '\x3', '\x2', '\x2', '\x2', '\x1719', '\x1716', '\x3', '\x2', 
		'\x2', '\x2', '\x1719', '\x1717', '\x3', '\x2', '\x2', '\x2', '\x171A', 
		'\x1BB', '\x3', '\x2', '\x2', '\x2', '\x171B', '\x171D', '\a', '\x336', 
		'\x2', '\x2', '\x171C', '\x171B', '\x3', '\x2', '\x2', '\x2', '\x171C', 
		'\x171D', '\x3', '\x2', '\x2', '\x2', '\x171D', '\x171E', '\x3', '\x2', 
		'\x2', '\x2', '\x171E', '\x1723', '\a', '\x2A3', '\x2', '\x2', '\x171F', 
		'\x1724', '\a', '\x6', '\x2', '\x2', '\x1720', '\x1724', '\a', '\x63', 
		'\x2', '\x2', '\x1721', '\x1724', '\x5', '\x2F0', '\x179', '\x2', '\x1722', 
		'\x1724', '\a', '\x33B', '\x2', '\x2', '\x1723', '\x171F', '\x3', '\x2', 
		'\x2', '\x2', '\x1723', '\x1720', '\x3', '\x2', '\x2', '\x2', '\x1723', 
		'\x1721', '\x3', '\x2', '\x2', '\x2', '\x1723', '\x1722', '\x3', '\x2', 
		'\x2', '\x2', '\x1724', '\x172D', '\x3', '\x2', '\x2', '\x2', '\x1725', 
		'\x1726', '\a', '\x31B', '\x2', '\x2', '\x1726', '\x1727', '\a', '\x324', 
		'\x2', '\x2', '\x1727', '\x1729', '\x5', '\x2CC', '\x167', '\x2', '\x1728', 
		'\x172A', '\a', '\x338', '\x2', '\x2', '\x1729', '\x1728', '\x3', '\x2', 
		'\x2', '\x2', '\x1729', '\x172A', '\x3', '\x2', '\x2', '\x2', '\x172A', 
		'\x172C', '\x3', '\x2', '\x2', '\x2', '\x172B', '\x1725', '\x3', '\x2', 
		'\x2', '\x2', '\x172C', '\x172F', '\x3', '\x2', '\x2', '\x2', '\x172D', 
		'\x172B', '\x3', '\x2', '\x2', '\x2', '\x172D', '\x172E', '\x3', '\x2', 
		'\x2', '\x2', '\x172E', '\x1730', '\x3', '\x2', '\x2', '\x2', '\x172F', 
		'\x172D', '\x3', '\x2', '\x2', '\x2', '\x1730', '\x1731', '\a', '\x8C', 
		'\x2', '\x2', '\x1731', '\x1737', '\x5', '\x380', '\x1C1', '\x2', '\x1732', 
		'\x1733', '\a', '\xA6', '\x2', '\x2', '\x1733', '\x1734', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1734', '\x1735', '\a', '\x17A', '\x2', '\x2', '\x1735', 
		'\x1736', '\x5', '\x2E2', '\x172', '\x2', '\x1736', '\x1738', '\x3', '\x2', 
		'\x2', '\x2', '\x1737', '\x1732', '\x3', '\x2', '\x2', '\x2', '\x1737', 
		'\x1738', '\x3', '\x2', '\x2', '\x2', '\x1738', '\x173A', '\x3', '\x2', 
		'\x2', '\x2', '\x1739', '\x173B', '\a', '\x337', '\x2', '\x2', '\x173A', 
		'\x1739', '\x3', '\x2', '\x2', '\x2', '\x173A', '\x173B', '\x3', '\x2', 
		'\x2', '\x2', '\x173B', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x173C', 
		'\x173E', '\x5', '\x2DA', '\x16E', '\x2', '\x173D', '\x173C', '\x3', '\x2', 
		'\x2', '\x2', '\x173D', '\x173E', '\x3', '\x2', '\x2', '\x2', '\x173E', 
		'\x173F', '\x3', '\x2', '\x2', '\x2', '\x173F', '\x1741', '\x5', '\x2EA', 
		'\x176', '\x2', '\x1740', '\x1742', '\x5', '\x2F6', '\x17C', '\x2', '\x1741', 
		'\x1740', '\x3', '\x2', '\x2', '\x2', '\x1741', '\x1742', '\x3', '\x2', 
		'\x2', '\x2', '\x1742', '\x1744', '\x3', '\x2', '\x2', '\x2', '\x1743', 
		'\x1745', '\x5', '\x2F8', '\x17D', '\x2', '\x1744', '\x1743', '\x3', '\x2', 
		'\x2', '\x2', '\x1744', '\x1745', '\x3', '\x2', '\x2', '\x2', '\x1745', 
		'\x1747', '\x3', '\x2', '\x2', '\x2', '\x1746', '\x1748', '\x5', '\x300', 
		'\x181', '\x2', '\x1747', '\x1746', '\x3', '\x2', '\x2', '\x2', '\x1747', 
		'\x1748', '\x3', '\x2', '\x2', '\x2', '\x1748', '\x174A', '\x3', '\x2', 
		'\x2', '\x2', '\x1749', '\x174B', '\a', '\x339', '\x2', '\x2', '\x174A', 
		'\x1749', '\x3', '\x2', '\x2', '\x2', '\x174A', '\x174B', '\x3', '\x2', 
		'\x2', '\x2', '\x174B', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x174C', 
		'\x174F', '\a', '\x31B', '\x2', '\x2', '\x174D', '\x174F', '\x5', '\x3B6', 
		'\x1DC', '\x2', '\x174E', '\x174C', '\x3', '\x2', '\x2', '\x2', '\x174E', 
		'\x174D', '\x3', '\x2', '\x2', '\x2', '\x174F', '\x1C1', '\x3', '\x2', 
		'\x2', '\x2', '\x1750', '\x1752', '\x5', '\x2DA', '\x16E', '\x2', '\x1751', 
		'\x1750', '\x3', '\x2', '\x2', '\x2', '\x1751', '\x1752', '\x3', '\x2', 
		'\x2', '\x2', '\x1752', '\x1753', '\x3', '\x2', '\x2', '\x2', '\x1753', 
		'\x175B', '\a', '\x16D', '\x2', '\x2', '\x1754', '\x1755', '\a', '\x15F', 
		'\x2', '\x2', '\x1755', '\x1756', '\a', '\x336', '\x2', '\x2', '\x1756', 
		'\x1757', '\x5', '\x2CC', '\x167', '\x2', '\x1757', '\x1759', '\a', '\x337', 
		'\x2', '\x2', '\x1758', '\x175A', '\a', '\xF6', '\x2', '\x2', '\x1759', 
		'\x1758', '\x3', '\x2', '\x2', '\x2', '\x1759', '\x175A', '\x3', '\x2', 
		'\x2', '\x2', '\x175A', '\x175C', '\x3', '\x2', '\x2', '\x2', '\x175B', 
		'\x1754', '\x3', '\x2', '\x2', '\x2', '\x175B', '\x175C', '\x3', '\x2', 
		'\x2', '\x2', '\x175C', '\x175F', '\x3', '\x2', '\x2', '\x2', '\x175D', 
		'\x1760', '\x5', '\x38C', '\x1C7', '\x2', '\x175E', '\x1760', '\x5', '\x25C', 
		'\x12F', '\x2', '\x175F', '\x175D', '\x3', '\x2', '\x2', '\x2', '\x175F', 
		'\x175E', '\x3', '\x2', '\x2', '\x2', '\x1760', '\x1762', '\x3', '\x2', 
		'\x2', '\x2', '\x1761', '\x1763', '\x5', '\x34C', '\x1A7', '\x2', '\x1762', 
		'\x1761', '\x3', '\x2', '\x2', '\x2', '\x1762', '\x1763', '\x3', '\x2', 
		'\x2', '\x2', '\x1763', '\x1764', '\x3', '\x2', '\x2', '\x2', '\x1764', 
		'\x1765', '\a', '\x13E', '\x2', '\x2', '\x1765', '\x176A', '\x5', '\x2DE', 
		'\x170', '\x2', '\x1766', '\x1767', '\a', '\x338', '\x2', '\x2', '\x1767', 
		'\x1769', '\x5', '\x2DE', '\x170', '\x2', '\x1768', '\x1766', '\x3', '\x2', 
		'\x2', '\x2', '\x1769', '\x176C', '\x3', '\x2', '\x2', '\x2', '\x176A', 
		'\x1768', '\x3', '\x2', '\x2', '\x2', '\x176A', '\x176B', '\x3', '\x2', 
		'\x2', '\x2', '\x176B', '\x176E', '\x3', '\x2', '\x2', '\x2', '\x176C', 
		'\x176A', '\x3', '\x2', '\x2', '\x2', '\x176D', '\x176F', '\x5', '\x1C4', 
		'\xE3', '\x2', '\x176E', '\x176D', '\x3', '\x2', '\x2', '\x2', '\x176E', 
		'\x176F', '\x3', '\x2', '\x2', '\x2', '\x176F', '\x1772', '\x3', '\x2', 
		'\x2', '\x2', '\x1770', '\x1771', '\a', '\x8C', '\x2', '\x2', '\x1771', 
		'\x1773', '\x5', '\x314', '\x18B', '\x2', '\x1772', '\x1770', '\x3', '\x2', 
		'\x2', '\x2', '\x1772', '\x1773', '\x3', '\x2', '\x2', '\x2', '\x1773', 
		'\x1781', '\x3', '\x2', '\x2', '\x2', '\x1774', '\x177F', '\a', '\x17A', 
		'\x2', '\x2', '\x1775', '\x1780', '\x5', '\x2E0', '\x171', '\x2', '\x1776', 
		'\x1777', '\a', 'K', '\x2', '\x2', '\x1777', '\x177D', '\a', '\xE2', '\x2', 
		'\x2', '\x1778', '\x177A', '\a', '\x210', '\x2', '\x2', '\x1779', '\x1778', 
		'\x3', '\x2', '\x2', '\x2', '\x1779', '\x177A', '\x3', '\x2', '\x2', '\x2', 
		'\x177A', '\x177B', '\x3', '\x2', '\x2', '\x2', '\x177B', '\x177E', '\x5', 
		'\x394', '\x1CB', '\x2', '\x177C', '\x177E', '\a', '\x31B', '\x2', '\x2', 
		'\x177D', '\x1779', '\x3', '\x2', '\x2', '\x2', '\x177D', '\x177C', '\x3', 
		'\x2', '\x2', '\x2', '\x177E', '\x1780', '\x3', '\x2', '\x2', '\x2', '\x177F', 
		'\x1775', '\x3', '\x2', '\x2', '\x2', '\x177F', '\x1776', '\x3', '\x2', 
		'\x2', '\x2', '\x1780', '\x1782', '\x3', '\x2', '\x2', '\x2', '\x1781', 
		'\x1774', '\x3', '\x2', '\x2', '\x2', '\x1781', '\x1782', '\x3', '\x2', 
		'\x2', '\x2', '\x1782', '\x1784', '\x3', '\x2', '\x2', '\x2', '\x1783', 
		'\x1785', '\x5', '\x2F8', '\x17D', '\x2', '\x1784', '\x1783', '\x3', '\x2', 
		'\x2', '\x2', '\x1784', '\x1785', '\x3', '\x2', '\x2', '\x2', '\x1785', 
		'\x1787', '\x3', '\x2', '\x2', '\x2', '\x1786', '\x1788', '\x5', '\x300', 
		'\x181', '\x2', '\x1787', '\x1786', '\x3', '\x2', '\x2', '\x2', '\x1787', 
		'\x1788', '\x3', '\x2', '\x2', '\x2', '\x1788', '\x178A', '\x3', '\x2', 
		'\x2', '\x2', '\x1789', '\x178B', '\a', '\x339', '\x2', '\x2', '\x178A', 
		'\x1789', '\x3', '\x2', '\x2', '\x2', '\x178A', '\x178B', '\x3', '\x2', 
		'\x2', '\x2', '\x178B', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x178C', 
		'\x178D', '\a', '\x27D', '\x2', '\x2', '\x178D', '\x1792', '\x5', '\x1C6', 
		'\xE4', '\x2', '\x178E', '\x178F', '\a', '\x338', '\x2', '\x2', '\x178F', 
		'\x1791', '\x5', '\x1C6', '\xE4', '\x2', '\x1790', '\x178E', '\x3', '\x2', 
		'\x2', '\x2', '\x1791', '\x1794', '\x3', '\x2', '\x2', '\x2', '\x1792', 
		'\x1790', '\x3', '\x2', '\x2', '\x2', '\x1792', '\x1793', '\x3', '\x2', 
		'\x2', '\x2', '\x1793', '\x17A0', '\x3', '\x2', '\x2', '\x2', '\x1794', 
		'\x1792', '\x3', '\x2', '\x2', '\x2', '\x1795', '\x1798', '\a', '\xA6', 
		'\x2', '\x2', '\x1796', '\x1799', '\a', '\x31B', '\x2', '\x2', '\x1797', 
		'\x1799', '\x5', '\x382', '\x1C2', '\x2', '\x1798', '\x1796', '\x3', '\x2', 
		'\x2', '\x2', '\x1798', '\x1797', '\x3', '\x2', '\x2', '\x2', '\x1799', 
		'\x179E', '\x3', '\x2', '\x2', '\x2', '\x179A', '\x179B', '\a', '\x336', 
		'\x2', '\x2', '\x179B', '\x179C', '\x5', '\x392', '\x1CA', '\x2', '\x179C', 
		'\x179D', '\a', '\x337', '\x2', '\x2', '\x179D', '\x179F', '\x3', '\x2', 
		'\x2', '\x2', '\x179E', '\x179A', '\x3', '\x2', '\x2', '\x2', '\x179E', 
		'\x179F', '\x3', '\x2', '\x2', '\x2', '\x179F', '\x17A1', '\x3', '\x2', 
		'\x2', '\x2', '\x17A0', '\x1795', '\x3', '\x2', '\x2', '\x2', '\x17A0', 
		'\x17A1', '\x3', '\x2', '\x2', '\x2', '\x17A1', '\x1C5', '\x3', '\x2', 
		'\x2', '\x2', '\x17A2', '\x17A5', '\x5', '\x1C8', '\xE5', '\x2', '\x17A3', 
		'\x17A5', '\x5', '\x2CC', '\x167', '\x2', '\x17A4', '\x17A2', '\x3', '\x2', 
		'\x2', '\x2', '\x17A4', '\x17A3', '\x3', '\x2', '\x2', '\x2', '\x17A5', 
		'\x17A7', '\x3', '\x2', '\x2', '\x2', '\x17A6', '\x17A8', '\x5', '\x346', 
		'\x1A4', '\x2', '\x17A7', '\x17A6', '\x3', '\x2', '\x2', '\x2', '\x17A7', 
		'\x17A8', '\x3', '\x2', '\x2', '\x2', '\x17A8', '\x1C7', '\x3', '\x2', 
		'\x2', '\x2', '\x17A9', '\x17AD', '\a', '\x1DA', '\x2', '\x2', '\x17AA', 
		'\x17AD', '\a', '\x225', '\x2', '\x2', '\x17AB', '\x17AD', '\x5', '\x382', 
		'\x1C2', '\x2', '\x17AC', '\x17A9', '\x3', '\x2', '\x2', '\x2', '\x17AC', 
		'\x17AA', '\x3', '\x2', '\x2', '\x2', '\x17AC', '\x17AB', '\x3', '\x2', 
		'\x2', '\x2', '\x17AD', '\x17AE', '\x3', '\x2', '\x2', '\x2', '\x17AE', 
		'\x17B1', '\a', '\x331', '\x2', '\x2', '\x17AF', '\x17B2', '\a', '\x33B', 
		'\x2', '\x2', '\x17B0', '\x17B2', '\x5', '\x3BA', '\x1DE', '\x2', '\x17B1', 
		'\x17AF', '\x3', '\x2', '\x2', '\x2', '\x17B1', '\x17B0', '\x3', '\x2', 
		'\x2', '\x2', '\x17B2', '\x17B5', '\x3', '\x2', '\x2', '\x2', '\x17B3', 
		'\x17B5', '\a', '\x314', '\x2', '\x2', '\x17B4', '\x17AC', '\x3', '\x2', 
		'\x2', '\x2', '\x17B4', '\x17B3', '\x3', '\x2', '\x2', '\x2', '\x17B5', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\x17B6', '\x17B7', '\a', 'I', '\x2', 
		'\x2', '\x17B7', '\x17B8', '\a', 'U', '\x2', '\x2', '\x17B8', '\x17BC', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x17B9', '\x17BA', '\a', '>', '\x2', 
		'\x2', '\x17BA', '\x17BB', '\a', '\x324', '\x2', '\x2', '\x17BB', '\x17BD', 
		'\t', '\x37', '\x2', '\x2', '\x17BC', '\x17B9', '\x3', '\x2', '\x2', '\x2', 
		'\x17BC', '\x17BD', '\x3', '\x2', '\x2', '\x2', '\x17BD', '\x17CA', '\x3', 
		'\x2', '\x2', '\x2', '\x17BE', '\x17C0', '\a', '\xE6', '\x2', '\x2', '\x17BF', 
		'\x17C1', '\a', '\x101', '\x2', '\x2', '\x17C0', '\x17BF', '\x3', '\x2', 
		'\x2', '\x2', '\x17C0', '\x17C1', '\x3', '\x2', '\x2', '\x2', '\x17C1', 
		'\x17C2', '\x3', '\x2', '\x2', '\x2', '\x17C2', '\x17C7', '\x5', '\x374', 
		'\x1BB', '\x2', '\x17C3', '\x17C4', '\a', '\x338', '\x2', '\x2', '\x17C4', 
		'\x17C6', '\x5', '\x374', '\x1BB', '\x2', '\x17C5', '\x17C3', '\x3', '\x2', 
		'\x2', '\x2', '\x17C6', '\x17C9', '\x3', '\x2', '\x2', '\x2', '\x17C7', 
		'\x17C5', '\x3', '\x2', '\x2', '\x2', '\x17C7', '\x17C8', '\x3', '\x2', 
		'\x2', '\x2', '\x17C8', '\x17CB', '\x3', '\x2', '\x2', '\x2', '\x17C9', 
		'\x17C7', '\x3', '\x2', '\x2', '\x2', '\x17CA', '\x17BE', '\x3', '\x2', 
		'\x2', '\x2', '\x17CA', '\x17CB', '\x3', '\x2', '\x2', '\x2', '\x17CB', 
		'\x17D6', '\x3', '\x2', '\x2', '\x2', '\x17CC', '\x17CD', '\a', '\xBC', 
		'\x2', '\x2', '\x17CD', '\x17CE', '\a', '\xE6', '\x2', '\x2', '\x17CE', 
		'\x17D3', '\x5', '\x374', '\x1BB', '\x2', '\x17CF', '\x17D0', '\a', '\x338', 
		'\x2', '\x2', '\x17D0', '\x17D2', '\x5', '\x374', '\x1BB', '\x2', '\x17D1', 
		'\x17CF', '\x3', '\x2', '\x2', '\x2', '\x17D2', '\x17D5', '\x3', '\x2', 
		'\x2', '\x2', '\x17D3', '\x17D1', '\x3', '\x2', '\x2', '\x2', '\x17D3', 
		'\x17D4', '\x3', '\x2', '\x2', '\x2', '\x17D4', '\x17D7', '\x3', '\x2', 
		'\x2', '\x2', '\x17D5', '\x17D3', '\x3', '\x2', '\x2', '\x2', '\x17D6', 
		'\x17CC', '\x3', '\x2', '\x2', '\x2', '\x17D6', '\x17D7', '\x3', '\x2', 
		'\x2', '\x2', '\x17D7', '\x17DA', '\x3', '\x2', '\x2', '\x2', '\x17D8', 
		'\x17D9', '\a', '\x37', '\x2', '\x2', '\x17D9', '\x17DB', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x17DA', '\x17D8', '\x3', '\x2', '\x2', '\x2', '\x17DA', 
		'\x17DB', '\x3', '\x2', '\x2', '\x2', '\x17DB', '\x17E5', '\x3', '\x2', 
		'\x2', '\x2', '\x17DC', '\x17DD', '\a', '\x17D', '\x2', '\x2', '\x17DD', 
		'\x17E2', '\x5', '\x370', '\x1B9', '\x2', '\x17DE', '\x17DF', '\a', '\x338', 
		'\x2', '\x2', '\x17DF', '\x17E1', '\x5', '\x370', '\x1B9', '\x2', '\x17E0', 
		'\x17DE', '\x3', '\x2', '\x2', '\x2', '\x17E1', '\x17E4', '\x3', '\x2', 
		'\x2', '\x2', '\x17E2', '\x17E0', '\x3', '\x2', '\x2', '\x2', '\x17E2', 
		'\x17E3', '\x3', '\x2', '\x2', '\x2', '\x17E3', '\x17E6', '\x3', '\x2', 
		'\x2', '\x2', '\x17E4', '\x17E2', '\x3', '\x2', '\x2', '\x2', '\x17E5', 
		'\x17DC', '\x3', '\x2', '\x2', '\x2', '\x17E5', '\x17E6', '\x3', '\x2', 
		'\x2', '\x2', '\x17E6', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x17E7', 
		'\x17E9', '\a', 'I', '\x2', '\x2', '\x17E8', '\x17EA', '\a', '\x169', 
		'\x2', '\x2', '\x17E9', '\x17E8', '\x3', '\x2', '\x2', '\x2', '\x17E9', 
		'\x17EA', '\x3', '\x2', '\x2', '\x2', '\x17EA', '\x17EC', '\x3', '\x2', 
		'\x2', '\x2', '\x17EB', '\x17ED', '\x5', '\x398', '\x1CD', '\x2', '\x17EC', 
		'\x17EB', '\x3', '\x2', '\x2', '\x2', '\x17EC', '\x17ED', '\x3', '\x2', 
		'\x2', '\x2', '\x17ED', '\x17EE', '\x3', '\x2', '\x2', '\x2', '\x17EE', 
		'\x17EF', '\a', '\x9F', '\x2', '\x2', '\x17EF', '\x17F0', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x17F0', '\x17F1', '\a', '\xE6', '\x2', '\x2', '\x17F1', 
		'\x17F2', '\x5', '\x32C', '\x197', '\x2', '\x17F2', '\x17F3', '\a', '\x336', 
		'\x2', '\x2', '\x17F3', '\x17F4', '\x5', '\x390', '\x1C9', '\x2', '\x17F4', 
		'\x17FA', '\a', '\x337', '\x2', '\x2', '\x17F5', '\x17F6', '\a', '\x9D', 
		'\x2', '\x2', '\x17F6', '\x17F7', '\a', '\x336', '\x2', '\x2', '\x17F7', 
		'\x17F8', '\x5', '\x392', '\x1CA', '\x2', '\x17F8', '\x17F9', '\a', '\x337', 
		'\x2', '\x2', '\x17F9', '\x17FB', '\x3', '\x2', '\x2', '\x2', '\x17FA', 
		'\x17F5', '\x3', '\x2', '\x2', '\x2', '\x17FA', '\x17FB', '\x3', '\x2', 
		'\x2', '\x2', '\x17FB', '\x17FE', '\x3', '\x2', '\x2', '\x2', '\x17FC', 
		'\x17FD', '\a', '\x17A', '\x2', '\x2', '\x17FD', '\x17FF', '\x5', '\x2E2', 
		'\x172', '\x2', '\x17FE', '\x17FC', '\x3', '\x2', '\x2', '\x2', '\x17FE', 
		'\x17FF', '\x3', '\x2', '\x2', '\x2', '\x17FF', '\x1801', '\x3', '\x2', 
		'\x2', '\x2', '\x1800', '\x1802', '\x5', '\x2BC', '\x15F', '\x2', '\x1801', 
		'\x1800', '\x3', '\x2', '\x2', '\x2', '\x1801', '\x1802', '\x3', '\x2', 
		'\x2', '\x2', '\x1802', '\x1805', '\x3', '\x2', '\x2', '\x2', '\x1803', 
		'\x1804', '\a', '\xE6', '\x2', '\x2', '\x1804', '\x1806', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1805', '\x1803', '\x3', '\x2', '\x2', '\x2', '\x1805', 
		'\x1806', '\x3', '\x2', '\x2', '\x2', '\x1806', '\x1808', '\x3', '\x2', 
		'\x2', '\x2', '\x1807', '\x1809', '\a', '\x339', '\x2', '\x2', '\x1808', 
		'\x1807', '\x3', '\x2', '\x2', '\x2', '\x1808', '\x1809', '\x3', '\x2', 
		'\x2', '\x2', '\x1809', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x180A', 
		'\x180D', '\a', 'I', '\x2', '\x2', '\x180B', '\x180C', '\a', '\xEE', '\x2', 
		'\x2', '\x180C', '\x180E', '\a', '\n', '\x2', '\x2', '\x180D', '\x180B', 
		'\x3', '\x2', '\x2', '\x2', '\x180D', '\x180E', '\x3', '\x2', '\x2', '\x2', 
		'\x180E', '\x1811', '\x3', '\x2', '\x2', '\x2', '\x180F', '\x1811', '\a', 
		'\n', '\x2', '\x2', '\x1810', '\x180A', '\x3', '\x2', '\x2', '\x2', '\x1810', 
		'\x180F', '\x3', '\x2', '\x2', '\x2', '\x1811', '\x1812', '\x3', '\x2', 
		'\x2', '\x2', '\x1812', '\x1813', '\t', '\x38', '\x2', '\x2', '\x1813', 
		'\x1816', '\x5', '\x386', '\x1C4', '\x2', '\x1814', '\x1815', '\a', '\x339', 
		'\x2', '\x2', '\x1815', '\x1817', '\a', '\x31C', '\x2', '\x2', '\x1816', 
		'\x1814', '\x3', '\x2', '\x2', '\x2', '\x1816', '\x1817', '\x3', '\x2', 
		'\x2', '\x2', '\x1817', '\x1826', '\x3', '\x2', '\x2', '\x2', '\x1818', 
		'\x181A', '\a', '\x336', '\x2', '\x2', '\x1819', '\x1818', '\x3', '\x2', 
		'\x2', '\x2', '\x1819', '\x181A', '\x3', '\x2', '\x2', '\x2', '\x181A', 
		'\x181B', '\x3', '\x2', '\x2', '\x2', '\x181B', '\x1820', '\x5', '\x1E4', 
		'\xF3', '\x2', '\x181C', '\x181D', '\a', '\x338', '\x2', '\x2', '\x181D', 
		'\x181F', '\x5', '\x1E4', '\xF3', '\x2', '\x181E', '\x181C', '\x3', '\x2', 
		'\x2', '\x2', '\x181F', '\x1822', '\x3', '\x2', '\x2', '\x2', '\x1820', 
		'\x181E', '\x3', '\x2', '\x2', '\x2', '\x1820', '\x1821', '\x3', '\x2', 
		'\x2', '\x2', '\x1821', '\x1824', '\x3', '\x2', '\x2', '\x2', '\x1822', 
		'\x1820', '\x3', '\x2', '\x2', '\x2', '\x1823', '\x1825', '\a', '\x337', 
		'\x2', '\x2', '\x1824', '\x1823', '\x3', '\x2', '\x2', '\x2', '\x1824', 
		'\x1825', '\x3', '\x2', '\x2', '\x2', '\x1825', '\x1827', '\x3', '\x2', 
		'\x2', '\x2', '\x1826', '\x1819', '\x3', '\x2', '\x2', '\x2', '\x1826', 
		'\x1827', '\x3', '\x2', '\x2', '\x2', '\x1827', '\x1831', '\x3', '\x2', 
		'\x2', '\x2', '\x1828', '\x1829', '\a', '\x17D', '\x2', '\x2', '\x1829', 
		'\x182E', '\x5', '\x1E6', '\xF4', '\x2', '\x182A', '\x182B', '\a', '\x338', 
		'\x2', '\x2', '\x182B', '\x182D', '\x5', '\x1E6', '\xF4', '\x2', '\x182C', 
		'\x182A', '\x3', '\x2', '\x2', '\x2', '\x182D', '\x1830', '\x3', '\x2', 
		'\x2', '\x2', '\x182E', '\x182C', '\x3', '\x2', '\x2', '\x2', '\x182E', 
		'\x182F', '\x3', '\x2', '\x2', '\x2', '\x182F', '\x1832', '\x3', '\x2', 
		'\x2', '\x2', '\x1830', '\x182E', '\x3', '\x2', '\x2', '\x2', '\x1831', 
		'\x1828', '\x3', '\x2', '\x2', '\x2', '\x1831', '\x1832', '\x3', '\x2', 
		'\x2', '\x2', '\x1832', '\x1835', '\x3', '\x2', '\x2', '\x2', '\x1833', 
		'\x1834', '\a', '\x86', '\x2', '\x2', '\x1834', '\x1836', '\a', '\x113', 
		'\x2', '\x2', '\x1835', '\x1833', '\x3', '\x2', '\x2', '\x2', '\x1835', 
		'\x1836', '\x3', '\x2', '\x2', '\x2', '\x1836', '\x1837', '\x3', '\x2', 
		'\x2', '\x2', '\x1837', '\x1838', '\a', '\x10', '\x2', '\x2', '\x1838', 
		'\x1839', '\x5', '\x6', '\x4', '\x2', '\x1839', '\x1CF', '\x3', '\x2', 
		'\x2', '\x2', '\x183A', '\x183D', '\x5', '\x1D2', '\xEA', '\x2', '\x183B', 
		'\x183D', '\x5', '\x1D8', '\xED', '\x2', '\x183C', '\x183A', '\x3', '\x2', 
		'\x2', '\x2', '\x183C', '\x183B', '\x3', '\x2', '\x2', '\x2', '\x183D', 
		'\x1D1', '\x3', '\x2', '\x2', '\x2', '\x183E', '\x1841', '\a', 'I', '\x2', 
		'\x2', '\x183F', '\x1840', '\a', '\xEE', '\x2', '\x2', '\x1840', '\x1842', 
		'\a', '\n', '\x2', '\x2', '\x1841', '\x183F', '\x3', '\x2', '\x2', '\x2', 
		'\x1841', '\x1842', '\x3', '\x2', '\x2', '\x2', '\x1842', '\x1845', '\x3', 
		'\x2', '\x2', '\x2', '\x1843', '\x1845', '\a', '\n', '\x2', '\x2', '\x1844', 
		'\x183E', '\x3', '\x2', '\x2', '\x2', '\x1844', '\x1843', '\x3', '\x2', 
		'\x2', '\x2', '\x1845', '\x1846', '\x3', '\x2', '\x2', '\x2', '\x1846', 
		'\x1847', '\a', '\x164', '\x2', '\x2', '\x1847', '\x1848', '\x5', '\x384', 
		'\x1C3', '\x2', '\x1848', '\x1849', '\a', '\xE6', '\x2', '\x2', '\x1849', 
		'\x1853', '\x5', '\x382', '\x1C2', '\x2', '\x184A', '\x184B', '\a', '\x17D', 
		'\x2', '\x2', '\x184B', '\x1850', '\x5', '\x1D4', '\xEB', '\x2', '\x184C', 
		'\x184D', '\a', '\x338', '\x2', '\x2', '\x184D', '\x184F', '\x5', '\x1D4', 
		'\xEB', '\x2', '\x184E', '\x184C', '\x3', '\x2', '\x2', '\x2', '\x184F', 
		'\x1852', '\x3', '\x2', '\x2', '\x2', '\x1850', '\x184E', '\x3', '\x2', 
		'\x2', '\x2', '\x1850', '\x1851', '\x3', '\x2', '\x2', '\x2', '\x1851', 
		'\x1854', '\x3', '\x2', '\x2', '\x2', '\x1852', '\x1850', '\x3', '\x2', 
		'\x2', '\x2', '\x1853', '\x184A', '\x3', '\x2', '\x2', '\x2', '\x1853', 
		'\x1854', '\x3', '\x2', '\x2', '\x2', '\x1854', '\x1859', '\x3', '\x2', 
		'\x2', '\x2', '\x1855', '\x185A', '\a', '\x86', '\x2', '\x2', '\x1856', 
		'\x185A', '\a', '\x18C', '\x2', '\x2', '\x1857', '\x1858', '\a', '\xA4', 
		'\x2', '\x2', '\x1858', '\x185A', '\a', '\xE2', '\x2', '\x2', '\x1859', 
		'\x1855', '\x3', '\x2', '\x2', '\x2', '\x1859', '\x1856', '\x3', '\x2', 
		'\x2', '\x2', '\x1859', '\x1857', '\x3', '\x2', '\x2', '\x2', '\x185A', 
		'\x185B', '\x3', '\x2', '\x2', '\x2', '\x185B', '\x1860', '\x5', '\x1D6', 
		'\xEC', '\x2', '\x185C', '\x185D', '\a', '\x338', '\x2', '\x2', '\x185D', 
		'\x185F', '\x5', '\x1D6', '\xEC', '\x2', '\x185E', '\x185C', '\x3', '\x2', 
		'\x2', '\x2', '\x185F', '\x1862', '\x3', '\x2', '\x2', '\x2', '\x1860', 
		'\x185E', '\x3', '\x2', '\x2', '\x2', '\x1860', '\x1861', '\x3', '\x2', 
		'\x2', '\x2', '\x1861', '\x1865', '\x3', '\x2', '\x2', '\x2', '\x1862', 
		'\x1860', '\x3', '\x2', '\x2', '\x2', '\x1863', '\x1864', '\a', '\x17D', 
		'\x2', '\x2', '\x1864', '\x1866', '\a', '\xE', '\x2', '\x2', '\x1865', 
		'\x1863', '\x3', '\x2', '\x2', '\x2', '\x1865', '\x1866', '\x3', '\x2', 
		'\x2', '\x2', '\x1866', '\x186A', '\x3', '\x2', '\x2', '\x2', '\x1867', 
		'\x1868', '\a', '\xDD', '\x2', '\x2', '\x1868', '\x1869', '\a', '\x86', 
		'\x2', '\x2', '\x1869', '\x186B', '\a', '\x113', '\x2', '\x2', '\x186A', 
		'\x1867', '\x3', '\x2', '\x2', '\x2', '\x186A', '\x186B', '\x3', '\x2', 
		'\x2', '\x2', '\x186B', '\x186C', '\x3', '\x2', '\x2', '\x2', '\x186C', 
		'\x186D', '\a', '\x10', '\x2', '\x2', '\x186D', '\x186E', '\x5', '\x6', 
		'\x4', '\x2', '\x186E', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x186F', 
		'\x1872', '\a', '\x1EF', '\x2', '\x2', '\x1870', '\x1872', '\x5', '\x2A2', 
		'\x152', '\x2', '\x1871', '\x186F', '\x3', '\x2', '\x2', '\x2', '\x1871', 
		'\x1870', '\x3', '\x2', '\x2', '\x2', '\x1872', '\x1D5', '\x3', '\x2', 
		'\x2', '\x2', '\x1873', '\x1874', '\t', '\x39', '\x2', '\x2', '\x1874', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1875', '\x1878', '\a', 'I', '\x2', 
		'\x2', '\x1876', '\x1877', '\a', '\xEE', '\x2', '\x2', '\x1877', '\x1879', 
		'\a', '\n', '\x2', '\x2', '\x1878', '\x1876', '\x3', '\x2', '\x2', '\x2', 
		'\x1878', '\x1879', '\x3', '\x2', '\x2', '\x2', '\x1879', '\x187C', '\x3', 
		'\x2', '\x2', '\x2', '\x187A', '\x187C', '\a', '\n', '\x2', '\x2', '\x187B', 
		'\x1875', '\x3', '\x2', '\x2', '\x2', '\x187B', '\x187A', '\x3', '\x2', 
		'\x2', '\x2', '\x187C', '\x187D', '\x3', '\x2', '\x2', '\x2', '\x187D', 
		'\x187E', '\a', '\x164', '\x2', '\x2', '\x187E', '\x187F', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x187F', '\x1883', '\a', '\xE6', '\x2', '\x2', '\x1880', 
		'\x1881', '\a', '\x6', '\x2', '\x2', '\x1881', '\x1884', '\a', '\x138', 
		'\x2', '\x2', '\x1882', '\x1884', '\a', 'U', '\x2', '\x2', '\x1883', '\x1880', 
		'\x3', '\x2', '\x2', '\x2', '\x1883', '\x1882', '\x3', '\x2', '\x2', '\x2', 
		'\x1884', '\x188E', '\x3', '\x2', '\x2', '\x2', '\x1885', '\x1886', '\a', 
		'\x17D', '\x2', '\x2', '\x1886', '\x188B', '\x5', '\x1D4', '\xEB', '\x2', 
		'\x1887', '\x1888', '\a', '\x338', '\x2', '\x2', '\x1888', '\x188A', '\x5', 
		'\x1D4', '\xEB', '\x2', '\x1889', '\x1887', '\x3', '\x2', '\x2', '\x2', 
		'\x188A', '\x188D', '\x3', '\x2', '\x2', '\x2', '\x188B', '\x1889', '\x3', 
		'\x2', '\x2', '\x2', '\x188B', '\x188C', '\x3', '\x2', '\x2', '\x2', '\x188C', 
		'\x188F', '\x3', '\x2', '\x2', '\x2', '\x188D', '\x188B', '\x3', '\x2', 
		'\x2', '\x2', '\x188E', '\x1885', '\x3', '\x2', '\x2', '\x2', '\x188E', 
		'\x188F', '\x3', '\x2', '\x2', '\x2', '\x188F', '\x1890', '\x3', '\x2', 
		'\x2', '\x2', '\x1890', '\x1891', '\t', ':', '\x2', '\x2', '\x1891', '\x1896', 
		'\x5', '\x1DA', '\xEE', '\x2', '\x1892', '\x1893', '\a', '\x338', '\x2', 
		'\x2', '\x1893', '\x1895', '\x5', '\x1D6', '\xEC', '\x2', '\x1894', '\x1892', 
		'\x3', '\x2', '\x2', '\x2', '\x1895', '\x1898', '\x3', '\x2', '\x2', '\x2', 
		'\x1896', '\x1894', '\x3', '\x2', '\x2', '\x2', '\x1896', '\x1897', '\x3', 
		'\x2', '\x2', '\x2', '\x1897', '\x1899', '\x3', '\x2', '\x2', '\x2', '\x1898', 
		'\x1896', '\x3', '\x2', '\x2', '\x2', '\x1899', '\x189A', '\a', '\x10', 
		'\x2', '\x2', '\x189A', '\x189B', '\x5', '\x6', '\x4', '\x2', '\x189B', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x189C', '\x189D', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x189D', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x189E', 
		'\x18A1', '\a', 'I', '\x2', '\x2', '\x189F', '\x18A0', '\a', '\xEE', '\x2', 
		'\x2', '\x18A0', '\x18A2', '\a', '\n', '\x2', '\x2', '\x18A1', '\x189F', 
		'\x3', '\x2', '\x2', '\x2', '\x18A1', '\x18A2', '\x3', '\x2', '\x2', '\x2', 
		'\x18A2', '\x18A5', '\x3', '\x2', '\x2', '\x2', '\x18A3', '\x18A5', '\a', 
		'\n', '\x2', '\x2', '\x18A4', '\x189E', '\x3', '\x2', '\x2', '\x2', '\x18A4', 
		'\x18A3', '\x3', '\x2', '\x2', '\x2', '\x18A5', '\x18A6', '\x3', '\x2', 
		'\x2', '\x2', '\x18A6', '\x18A7', '\a', '\x8E', '\x2', '\x2', '\x18A7', 
		'\x18B5', '\x5', '\x386', '\x1C4', '\x2', '\x18A8', '\x18A9', '\a', '\x336', 
		'\x2', '\x2', '\x18A9', '\x18AE', '\x5', '\x1E4', '\xF3', '\x2', '\x18AA', 
		'\x18AB', '\a', '\x338', '\x2', '\x2', '\x18AB', '\x18AD', '\x5', '\x1E4', 
		'\xF3', '\x2', '\x18AC', '\x18AA', '\x3', '\x2', '\x2', '\x2', '\x18AD', 
		'\x18B0', '\x3', '\x2', '\x2', '\x2', '\x18AE', '\x18AC', '\x3', '\x2', 
		'\x2', '\x2', '\x18AE', '\x18AF', '\x3', '\x2', '\x2', '\x2', '\x18AF', 
		'\x18B1', '\x3', '\x2', '\x2', '\x2', '\x18B0', '\x18AE', '\x3', '\x2', 
		'\x2', '\x2', '\x18B1', '\x18B2', '\a', '\x337', '\x2', '\x2', '\x18B2', 
		'\x18B6', '\x3', '\x2', '\x2', '\x2', '\x18B3', '\x18B4', '\a', '\x336', 
		'\x2', '\x2', '\x18B4', '\x18B6', '\a', '\x337', '\x2', '\x2', '\x18B5', 
		'\x18A8', '\x3', '\x2', '\x2', '\x2', '\x18B5', '\x18B3', '\x3', '\x2', 
		'\x2', '\x2', '\x18B6', '\x18BA', '\x3', '\x2', '\x2', '\x2', '\x18B7', 
		'\x18BB', '\x5', '\x1DE', '\xF0', '\x2', '\x18B8', '\x18BB', '\x5', '\x1E0', 
		'\xF1', '\x2', '\x18B9', '\x18BB', '\x5', '\x1E2', '\xF2', '\x2', '\x18BA', 
		'\x18B7', '\x3', '\x2', '\x2', '\x2', '\x18BA', '\x18B8', '\x3', '\x2', 
		'\x2', '\x2', '\x18BA', '\x18B9', '\x3', '\x2', '\x2', '\x2', '\x18BB', 
		'\x18BD', '\x3', '\x2', '\x2', '\x2', '\x18BC', '\x18BE', '\a', '\x339', 
		'\x2', '\x2', '\x18BD', '\x18BC', '\x3', '\x2', '\x2', '\x2', '\x18BD', 
		'\x18BE', '\x3', '\x2', '\x2', '\x2', '\x18BE', '\x1DD', '\x3', '\x2', 
		'\x2', '\x2', '\x18BF', '\x18C0', '\a', '\x11C', '\x2', '\x2', '\x18C0', 
		'\x18CA', '\a', '\x157', '\x2', '\x2', '\x18C1', '\x18C2', '\a', '\x17D', 
		'\x2', '\x2', '\x18C2', '\x18C7', '\x5', '\x1E8', '\xF5', '\x2', '\x18C3', 
		'\x18C4', '\a', '\x338', '\x2', '\x2', '\x18C4', '\x18C6', '\x5', '\x1E8', 
		'\xF5', '\x2', '\x18C5', '\x18C3', '\x3', '\x2', '\x2', '\x2', '\x18C6', 
		'\x18C9', '\x3', '\x2', '\x2', '\x2', '\x18C7', '\x18C5', '\x3', '\x2', 
		'\x2', '\x2', '\x18C7', '\x18C8', '\x3', '\x2', '\x2', '\x2', '\x18C8', 
		'\x18CB', '\x3', '\x2', '\x2', '\x2', '\x18C9', '\x18C7', '\x3', '\x2', 
		'\x2', '\x2', '\x18CA', '\x18C1', '\x3', '\x2', '\x2', '\x2', '\x18CA', 
		'\x18CB', '\x3', '\x2', '\x2', '\x2', '\x18CB', '\x18CD', '\x3', '\x2', 
		'\x2', '\x2', '\x18CC', '\x18CE', '\a', '\x10', '\x2', '\x2', '\x18CD', 
		'\x18CC', '\x3', '\x2', '\x2', '\x2', '\x18CD', '\x18CE', '\x3', '\x2', 
		'\x2', '\x2', '\x18CE', '\x18CF', '\x3', '\x2', '\x2', '\x2', '\x18CF', 
		'\x18D5', '\a', '\x11B', '\x2', '\x2', '\x18D0', '\x18D1', '\a', '\x336', 
		'\x2', '\x2', '\x18D1', '\x18D2', '\x5', '\x1BE', '\xE0', '\x2', '\x18D2', 
		'\x18D3', '\a', '\x337', '\x2', '\x2', '\x18D3', '\x18D6', '\x3', '\x2', 
		'\x2', '\x2', '\x18D4', '\x18D6', '\x5', '\x1BE', '\xE0', '\x2', '\x18D5', 
		'\x18D0', '\x3', '\x2', '\x2', '\x2', '\x18D5', '\x18D4', '\x3', '\x2', 
		'\x2', '\x2', '\x18D6', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x18D7', 
		'\x18D8', '\a', '\x11C', '\x2', '\x2', '\x18D8', '\x18D9', '\a', '\x31B', 
		'\x2', '\x2', '\x18D9', '\x18E3', '\x5', '\x2A6', '\x154', '\x2', '\x18DA', 
		'\x18DB', '\a', '\x17D', '\x2', '\x2', '\x18DB', '\x18E0', '\x5', '\x1E8', 
		'\xF5', '\x2', '\x18DC', '\x18DD', '\a', '\x338', '\x2', '\x2', '\x18DD', 
		'\x18DF', '\x5', '\x1E8', '\xF5', '\x2', '\x18DE', '\x18DC', '\x3', '\x2', 
		'\x2', '\x2', '\x18DF', '\x18E2', '\x3', '\x2', '\x2', '\x2', '\x18E0', 
		'\x18DE', '\x3', '\x2', '\x2', '\x2', '\x18E0', '\x18E1', '\x3', '\x2', 
		'\x2', '\x2', '\x18E1', '\x18E4', '\x3', '\x2', '\x2', '\x2', '\x18E2', 
		'\x18E0', '\x3', '\x2', '\x2', '\x2', '\x18E3', '\x18DA', '\x3', '\x2', 
		'\x2', '\x2', '\x18E3', '\x18E4', '\x3', '\x2', '\x2', '\x2', '\x18E4', 
		'\x18E6', '\x3', '\x2', '\x2', '\x2', '\x18E5', '\x18E7', '\a', '\x10', 
		'\x2', '\x2', '\x18E6', '\x18E5', '\x3', '\x2', '\x2', '\x2', '\x18E6', 
		'\x18E7', '\x3', '\x2', '\x2', '\x2', '\x18E7', '\x18E8', '\x3', '\x2', 
		'\x2', '\x2', '\x18E8', '\x18EC', '\a', '\x1C', '\x2', '\x2', '\x18E9', 
		'\x18EB', '\x5', '\b', '\x5', '\x2', '\x18EA', '\x18E9', '\x3', '\x2', 
		'\x2', '\x2', '\x18EB', '\x18EE', '\x3', '\x2', '\x2', '\x2', '\x18EC', 
		'\x18EA', '\x3', '\x2', '\x2', '\x2', '\x18EC', '\x18ED', '\x3', '\x2', 
		'\x2', '\x2', '\x18ED', '\x18EF', '\x3', '\x2', '\x2', '\x2', '\x18EE', 
		'\x18EC', '\x3', '\x2', '\x2', '\x2', '\x18EF', '\x18F1', '\a', '\x11B', 
		'\x2', '\x2', '\x18F0', '\x18F2', '\a', '\x339', '\x2', '\x2', '\x18F1', 
		'\x18F0', '\x3', '\x2', '\x2', '\x2', '\x18F1', '\x18F2', '\x3', '\x2', 
		'\x2', '\x2', '\x18F2', '\x18F3', '\x3', '\x2', '\x2', '\x2', '\x18F3', 
		'\x18F5', '\a', 'm', '\x2', '\x2', '\x18F4', '\x18F6', '\a', '\x339', 
		'\x2', '\x2', '\x18F5', '\x18F4', '\x3', '\x2', '\x2', '\x2', '\x18F5', 
		'\x18F6', '\x3', '\x2', '\x2', '\x2', '\x18F6', '\x1E1', '\x3', '\x2', 
		'\x2', '\x2', '\x18F7', '\x18F8', '\a', '\x11C', '\x2', '\x2', '\x18F8', 
		'\x1902', '\x5', '\x3B2', '\x1DA', '\x2', '\x18F9', '\x18FA', '\a', '\x17D', 
		'\x2', '\x2', '\x18FA', '\x18FF', '\x5', '\x1E8', '\xF5', '\x2', '\x18FB', 
		'\x18FC', '\a', '\x338', '\x2', '\x2', '\x18FC', '\x18FE', '\x5', '\x1E8', 
		'\xF5', '\x2', '\x18FD', '\x18FB', '\x3', '\x2', '\x2', '\x2', '\x18FE', 
		'\x1901', '\x3', '\x2', '\x2', '\x2', '\x18FF', '\x18FD', '\x3', '\x2', 
		'\x2', '\x2', '\x18FF', '\x1900', '\x3', '\x2', '\x2', '\x2', '\x1900', 
		'\x1903', '\x3', '\x2', '\x2', '\x2', '\x1901', '\x18FF', '\x3', '\x2', 
		'\x2', '\x2', '\x1902', '\x18F9', '\x3', '\x2', '\x2', '\x2', '\x1902', 
		'\x1903', '\x3', '\x2', '\x2', '\x2', '\x1903', '\x1905', '\x3', '\x2', 
		'\x2', '\x2', '\x1904', '\x1906', '\a', '\x10', '\x2', '\x2', '\x1905', 
		'\x1904', '\x3', '\x2', '\x2', '\x2', '\x1905', '\x1906', '\x3', '\x2', 
		'\x2', '\x2', '\x1906', '\x1907', '\x3', '\x2', '\x2', '\x2', '\x1907', 
		'\x190B', '\a', '\x1C', '\x2', '\x2', '\x1908', '\x190A', '\x5', '\b', 
		'\x5', '\x2', '\x1909', '\x1908', '\x3', '\x2', '\x2', '\x2', '\x190A', 
		'\x190D', '\x3', '\x2', '\x2', '\x2', '\x190B', '\x1909', '\x3', '\x2', 
		'\x2', '\x2', '\x190B', '\x190C', '\x3', '\x2', '\x2', '\x2', '\x190C', 
		'\x190E', '\x3', '\x2', '\x2', '\x2', '\x190D', '\x190B', '\x3', '\x2', 
		'\x2', '\x2', '\x190E', '\x190F', '\a', '\x11B', '\x2', '\x2', '\x190F', 
		'\x1911', '\x5', '\x2CC', '\x167', '\x2', '\x1910', '\x1912', '\a', '\x339', 
		'\x2', '\x2', '\x1911', '\x1910', '\x3', '\x2', '\x2', '\x2', '\x1911', 
		'\x1912', '\x3', '\x2', '\x2', '\x2', '\x1912', '\x1913', '\x3', '\x2', 
		'\x2', '\x2', '\x1913', '\x1914', '\a', 'm', '\x2', '\x2', '\x1914', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x1915', '\x1919', '\a', '\x31B', '\x2', 
		'\x2', '\x1916', '\x1917', '\x5', '\x3BA', '\x1DE', '\x2', '\x1917', '\x1918', 
		'\a', '\x331', '\x2', '\x2', '\x1918', '\x191A', '\x3', '\x2', '\x2', 
		'\x2', '\x1919', '\x1916', '\x3', '\x2', '\x2', '\x2', '\x1919', '\x191A', 
		'\x3', '\x2', '\x2', '\x2', '\x191A', '\x191C', '\x3', '\x2', '\x2', '\x2', 
		'\x191B', '\x191D', '\a', '\x10', '\x2', '\x2', '\x191C', '\x191B', '\x3', 
		'\x2', '\x2', '\x2', '\x191C', '\x191D', '\x3', '\x2', '\x2', '\x2', '\x191D', 
		'\x191E', '\x3', '\x2', '\x2', '\x2', '\x191E', '\x1920', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x191F', '\x1921', '\a', '\x174', '\x2', '\x2', '\x1920', 
		'\x191F', '\x3', '\x2', '\x2', '\x2', '\x1920', '\x1921', '\x3', '\x2', 
		'\x2', '\x2', '\x1921', '\x1924', '\x3', '\x2', '\x2', '\x2', '\x1922', 
		'\x1923', '\a', '\x324', '\x2', '\x2', '\x1923', '\x1925', '\x5', '\x3B4', 
		'\x1DB', '\x2', '\x1924', '\x1922', '\x3', '\x2', '\x2', '\x2', '\x1924', 
		'\x1925', '\x3', '\x2', '\x2', '\x2', '\x1925', '\x1927', '\x3', '\x2', 
		'\x2', '\x2', '\x1926', '\x1928', '\t', ';', '\x2', '\x2', '\x1927', '\x1926', 
		'\x3', '\x2', '\x2', '\x2', '\x1927', '\x1928', '\x3', '\x2', '\x2', '\x2', 
		'\x1928', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1929', '\x192D', '\a', 
		'\x1EF', '\x2', '\x2', '\x192A', '\x192D', '\a', '\x2A4', '\x2', '\x2', 
		'\x192B', '\x192D', '\x5', '\x2A2', '\x152', '\x2', '\x192C', '\x1929', 
		'\x3', '\x2', '\x2', '\x2', '\x192C', '\x192A', '\x3', '\x2', '\x2', '\x2', 
		'\x192C', '\x192B', '\x3', '\x2', '\x2', '\x2', '\x192D', '\x1E7', '\x3', 
		'\x2', '\x2', '\x2', '\x192E', '\x193B', '\a', '\x1EF', '\x2', '\x2', 
		'\x192F', '\x193B', '\a', '\x2BF', '\x2', '\x2', '\x1930', '\x1931', '\a', 
		'\x11C', '\x2', '\x2', '\x1931', '\x1932', '\a', '\xE0', '\x2', '\x2', 
		'\x1932', '\x1933', '\a', '\xE6', '\x2', '\x2', '\x1933', '\x1934', '\a', 
		'\xE0', '\x2', '\x2', '\x1934', '\x193B', '\a', '\x223', '\x2', '\x2', 
		'\x1935', '\x1936', '\a', '(', '\x2', '\x2', '\x1936', '\x1937', '\a', 
		'\xE6', '\x2', '\x2', '\x1937', '\x1938', '\a', '\xE0', '\x2', '\x2', 
		'\x1938', '\x193B', '\a', '\x223', '\x2', '\x2', '\x1939', '\x193B', '\x5', 
		'\x2A2', '\x152', '\x2', '\x193A', '\x192E', '\x3', '\x2', '\x2', '\x2', 
		'\x193A', '\x192F', '\x3', '\x2', '\x2', '\x2', '\x193A', '\x1930', '\x3', 
		'\x2', '\x2', '\x2', '\x193A', '\x1935', '\x3', '\x2', '\x2', '\x2', '\x193A', 
		'\x1939', '\x3', '\x2', '\x2', '\x2', '\x193B', '\x1E9', '\x3', '\x2', 
		'\x2', '\x2', '\x193C', '\x193D', '\a', 'I', '\x2', '\x2', '\x193D', '\x193E', 
		'\a', '\x14B', '\x2', '\x2', '\x193E', '\x193F', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x193F', '\x1940', '\a', '\xE6', '\x2', '\x2', '\x1940', '\x1941', 
		'\x5', '\x32C', '\x197', '\x2', '\x1941', '\x1942', '\a', '\x336', '\x2', 
		'\x2', '\x1942', '\x1943', '\x5', '\x392', '\x1CA', '\x2', '\x1943', '\x1956', 
		'\a', '\x337', '\x2', '\x2', '\x1944', '\x194A', '\a', '\x17D', '\x2', 
		'\x2', '\x1945', '\x194B', '\a', '\x20B', '\x2', '\x2', '\x1946', '\x1947', 
		'\a', '\x2BE', '\x2', '\x2', '\x1947', '\x1948', '\a', '\x31C', '\x2', 
		'\x2', '\x1948', '\x194B', '\t', '<', '\x2', '\x2', '\x1949', '\x194B', 
		'\a', '\x2DE', '\x2', '\x2', '\x194A', '\x1945', '\x3', '\x2', '\x2', 
		'\x2', '\x194A', '\x1946', '\x3', '\x2', '\x2', '\x2', '\x194A', '\x1949', 
		'\x3', '\x2', '\x2', '\x2', '\x194B', '\x194E', '\x3', '\x2', '\x2', '\x2', 
		'\x194C', '\x194D', '\a', '\x338', '\x2', '\x2', '\x194D', '\x194F', '\a', 
		'\x26C', '\x2', '\x2', '\x194E', '\x194C', '\x3', '\x2', '\x2', '\x2', 
		'\x194E', '\x194F', '\x3', '\x2', '\x2', '\x2', '\x194F', '\x1954', '\x3', 
		'\x2', '\x2', '\x2', '\x1950', '\x1951', '\a', '\x338', '\x2', '\x2', 
		'\x1951', '\x1952', '\a', '\x221', '\x2', '\x2', '\x1952', '\x1953', '\a', 
		'\x324', '\x2', '\x2', '\x1953', '\x1955', '\x5', '\x396', '\x1CC', '\x2', 
		'\x1954', '\x1950', '\x3', '\x2', '\x2', '\x2', '\x1954', '\x1955', '\x3', 
		'\x2', '\x2', '\x2', '\x1955', '\x1957', '\x3', '\x2', '\x2', '\x2', '\x1956', 
		'\x1944', '\x3', '\x2', '\x2', '\x2', '\x1956', '\x1957', '\x3', '\x2', 
		'\x2', '\x2', '\x1957', '\x1959', '\x3', '\x2', '\x2', '\x2', '\x1958', 
		'\x195A', '\a', '\x339', '\x2', '\x2', '\x1959', '\x1958', '\x3', '\x2', 
		'\x2', '\x2', '\x1959', '\x195A', '\x3', '\x2', '\x2', '\x2', '\x195A', 
		'\x1EB', '\x3', '\x2', '\x2', '\x2', '\x195B', '\x195D', '\a', '\x16D', 
		'\x2', '\x2', '\x195C', '\x195E', '\t', '=', '\x2', '\x2', '\x195D', '\x195C', 
		'\x3', '\x2', '\x2', '\x2', '\x195D', '\x195E', '\x3', '\x2', '\x2', '\x2', 
		'\x195E', '\x195F', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1960', '\a', 
		'\x14B', '\x2', '\x2', '\x1960', '\x1962', '\x5', '\x380', '\x1C1', '\x2', 
		'\x1961', '\x1963', '\x5', '\x3BA', '\x1DE', '\x2', '\x1962', '\x1961', 
		'\x3', '\x2', '\x2', '\x2', '\x1962', '\x1963', '\x3', '\x2', '\x2', '\x2', 
		'\x1963', '\x1967', '\x3', '\x2', '\x2', '\x2', '\x1964', '\x1965', '\a', 
		'\x302', '\x2', '\x2', '\x1965', '\x1966', '\a', '\x31C', '\x2', '\x2', 
		'\x1966', '\x1968', '\a', '\x173', '\x2', '\x2', '\x1967', '\x1964', '\x3', 
		'\x2', '\x2', '\x2', '\x1967', '\x1968', '\x3', '\x2', '\x2', '\x2', '\x1968', 
		'\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1969', '\x196A', '\a', 'I', '\x2', 
		'\x2', '\x196A', '\x196B', '\a', '\x157', '\x2', '\x2', '\x196B', '\x196C', 
		'\x5', '\x382', '\x1C2', '\x2', '\x196C', '\x196D', '\a', '\x336', '\x2', 
		'\x2', '\x196D', '\x196F', '\x5', '\x2AC', '\x157', '\x2', '\x196E', '\x1970', 
		'\a', '\x338', '\x2', '\x2', '\x196F', '\x196E', '\x3', '\x2', '\x2', 
		'\x2', '\x196F', '\x1970', '\x3', '\x2', '\x2', '\x2', '\x1970', '\x1971', 
		'\x3', '\x2', '\x2', '\x2', '\x1971', '\x1974', '\a', '\x337', '\x2', 
		'\x2', '\x1972', '\x1973', '\a', '\x23B', '\x2', '\x2', '\x1973', '\x1975', 
		'\x5', '\x3BC', '\x1DF', '\x2', '\x1974', '\x1972', '\x3', '\x2', '\x2', 
		'\x2', '\x1974', '\x1975', '\x3', '\x2', '\x2', '\x2', '\x1975', '\x1979', 
		'\x3', '\x2', '\x2', '\x2', '\x1976', '\x1978', '\x5', '\x1F0', '\xF9', 
		'\x2', '\x1977', '\x1976', '\x3', '\x2', '\x2', '\x2', '\x1978', '\x197B', 
		'\x3', '\x2', '\x2', '\x2', '\x1979', '\x1977', '\x3', '\x2', '\x2', '\x2', 
		'\x1979', '\x197A', '\x3', '\x2', '\x2', '\x2', '\x197A', '\x197F', '\x3', 
		'\x2', '\x2', '\x2', '\x197B', '\x1979', '\x3', '\x2', '\x2', '\x2', '\x197C', 
		'\x197D', '\a', '\xE6', '\x2', '\x2', '\x197D', '\x1980', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x197E', '\x1980', '\a', 'Z', '\x2', '\x2', '\x197F', 
		'\x197C', '\x3', '\x2', '\x2', '\x2', '\x197F', '\x197E', '\x3', '\x2', 
		'\x2', '\x2', '\x197F', '\x1980', '\x3', '\x2', '\x2', '\x2', '\x1980', 
		'\x1984', '\x3', '\x2', '\x2', '\x2', '\x1981', '\x1982', '\a', '\x2ED', 
		'\x2', '\x2', '\x1982', '\x1985', '\x5', '\x3BA', '\x1DE', '\x2', '\x1983', 
		'\x1985', '\a', 'Z', '\x2', '\x2', '\x1984', '\x1981', '\x3', '\x2', '\x2', 
		'\x2', '\x1984', '\x1983', '\x3', '\x2', '\x2', '\x2', '\x1984', '\x1985', 
		'\x3', '\x2', '\x2', '\x2', '\x1985', '\x1987', '\x3', '\x2', '\x2', '\x2', 
		'\x1986', '\x1988', '\a', '\x339', '\x2', '\x2', '\x1987', '\x1986', '\x3', 
		'\x2', '\x2', '\x2', '\x1987', '\x1988', '\x3', '\x2', '\x2', '\x2', '\x1988', 
		'\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1989', '\x199D', '\a', '\x17D', 
		'\x2', '\x2', '\x198A', '\x198B', '\a', '\x336', '\x2', '\x2', '\x198B', 
		'\x1990', '\x5', '\x2BE', '\x160', '\x2', '\x198C', '\x198D', '\a', '\x338', 
		'\x2', '\x2', '\x198D', '\x198F', '\x5', '\x2BE', '\x160', '\x2', '\x198E', 
		'\x198C', '\x3', '\x2', '\x2', '\x2', '\x198F', '\x1992', '\x3', '\x2', 
		'\x2', '\x2', '\x1990', '\x198E', '\x3', '\x2', '\x2', '\x2', '\x1990', 
		'\x1991', '\x3', '\x2', '\x2', '\x2', '\x1991', '\x1993', '\x3', '\x2', 
		'\x2', '\x2', '\x1992', '\x1990', '\x3', '\x2', '\x2', '\x2', '\x1993', 
		'\x1994', '\a', '\x337', '\x2', '\x2', '\x1994', '\x199E', '\x3', '\x2', 
		'\x2', '\x2', '\x1995', '\x199A', '\x5', '\x2BE', '\x160', '\x2', '\x1996', 
		'\x1997', '\a', '\x338', '\x2', '\x2', '\x1997', '\x1999', '\x5', '\x2BE', 
		'\x160', '\x2', '\x1998', '\x1996', '\x3', '\x2', '\x2', '\x2', '\x1999', 
		'\x199C', '\x3', '\x2', '\x2', '\x2', '\x199A', '\x1998', '\x3', '\x2', 
		'\x2', '\x2', '\x199A', '\x199B', '\x3', '\x2', '\x2', '\x2', '\x199B', 
		'\x199E', '\x3', '\x2', '\x2', '\x2', '\x199C', '\x199A', '\x3', '\x2', 
		'\x2', '\x2', '\x199D', '\x198A', '\x3', '\x2', '\x2', '\x2', '\x199D', 
		'\x1995', '\x3', '\x2', '\x2', '\x2', '\x199E', '\x1F1', '\x3', '\x2', 
		'\x2', '\x2', '\x199F', '\x19A0', '\a', 'I', '\x2', '\x2', '\x19A0', '\x19A1', 
		'\a', '\x176', '\x2', '\x2', '\x19A1', '\x19A6', '\x5', '\x384', '\x1C3', 
		'\x2', '\x19A2', '\x19A3', '\a', '\x336', '\x2', '\x2', '\x19A3', '\x19A4', 
		'\x5', '\x392', '\x1CA', '\x2', '\x19A4', '\x19A5', '\a', '\x337', '\x2', 
		'\x2', '\x19A5', '\x19A7', '\x3', '\x2', '\x2', '\x2', '\x19A6', '\x19A2', 
		'\x3', '\x2', '\x2', '\x2', '\x19A6', '\x19A7', '\x3', '\x2', '\x2', '\x2', 
		'\x19A7', '\x19B1', '\x3', '\x2', '\x2', '\x2', '\x19A8', '\x19A9', '\a', 
		'\x17D', '\x2', '\x2', '\x19A9', '\x19AE', '\x5', '\x1F4', '\xFB', '\x2', 
		'\x19AA', '\x19AB', '\a', '\x338', '\x2', '\x2', '\x19AB', '\x19AD', '\x5', 
		'\x1F4', '\xFB', '\x2', '\x19AC', '\x19AA', '\x3', '\x2', '\x2', '\x2', 
		'\x19AD', '\x19B0', '\x3', '\x2', '\x2', '\x2', '\x19AE', '\x19AC', '\x3', 
		'\x2', '\x2', '\x2', '\x19AE', '\x19AF', '\x3', '\x2', '\x2', '\x2', '\x19AF', 
		'\x19B2', '\x3', '\x2', '\x2', '\x2', '\x19B0', '\x19AE', '\x3', '\x2', 
		'\x2', '\x2', '\x19B1', '\x19A8', '\x3', '\x2', '\x2', '\x2', '\x19B1', 
		'\x19B2', '\x3', '\x2', '\x2', '\x2', '\x19B2', '\x19B3', '\x3', '\x2', 
		'\x2', '\x2', '\x19B3', '\x19B4', '\a', '\x10', '\x2', '\x2', '\x19B4', 
		'\x19B8', '\x5', '\x1BE', '\xE0', '\x2', '\x19B5', '\x19B6', '\a', '\x17D', 
		'\x2', '\x2', '\x19B6', '\x19B7', '\a', '.', '\x2', '\x2', '\x19B7', '\x19B9', 
		'\a', '\xED', '\x2', '\x2', '\x19B8', '\x19B5', '\x3', '\x2', '\x2', '\x2', 
		'\x19B8', '\x19B9', '\x3', '\x2', '\x2', '\x2', '\x19B9', '\x19BB', '\x3', 
		'\x2', '\x2', '\x2', '\x19BA', '\x19BC', '\a', '\x339', '\x2', '\x2', 
		'\x19BB', '\x19BA', '\x3', '\x2', '\x2', '\x2', '\x19BB', '\x19BC', '\x3', 
		'\x2', '\x2', '\x2', '\x19BC', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x19BD', 
		'\x19BE', '\t', '>', '\x2', '\x2', '\x19BE', '\x1F5', '\x3', '\x2', '\x2', 
		'\x2', '\x19BF', '\x19C0', '\a', '\n', '\x2', '\x2', '\x19C0', '\x19C1', 
		'\a', '\x157', '\x2', '\x2', '\x19C1', '\x19ED', '\x5', '\x382', '\x1C2', 
		'\x2', '\x19C2', '\x19C3', '\a', '\x13E', '\x2', '\x2', '\x19C3', '\x19C4', 
		'\a', '\x336', '\x2', '\x2', '\x19C4', '\x19C5', '\a', '\x23C', '\x2', 
		'\x2', '\x19C5', '\x19C6', '\a', '\x324', '\x2', '\x2', '\x19C6', '\x19C7', 
		'\t', '?', '\x2', '\x2', '\x19C7', '\x19EE', '\a', '\x337', '\x2', '\x2', 
		'\x19C8', '\x19C9', '\a', '\x4', '\x2', '\x2', '\x19C9', '\x19EE', '\x5', 
		'\x2AE', '\x158', '\x2', '\x19CA', '\x19CB', '\a', '\n', '\x2', '\x2', 
		'\x19CB', '\x19CC', '\a', '\x38', '\x2', '\x2', '\x19CC', '\x19EE', '\x5', 
		'\x2B0', '\x159', '\x2', '\x19CD', '\x19CE', '\a', 'h', '\x2', '\x2', 
		'\x19CE', '\x19CF', '\a', '\x38', '\x2', '\x2', '\x19CF', '\x19EE', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x19D0', '\x19D1', '\a', 'h', '\x2', '\x2', 
		'\x19D1', '\x19D2', '\a', '=', '\x2', '\x2', '\x19D2', '\x19EE', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x19D3', '\x19D4', '\a', '\x17D', '\x2', '\x2', 
		'\x19D4', '\x19D5', '\a', '.', '\x2', '\x2', '\x19D5', '\x19D6', '\a', 
		'\x4', '\x2', '\x2', '\x19D6', '\x19D7', '\a', '=', '\x2', '\x2', '\x19D7', 
		'\x19D8', '\x5', '\x3BA', '\x1DE', '\x2', '\x19D8', '\x19D9', '\a', '\x89', 
		'\x2', '\x2', '\x19D9', '\x19DA', '\a', '\xAD', '\x2', '\x2', '\x19DA', 
		'\x19DB', '\a', '\x336', '\x2', '\x2', '\x19DB', '\x19DC', '\x5', '\x392', 
		'\x1CA', '\x2', '\x19DC', '\x19DD', '\a', '\x337', '\x2', '\x2', '\x19DD', 
		'\x19DE', '\a', '\x10F', '\x2', '\x2', '\x19DE', '\x19DF', '\x5', '\x382', 
		'\x1C2', '\x2', '\x19DF', '\x19E0', '\a', '\x336', '\x2', '\x2', '\x19E0', 
		'\x19E1', '\x5', '\x392', '\x1CA', '\x2', '\x19E1', '\x19E2', '\a', '\x337', 
		'\x2', '\x2', '\x19E2', '\x19EE', '\x3', '\x2', '\x2', '\x2', '\x19E3', 
		'\x19E4', '\a', '.', '\x2', '\x2', '\x19E4', '\x19E5', '\a', '=', '\x2', 
		'\x2', '\x19E5', '\x19EE', '\x5', '\x3BA', '\x1DE', '\x2', '\x19E6', '\x19E7', 
		'\t', '\x17', '\x2', '\x2', '\x19E7', '\x19E9', '\a', '\x164', '\x2', 
		'\x2', '\x19E8', '\x19EA', '\x5', '\x3BA', '\x1DE', '\x2', '\x19E9', '\x19E8', 
		'\x3', '\x2', '\x2', '\x2', '\x19E9', '\x19EA', '\x3', '\x2', '\x2', '\x2', 
		'\x19EA', '\x19EE', '\x3', '\x2', '\x2', '\x2', '\x19EB', '\x19EC', '\a', 
		'\x2A2', '\x2', '\x2', '\x19EC', '\x19EE', '\x5', '\x1F0', '\xF9', '\x2', 
		'\x19ED', '\x19C2', '\x3', '\x2', '\x2', '\x2', '\x19ED', '\x19C8', '\x3', 
		'\x2', '\x2', '\x2', '\x19ED', '\x19CA', '\x3', '\x2', '\x2', '\x2', '\x19ED', 
		'\x19CD', '\x3', '\x2', '\x2', '\x2', '\x19ED', '\x19D0', '\x3', '\x2', 
		'\x2', '\x2', '\x19ED', '\x19D3', '\x3', '\x2', '\x2', '\x2', '\x19ED', 
		'\x19E3', '\x3', '\x2', '\x2', '\x2', '\x19ED', '\x19E6', '\x3', '\x2', 
		'\x2', '\x2', '\x19ED', '\x19EB', '\x3', '\x2', '\x2', '\x2', '\x19EE', 
		'\x19F0', '\x3', '\x2', '\x2', '\x2', '\x19EF', '\x19F1', '\a', '\x339', 
		'\x2', '\x2', '\x19F0', '\x19EF', '\x3', '\x2', '\x2', '\x2', '\x19F0', 
		'\x19F1', '\x3', '\x2', '\x2', '\x2', '\x19F1', '\x1F7', '\x3', '\x2', 
		'\x2', '\x2', '\x19F2', '\x19F3', '\a', '\n', '\x2', '\x2', '\x19F3', 
		'\x19F6', '\a', 'U', '\x2', '\x2', '\x19F4', '\x19F7', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x19F5', '\x19F7', '\a', 'K', '\x2', '\x2', '\x19F6', 
		'\x19F4', '\x3', '\x2', '\x2', '\x2', '\x19F6', '\x19F5', '\x3', '\x2', 
		'\x2', '\x2', '\x19F7', '\x1A04', '\x3', '\x2', '\x2', '\x2', '\x19F8', 
		'\x19F9', '\a', '\x25C', '\x2', '\x2', '\x19F9', '\x19FA', '\a', '\x25F', 
		'\x2', '\x2', '\x19FA', '\x19FB', '\a', '\x324', '\x2', '\x2', '\x19FB', 
		'\x1A05', '\x5', '\x3BA', '\x1DE', '\x2', '\x19FC', '\x19FD', '\a', '\x37', 
		'\x2', '\x2', '\x19FD', '\x1A05', '\x5', '\x3BA', '\x1DE', '\x2', '\x19FE', 
		'\x19FF', '\a', '\x13E', '\x2', '\x2', '\x19FF', '\x1A02', '\x5', '\x1FA', 
		'\xFE', '\x2', '\x1A00', '\x1A01', '\a', '\x17D', '\x2', '\x2', '\x1A01', 
		'\x1A03', '\x5', '\x240', '\x121', '\x2', '\x1A02', '\x1A00', '\x3', '\x2', 
		'\x2', '\x2', '\x1A02', '\x1A03', '\x3', '\x2', '\x2', '\x2', '\x1A03', 
		'\x1A05', '\x3', '\x2', '\x2', '\x2', '\x1A04', '\x19F8', '\x3', '\x2', 
		'\x2', '\x2', '\x1A04', '\x19FC', '\x3', '\x2', '\x2', '\x2', '\x1A04', 
		'\x19FE', '\x3', '\x2', '\x2', '\x2', '\x1A05', '\x1A07', '\x3', '\x2', 
		'\x2', '\x2', '\x1A06', '\x1A08', '\a', '\x339', '\x2', '\x2', '\x1A07', 
		'\x1A06', '\x3', '\x2', '\x2', '\x2', '\x1A07', '\x1A08', '\x3', '\x2', 
		'\x2', '\x2', '\x1A08', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1A09', 
		'\x1A21', '\x5', '\x1FC', '\xFF', '\x2', '\x1A0A', '\x1A21', '\x5', '\x1FE', 
		'\x100', '\x2', '\x1A0B', '\x1A21', '\x5', '\x202', '\x102', '\x2', '\x1A0C', 
		'\x1A21', '\x5', '\x204', '\x103', '\x2', '\x1A0D', '\x1A21', '\x5', '\x208', 
		'\x105', '\x2', '\x1A0E', '\x1A21', '\x5', '\x222', '\x112', '\x2', '\x1A0F', 
		'\x1A21', '\x5', '\x224', '\x113', '\x2', '\x1A10', '\x1A21', '\x5', '\x226', 
		'\x114', '\x2', '\x1A11', '\x1A21', '\x5', '\x228', '\x115', '\x2', '\x1A12', 
		'\x1A21', '\x5', '\x22A', '\x116', '\x2', '\x1A13', '\x1A21', '\x5', '\x22C', 
		'\x117', '\x2', '\x1A14', '\x1A21', '\x5', '\x22E', '\x118', '\x2', '\x1A15', 
		'\x1A16', '\a', '\x201', '\x2', '\x2', '\x1A16', '\x1A21', '\x5', '\x372', 
		'\x1BA', '\x2', '\x1A17', '\x1A21', '\x5', '\x230', '\x119', '\x2', '\x1A18', 
		'\x1A21', '\x5', '\x232', '\x11A', '\x2', '\x1A19', '\x1A21', '\x5', '\x234', 
		'\x11B', '\x2', '\x1A1A', '\x1A21', '\x5', '\x236', '\x11C', '\x2', '\x1A1B', 
		'\x1A21', '\x5', '\x238', '\x11D', '\x2', '\x1A1C', '\x1A21', '\x5', '\x23A', 
		'\x11E', '\x2', '\x1A1D', '\x1A21', '\x5', '\x23C', '\x11F', '\x2', '\x1A1E', 
		'\x1A21', '\x5', '\x23E', '\x120', '\x2', '\x1A1F', '\x1A21', '\x5', '\x240', 
		'\x121', '\x2', '\x1A20', '\x1A09', '\x3', '\x2', '\x2', '\x2', '\x1A20', 
		'\x1A0A', '\x3', '\x2', '\x2', '\x2', '\x1A20', '\x1A0B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A20', '\x1A0C', '\x3', '\x2', '\x2', '\x2', '\x1A20', 
		'\x1A0D', '\x3', '\x2', '\x2', '\x2', '\x1A20', '\x1A0E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A20', '\x1A0F', '\x3', '\x2', '\x2', '\x2', '\x1A20', 
		'\x1A10', '\x3', '\x2', '\x2', '\x2', '\x1A20', '\x1A11', '\x3', '\x2', 
		'\x2', '\x2', '\x1A20', '\x1A12', '\x3', '\x2', '\x2', '\x2', '\x1A20', 
		'\x1A13', '\x3', '\x2', '\x2', '\x2', '\x1A20', '\x1A14', '\x3', '\x2', 
		'\x2', '\x2', '\x1A20', '\x1A15', '\x3', '\x2', '\x2', '\x2', '\x1A20', 
		'\x1A17', '\x3', '\x2', '\x2', '\x2', '\x1A20', '\x1A18', '\x3', '\x2', 
		'\x2', '\x2', '\x1A20', '\x1A19', '\x3', '\x2', '\x2', '\x2', '\x1A20', 
		'\x1A1A', '\x3', '\x2', '\x2', '\x2', '\x1A20', '\x1A1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A20', '\x1A1C', '\x3', '\x2', '\x2', '\x2', '\x1A20', 
		'\x1A1D', '\x3', '\x2', '\x2', '\x2', '\x1A20', '\x1A1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A20', '\x1A1F', '\x3', '\x2', '\x2', '\x2', '\x1A21', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1A22', '\x1A23', '\a', '\x19E', 
		'\x2', '\x2', '\x1A23', '\x1A34', '\x5', '\x396', '\x1CC', '\x2', '\x1A24', 
		'\x1A25', '\a', '\x19F', '\x2', '\x2', '\x1A25', '\x1A34', '\a', '\xE3', 
		'\x2', '\x2', '\x1A26', '\x1A2B', '\a', '\xE6', '\x2', '\x2', '\x1A27', 
		'\x1A28', '\a', '\x221', '\x2', '\x2', '\x1A28', '\x1A29', '\a', '\x324', 
		'\x2', '\x2', '\x1A29', '\x1A2C', '\a', '\xE6', '\x2', '\x2', '\x1A2A', 
		'\x1A2C', '\a', '\xE3', '\x2', '\x2', '\x1A2B', '\x1A27', '\x3', '\x2', 
		'\x2', '\x2', '\x1A2B', '\x1A2A', '\x3', '\x2', '\x2', '\x2', '\x1A2C', 
		'\x1A34', '\x3', '\x2', '\x2', '\x2', '\x1A2D', '\x1A2E', '\a', '\x1A0', 
		'\x2', '\x2', '\x1A2E', '\x1A34', '\x5', '\x396', '\x1CC', '\x2', '\x1A2F', 
		'\x1A30', '\a', '\x1A1', '\x2', '\x2', '\x1A30', '\x1A34', '\x5', '\x396', 
		'\x1CC', '\x2', '\x1A31', '\x1A32', '\a', '\x1A2', '\x2', '\x2', '\x1A32', 
		'\x1A34', '\t', '\t', '\x2', '\x2', '\x1A33', '\x1A22', '\x3', '\x2', 
		'\x2', '\x2', '\x1A33', '\x1A24', '\x3', '\x2', '\x2', '\x2', '\x1A33', 
		'\x1A26', '\x3', '\x2', '\x2', '\x2', '\x1A33', '\x1A2D', '\x3', '\x2', 
		'\x2', '\x2', '\x1A33', '\x1A2F', '\x3', '\x2', '\x2', '\x2', '\x1A33', 
		'\x1A31', '\x3', '\x2', '\x2', '\x2', '\x1A34', '\x1FD', '\x3', '\x2', 
		'\x2', '\x2', '\x1A35', '\x1A36', '\a', '\x1B5', '\x2', '\x2', '\x1A36', 
		'\x1A46', '\a', '\x324', '\x2', '\x2', '\x1A37', '\x1A47', '\a', '\xE3', 
		'\x2', '\x2', '\x1A38', '\x1A43', '\a', '\xE6', '\x2', '\x2', '\x1A39', 
		'\x1A3E', '\x5', '\x200', '\x101', '\x2', '\x1A3A', '\x1A3B', '\a', '\x338', 
		'\x2', '\x2', '\x1A3B', '\x1A3D', '\x5', '\x200', '\x101', '\x2', '\x1A3C', 
		'\x1A3A', '\x3', '\x2', '\x2', '\x2', '\x1A3D', '\x1A40', '\x3', '\x2', 
		'\x2', '\x2', '\x1A3E', '\x1A3C', '\x3', '\x2', '\x2', '\x2', '\x1A3E', 
		'\x1A3F', '\x3', '\x2', '\x2', '\x2', '\x1A3F', '\x1A42', '\x3', '\x2', 
		'\x2', '\x2', '\x1A40', '\x1A3E', '\x3', '\x2', '\x2', '\x2', '\x1A41', 
		'\x1A39', '\x3', '\x2', '\x2', '\x2', '\x1A42', '\x1A45', '\x3', '\x2', 
		'\x2', '\x2', '\x1A43', '\x1A41', '\x3', '\x2', '\x2', '\x2', '\x1A43', 
		'\x1A44', '\x3', '\x2', '\x2', '\x2', '\x1A44', '\x1A47', '\x3', '\x2', 
		'\x2', '\x2', '\x1A45', '\x1A43', '\x3', '\x2', '\x2', '\x2', '\x1A46', 
		'\x1A37', '\x3', '\x2', '\x2', '\x2', '\x1A46', '\x1A38', '\x3', '\x2', 
		'\x2', '\x2', '\x1A47', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1A48', 
		'\x1A49', '\a', '\x19D', '\x2', '\x2', '\x1A49', '\x1A4A', '\a', '\x324', 
		'\x2', '\x2', '\x1A4A', '\x1A4F', '\x5', '\x396', '\x1CC', '\x2', '\x1A4B', 
		'\x1A4C', '\a', '\x1B4', '\x2', '\x2', '\x1A4C', '\x1A4D', '\a', '\x324', 
		'\x2', '\x2', '\x1A4D', '\x1A4F', '\t', '@', '\x2', '\x2', '\x1A4E', '\x1A48', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4E', '\x1A4B', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4F', '\x201', '\x3', '\x2', '\x2', '\x2', '\x1A50', '\x1A51', '\a', 
		'>', '\x2', '\x2', '\x1A51', '\x1A52', '\a', '\x324', '\x2', '\x2', '\x1A52', 
		'\x1A53', '\t', '\x37', '\x2', '\x2', '\x1A53', '\x203', '\x3', '\x2', 
		'\x2', '\x2', '\x1A54', '\x1A55', '\a', '\x1CA', '\x2', '\x2', '\x1A55', 
		'\x1A59', '\x5', '\x396', '\x1CC', '\x2', '\x1A56', '\x1A57', '\a', '\x1CB', 
		'\x2', '\x2', '\x1A57', '\x1A59', '\t', '\x41', '\x2', '\x2', '\x1A58', 
		'\x1A54', '\x3', '\x2', '\x2', '\x2', '\x1A58', '\x1A56', '\x3', '\x2', 
		'\x2', '\x2', '\x1A59', '\x205', '\x3', '\x2', '\x2', '\x2', '\x1A5A', 
		'\x1A5B', '\a', '\n', '\x2', '\x2', '\x1A5B', '\x1A5C', '\a', 'n', '\x2', 
		'\x2', '\x1A5C', '\x1A5F', '\x5', '\x3BA', '\x1DE', '\x2', '\x1A5D', '\x1A5E', 
		'\a', '\x14', '\x2', '\x2', '\x1A5E', '\x1A60', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1A5F', '\x1A5D', '\x3', '\x2', '\x2', '\x2', '\x1A5F', '\x1A60', 
		'\x3', '\x2', '\x2', '\x2', '\x1A60', '\x1A68', '\x3', '\x2', '\x2', '\x2', 
		'\x1A61', '\x1A62', '\a', '\x14C', '\x2', '\x2', '\x1A62', '\x1A66', '\a', 
		'\x324', '\x2', '\x2', '\x1A63', '\x1A67', '\a', '\x14F', '\x2', '\x2', 
		'\x1A64', '\x1A67', '\a', '\x152', '\x2', '\x2', '\x1A65', '\x1A67', '\a', 
		'\x1E5', '\x2', '\x2', '\x1A66', '\x1A63', '\x3', '\x2', '\x2', '\x2', 
		'\x1A66', '\x1A64', '\x3', '\x2', '\x2', '\x2', '\x1A66', '\x1A65', '\x3', 
		'\x2', '\x2', '\x2', '\x1A67', '\x1A69', '\x3', '\x2', '\x2', '\x2', '\x1A68', 
		'\x1A61', '\x3', '\x2', '\x2', '\x2', '\x1A68', '\x1A69', '\x3', '\x2', 
		'\x2', '\x2', '\x1A69', '\x1A6A', '\x3', '\x2', '\x2', '\x2', '\x1A6A', 
		'\x1A6B', '\a', '\x10', '\x2', '\x2', '\x1A6B', '\x1A6C', '\a', '\x15B', 
		'\x2', '\x2', '\x1A6C', '\x1A6D', '\a', '\x336', '\x2', '\x2', '\x1A6D', 
		'\x1A6E', '\a', '\xB9', '\x2', '\x2', '\x1A6E', '\x1A6F', '\a', '\x324', 
		'\x2', '\x2', '\x1A6F', '\x1A74', '\a', '\x31C', '\x2', '\x2', '\x1A70', 
		'\x1A71', '\a', '\x338', '\x2', '\x2', '\x1A71', '\x1A72', '\a', '\xB8', 
		'\x2', '\x2', '\x1A72', '\x1A73', '\a', '\x324', '\x2', '\x2', '\x1A73', 
		'\x1A75', '\t', '\x42', '\x2', '\x2', '\x1A74', '\x1A70', '\x3', '\x2', 
		'\x2', '\x2', '\x1A74', '\x1A75', '\x3', '\x2', '\x2', '\x2', '\x1A75', 
		'\x1A76', '\x3', '\x2', '\x2', '\x2', '\x1A76', '\x1AE4', '\a', '\x337', 
		'\x2', '\x2', '\x1A77', '\x1AE5', '\a', '\x2FA', '\x2', '\x2', '\x1A78', 
		'\x1A79', '\a', '\x86', '\x2', '\x2', '\x1A79', '\x1A7A', '\a', '\x13A', 
		'\x2', '\x2', '\x1A7A', '\x1A7B', '\a', '\x336', '\x2', '\x2', '\x1A7B', 
		'\x1A7C', '\a', '\x15', '\x2', '\x2', '\x1A7C', '\x1A8D', '\a', '\x324', 
		'\x2', '\x2', '\x1A7D', '\x1A7F', '\a', '\x17C', '\x2', '\x2', '\x1A7E', 
		'\x1A80', '\t', '\x43', '\x2', '\x2', '\x1A7F', '\x1A7E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A7F', '\x1A80', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A83', '\x3', '\x2', '\x2', '\x2', '\x1A81', '\x1A82', '\a', '+', '\x2', 
		'\x2', '\x1A82', '\x1A84', '\x5', '\x3BA', '\x1DE', '\x2', '\x1A83', '\x1A81', 
		'\x3', '\x2', '\x2', '\x2', '\x1A83', '\x1A84', '\x3', '\x2', '\x2', '\x2', 
		'\x1A84', '\x1A8E', '\x3', '\x2', '\x2', '\x2', '\x1A85', '\x1A86', '\a', 
		'+', '\x2', '\x2', '\x1A86', '\x1A88', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x1A87', '\x1A89', '\a', '\x17C', '\x2', '\x2', '\x1A88', '\x1A87', '\x3', 
		'\x2', '\x2', '\x2', '\x1A88', '\x1A89', '\x3', '\x2', '\x2', '\x2', '\x1A89', 
		'\x1A8B', '\x3', '\x2', '\x2', '\x2', '\x1A8A', '\x1A8C', '\t', '\x43', 
		'\x2', '\x2', '\x1A8B', '\x1A8A', '\x3', '\x2', '\x2', '\x2', '\x1A8B', 
		'\x1A8C', '\x3', '\x2', '\x2', '\x2', '\x1A8C', '\x1A8E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A8D', '\x1A7D', '\x3', '\x2', '\x2', '\x2', '\x1A8D', 
		'\x1A85', '\x3', '\x2', '\x2', '\x2', '\x1A8E', '\x1AA0', '\x3', '\x2', 
		'\x2', '\x2', '\x1A8F', '\x1A91', '\a', '\x338', '\x2', '\x2', '\x1A90', 
		'\x1A8F', '\x3', '\x2', '\x2', '\x2', '\x1A90', '\x1A91', '\x3', '\x2', 
		'\x2', '\x2', '\x1A91', '\x1A92', '\x3', '\x2', '\x2', '\x2', '\x1A92', 
		'\x1A93', '\a', '\x1EF', '\x2', '\x2', '\x1A93', '\x1A94', '\a', '\x324', 
		'\x2', '\x2', '\x1A94', '\x1A9E', '\t', '\x44', '\x2', '\x2', '\x1A95', 
		'\x1A9C', '\a', '\x18E', '\x2', '\x2', '\x1A96', '\x1A9D', '\a', '\x5', 
		'\x2', '\x2', '\x1A97', '\x1A9D', '\a', '\x29B', '\x2', '\x2', '\x1A98', 
		'\x1A99', '\a', '\x5', '\x2', '\x2', '\x1A99', '\x1A9D', '\a', '\x29B', 
		'\x2', '\x2', '\x1A9A', '\x1A9B', '\a', '\x29B', '\x2', '\x2', '\x1A9B', 
		'\x1A9D', '\a', '\x5', '\x2', '\x2', '\x1A9C', '\x1A96', '\x3', '\x2', 
		'\x2', '\x2', '\x1A9C', '\x1A97', '\x3', '\x2', '\x2', '\x2', '\x1A9C', 
		'\x1A98', '\x3', '\x2', '\x2', '\x2', '\x1A9C', '\x1A9A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A9D', '\x1A9F', '\x3', '\x2', '\x2', '\x2', '\x1A9E', 
		'\x1A95', '\x3', '\x2', '\x2', '\x2', '\x1A9E', '\x1A9F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A9F', '\x1AA1', '\x3', '\x2', '\x2', '\x2', '\x1AA0', 
		'\x1A90', '\x3', '\x2', '\x2', '\x2', '\x1AA0', '\x1AA1', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA1', '\x1AA8', '\x3', '\x2', '\x2', '\x2', '\x1AA2', 
		'\x1AA4', '\a', '\x338', '\x2', '\x2', '\x1AA3', '\x1AA2', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA3', '\x1AA4', '\x3', '\x2', '\x2', '\x2', '\x1AA4', 
		'\x1AA5', '\x3', '\x2', '\x2', '\x2', '\x1AA5', '\x1AA6', '\a', '\xCB', 
		'\x2', '\x2', '\x1AA6', '\x1AA7', '\a', '\x324', '\x2', '\x2', '\x1AA7', 
		'\x1AA9', '\t', '\x45', '\x2', '\x2', '\x1AA8', '\x1AA3', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA8', '\x1AA9', '\x3', '\x2', '\x2', '\x2', '\x1AA9', 
		'\x1AB0', '\x3', '\x2', '\x2', '\x2', '\x1AAA', '\x1AAC', '\a', '\x338', 
		'\x2', '\x2', '\x1AAB', '\x1AAA', '\x3', '\x2', '\x2', '\x2', '\x1AAB', 
		'\x1AAC', '\x3', '\x2', '\x2', '\x2', '\x1AAC', '\x1AAD', '\x3', '\x2', 
		'\x2', '\x2', '\x1AAD', '\x1AAE', '\a', '\xCC', '\x2', '\x2', '\x1AAE', 
		'\x1AAF', '\a', '\x324', '\x2', '\x2', '\x1AAF', '\x1AB1', '\a', '\x31C', 
		'\x2', '\x2', '\x1AB0', '\x1AAB', '\x3', '\x2', '\x2', '\x2', '\x1AB0', 
		'\x1AB1', '\x3', '\x2', '\x2', '\x2', '\x1AB1', '\x1AB2', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB2', '\x1AE5', '\a', '\x337', '\x2', '\x2', '\x1AB3', 
		'\x1AB4', '\a', '\x86', '\x2', '\x2', '\x1AB4', '\x1AB5', '\a', 'V', '\x2', 
		'\x2', '\x1AB5', '\x1AB6', '\a', '\x336', '\x2', '\x2', '\x1AB6', '\x1AB7', 
		'\a', '\x15', '\x2', '\x2', '\x1AB7', '\x1AC8', '\a', '\x324', '\x2', 
		'\x2', '\x1AB8', '\x1ABA', '\a', '\x17C', '\x2', '\x2', '\x1AB9', '\x1ABB', 
		'\t', '\x43', '\x2', '\x2', '\x1ABA', '\x1AB9', '\x3', '\x2', '\x2', '\x2', 
		'\x1ABA', '\x1ABB', '\x3', '\x2', '\x2', '\x2', '\x1ABB', '\x1ABE', '\x3', 
		'\x2', '\x2', '\x2', '\x1ABC', '\x1ABD', '\a', '+', '\x2', '\x2', '\x1ABD', 
		'\x1ABF', '\x5', '\x3BA', '\x1DE', '\x2', '\x1ABE', '\x1ABC', '\x3', '\x2', 
		'\x2', '\x2', '\x1ABE', '\x1ABF', '\x3', '\x2', '\x2', '\x2', '\x1ABF', 
		'\x1AC9', '\x3', '\x2', '\x2', '\x2', '\x1AC0', '\x1AC1', '\a', '+', '\x2', 
		'\x2', '\x1AC1', '\x1AC3', '\x5', '\x3BA', '\x1DE', '\x2', '\x1AC2', '\x1AC4', 
		'\a', '\x17C', '\x2', '\x2', '\x1AC3', '\x1AC2', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC3', '\x1AC4', '\x3', '\x2', '\x2', '\x2', '\x1AC4', '\x1AC6', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC5', '\x1AC7', '\t', '\x43', '\x2', '\x2', 
		'\x1AC6', '\x1AC5', '\x3', '\x2', '\x2', '\x2', '\x1AC6', '\x1AC7', '\x3', 
		'\x2', '\x2', '\x2', '\x1AC7', '\x1AC9', '\x3', '\x2', '\x2', '\x2', '\x1AC8', 
		'\x1AB8', '\x3', '\x2', '\x2', '\x2', '\x1AC8', '\x1AC0', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC9', '\x1ADB', '\x3', '\x2', '\x2', '\x2', '\x1ACA', 
		'\x1ACC', '\a', '\x338', '\x2', '\x2', '\x1ACB', '\x1ACA', '\x3', '\x2', 
		'\x2', '\x2', '\x1ACB', '\x1ACC', '\x3', '\x2', '\x2', '\x2', '\x1ACC', 
		'\x1ACD', '\x3', '\x2', '\x2', '\x2', '\x1ACD', '\x1ACE', '\a', '\x1EF', 
		'\x2', '\x2', '\x1ACE', '\x1ACF', '\a', '\x324', '\x2', '\x2', '\x1ACF', 
		'\x1AD9', '\t', '\x44', '\x2', '\x2', '\x1AD0', '\x1AD7', '\a', '\x18E', 
		'\x2', '\x2', '\x1AD1', '\x1AD8', '\a', '\x5', '\x2', '\x2', '\x1AD2', 
		'\x1AD8', '\a', '\x29B', '\x2', '\x2', '\x1AD3', '\x1AD4', '\a', '\x5', 
		'\x2', '\x2', '\x1AD4', '\x1AD8', '\a', '\x29B', '\x2', '\x2', '\x1AD5', 
		'\x1AD6', '\a', '\x29B', '\x2', '\x2', '\x1AD6', '\x1AD8', '\a', '\x5', 
		'\x2', '\x2', '\x1AD7', '\x1AD1', '\x3', '\x2', '\x2', '\x2', '\x1AD7', 
		'\x1AD2', '\x3', '\x2', '\x2', '\x2', '\x1AD7', '\x1AD3', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD7', '\x1AD5', '\x3', '\x2', '\x2', '\x2', '\x1AD8', 
		'\x1ADA', '\x3', '\x2', '\x2', '\x2', '\x1AD9', '\x1AD0', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD9', '\x1ADA', '\x3', '\x2', '\x2', '\x2', '\x1ADA', 
		'\x1ADC', '\x3', '\x2', '\x2', '\x2', '\x1ADB', '\x1ACB', '\x3', '\x2', 
		'\x2', '\x2', '\x1ADB', '\x1ADC', '\x3', '\x2', '\x2', '\x2', '\x1ADC', 
		'\x1ADE', '\x3', '\x2', '\x2', '\x2', '\x1ADD', '\x1ADF', '\a', '\x338', 
		'\x2', '\x2', '\x1ADE', '\x1ADD', '\x3', '\x2', '\x2', '\x2', '\x1ADE', 
		'\x1ADF', '\x3', '\x2', '\x2', '\x2', '\x1ADF', '\x1AE0', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE0', '\x1AE1', '\a', '\x122', '\x2', '\x2', '\x1AE1', 
		'\x1AE2', '\a', '\x324', '\x2', '\x2', '\x1AE2', '\x1AE3', '\t', '\x46', 
		'\x2', '\x2', '\x1AE3', '\x1AE5', '\a', '\x337', '\x2', '\x2', '\x1AE4', 
		'\x1A77', '\x3', '\x2', '\x2', '\x2', '\x1AE4', '\x1A78', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE4', '\x1AB3', '\x3', '\x2', '\x2', '\x2', '\x1AE5', 
		'\x207', '\x3', '\x2', '\x2', '\x2', '\x1AE6', '\x1AE7', '\x5', '\x20A', 
		'\x106', '\x2', '\x1AE7', '\x209', '\x3', '\x2', '\x2', '\x2', '\x1AE8', 
		'\x1AE9', '\x5', '\x20C', '\x107', '\x2', '\x1AE9', '\x1AEA', '\x5', '\x212', 
		'\x10A', '\x2', '\x1AEA', '\x1AEF', '\x3', '\x2', '\x2', '\x2', '\x1AEB', 
		'\x1AEC', '\x5', '\x20E', '\x108', '\x2', '\x1AEC', '\x1AED', '\x5', '\x214', 
		'\x10B', '\x2', '\x1AED', '\x1AEF', '\x3', '\x2', '\x2', '\x2', '\x1AEE', 
		'\x1AE8', '\x3', '\x2', '\x2', '\x2', '\x1AEE', '\x1AEB', '\x3', '\x2', 
		'\x2', '\x2', '\x1AEF', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x1AF0', 
		'\x1AF1', '\a', '\x283', '\x2', '\x2', '\x1AF1', '\x20D', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF2', '\x1AF3', '\a', '\x180', '\x2', '\x2', '\x1AF3', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x1AF4', '\x1AF5', '\a', '\x324', 
		'\x2', '\x2', '\x1AF5', '\x211', '\x3', '\x2', '\x2', '\x2', '\x1AF6', 
		'\x1AF7', '\x5', '\x210', '\x109', '\x2', '\x1AF7', '\x1AF8', '\x5', '\x218', 
		'\x10D', '\x2', '\x1AF8', '\x1B03', '\x3', '\x2', '\x2', '\x2', '\x1AF9', 
		'\x1B03', '\a', '~', '\x2', '\x2', '\x1AFA', '\x1B03', '\a', '\x88', '\x2', 
		'\x2', '\x1AFB', '\x1B03', '\a', '\xE3', '\x2', '\x2', '\x1AFC', '\x1B03', 
		'\a', '\x119', '\x2', '\x2', '\x1AFD', '\x1AFE', '\a', '\x12A', '\x2', 
		'\x2', '\x1AFE', '\x1B03', '\t', 'G', '\x2', '\x2', '\x1AFF', '\x1B03', 
		'\a', '\x2E6', '\x2', '\x2', '\x1B00', '\x1B01', '\a', '\x2F1', '\x2', 
		'\x2', '\x1B01', '\x1B03', '\a', '\x31C', '\x2', '\x2', '\x1B02', '\x1AF6', 
		'\x3', '\x2', '\x2', '\x2', '\x1B02', '\x1AF9', '\x3', '\x2', '\x2', '\x2', 
		'\x1B02', '\x1AFA', '\x3', '\x2', '\x2', '\x2', '\x1B02', '\x1AFB', '\x3', 
		'\x2', '\x2', '\x2', '\x1B02', '\x1AFC', '\x3', '\x2', '\x2', '\x2', '\x1B02', 
		'\x1AFD', '\x3', '\x2', '\x2', '\x2', '\x1B02', '\x1AFF', '\x3', '\x2', 
		'\x2', '\x2', '\x1B02', '\x1B00', '\x3', '\x2', '\x2', '\x2', '\x1B03', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x1B04', '\x1B05', '\x5', '\x210', 
		'\x109', '\x2', '\x1B05', '\x1B06', '\x5', '\x216', '\x10C', '\x2', '\x1B06', 
		'\x1B09', '\x3', '\x2', '\x2', '\x2', '\x1B07', '\x1B09', '\a', '\xE3', 
		'\x2', '\x2', '\x1B08', '\x1B04', '\x3', '\x2', '\x2', '\x2', '\x1B08', 
		'\x1B07', '\x3', '\x2', '\x2', '\x2', '\x1B09', '\x215', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0A', '\x1B0B', '\x5', '\x218', '\x10D', '\x2', '\x1B0B', 
		'\x217', '\x3', '\x2', '\x2', '\x2', '\x1B0C', '\x1B0D', '\x5', '\x21C', 
		'\x10F', '\x2', '\x1B0D', '\x1B0E', '\x5', '\x220', '\x111', '\x2', '\x1B0E', 
		'\x1B0F', '\x5', '\x21A', '\x10E', '\x2', '\x1B0F', '\x1B10', '\x5', '\x21E', 
		'\x110', '\x2', '\x1B10', '\x219', '\x3', '\x2', '\x2', '\x2', '\x1B11', 
		'\x1B12', '\a', '\x33A', '\x2', '\x2', '\x1B12', '\x21B', '\x3', '\x2', 
		'\x2', '\x2', '\x1B13', '\x1B14', '\a', '\x15B', '\x2', '\x2', '\x1B14', 
		'\x1B15', '\a', '\x33A', '\x2', '\x2', '\x1B15', '\x1B16', '\a', 'g', 
		'\x2', '\x2', '\x1B16', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x1B17', 
		'\x1B18', '\a', '\x31C', '\x2', '\x2', '\x1B18', '\x21F', '\x3', '\x2', 
		'\x2', '\x2', '\x1B19', '\x1B1A', '\x5', '\x3BA', '\x1DE', '\x2', '\x1B1A', 
		'\x1B1B', '\a', '\x331', '\x2', '\x2', '\x1B1B', '\x1B1C', '\x5', '\x220', 
		'\x111', '\x2', '\x1B1C', '\x1B24', '\x3', '\x2', '\x2', '\x2', '\x1B1D', 
		'\x1B1E', '\x5', '\x3BA', '\x1DE', '\x2', '\x1B1E', '\x1B1F', '\a', '\x331', 
		'\x2', '\x2', '\x1B1F', '\x1B22', '\x3', '\x2', '\x2', '\x2', '\x1B20', 
		'\x1B22', '\x5', '\x3BA', '\x1DE', '\x2', '\x1B21', '\x1B1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B21', '\x1B20', '\x3', '\x2', '\x2', '\x2', '\x1B22', 
		'\x1B24', '\x3', '\x2', '\x2', '\x2', '\x1B23', '\x1B19', '\x3', '\x2', 
		'\x2', '\x2', '\x1B23', '\x1B21', '\x3', '\x2', '\x2', '\x2', '\x1B24', 
		'\x221', '\x3', '\x2', '\x2', '\x2', '\x1B25', '\x1B26', '\a', '\x1CC', 
		'\x2', '\x2', '\x1B26', '\x1B27', '\x5', '\x396', '\x1CC', '\x2', '\x1B27', 
		'\x223', '\x3', '\x2', '\x2', '\x2', '\x1B28', '\x1B29', '\a', '\x1EF', 
		'\x2', '\x2', '\x1B29', '\x1B2A', '\x5', '\x396', '\x1CC', '\x2', '\x1B2A', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x1B2B', '\x1B2C', '\t', 'H', '\x2', 
		'\x2', '\x1B2C', '\x227', '\x3', '\x2', '\x2', '\x2', '\x1B2D', '\x1B2E', 
		'\t', 'I', '\x2', '\x2', '\x1B2E', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2F', '\x1B30', '\t', 'J', '\x2', '\x2', '\x1B30', '\x22B', '\x3', 
		'\x2', '\x2', '\x2', '\x1B31', '\x1B32', '\a', '\x1D9', '\x2', '\x2', 
		'\x1B32', '\x1B33', '\a', '\x324', '\x2', '\x2', '\x1B33', '\x1B34', '\t', 
		'K', '\x2', '\x2', '\x1B34', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x1B35', 
		'\x1B36', '\a', '\x1D2', '\x2', '\x2', '\x1B36', '\x1B4F', '\x5', '\x396', 
		'\x1CC', '\x2', '\x1B37', '\x1B38', '\a', '\x2F8', '\x2', '\x2', '\x1B38', 
		'\x1B4F', '\x5', '\x396', '\x1CC', '\x2', '\x1B39', '\x1B3A', '\a', '\x1D7', 
		'\x2', '\x2', '\x1B3A', '\x1B3D', '\a', '\x324', '\x2', '\x2', '\x1B3B', 
		'\x1B3E', '\x5', '\x3BA', '\x1DE', '\x2', '\x1B3C', '\x1B3E', '\a', '\x320', 
		'\x2', '\x2', '\x1B3D', '\x1B3B', '\x3', '\x2', '\x2', '\x2', '\x1B3D', 
		'\x1B3C', '\x3', '\x2', '\x2', '\x2', '\x1B3E', '\x1B4F', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3F', '\x1B40', '\a', '\x1D6', '\x2', '\x2', '\x1B40', 
		'\x1B43', '\a', '\x324', '\x2', '\x2', '\x1B41', '\x1B44', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1B42', '\x1B44', '\a', '\x320', '\x2', '\x2', '\x1B43', 
		'\x1B41', '\x3', '\x2', '\x2', '\x2', '\x1B43', '\x1B42', '\x3', '\x2', 
		'\x2', '\x2', '\x1B44', '\x1B4F', '\x3', '\x2', '\x2', '\x2', '\x1B45', 
		'\x1B46', '\a', '\x260', '\x2', '\x2', '\x1B46', '\x1B47', '\a', '\x324', 
		'\x2', '\x2', '\x1B47', '\x1B4F', '\t', '\t', '\x2', '\x2', '\x1B48', 
		'\x1B49', '\a', '\x2F5', '\x2', '\x2', '\x1B49', '\x1B4A', '\a', '\x324', 
		'\x2', '\x2', '\x1B4A', '\x1B4F', '\t', '\t', '\x2', '\x2', '\x1B4B', 
		'\x1B4C', '\a', '\x2FB', '\x2', '\x2', '\x1B4C', '\x1B4D', '\a', '\x324', 
		'\x2', '\x2', '\x1B4D', '\x1B4F', '\a', '\x31C', '\x2', '\x2', '\x1B4E', 
		'\x1B35', '\x3', '\x2', '\x2', '\x2', '\x1B4E', '\x1B37', '\x3', '\x2', 
		'\x2', '\x2', '\x1B4E', '\x1B39', '\x3', '\x2', '\x2', '\x2', '\x1B4E', 
		'\x1B3F', '\x3', '\x2', '\x2', '\x2', '\x1B4E', '\x1B45', '\x3', '\x2', 
		'\x2', '\x2', '\x1B4E', '\x1B48', '\x3', '\x2', '\x2', '\x2', '\x1B4E', 
		'\x1B4B', '\x3', '\x2', '\x2', '\x2', '\x1B4F', '\x22F', '\x3', '\x2', 
		'\x2', '\x2', '\x1B50', '\x1B59', '\a', '\x215', '\x2', '\x2', '\x1B51', 
		'\x1B52', '\a', '\x1A3', '\x2', '\x2', '\x1B52', '\x1B53', '\a', '\x93', 
		'\x2', '\x2', '\x1B53', '\x1B54', '\a', '\x324', '\x2', '\x2', '\x1B54', 
		'\x1B57', '\x5', '\x3BA', '\x1DE', '\x2', '\x1B55', '\x1B57', '\a', '\xE3', 
		'\x2', '\x2', '\x1B56', '\x1B51', '\x3', '\x2', '\x2', '\x2', '\x1B56', 
		'\x1B55', '\x3', '\x2', '\x2', '\x2', '\x1B57', '\x1B5A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B58', '\x1B5A', '\t', 'L', '\x2', '\x2', '\x1B59', '\x1B56', 
		'\x3', '\x2', '\x2', '\x2', '\x1B59', '\x1B58', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5A', '\x231', '\x3', '\x2', '\x2', '\x2', '\x1B5B', '\x1B5C', '\a', 
		'\x25A', '\x2', '\x2', '\x1B5C', '\x1B5D', '\t', '\t', '\x2', '\x2', '\x1B5D', 
		'\x233', '\x3', '\x2', '\x2', '\x2', '\x1B5E', '\x1B5F', '\a', '\x280', 
		'\x2', '\x2', '\x1B5F', '\x1B60', '\t', 'M', '\x2', '\x2', '\x1B60', '\x235', 
		'\x3', '\x2', '\x2', '\x2', '\x1B61', '\x1B62', '\a', '\x2A5', '\x2', 
		'\x2', '\x1B62', '\x1B68', '\t', 'N', '\x2', '\x2', '\x1B63', '\x1B64', 
		'\a', '\x2F4', '\x2', '\x2', '\x1B64', '\x1B68', '\x5', '\x396', '\x1CC', 
		'\x2', '\x1B65', '\x1B66', '\a', '\x27F', '\x2', '\x2', '\x1B66', '\x1B68', 
		'\t', 'O', '\x2', '\x2', '\x1B67', '\x1B61', '\x3', '\x2', '\x2', '\x2', 
		'\x1B67', '\x1B63', '\x3', '\x2', '\x2', '\x2', '\x1B67', '\x1B65', '\x3', 
		'\x2', '\x2', '\x2', '\x1B68', '\x237', '\x3', '\x2', '\x2', '\x2', '\x1B69', 
		'\x1B70', '\a', '\x1ED', '\x2', '\x2', '\x1B6A', '\x1B70', '\a', '\x1E4', 
		'\x2', '\x2', '\x1B6B', '\x1B70', '\a', '\x262', '\x2', '\x2', '\x1B6C', 
		'\x1B70', '\a', '\x1F1', '\x2', '\x2', '\x1B6D', '\x1B6E', '\a', '\x219', 
		'\x2', '\x2', '\x1B6E', '\x1B70', '\x5', '\x396', '\x1CC', '\x2', '\x1B6F', 
		'\x1B69', '\x3', '\x2', '\x2', '\x2', '\x1B6F', '\x1B6A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6F', '\x1B6B', '\x3', '\x2', '\x2', '\x2', '\x1B6F', 
		'\x1B6C', '\x3', '\x2', '\x2', '\x2', '\x1B6F', '\x1B6D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B70', '\x239', '\x3', '\x2', '\x2', '\x2', '\x1B71', 
		'\x1B72', '\a', '\x190', '\x2', '\x2', '\x1B72', '\x1B77', '\x5', '\x396', 
		'\x1CC', '\x2', '\x1B73', '\x1B74', '\a', '\x29D', '\x2', '\x2', '\x1B74', 
		'\x1B77', '\t', '\t', '\x2', '\x2', '\x1B75', '\x1B77', '\t', '\t', '\x2', 
		'\x2', '\x1B76', '\x1B71', '\x3', '\x2', '\x2', '\x2', '\x1B76', '\x1B73', 
		'\x3', '\x2', '\x2', '\x2', '\x1B76', '\x1B75', '\x3', '\x2', '\x2', '\x2', 
		'\x1B77', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x1B78', '\x1B79', '\a', 
		'\x192', '\x2', '\x2', '\x1B79', '\x1B8E', '\x5', '\x396', '\x1CC', '\x2', 
		'\x1B7A', '\x1B7B', '\a', '\x193', '\x2', '\x2', '\x1B7B', '\x1B8E', '\x5', 
		'\x396', '\x1CC', '\x2', '\x1B7C', '\x1B7D', '\a', '\x194', '\x2', '\x2', 
		'\x1B7D', '\x1B8E', '\x5', '\x396', '\x1CC', '\x2', '\x1B7E', '\x1B7F', 
		'\a', '\x195', '\x2', '\x2', '\x1B7F', '\x1B8E', '\x5', '\x396', '\x1CC', 
		'\x2', '\x1B80', '\x1B81', '\a', '\x198', '\x2', '\x2', '\x1B81', '\x1B8E', 
		'\x5', '\x396', '\x1CC', '\x2', '\x1B82', '\x1B83', '\a', '\x1BC', '\x2', 
		'\x2', '\x1B83', '\x1B84', '\a', '\x324', '\x2', '\x2', '\x1B84', '\x1B8E', 
		'\a', '\x31C', '\x2', '\x2', '\x1B85', '\x1B86', '\a', '\x1BE', '\x2', 
		'\x2', '\x1B86', '\x1B8E', '\x5', '\x396', '\x1CC', '\x2', '\x1B87', '\x1B88', 
		'\a', '\x272', '\x2', '\x2', '\x1B88', '\x1B8E', '\x5', '\x396', '\x1CC', 
		'\x2', '\x1B89', '\x1B8A', '\a', '\x297', '\x2', '\x2', '\x1B8A', '\x1B8E', 
		'\x5', '\x396', '\x1CC', '\x2', '\x1B8B', '\x1B8C', '\a', '\x2A6', '\x2', 
		'\x2', '\x1B8C', '\x1B8E', '\x5', '\x396', '\x1CC', '\x2', '\x1B8D', '\x1B78', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8D', '\x1B7A', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8D', '\x1B7C', '\x3', '\x2', '\x2', '\x2', '\x1B8D', '\x1B7E', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8D', '\x1B80', '\x3', '\x2', '\x2', '\x2', '\x1B8D', 
		'\x1B82', '\x3', '\x2', '\x2', '\x2', '\x1B8D', '\x1B85', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8D', '\x1B87', '\x3', '\x2', '\x2', '\x2', '\x1B8D', 
		'\x1B89', '\x3', '\x2', '\x2', '\x2', '\x1B8D', '\x1B8B', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8E', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x1B8F', 
		'\x1B90', '\a', '\x2EB', '\x2', '\x2', '\x1B90', '\x1B91', '\a', '\x324', 
		'\x2', '\x2', '\x1B91', '\x1B92', '\a', '\x31C', '\x2', '\x2', '\x1B92', 
		'\x1B93', '\t', 'P', '\x2', '\x2', '\x1B93', '\x23F', '\x3', '\x2', '\x2', 
		'\x2', '\x1B94', '\x1B95', '\a', '\x121', '\x2', '\x2', '\x1B95', '\x1B96', 
		'\a', '\x18C', '\x2', '\x2', '\x1B96', '\x1B9B', '\a', '\x31C', '\x2', 
		'\x2', '\x1B97', '\x1B98', '\a', '\x121', '\x2', '\x2', '\x1B98', '\x1B9B', 
		'\a', '\x21D', '\x2', '\x2', '\x1B99', '\x1B9B', '\a', '\x267', '\x2', 
		'\x2', '\x1B9A', '\x1B94', '\x3', '\x2', '\x2', '\x2', '\x1B9A', '\x1B97', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9A', '\x1B99', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9B', '\x241', '\x3', '\x2', '\x2', '\x2', '\x1B9C', '\x1B9D', '\a', 
		'h', '\x2', '\x2', '\x1B9D', '\x1BA0', '\a', '\x9F', '\x2', '\x2', '\x1B9E', 
		'\x1B9F', '\a', '\x9A', '\x2', '\x2', '\x1B9F', '\x1BA1', '\a', 'x', '\x2', 
		'\x2', '\x1BA0', '\x1B9E', '\x3', '\x2', '\x2', '\x2', '\x1BA0', '\x1BA1', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA1', '\x1BB2', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA2', '\x1BA7', '\x5', '\x244', '\x123', '\x2', '\x1BA3', '\x1BA4', 
		'\a', '\x338', '\x2', '\x2', '\x1BA4', '\x1BA6', '\x5', '\x244', '\x123', 
		'\x2', '\x1BA5', '\x1BA3', '\x3', '\x2', '\x2', '\x2', '\x1BA6', '\x1BA9', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA7', '\x1BA5', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA7', '\x1BA8', '\x3', '\x2', '\x2', '\x2', '\x1BA8', '\x1BB3', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA9', '\x1BA7', '\x3', '\x2', '\x2', '\x2', '\x1BAA', 
		'\x1BAF', '\x5', '\x246', '\x124', '\x2', '\x1BAB', '\x1BAC', '\a', '\x338', 
		'\x2', '\x2', '\x1BAC', '\x1BAE', '\x5', '\x246', '\x124', '\x2', '\x1BAD', 
		'\x1BAB', '\x3', '\x2', '\x2', '\x2', '\x1BAE', '\x1BB1', '\x3', '\x2', 
		'\x2', '\x2', '\x1BAF', '\x1BAD', '\x3', '\x2', '\x2', '\x2', '\x1BAF', 
		'\x1BB0', '\x3', '\x2', '\x2', '\x2', '\x1BB0', '\x1BB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1BB1', '\x1BAF', '\x3', '\x2', '\x2', '\x2', '\x1BB2', 
		'\x1BA2', '\x3', '\x2', '\x2', '\x2', '\x1BB2', '\x1BAA', '\x3', '\x2', 
		'\x2', '\x2', '\x1BB3', '\x1BB5', '\x3', '\x2', '\x2', '\x2', '\x1BB4', 
		'\x1BB6', '\a', '\x339', '\x2', '\x2', '\x1BB5', '\x1BB4', '\x3', '\x2', 
		'\x2', '\x2', '\x1BB5', '\x1BB6', '\x3', '\x2', '\x2', '\x2', '\x1BB6', 
		'\x243', '\x3', '\x2', '\x2', '\x2', '\x1BB7', '\x1BB8', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1BB8', '\x1BB9', '\a', '\xE6', '\x2', '\x2', '\x1BB9', 
		'\x1BBA', '\x5', '\x380', '\x1C1', '\x2', '\x1BBA', '\x245', '\x3', '\x2', 
		'\x2', '\x2', '\x1BBB', '\x1BBC', '\x5', '\x3BA', '\x1DE', '\x2', '\x1BBC', 
		'\x1BBD', '\a', '\x331', '\x2', '\x2', '\x1BBD', '\x1BBF', '\x3', '\x2', 
		'\x2', '\x2', '\x1BBE', '\x1BBB', '\x3', '\x2', '\x2', '\x2', '\x1BBE', 
		'\x1BBF', '\x3', '\x2', '\x2', '\x2', '\x1BBF', '\x1BC0', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC0', '\x1BC1', '\x5', '\x3BA', '\x1DE', '\x2', '\x1BC1', 
		'\x1BC2', '\a', '\x331', '\x2', '\x2', '\x1BC2', '\x1BC3', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1BC3', '\x247', '\x3', '\x2', '\x2', '\x2', '\x1BC4', 
		'\x1BC5', '\a', 'h', '\x2', '\x2', '\x1BC5', '\x1BC8', '\t', '\x38', '\x2', 
		'\x2', '\x1BC6', '\x1BC7', '\a', '\x9A', '\x2', '\x2', '\x1BC7', '\x1BC9', 
		'\a', 'x', '\x2', '\x2', '\x1BC8', '\x1BC6', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC8', '\x1BC9', '\x3', '\x2', '\x2', '\x2', '\x1BC9', '\x1BCA', '\x3', 
		'\x2', '\x2', '\x2', '\x1BCA', '\x1BCF', '\x5', '\x386', '\x1C4', '\x2', 
		'\x1BCB', '\x1BCC', '\a', '\x338', '\x2', '\x2', '\x1BCC', '\x1BCE', '\x5', 
		'\x386', '\x1C4', '\x2', '\x1BCD', '\x1BCB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BCE', '\x1BD1', '\x3', '\x2', '\x2', '\x2', '\x1BCF', '\x1BCD', '\x3', 
		'\x2', '\x2', '\x2', '\x1BCF', '\x1BD0', '\x3', '\x2', '\x2', '\x2', '\x1BD0', 
		'\x1BD3', '\x3', '\x2', '\x2', '\x2', '\x1BD1', '\x1BCF', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD2', '\x1BD4', '\a', '\x339', '\x2', '\x2', '\x1BD3', 
		'\x1BD2', '\x3', '\x2', '\x2', '\x2', '\x1BD3', '\x1BD4', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD4', '\x249', '\x3', '\x2', '\x2', '\x2', '\x1BD5', 
		'\x1BD8', '\x5', '\x24C', '\x127', '\x2', '\x1BD6', '\x1BD8', '\x5', '\x24E', 
		'\x128', '\x2', '\x1BD7', '\x1BD5', '\x3', '\x2', '\x2', '\x2', '\x1BD7', 
		'\x1BD6', '\x3', '\x2', '\x2', '\x2', '\x1BD8', '\x24B', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD9', '\x1BDA', '\a', 'h', '\x2', '\x2', '\x1BDA', '\x1BDD', 
		'\a', '\x164', '\x2', '\x2', '\x1BDB', '\x1BDC', '\a', '\x9A', '\x2', 
		'\x2', '\x1BDC', '\x1BDE', '\a', 'x', '\x2', '\x2', '\x1BDD', '\x1BDB', 
		'\x3', '\x2', '\x2', '\x2', '\x1BDD', '\x1BDE', '\x3', '\x2', '\x2', '\x2', 
		'\x1BDE', '\x1BDF', '\x3', '\x2', '\x2', '\x2', '\x1BDF', '\x1BE4', '\x5', 
		'\x384', '\x1C3', '\x2', '\x1BE0', '\x1BE1', '\a', '\x338', '\x2', '\x2', 
		'\x1BE1', '\x1BE3', '\x5', '\x384', '\x1C3', '\x2', '\x1BE2', '\x1BE0', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE3', '\x1BE6', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE4', '\x1BE2', '\x3', '\x2', '\x2', '\x2', '\x1BE4', '\x1BE5', '\x3', 
		'\x2', '\x2', '\x2', '\x1BE5', '\x1BE8', '\x3', '\x2', '\x2', '\x2', '\x1BE6', 
		'\x1BE4', '\x3', '\x2', '\x2', '\x2', '\x1BE7', '\x1BE9', '\a', '\x339', 
		'\x2', '\x2', '\x1BE8', '\x1BE7', '\x3', '\x2', '\x2', '\x2', '\x1BE8', 
		'\x1BE9', '\x3', '\x2', '\x2', '\x2', '\x1BE9', '\x24D', '\x3', '\x2', 
		'\x2', '\x2', '\x1BEA', '\x1BEB', '\a', 'h', '\x2', '\x2', '\x1BEB', '\x1BEE', 
		'\a', '\x164', '\x2', '\x2', '\x1BEC', '\x1BED', '\a', '\x9A', '\x2', 
		'\x2', '\x1BED', '\x1BEF', '\a', 'x', '\x2', '\x2', '\x1BEE', '\x1BEC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BEE', '\x1BEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1BEF', '\x1BF0', '\x3', '\x2', '\x2', '\x2', '\x1BF0', '\x1BF5', '\x5', 
		'\x384', '\x1C3', '\x2', '\x1BF1', '\x1BF2', '\a', '\x338', '\x2', '\x2', 
		'\x1BF2', '\x1BF4', '\x5', '\x384', '\x1C3', '\x2', '\x1BF3', '\x1BF1', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF4', '\x1BF7', '\x3', '\x2', '\x2', '\x2', 
		'\x1BF5', '\x1BF3', '\x3', '\x2', '\x2', '\x2', '\x1BF5', '\x1BF6', '\x3', 
		'\x2', '\x2', '\x2', '\x1BF6', '\x1BF8', '\x3', '\x2', '\x2', '\x2', '\x1BF7', 
		'\x1BF5', '\x3', '\x2', '\x2', '\x2', '\x1BF8', '\x1BFC', '\a', '\xE6', 
		'\x2', '\x2', '\x1BF9', '\x1BFD', '\a', 'U', '\x2', '\x2', '\x1BFA', '\x1BFB', 
		'\a', '\x6', '\x2', '\x2', '\x1BFB', '\x1BFD', '\a', '\x138', '\x2', '\x2', 
		'\x1BFC', '\x1BF9', '\x3', '\x2', '\x2', '\x2', '\x1BFC', '\x1BFA', '\x3', 
		'\x2', '\x2', '\x2', '\x1BFD', '\x1BFF', '\x3', '\x2', '\x2', '\x2', '\x1BFE', 
		'\x1C00', '\a', '\x339', '\x2', '\x2', '\x1BFF', '\x1BFE', '\x3', '\x2', 
		'\x2', '\x2', '\x1BFF', '\x1C00', '\x3', '\x2', '\x2', '\x2', '\x1C00', 
		'\x24F', '\x3', '\x2', '\x2', '\x2', '\x1C01', '\x1C02', '\a', 'h', '\x2', 
		'\x2', '\x1C02', '\x1C05', '\a', '\x8E', '\x2', '\x2', '\x1C03', '\x1C04', 
		'\a', '\x9A', '\x2', '\x2', '\x1C04', '\x1C06', '\a', 'x', '\x2', '\x2', 
		'\x1C05', '\x1C03', '\x3', '\x2', '\x2', '\x2', '\x1C05', '\x1C06', '\x3', 
		'\x2', '\x2', '\x2', '\x1C06', '\x1C07', '\x3', '\x2', '\x2', '\x2', '\x1C07', 
		'\x1C0C', '\x5', '\x386', '\x1C4', '\x2', '\x1C08', '\x1C09', '\a', '\x338', 
		'\x2', '\x2', '\x1C09', '\x1C0B', '\x5', '\x386', '\x1C4', '\x2', '\x1C0A', 
		'\x1C08', '\x3', '\x2', '\x2', '\x2', '\x1C0B', '\x1C0E', '\x3', '\x2', 
		'\x2', '\x2', '\x1C0C', '\x1C0A', '\x3', '\x2', '\x2', '\x2', '\x1C0C', 
		'\x1C0D', '\x3', '\x2', '\x2', '\x2', '\x1C0D', '\x1C10', '\x3', '\x2', 
		'\x2', '\x2', '\x1C0E', '\x1C0C', '\x3', '\x2', '\x2', '\x2', '\x1C0F', 
		'\x1C11', '\a', '\x339', '\x2', '\x2', '\x1C10', '\x1C0F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C10', '\x1C11', '\x3', '\x2', '\x2', '\x2', '\x1C11', 
		'\x251', '\x3', '\x2', '\x2', '\x2', '\x1C12', '\x1C13', '\a', 'h', '\x2', 
		'\x2', '\x1C13', '\x1C1D', '\a', '\x14B', '\x2', '\x2', '\x1C14', '\x1C16', 
		'\a', '\x338', '\x2', '\x2', '\x1C15', '\x1C14', '\x3', '\x2', '\x2', 
		'\x2', '\x1C15', '\x1C16', '\x3', '\x2', '\x2', '\x2', '\x1C16', '\x1C1A', 
		'\x3', '\x2', '\x2', '\x2', '\x1C17', '\x1C18', '\x5', '\x382', '\x1C2', 
		'\x2', '\x1C18', '\x1C19', '\a', '\x331', '\x2', '\x2', '\x1C19', '\x1C1B', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1A', '\x1C17', '\x3', '\x2', '\x2', '\x2', 
		'\x1C1A', '\x1C1B', '\x3', '\x2', '\x2', '\x2', '\x1C1B', '\x1C1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1C', '\x1C1E', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x1C1D', '\x1C15', '\x3', '\x2', '\x2', '\x2', '\x1C1E', '\x1C1F', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1F', '\x1C1D', '\x3', '\x2', '\x2', '\x2', '\x1C1F', 
		'\x1C20', '\x3', '\x2', '\x2', '\x2', '\x1C20', '\x1C21', '\x3', '\x2', 
		'\x2', '\x2', '\x1C21', '\x1C22', '\a', '\x339', '\x2', '\x2', '\x1C22', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\x1C23', '\x1C24', '\a', 'h', '\x2', 
		'\x2', '\x1C24', '\x1C27', '\a', '\x157', '\x2', '\x2', '\x1C25', '\x1C26', 
		'\a', '\x9A', '\x2', '\x2', '\x1C26', '\x1C28', '\a', 'x', '\x2', '\x2', 
		'\x1C27', '\x1C25', '\x3', '\x2', '\x2', '\x2', '\x1C27', '\x1C28', '\x3', 
		'\x2', '\x2', '\x2', '\x1C28', '\x1C29', '\x3', '\x2', '\x2', '\x2', '\x1C29', 
		'\x1C2B', '\x5', '\x382', '\x1C2', '\x2', '\x1C2A', '\x1C2C', '\a', '\x339', 
		'\x2', '\x2', '\x1C2B', '\x1C2A', '\x3', '\x2', '\x2', '\x2', '\x1C2B', 
		'\x1C2C', '\x3', '\x2', '\x2', '\x2', '\x1C2C', '\x255', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2D', '\x1C2E', '\a', 'h', '\x2', '\x2', '\x1C2E', '\x1C31', 
		'\a', '\x176', '\x2', '\x2', '\x1C2F', '\x1C30', '\a', '\x9A', '\x2', 
		'\x2', '\x1C30', '\x1C32', '\a', 'x', '\x2', '\x2', '\x1C31', '\x1C2F', 
		'\x3', '\x2', '\x2', '\x2', '\x1C31', '\x1C32', '\x3', '\x2', '\x2', '\x2', 
		'\x1C32', '\x1C33', '\x3', '\x2', '\x2', '\x2', '\x1C33', '\x1C38', '\x5', 
		'\x384', '\x1C3', '\x2', '\x1C34', '\x1C35', '\a', '\x338', '\x2', '\x2', 
		'\x1C35', '\x1C37', '\x5', '\x384', '\x1C3', '\x2', '\x1C36', '\x1C34', 
		'\x3', '\x2', '\x2', '\x2', '\x1C37', '\x1C3A', '\x3', '\x2', '\x2', '\x2', 
		'\x1C38', '\x1C36', '\x3', '\x2', '\x2', '\x2', '\x1C38', '\x1C39', '\x3', 
		'\x2', '\x2', '\x2', '\x1C39', '\x1C3C', '\x3', '\x2', '\x2', '\x2', '\x1C3A', 
		'\x1C38', '\x3', '\x2', '\x2', '\x2', '\x1C3B', '\x1C3D', '\a', '\x339', 
		'\x2', '\x2', '\x1C3C', '\x1C3B', '\x3', '\x2', '\x2', '\x2', '\x1C3C', 
		'\x1C3D', '\x3', '\x2', '\x2', '\x2', '\x1C3D', '\x257', '\x3', '\x2', 
		'\x2', '\x2', '\x1C3E', '\x1C3F', '\a', 'I', '\x2', '\x2', '\x1C3F', '\x1C40', 
		'\a', '\x2FC', '\x2', '\x2', '\x1C40', '\x1C45', '\x5', '\x384', '\x1C3', 
		'\x2', '\x1C41', '\x1C42', '\a', '\x8C', '\x2', '\x2', '\x1C42', '\x1C43', 
		'\x5', '\x3B2', '\x1DA', '\x2', '\x1C43', '\x1C44', '\x5', '\x3B4', '\x1DB', 
		'\x2', '\x1C44', '\x1C46', '\x3', '\x2', '\x2', '\x2', '\x1C45', '\x1C41', 
		'\x3', '\x2', '\x2', '\x2', '\x1C45', '\x1C46', '\x3', '\x2', '\x2', '\x2', 
		'\x1C46', '\x1C4D', '\x3', '\x2', '\x2', '\x2', '\x1C47', '\x1C48', '\a', 
		'\x10', '\x2', '\x2', '\x1C48', '\x1C49', '\a', '\x157', '\x2', '\x2', 
		'\x1C49', '\x1C4A', '\a', '\x336', '\x2', '\x2', '\x1C4A', '\x1C4B', '\x5', 
		'\x2AC', '\x157', '\x2', '\x1C4B', '\x1C4C', '\a', '\x337', '\x2', '\x2', 
		'\x1C4C', '\x1C4E', '\x3', '\x2', '\x2', '\x2', '\x1C4D', '\x1C47', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4D', '\x1C4E', '\x3', '\x2', '\x2', '\x2', '\x1C4E', 
		'\x259', '\x3', '\x2', '\x2', '\x2', '\x1C4F', '\x1C50', '\a', 'h', '\x2', 
		'\x2', '\x1C50', '\x1C53', '\a', '\x2FC', '\x2', '\x2', '\x1C51', '\x1C52', 
		'\a', '\x9A', '\x2', '\x2', '\x1C52', '\x1C54', '\a', 'x', '\x2', '\x2', 
		'\x1C53', '\x1C51', '\x3', '\x2', '\x2', '\x2', '\x1C53', '\x1C54', '\x3', 
		'\x2', '\x2', '\x2', '\x1C54', '\x1C55', '\x3', '\x2', '\x2', '\x2', '\x1C55', 
		'\x1C56', '\x5', '\x384', '\x1C3', '\x2', '\x1C56', '\x25B', '\x3', '\x2', 
		'\x2', '\x2', '\x1C57', '\x1C5A', '\x5', '\x25E', '\x130', '\x2', '\x1C58', 
		'\x1C5A', '\x5', '\x260', '\x131', '\x2', '\x1C59', '\x1C57', '\x3', '\x2', 
		'\x2', '\x2', '\x1C59', '\x1C58', '\x3', '\x2', '\x2', '\x2', '\x1C5A', 
		'\x25D', '\x3', '\x2', '\x2', '\x2', '\x1C5B', '\x1C5C', '\a', '\xEA', 
		'\x2', '\x2', '\x1C5C', '\x1C5D', '\a', '\x336', '\x2', '\x2', '\x1C5D', 
		'\x1C5E', '\x5', '\x3BA', '\x1DE', '\x2', '\x1C5E', '\x1C5F', '\a', '\x338', 
		'\x2', '\x2', '\x1C5F', '\x1C60', '\a', '\x320', '\x2', '\x2', '\x1C60', 
		'\x1C61', '\a', '\x337', '\x2', '\x2', '\x1C61', '\x25F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C62', '\x1C63', '\a', '\xE9', '\x2', '\x2', '\x1C63', 
		'\x1C64', '\a', '\x336', '\x2', '\x2', '\x1C64', '\x1C65', '\a', '\x320', 
		'\x2', '\x2', '\x1C65', '\x1C66', '\a', '\x338', '\x2', '\x2', '\x1C66', 
		'\x1C67', '\a', '\x320', '\x2', '\x2', '\x1C67', '\x1C68', '\a', '\x337', 
		'\x2', '\x2', '\x1C68', '\x1C6A', '\a', '\x331', '\x2', '\x2', '\x1C69', 
		'\x1C6B', '\x5', '\x3BA', '\x1DE', '\x2', '\x1C6A', '\x1C69', '\x3', '\x2', 
		'\x2', '\x2', '\x1C6A', '\x1C6B', '\x3', '\x2', '\x2', '\x2', '\x1C6B', 
		'\x1C6C', '\x3', '\x2', '\x2', '\x2', '\x1C6C', '\x1C6E', '\a', '\x331', 
		'\x2', '\x2', '\x1C6D', '\x1C6F', '\x5', '\x3BA', '\x1DE', '\x2', '\x1C6E', 
		'\x1C6D', '\x3', '\x2', '\x2', '\x2', '\x1C6E', '\x1C6F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C6F', '\x1C70', '\x3', '\x2', '\x2', '\x2', '\x1C70', 
		'\x1C71', '\a', '\x331', '\x2', '\x2', '\x1C71', '\x1C72', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1C72', '\x261', '\x3', '\x2', '\x2', '\x2', '\x1C73', 
		'\x1C74', '\a', 'Y', '\x2', '\x2', '\x1C74', '\x1C76', '\a', '\x31B', 
		'\x2', '\x2', '\x1C75', '\x1C77', '\a', '\x10', '\x2', '\x2', '\x1C76', 
		'\x1C75', '\x3', '\x2', '\x2', '\x2', '\x1C76', '\x1C77', '\x3', '\x2', 
		'\x2', '\x2', '\x1C77', '\x1C78', '\x3', '\x2', '\x2', '\x2', '\x1C78', 
		'\x1C7A', '\x5', '\x2A6', '\x154', '\x2', '\x1C79', '\x1C7B', '\a', '\x339', 
		'\x2', '\x2', '\x1C7A', '\x1C79', '\x3', '\x2', '\x2', '\x2', '\x1C7A', 
		'\x1C7B', '\x3', '\x2', '\x2', '\x2', '\x1C7B', '\x1C9F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C7C', '\x1C7D', '\a', 'Y', '\x2', '\x2', '\x1C7D', '\x1C82', 
		'\x5', '\x2A4', '\x153', '\x2', '\x1C7E', '\x1C7F', '\a', '\x338', '\x2', 
		'\x2', '\x1C7F', '\x1C81', '\x5', '\x2A4', '\x153', '\x2', '\x1C80', '\x1C7E', 
		'\x3', '\x2', '\x2', '\x2', '\x1C81', '\x1C84', '\x3', '\x2', '\x2', '\x2', 
		'\x1C82', '\x1C80', '\x3', '\x2', '\x2', '\x2', '\x1C82', '\x1C83', '\x3', 
		'\x2', '\x2', '\x2', '\x1C83', '\x1C86', '\x3', '\x2', '\x2', '\x2', '\x1C84', 
		'\x1C82', '\x3', '\x2', '\x2', '\x2', '\x1C85', '\x1C87', '\a', '\x339', 
		'\x2', '\x2', '\x1C86', '\x1C85', '\x3', '\x2', '\x2', '\x2', '\x1C86', 
		'\x1C87', '\x3', '\x2', '\x2', '\x2', '\x1C87', '\x1C9F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C88', '\x1C89', '\a', 'Y', '\x2', '\x2', '\x1C89', '\x1C8B', 
		'\a', '\x31B', '\x2', '\x2', '\x1C8A', '\x1C8C', '\a', '\x10', '\x2', 
		'\x2', '\x1C8B', '\x1C8A', '\x3', '\x2', '\x2', '\x2', '\x1C8B', '\x1C8C', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8C', '\x1C8D', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8D', '\x1C8F', '\x5', '\x2A8', '\x155', '\x2', '\x1C8E', '\x1C90', 
		'\a', '\x339', '\x2', '\x2', '\x1C8F', '\x1C8E', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8F', '\x1C90', '\x3', '\x2', '\x2', '\x2', '\x1C90', '\x1C9F', 
		'\x3', '\x2', '\x2', '\x2', '\x1C91', '\x1C92', '\a', '\x17D', '\x2', 
		'\x2', '\x1C92', '\x1C93', '\a', '\x311', '\x2', '\x2', '\x1C93', '\x1C94', 
		'\a', '\x336', '\x2', '\x2', '\x1C94', '\x1C96', '\a', '\x320', '\x2', 
		'\x2', '\x1C95', '\x1C97', '\a', '\x338', '\x2', '\x2', '\x1C96', '\x1C95', 
		'\x3', '\x2', '\x2', '\x2', '\x1C96', '\x1C97', '\x3', '\x2', '\x2', '\x2', 
		'\x1C97', '\x1C98', '\x3', '\x2', '\x2', '\x2', '\x1C98', '\x1C99', '\a', 
		'\x10', '\x2', '\x2', '\x1C99', '\x1C9A', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x1C9A', '\x1C9C', '\a', '\x337', '\x2', '\x2', '\x1C9B', '\x1C9D', '\a', 
		'\x339', '\x2', '\x2', '\x1C9C', '\x1C9B', '\x3', '\x2', '\x2', '\x2', 
		'\x1C9C', '\x1C9D', '\x3', '\x2', '\x2', '\x2', '\x1C9D', '\x1C9F', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9E', '\x1C73', '\x3', '\x2', '\x2', '\x2', '\x1C9E', 
		'\x1C7C', '\x3', '\x2', '\x2', '\x2', '\x1C9E', '\x1C88', '\x3', '\x2', 
		'\x2', '\x2', '\x1C9E', '\x1C91', '\x3', '\x2', '\x2', '\x2', '\x1C9F', 
		'\x263', '\x3', '\x2', '\x2', '\x2', '\x1CA0', '\x1CA2', '\a', '\x33', 
		'\x2', '\x2', '\x1CA1', '\x1CA3', '\a', '\x210', '\x2', '\x2', '\x1CA2', 
		'\x1CA1', '\x3', '\x2', '\x2', '\x2', '\x1CA2', '\x1CA3', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA3', '\x1CA4', '\x3', '\x2', '\x2', '\x2', '\x1CA4', 
		'\x1CA6', '\x5', '\x394', '\x1CB', '\x2', '\x1CA5', '\x1CA7', '\a', '\x339', 
		'\x2', '\x2', '\x1CA6', '\x1CA5', '\x3', '\x2', '\x2', '\x2', '\x1CA6', 
		'\x1CA7', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1CBE', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA8', '\x1CAA', '\a', 'X', '\x2', '\x2', '\x1CA9', '\x1CAB', 
		'\a', '\x210', '\x2', '\x2', '\x1CAA', '\x1CA9', '\x3', '\x2', '\x2', 
		'\x2', '\x1CAA', '\x1CAB', '\x3', '\x2', '\x2', '\x2', '\x1CAB', '\x1CAD', 
		'\x3', '\x2', '\x2', '\x2', '\x1CAC', '\x1CAE', '\a', 'P', '\x2', '\x2', 
		'\x1CAD', '\x1CAC', '\x3', '\x2', '\x2', '\x2', '\x1CAD', '\x1CAE', '\x3', 
		'\x2', '\x2', '\x2', '\x1CAE', '\x1CAF', '\x3', '\x2', '\x2', '\x2', '\x1CAF', 
		'\x1CB1', '\x5', '\x394', '\x1CB', '\x2', '\x1CB0', '\x1CB2', '\a', '\x339', 
		'\x2', '\x2', '\x1CB1', '\x1CB0', '\x3', '\x2', '\x2', '\x2', '\x1CB1', 
		'\x1CB2', '\x3', '\x2', '\x2', '\x2', '\x1CB2', '\x1CBE', '\x3', '\x2', 
		'\x2', '\x2', '\x1CB3', '\x1CBE', '\x5', '\x2C0', '\x161', '\x2', '\x1CB4', 
		'\x1CBE', '\x5', '\x2C6', '\x164', '\x2', '\x1CB5', '\x1CB7', '\a', '\xE8', 
		'\x2', '\x2', '\x1CB6', '\x1CB8', '\a', '\x210', '\x2', '\x2', '\x1CB7', 
		'\x1CB6', '\x3', '\x2', '\x2', '\x2', '\x1CB7', '\x1CB8', '\x3', '\x2', 
		'\x2', '\x2', '\x1CB8', '\x1CB9', '\x3', '\x2', '\x2', '\x2', '\x1CB9', 
		'\x1CBB', '\x5', '\x394', '\x1CB', '\x2', '\x1CBA', '\x1CBC', '\a', '\x339', 
		'\x2', '\x2', '\x1CBB', '\x1CBA', '\x3', '\x2', '\x2', '\x2', '\x1CBB', 
		'\x1CBC', '\x3', '\x2', '\x2', '\x2', '\x1CBC', '\x1CBE', '\x3', '\x2', 
		'\x2', '\x2', '\x1CBD', '\x1CA0', '\x3', '\x2', '\x2', '\x2', '\x1CBD', 
		'\x1CA8', '\x3', '\x2', '\x2', '\x2', '\x1CBD', '\x1CB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1CBD', '\x1CB4', '\x3', '\x2', '\x2', '\x2', '\x1CBD', 
		'\x1CB5', '\x3', '\x2', '\x2', '\x2', '\x1CBE', '\x265', '\x3', '\x2', 
		'\x2', '\x2', '\x1CBF', '\x1CC0', '\a', '\x1A', '\x2', '\x2', '\x1CC0', 
		'\x1CC1', '\a', 'U', '\x2', '\x2', '\x1CC1', '\x1CCE', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1CC2', '\x1CCB', '\a', '\x10D', '\x2', '\x2', '\x1CC3', 
		'\x1CC5', '\a', '\x338', '\x2', '\x2', '\x1CC4', '\x1CC3', '\x3', '\x2', 
		'\x2', '\x2', '\x1CC4', '\x1CC5', '\x3', '\x2', '\x2', '\x2', '\x1CC5', 
		'\x1CC6', '\x3', '\x2', '\x2', '\x2', '\x1CC6', '\x1CC7', '\t', 'Q', '\x2', 
		'\x2', '\x1CC7', '\x1CC8', '\a', '\x324', '\x2', '\x2', '\x1CC8', '\x1CCA', 
		'\a', '\x320', '\x2', '\x2', '\x1CC9', '\x1CC4', '\x3', '\x2', '\x2', 
		'\x2', '\x1CCA', '\x1CCD', '\x3', '\x2', '\x2', '\x2', '\x1CCB', '\x1CC9', 
		'\x3', '\x2', '\x2', '\x2', '\x1CCB', '\x1CCC', '\x3', '\x2', '\x2', '\x2', 
		'\x1CCC', '\x1CCF', '\x3', '\x2', '\x2', '\x2', '\x1CCD', '\x1CCB', '\x3', 
		'\x2', '\x2', '\x2', '\x1CCE', '\x1CC2', '\x3', '\x2', '\x2', '\x2', '\x1CCE', 
		'\x1CCF', '\x3', '\x2', '\x2', '\x2', '\x1CCF', '\x1CD8', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD0', '\x1CD2', '\a', '\x338', '\x2', '\x2', '\x1CD1', 
		'\x1CD0', '\x3', '\x2', '\x2', '\x2', '\x1CD1', '\x1CD2', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD2', '\x1CD3', '\x3', '\x2', '\x2', '\x2', '\x1CD3', 
		'\x1CD4', '\t', 'Q', '\x2', '\x2', '\x1CD4', '\x1CD5', '\a', '\x324', 
		'\x2', '\x2', '\x1CD5', '\x1CD7', '\a', '\x320', '\x2', '\x2', '\x1CD6', 
		'\x1CD1', '\x3', '\x2', '\x2', '\x2', '\x1CD7', '\x1CDA', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD8', '\x1CD6', '\x3', '\x2', '\x2', '\x2', '\x1CD8', 
		'\x1CD9', '\x3', '\x2', '\x2', '\x2', '\x1CD9', '\x1CF2', '\x3', '\x2', 
		'\x2', '\x2', '\x1CDA', '\x1CD8', '\x3', '\x2', '\x2', '\x2', '\x1CDB', 
		'\x1CE0', '\a', '\x15E', '\x2', '\x2', '\x1CDC', '\x1CDE', '\a', '\x338', 
		'\x2', '\x2', '\x1CDD', '\x1CDC', '\x3', '\x2', '\x2', '\x2', '\x1CDD', 
		'\x1CDE', '\x3', '\x2', '\x2', '\x2', '\x1CDE', '\x1CDF', '\x3', '\x2', 
		'\x2', '\x2', '\x1CDF', '\x1CE1', '\x5', '\x3BA', '\x1DE', '\x2', '\x1CE0', 
		'\x1CDD', '\x3', '\x2', '\x2', '\x2', '\x1CE1', '\x1CE2', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE2', '\x1CE0', '\x3', '\x2', '\x2', '\x2', '\x1CE2', 
		'\x1CE3', '\x3', '\x2', '\x2', '\x2', '\x1CE3', '\x1CF3', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE4', '\x1CEE', '\a', '\x15E', '\x2', '\x2', '\x1CE5', 
		'\x1CE7', '\a', '\x338', '\x2', '\x2', '\x1CE6', '\x1CE5', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE6', '\x1CE7', '\x3', '\x2', '\x2', '\x2', '\x1CE7', 
		'\x1CE8', '\x3', '\x2', '\x2', '\x2', '\x1CE8', '\x1CE9', '\t', 'R', '\x2', 
		'\x2', '\x1CE9', '\x1CEC', '\a', '\x324', '\x2', '\x2', '\x1CEA', '\x1CED', 
		'\a', '\x320', '\x2', '\x2', '\x1CEB', '\x1CED', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1CEC', '\x1CEA', '\x3', '\x2', '\x2', '\x2', '\x1CEC', '\x1CEB', 
		'\x3', '\x2', '\x2', '\x2', '\x1CED', '\x1CEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CEE', '\x1CE6', '\x3', '\x2', '\x2', '\x2', '\x1CEF', '\x1CF0', '\x3', 
		'\x2', '\x2', '\x2', '\x1CF0', '\x1CEE', '\x3', '\x2', '\x2', '\x2', '\x1CF0', 
		'\x1CF1', '\x3', '\x2', '\x2', '\x2', '\x1CF1', '\x1CF3', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF2', '\x1CDB', '\x3', '\x2', '\x2', '\x2', '\x1CF2', 
		'\x1CE4', '\x3', '\x2', '\x2', '\x2', '\x1CF3', '\x1D15', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF4', '\x1CF5', '\a', '\xCE', '\x2', '\x2', '\x1CF5', 
		'\x1CFA', '\a', '\x15E', '\x2', '\x2', '\x1CF6', '\x1CF8', '\a', '\x338', 
		'\x2', '\x2', '\x1CF7', '\x1CF6', '\x3', '\x2', '\x2', '\x2', '\x1CF7', 
		'\x1CF8', '\x3', '\x2', '\x2', '\x2', '\x1CF8', '\x1CF9', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF9', '\x1CFB', '\x5', '\x3BA', '\x1DE', '\x2', '\x1CFA', 
		'\x1CF7', '\x3', '\x2', '\x2', '\x2', '\x1CFB', '\x1CFC', '\x3', '\x2', 
		'\x2', '\x2', '\x1CFC', '\x1CFA', '\x3', '\x2', '\x2', '\x2', '\x1CFC', 
		'\x1CFD', '\x3', '\x2', '\x2', '\x2', '\x1CFD', '\x1CFF', '\x3', '\x2', 
		'\x2', '\x2', '\x1CFE', '\x1CF4', '\x3', '\x2', '\x2', '\x2', '\x1CFF', 
		'\x1D00', '\x3', '\x2', '\x2', '\x2', '\x1D00', '\x1CFE', '\x3', '\x2', 
		'\x2', '\x2', '\x1D00', '\x1D01', '\x3', '\x2', '\x2', '\x2', '\x1D01', 
		'\x1D16', '\x3', '\x2', '\x2', '\x2', '\x1D02', '\x1D03', '\a', '\xCE', 
		'\x2', '\x2', '\x1D03', '\x1D0D', '\a', '\x15E', '\x2', '\x2', '\x1D04', 
		'\x1D06', '\a', '\x338', '\x2', '\x2', '\x1D05', '\x1D04', '\x3', '\x2', 
		'\x2', '\x2', '\x1D05', '\x1D06', '\x3', '\x2', '\x2', '\x2', '\x1D06', 
		'\x1D07', '\x3', '\x2', '\x2', '\x2', '\x1D07', '\x1D08', '\t', 'R', '\x2', 
		'\x2', '\x1D08', '\x1D0B', '\a', '\x324', '\x2', '\x2', '\x1D09', '\x1D0C', 
		'\a', '\x320', '\x2', '\x2', '\x1D0A', '\x1D0C', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1D0B', '\x1D09', '\x3', '\x2', '\x2', '\x2', '\x1D0B', '\x1D0A', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0C', '\x1D0E', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0D', '\x1D05', '\x3', '\x2', '\x2', '\x2', '\x1D0E', '\x1D0F', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0F', '\x1D0D', '\x3', '\x2', '\x2', '\x2', '\x1D0F', 
		'\x1D10', '\x3', '\x2', '\x2', '\x2', '\x1D10', '\x1D12', '\x3', '\x2', 
		'\x2', '\x2', '\x1D11', '\x1D02', '\x3', '\x2', '\x2', '\x2', '\x1D12', 
		'\x1D13', '\x3', '\x2', '\x2', '\x2', '\x1D13', '\x1D11', '\x3', '\x2', 
		'\x2', '\x2', '\x1D13', '\x1D14', '\x3', '\x2', '\x2', '\x2', '\x1D14', 
		'\x1D16', '\x3', '\x2', '\x2', '\x2', '\x1D15', '\x1CFE', '\x3', '\x2', 
		'\x2', '\x2', '\x1D15', '\x1D11', '\x3', '\x2', '\x2', '\x2', '\x1D15', 
		'\x1D16', '\x3', '\x2', '\x2', '\x2', '\x1D16', '\x1DB7', '\x3', '\x2', 
		'\x2', '\x2', '\x1D17', '\x1DB4', '\a', '\x17D', '\x2', '\x2', '\x1D18', 
		'\x1D1A', '\a', '\x338', '\x2', '\x2', '\x1D19', '\x1D18', '\x3', '\x2', 
		'\x2', '\x2', '\x1D19', '\x1D1A', '\x3', '\x2', '\x2', '\x2', '\x1D1A', 
		'\x1D1B', '\x3', '\x2', '\x2', '\x2', '\x1D1B', '\x1DB3', '\a', '\x61', 
		'\x2', '\x2', '\x1D1C', '\x1D1E', '\a', '\x338', '\x2', '\x2', '\x1D1D', 
		'\x1D1C', '\x3', '\x2', '\x2', '\x2', '\x1D1D', '\x1D1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1E', '\x1D1F', '\x3', '\x2', '\x2', '\x2', '\x1D1F', 
		'\x1DB3', '\a', 'H', '\x2', '\x2', '\x1D20', '\x1D22', '\a', '\x338', 
		'\x2', '\x2', '\x1D21', '\x1D20', '\x3', '\x2', '\x2', '\x2', '\x1D21', 
		'\x1D22', '\x3', '\x2', '\x2', '\x2', '\x1D22', '\x1D23', '\x3', '\x2', 
		'\x2', '\x2', '\x1D23', '\x1DB3', '\t', 'S', '\x2', '\x2', '\x1D24', '\x1D26', 
		'\a', '\x338', '\x2', '\x2', '\x1D25', '\x1D24', '\x3', '\x2', '\x2', 
		'\x2', '\x1D25', '\x1D26', '\x3', '\x2', '\x2', '\x2', '\x1D26', '\x1D27', 
		'\x3', '\x2', '\x2', '\x2', '\x1D27', '\x1D28', '\a', '\x1DE', '\x2', 
		'\x2', '\x1D28', '\x1D2B', '\a', '\x324', '\x2', '\x2', '\x1D29', '\x1D2C', 
		'\a', '\x320', '\x2', '\x2', '\x1D2A', '\x1D2C', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1D2B', '\x1D29', '\x3', '\x2', '\x2', '\x2', '\x1D2B', '\x1D2A', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2C', '\x1DB3', '\x3', '\x2', '\x2', '\x2', 
		'\x1D2D', '\x1D2F', '\a', '\x338', '\x2', '\x2', '\x1D2E', '\x1D2D', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2E', '\x1D2F', '\x3', '\x2', '\x2', '\x2', '\x1D2F', 
		'\x1D30', '\x3', '\x2', '\x2', '\x2', '\x1D30', '\x1D31', '\a', '\x25F', 
		'\x2', '\x2', '\x1D31', '\x1D32', '\a', '\x324', '\x2', '\x2', '\x1D32', 
		'\x1DB3', '\x5', '\x3BA', '\x1DE', '\x2', '\x1D33', '\x1D35', '\a', '\x338', 
		'\x2', '\x2', '\x1D34', '\x1D33', '\x3', '\x2', '\x2', '\x2', '\x1D34', 
		'\x1D35', '\x3', '\x2', '\x2', '\x2', '\x1D35', '\x1D36', '\x3', '\x2', 
		'\x2', '\x2', '\x1D36', '\x1DB3', '\a', '\x1C8', '\x2', '\x2', '\x1D37', 
		'\x1D39', '\a', '\x338', '\x2', '\x2', '\x1D38', '\x1D37', '\x3', '\x2', 
		'\x2', '\x2', '\x1D38', '\x1D39', '\x3', '\x2', '\x2', '\x2', '\x1D39', 
		'\x1D3A', '\x3', '\x2', '\x2', '\x2', '\x1D3A', '\x1DB3', '\a', '\x85', 
		'\x2', '\x2', '\x1D3B', '\x1D3D', '\a', '\x338', '\x2', '\x2', '\x1D3C', 
		'\x1D3B', '\x3', '\x2', '\x2', '\x2', '\x1D3C', '\x1D3D', '\x3', '\x2', 
		'\x2', '\x2', '\x1D3D', '\x1D4A', '\x3', '\x2', '\x2', '\x2', '\x1D3E', 
		'\x1D3F', '\a', 'y', '\x2', '\x2', '\x1D3F', '\x1D42', '\a', '\x324', 
		'\x2', '\x2', '\x1D40', '\x1D43', '\a', '\x320', '\x2', '\x2', '\x1D41', 
		'\x1D43', '\x5', '\x3BA', '\x1DE', '\x2', '\x1D42', '\x1D40', '\x3', '\x2', 
		'\x2', '\x2', '\x1D42', '\x1D41', '\x3', '\x2', '\x2', '\x2', '\x1D43', 
		'\x1D4B', '\x3', '\x2', '\x2', '\x2', '\x1D44', '\x1D45', '\a', '\x11A', 
		'\x2', '\x2', '\x1D45', '\x1D48', '\a', '\x324', '\x2', '\x2', '\x1D46', 
		'\x1D49', '\a', '\x31C', '\x2', '\x2', '\x1D47', '\x1D49', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1D48', '\x1D46', '\x3', '\x2', '\x2', '\x2', '\x1D48', 
		'\x1D47', '\x3', '\x2', '\x2', '\x2', '\x1D49', '\x1D4B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4A', '\x1D3E', '\x3', '\x2', '\x2', '\x2', '\x1D4A', 
		'\x1D44', '\x3', '\x2', '\x2', '\x2', '\x1D4B', '\x1DB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4C', '\x1D4E', '\a', '\x338', '\x2', '\x2', '\x1D4D', 
		'\x1D4C', '\x3', '\x2', '\x2', '\x2', '\x1D4D', '\x1D4E', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4E', '\x1D4F', '\x3', '\x2', '\x2', '\x2', '\x1D4F', 
		'\x1DB3', '\t', 'T', '\x2', '\x2', '\x1D50', '\x1D52', '\a', '\x338', 
		'\x2', '\x2', '\x1D51', '\x1D50', '\x3', '\x2', '\x2', '\x2', '\x1D51', 
		'\x1D52', '\x3', '\x2', '\x2', '\x2', '\x1D52', '\x1D53', '\x3', '\x2', 
		'\x2', '\x2', '\x1D53', '\x1DB3', '\t', 'U', '\x2', '\x2', '\x1D54', '\x1D56', 
		'\a', '\x338', '\x2', '\x2', '\x1D55', '\x1D54', '\x3', '\x2', '\x2', 
		'\x2', '\x1D55', '\x1D56', '\x3', '\x2', '\x2', '\x2', '\x1D56', '\x1D57', 
		'\x3', '\x2', '\x2', '\x2', '\x1D57', '\x1DB3', '\t', 'V', '\x2', '\x2', 
		'\x1D58', '\x1D5A', '\a', '\x338', '\x2', '\x2', '\x1D59', '\x1D58', '\x3', 
		'\x2', '\x2', '\x2', '\x1D59', '\x1D5A', '\x3', '\x2', '\x2', '\x2', '\x1D5A', 
		'\x1D5B', '\x3', '\x2', '\x2', '\x2', '\x1D5B', '\x1D5C', '\a', '\xC6', 
		'\x2', '\x2', '\x1D5C', '\x1D5F', '\a', '\x324', '\x2', '\x2', '\x1D5D', 
		'\x1D60', '\a', '\x320', '\x2', '\x2', '\x1D5E', '\x1D60', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1D5F', '\x1D5D', '\x3', '\x2', '\x2', '\x2', '\x1D5F', 
		'\x1D5E', '\x3', '\x2', '\x2', '\x2', '\x1D60', '\x1DB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1D61', '\x1D63', '\a', '\x338', '\x2', '\x2', '\x1D62', 
		'\x1D61', '\x3', '\x2', '\x2', '\x2', '\x1D62', '\x1D63', '\x3', '\x2', 
		'\x2', '\x2', '\x1D63', '\x1D64', '\x3', '\x2', '\x2', '\x2', '\x1D64', 
		'\x1D65', '\a', '\xC7', '\x2', '\x2', '\x1D65', '\x1D66', '\a', '\x324', 
		'\x2', '\x2', '\x1D66', '\x1DB3', '\a', '\x320', '\x2', '\x2', '\x1D67', 
		'\x1D69', '\a', '\x338', '\x2', '\x2', '\x1D68', '\x1D67', '\x3', '\x2', 
		'\x2', '\x2', '\x1D68', '\x1D69', '\x3', '\x2', '\x2', '\x2', '\x1D69', 
		'\x1D6A', '\x3', '\x2', '\x2', '\x2', '\x1D6A', '\x1D6B', '\a', '\x1F', 
		'\x2', '\x2', '\x1D6B', '\x1D6E', '\a', '\x324', '\x2', '\x2', '\x1D6C', 
		'\x1D6F', '\a', '\x31C', '\x2', '\x2', '\x1D6D', '\x1D6F', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1D6E', '\x1D6C', '\x3', '\x2', '\x2', '\x2', '\x1D6E', 
		'\x1D6D', '\x3', '\x2', '\x2', '\x2', '\x1D6F', '\x1DB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1D70', '\x1D72', '\a', '\x338', '\x2', '\x2', '\x1D71', 
		'\x1D70', '\x3', '\x2', '\x2', '\x2', '\x1D71', '\x1D72', '\x3', '\x2', 
		'\x2', '\x2', '\x1D72', '\x1D73', '\x3', '\x2', '\x2', '\x2', '\x1D73', 
		'\x1D74', '\a', '$', '\x2', '\x2', '\x1D74', '\x1D77', '\a', '\x324', 
		'\x2', '\x2', '\x1D75', '\x1D78', '\a', '\x31C', '\x2', '\x2', '\x1D76', 
		'\x1D78', '\x5', '\x3BA', '\x1DE', '\x2', '\x1D77', '\x1D75', '\x3', '\x2', 
		'\x2', '\x2', '\x1D77', '\x1D76', '\x3', '\x2', '\x2', '\x2', '\x1D78', 
		'\x1DB3', '\x3', '\x2', '\x2', '\x2', '\x1D79', '\x1D7B', '\a', '\x338', 
		'\x2', '\x2', '\x1D7A', '\x1D79', '\x3', '\x2', '\x2', '\x2', '\x1D7A', 
		'\x1D7B', '\x3', '\x2', '\x2', '\x2', '\x1D7B', '\x1D7C', '\x3', '\x2', 
		'\x2', '\x2', '\x1D7C', '\x1D7D', '\a', '\xC0', '\x2', '\x2', '\x1D7D', 
		'\x1D80', '\a', '\x324', '\x2', '\x2', '\x1D7E', '\x1D81', '\a', '\x31C', 
		'\x2', '\x2', '\x1D7F', '\x1D81', '\x5', '\x3BA', '\x1DE', '\x2', '\x1D80', 
		'\x1D7E', '\x3', '\x2', '\x2', '\x2', '\x1D80', '\x1D7F', '\x3', '\x2', 
		'\x2', '\x2', '\x1D81', '\x1DB3', '\x3', '\x2', '\x2', '\x2', '\x1D82', 
		'\x1D84', '\a', '\x338', '\x2', '\x2', '\x1D83', '\x1D82', '\x3', '\x2', 
		'\x2', '\x2', '\x1D83', '\x1D84', '\x3', '\x2', '\x2', '\x2', '\x1D84', 
		'\x1D85', '\x3', '\x2', '\x2', '\x2', '\x1D85', '\x1DB3', '\t', 'W', '\x2', 
		'\x2', '\x1D86', '\x1D88', '\a', '\x338', '\x2', '\x2', '\x1D87', '\x1D86', 
		'\x3', '\x2', '\x2', '\x2', '\x1D87', '\x1D88', '\x3', '\x2', '\x2', '\x2', 
		'\x1D88', '\x1D89', '\x3', '\x2', '\x2', '\x2', '\x1D89', '\x1DB3', '\t', 
		'X', '\x2', '\x2', '\x1D8A', '\x1D8C', '\a', '\x338', '\x2', '\x2', '\x1D8B', 
		'\x1D8A', '\x3', '\x2', '\x2', '\x2', '\x1D8B', '\x1D8C', '\x3', '\x2', 
		'\x2', '\x2', '\x1D8C', '\x1D8D', '\x3', '\x2', '\x2', '\x2', '\x1D8D', 
		'\x1DB3', '\a', '\x116', '\x2', '\x2', '\x1D8E', '\x1D90', '\a', '\x338', 
		'\x2', '\x2', '\x1D8F', '\x1D8E', '\x3', '\x2', '\x2', '\x2', '\x1D8F', 
		'\x1D90', '\x3', '\x2', '\x2', '\x2', '\x1D90', '\x1D91', '\x3', '\x2', 
		'\x2', '\x2', '\x1D91', '\x1D94', '\a', '\x14D', '\x2', '\x2', '\x1D92', 
		'\x1D93', '\a', '\x324', '\x2', '\x2', '\x1D93', '\x1D95', '\a', '\x31C', 
		'\x2', '\x2', '\x1D94', '\x1D92', '\x3', '\x2', '\x2', '\x2', '\x1D94', 
		'\x1D95', '\x3', '\x2', '\x2', '\x2', '\x1D95', '\x1DB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1D96', '\x1D98', '\a', '\x338', '\x2', '\x2', '\x1D97', 
		'\x1D96', '\x3', '\x2', '\x2', '\x2', '\x1D97', '\x1D98', '\x3', '\x2', 
		'\x2', '\x2', '\x1D98', '\x1D99', '\x3', '\x2', '\x2', '\x2', '\x1D99', 
		'\x1DB3', '\t', 'Y', '\x2', '\x2', '\x1D9A', '\x1D9C', '\a', '\x338', 
		'\x2', '\x2', '\x1D9B', '\x1D9A', '\x3', '\x2', '\x2', '\x2', '\x1D9B', 
		'\x1D9C', '\x3', '\x2', '\x2', '\x2', '\x1D9C', '\x1D9D', '\x3', '\x2', 
		'\x2', '\x2', '\x1D9D', '\x1DB3', '\t', 'Z', '\x2', '\x2', '\x1D9E', '\x1DA0', 
		'\a', '\x338', '\x2', '\x2', '\x1D9F', '\x1D9E', '\x3', '\x2', '\x2', 
		'\x2', '\x1D9F', '\x1DA0', '\x3', '\x2', '\x2', '\x2', '\x1DA0', '\x1DA1', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA1', '\x1DA2', '\a', '\x1EF', '\x2', 
		'\x2', '\x1DA2', '\x1DA3', '\a', '\x336', '\x2', '\x2', '\x1DA3', '\x1DA4', 
		'\a', '\x18E', '\x2', '\x2', '\x1DA4', '\x1DA5', '\a', '\x324', '\x2', 
		'\x2', '\x1DA5', '\x1DA6', '\t', '[', '\x2', '\x2', '\x1DA6', '\x1DA7', 
		'\a', '\x338', '\x2', '\x2', '\x1DA7', '\x1DA8', '\a', '\x138', '\x2', 
		'\x2', '\x1DA8', '\x1DA9', '\a', '+', '\x2', '\x2', '\x1DA9', '\x1DB0', 
		'\a', '\x324', '\x2', '\x2', '\x1DAA', '\x1DB1', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1DAB', '\x1DAC', '\a', '\x138', '\x2', '\x2', '\x1DAC', '\x1DAD', 
		'\a', '\x12', '\x2', '\x2', '\x1DAD', '\x1DAE', '\a', '\xAD', '\x2', '\x2', 
		'\x1DAE', '\x1DAF', '\a', '\x324', '\x2', '\x2', '\x1DAF', '\x1DB1', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x1DB0', '\x1DAA', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB0', '\x1DAB', '\x3', '\x2', '\x2', '\x2', '\x1DB1', '\x1DB3', '\x3', 
		'\x2', '\x2', '\x2', '\x1DB2', '\x1D19', '\x3', '\x2', '\x2', '\x2', '\x1DB2', 
		'\x1D1D', '\x3', '\x2', '\x2', '\x2', '\x1DB2', '\x1D21', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB2', '\x1D25', '\x3', '\x2', '\x2', '\x2', '\x1DB2', 
		'\x1D2E', '\x3', '\x2', '\x2', '\x2', '\x1DB2', '\x1D34', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB2', '\x1D38', '\x3', '\x2', '\x2', '\x2', '\x1DB2', 
		'\x1D3C', '\x3', '\x2', '\x2', '\x2', '\x1DB2', '\x1D4D', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB2', '\x1D51', '\x3', '\x2', '\x2', '\x2', '\x1DB2', 
		'\x1D55', '\x3', '\x2', '\x2', '\x2', '\x1DB2', '\x1D59', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB2', '\x1D62', '\x3', '\x2', '\x2', '\x2', '\x1DB2', 
		'\x1D68', '\x3', '\x2', '\x2', '\x2', '\x1DB2', '\x1D71', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB2', '\x1D7A', '\x3', '\x2', '\x2', '\x2', '\x1DB2', 
		'\x1D83', '\x3', '\x2', '\x2', '\x2', '\x1DB2', '\x1D87', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB2', '\x1D8B', '\x3', '\x2', '\x2', '\x2', '\x1DB2', 
		'\x1D8F', '\x3', '\x2', '\x2', '\x2', '\x1DB2', '\x1D97', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB2', '\x1D9B', '\x3', '\x2', '\x2', '\x2', '\x1DB2', 
		'\x1D9F', '\x3', '\x2', '\x2', '\x2', '\x1DB3', '\x1DB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB4', '\x1DB2', '\x3', '\x2', '\x2', '\x2', '\x1DB4', 
		'\x1DB5', '\x3', '\x2', '\x2', '\x2', '\x1DB5', '\x1DB8', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB6', '\x1DB4', '\x3', '\x2', '\x2', '\x2', '\x1DB7', 
		'\x1D17', '\x3', '\x2', '\x2', '\x2', '\x1DB7', '\x1DB8', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB8', '\x267', '\x3', '\x2', '\x2', '\x2', '\x1DB9', 
		'\x1DBA', '\a', '\x1A', '\x2', '\x2', '\x1DBA', '\x1DBB', '\a', '\xBC', 
		'\x2', '\x2', '\x1DBB', '\x1DD3', '\x5', '\x3BA', '\x1DE', '\x2', '\x1DBC', 
		'\x1DC1', '\a', '\x15E', '\x2', '\x2', '\x1DBD', '\x1DBF', '\a', '\x338', 
		'\x2', '\x2', '\x1DBE', '\x1DBD', '\x3', '\x2', '\x2', '\x2', '\x1DBE', 
		'\x1DBF', '\x3', '\x2', '\x2', '\x2', '\x1DBF', '\x1DC0', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC0', '\x1DC2', '\x5', '\x3BA', '\x1DE', '\x2', '\x1DC1', 
		'\x1DBE', '\x3', '\x2', '\x2', '\x2', '\x1DC2', '\x1DC3', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC3', '\x1DC1', '\x3', '\x2', '\x2', '\x2', '\x1DC3', 
		'\x1DC4', '\x3', '\x2', '\x2', '\x2', '\x1DC4', '\x1DD4', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC5', '\x1DCF', '\a', '\x15E', '\x2', '\x2', '\x1DC6', 
		'\x1DC8', '\a', '\x338', '\x2', '\x2', '\x1DC7', '\x1DC6', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC7', '\x1DC8', '\x3', '\x2', '\x2', '\x2', '\x1DC8', 
		'\x1DC9', '\x3', '\x2', '\x2', '\x2', '\x1DC9', '\x1DCA', '\t', 'R', '\x2', 
		'\x2', '\x1DCA', '\x1DCD', '\a', '\x324', '\x2', '\x2', '\x1DCB', '\x1DCE', 
		'\a', '\x320', '\x2', '\x2', '\x1DCC', '\x1DCE', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1DCD', '\x1DCB', '\x3', '\x2', '\x2', '\x2', '\x1DCD', '\x1DCC', 
		'\x3', '\x2', '\x2', '\x2', '\x1DCE', '\x1DD0', '\x3', '\x2', '\x2', '\x2', 
		'\x1DCF', '\x1DC7', '\x3', '\x2', '\x2', '\x2', '\x1DD0', '\x1DD1', '\x3', 
		'\x2', '\x2', '\x2', '\x1DD1', '\x1DCF', '\x3', '\x2', '\x2', '\x2', '\x1DD1', 
		'\x1DD2', '\x3', '\x2', '\x2', '\x2', '\x1DD2', '\x1DD4', '\x3', '\x2', 
		'\x2', '\x2', '\x1DD3', '\x1DBC', '\x3', '\x2', '\x2', '\x2', '\x1DD3', 
		'\x1DC5', '\x3', '\x2', '\x2', '\x2', '\x1DD4', '\x1DF6', '\x3', '\x2', 
		'\x2', '\x2', '\x1DD5', '\x1DD6', '\a', '\xCE', '\x2', '\x2', '\x1DD6', 
		'\x1DDB', '\a', '\x15E', '\x2', '\x2', '\x1DD7', '\x1DD9', '\a', '\x338', 
		'\x2', '\x2', '\x1DD8', '\x1DD7', '\x3', '\x2', '\x2', '\x2', '\x1DD8', 
		'\x1DD9', '\x3', '\x2', '\x2', '\x2', '\x1DD9', '\x1DDA', '\x3', '\x2', 
		'\x2', '\x2', '\x1DDA', '\x1DDC', '\x5', '\x3BA', '\x1DE', '\x2', '\x1DDB', 
		'\x1DD8', '\x3', '\x2', '\x2', '\x2', '\x1DDC', '\x1DDD', '\x3', '\x2', 
		'\x2', '\x2', '\x1DDD', '\x1DDB', '\x3', '\x2', '\x2', '\x2', '\x1DDD', 
		'\x1DDE', '\x3', '\x2', '\x2', '\x2', '\x1DDE', '\x1DE0', '\x3', '\x2', 
		'\x2', '\x2', '\x1DDF', '\x1DD5', '\x3', '\x2', '\x2', '\x2', '\x1DE0', 
		'\x1DE1', '\x3', '\x2', '\x2', '\x2', '\x1DE1', '\x1DDF', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE1', '\x1DE2', '\x3', '\x2', '\x2', '\x2', '\x1DE2', 
		'\x1DF7', '\x3', '\x2', '\x2', '\x2', '\x1DE3', '\x1DE4', '\a', '\xCE', 
		'\x2', '\x2', '\x1DE4', '\x1DEE', '\a', '\x15E', '\x2', '\x2', '\x1DE5', 
		'\x1DE7', '\a', '\x338', '\x2', '\x2', '\x1DE6', '\x1DE5', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE6', '\x1DE7', '\x3', '\x2', '\x2', '\x2', '\x1DE7', 
		'\x1DE8', '\x3', '\x2', '\x2', '\x2', '\x1DE8', '\x1DE9', '\t', 'R', '\x2', 
		'\x2', '\x1DE9', '\x1DEC', '\a', '\x324', '\x2', '\x2', '\x1DEA', '\x1DED', 
		'\a', '\x320', '\x2', '\x2', '\x1DEB', '\x1DED', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1DEC', '\x1DEA', '\x3', '\x2', '\x2', '\x2', '\x1DEC', '\x1DEB', 
		'\x3', '\x2', '\x2', '\x2', '\x1DED', '\x1DEF', '\x3', '\x2', '\x2', '\x2', 
		'\x1DEE', '\x1DE6', '\x3', '\x2', '\x2', '\x2', '\x1DEF', '\x1DF0', '\x3', 
		'\x2', '\x2', '\x2', '\x1DF0', '\x1DEE', '\x3', '\x2', '\x2', '\x2', '\x1DF0', 
		'\x1DF1', '\x3', '\x2', '\x2', '\x2', '\x1DF1', '\x1DF3', '\x3', '\x2', 
		'\x2', '\x2', '\x1DF2', '\x1DE3', '\x3', '\x2', '\x2', '\x2', '\x1DF3', 
		'\x1DF4', '\x3', '\x2', '\x2', '\x2', '\x1DF4', '\x1DF2', '\x3', '\x2', 
		'\x2', '\x2', '\x1DF4', '\x1DF5', '\x3', '\x2', '\x2', '\x2', '\x1DF5', 
		'\x1DF7', '\x3', '\x2', '\x2', '\x2', '\x1DF6', '\x1DDF', '\x3', '\x2', 
		'\x2', '\x2', '\x1DF6', '\x1DF2', '\x3', '\x2', '\x2', '\x2', '\x1DF6', 
		'\x1DF7', '\x3', '\x2', '\x2', '\x2', '\x1DF7', '\x1EA5', '\x3', '\x2', 
		'\x2', '\x2', '\x1DF8', '\x1EA2', '\a', '\x17D', '\x2', '\x2', '\x1DF9', 
		'\x1DFB', '\a', '\x338', '\x2', '\x2', '\x1DFA', '\x1DF9', '\x3', '\x2', 
		'\x2', '\x2', '\x1DFA', '\x1DFB', '\x3', '\x2', '\x2', '\x2', '\x1DFB', 
		'\x1DFC', '\x3', '\x2', '\x2', '\x2', '\x1DFC', '\x1EA1', '\a', '\x61', 
		'\x2', '\x2', '\x1DFD', '\x1DFF', '\a', '\x338', '\x2', '\x2', '\x1DFE', 
		'\x1DFD', '\x3', '\x2', '\x2', '\x2', '\x1DFE', '\x1DFF', '\x3', '\x2', 
		'\x2', '\x2', '\x1DFF', '\x1E00', '\x3', '\x2', '\x2', '\x2', '\x1E00', 
		'\x1EA1', '\a', 'H', '\x2', '\x2', '\x1E01', '\x1E03', '\a', '\x338', 
		'\x2', '\x2', '\x1E02', '\x1E01', '\x3', '\x2', '\x2', '\x2', '\x1E02', 
		'\x1E03', '\x3', '\x2', '\x2', '\x2', '\x1E03', '\x1E04', '\x3', '\x2', 
		'\x2', '\x2', '\x1E04', '\x1EA1', '\t', 'S', '\x2', '\x2', '\x1E05', '\x1E07', 
		'\a', '\x338', '\x2', '\x2', '\x1E06', '\x1E05', '\x3', '\x2', '\x2', 
		'\x2', '\x1E06', '\x1E07', '\x3', '\x2', '\x2', '\x2', '\x1E07', '\x1E08', 
		'\x3', '\x2', '\x2', '\x2', '\x1E08', '\x1E09', '\a', '\x1DE', '\x2', 
		'\x2', '\x1E09', '\x1E0C', '\a', '\x324', '\x2', '\x2', '\x1E0A', '\x1E0D', 
		'\a', '\x320', '\x2', '\x2', '\x1E0B', '\x1E0D', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1E0C', '\x1E0A', '\x3', '\x2', '\x2', '\x2', '\x1E0C', '\x1E0B', 
		'\x3', '\x2', '\x2', '\x2', '\x1E0D', '\x1EA1', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0E', '\x1E10', '\a', '\x338', '\x2', '\x2', '\x1E0F', '\x1E0E', '\x3', 
		'\x2', '\x2', '\x2', '\x1E0F', '\x1E10', '\x3', '\x2', '\x2', '\x2', '\x1E10', 
		'\x1E11', '\x3', '\x2', '\x2', '\x2', '\x1E11', '\x1E12', '\a', '\x25F', 
		'\x2', '\x2', '\x1E12', '\x1E13', '\a', '\x324', '\x2', '\x2', '\x1E13', 
		'\x1EA1', '\x5', '\x3BA', '\x1DE', '\x2', '\x1E14', '\x1E16', '\a', '\x338', 
		'\x2', '\x2', '\x1E15', '\x1E14', '\x3', '\x2', '\x2', '\x2', '\x1E15', 
		'\x1E16', '\x3', '\x2', '\x2', '\x2', '\x1E16', '\x1E17', '\x3', '\x2', 
		'\x2', '\x2', '\x1E17', '\x1EA1', '\a', '\x1C8', '\x2', '\x2', '\x1E18', 
		'\x1E1A', '\a', '\x338', '\x2', '\x2', '\x1E19', '\x1E18', '\x3', '\x2', 
		'\x2', '\x2', '\x1E19', '\x1E1A', '\x3', '\x2', '\x2', '\x2', '\x1E1A', 
		'\x1E1B', '\x3', '\x2', '\x2', '\x2', '\x1E1B', '\x1EA1', '\a', '\x85', 
		'\x2', '\x2', '\x1E1C', '\x1E1E', '\a', '\x338', '\x2', '\x2', '\x1E1D', 
		'\x1E1C', '\x3', '\x2', '\x2', '\x2', '\x1E1D', '\x1E1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E1E', '\x1E2B', '\x3', '\x2', '\x2', '\x2', '\x1E1F', 
		'\x1E20', '\a', 'y', '\x2', '\x2', '\x1E20', '\x1E23', '\a', '\x324', 
		'\x2', '\x2', '\x1E21', '\x1E24', '\a', '\x320', '\x2', '\x2', '\x1E22', 
		'\x1E24', '\x5', '\x3BA', '\x1DE', '\x2', '\x1E23', '\x1E21', '\x3', '\x2', 
		'\x2', '\x2', '\x1E23', '\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1E24', 
		'\x1E2C', '\x3', '\x2', '\x2', '\x2', '\x1E25', '\x1E26', '\a', '\x11A', 
		'\x2', '\x2', '\x1E26', '\x1E29', '\a', '\x324', '\x2', '\x2', '\x1E27', 
		'\x1E2A', '\a', '\x31C', '\x2', '\x2', '\x1E28', '\x1E2A', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1E29', '\x1E27', '\x3', '\x2', '\x2', '\x2', '\x1E29', 
		'\x1E28', '\x3', '\x2', '\x2', '\x2', '\x1E2A', '\x1E2C', '\x3', '\x2', 
		'\x2', '\x2', '\x1E2B', '\x1E1F', '\x3', '\x2', '\x2', '\x2', '\x1E2B', 
		'\x1E25', '\x3', '\x2', '\x2', '\x2', '\x1E2C', '\x1EA1', '\x3', '\x2', 
		'\x2', '\x2', '\x1E2D', '\x1E2F', '\a', '\x338', '\x2', '\x2', '\x1E2E', 
		'\x1E2D', '\x3', '\x2', '\x2', '\x2', '\x1E2E', '\x1E2F', '\x3', '\x2', 
		'\x2', '\x2', '\x1E2F', '\x1E30', '\x3', '\x2', '\x2', '\x2', '\x1E30', 
		'\x1EA1', '\t', 'T', '\x2', '\x2', '\x1E31', '\x1E33', '\a', '\x338', 
		'\x2', '\x2', '\x1E32', '\x1E31', '\x3', '\x2', '\x2', '\x2', '\x1E32', 
		'\x1E33', '\x3', '\x2', '\x2', '\x2', '\x1E33', '\x1E34', '\x3', '\x2', 
		'\x2', '\x2', '\x1E34', '\x1EA1', '\t', 'U', '\x2', '\x2', '\x1E35', '\x1E37', 
		'\a', '\x338', '\x2', '\x2', '\x1E36', '\x1E35', '\x3', '\x2', '\x2', 
		'\x2', '\x1E36', '\x1E37', '\x3', '\x2', '\x2', '\x2', '\x1E37', '\x1E38', 
		'\x3', '\x2', '\x2', '\x2', '\x1E38', '\x1EA1', '\t', 'V', '\x2', '\x2', 
		'\x1E39', '\x1E3B', '\a', '\x338', '\x2', '\x2', '\x1E3A', '\x1E39', '\x3', 
		'\x2', '\x2', '\x2', '\x1E3A', '\x1E3B', '\x3', '\x2', '\x2', '\x2', '\x1E3B', 
		'\x1E3C', '\x3', '\x2', '\x2', '\x2', '\x1E3C', '\x1E3D', '\a', '\xC6', 
		'\x2', '\x2', '\x1E3D', '\x1E40', '\a', '\x324', '\x2', '\x2', '\x1E3E', 
		'\x1E41', '\a', '\x320', '\x2', '\x2', '\x1E3F', '\x1E41', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1E40', '\x1E3E', '\x3', '\x2', '\x2', '\x2', '\x1E40', 
		'\x1E3F', '\x3', '\x2', '\x2', '\x2', '\x1E41', '\x1EA1', '\x3', '\x2', 
		'\x2', '\x2', '\x1E42', '\x1E44', '\a', '\x338', '\x2', '\x2', '\x1E43', 
		'\x1E42', '\x3', '\x2', '\x2', '\x2', '\x1E43', '\x1E44', '\x3', '\x2', 
		'\x2', '\x2', '\x1E44', '\x1E45', '\x3', '\x2', '\x2', '\x2', '\x1E45', 
		'\x1E46', '\a', '\xC7', '\x2', '\x2', '\x1E46', '\x1E47', '\a', '\x324', 
		'\x2', '\x2', '\x1E47', '\x1EA1', '\a', '\x320', '\x2', '\x2', '\x1E48', 
		'\x1E4A', '\a', '\x338', '\x2', '\x2', '\x1E49', '\x1E48', '\x3', '\x2', 
		'\x2', '\x2', '\x1E49', '\x1E4A', '\x3', '\x2', '\x2', '\x2', '\x1E4A', 
		'\x1E4B', '\x3', '\x2', '\x2', '\x2', '\x1E4B', '\x1E4C', '\a', '\x1F', 
		'\x2', '\x2', '\x1E4C', '\x1E4F', '\a', '\x324', '\x2', '\x2', '\x1E4D', 
		'\x1E50', '\a', '\x31C', '\x2', '\x2', '\x1E4E', '\x1E50', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1E4F', '\x1E4D', '\x3', '\x2', '\x2', '\x2', '\x1E4F', 
		'\x1E4E', '\x3', '\x2', '\x2', '\x2', '\x1E50', '\x1EA1', '\x3', '\x2', 
		'\x2', '\x2', '\x1E51', '\x1E53', '\a', '\x338', '\x2', '\x2', '\x1E52', 
		'\x1E51', '\x3', '\x2', '\x2', '\x2', '\x1E52', '\x1E53', '\x3', '\x2', 
		'\x2', '\x2', '\x1E53', '\x1E54', '\x3', '\x2', '\x2', '\x2', '\x1E54', 
		'\x1E55', '\a', '$', '\x2', '\x2', '\x1E55', '\x1E58', '\a', '\x324', 
		'\x2', '\x2', '\x1E56', '\x1E59', '\a', '\x31C', '\x2', '\x2', '\x1E57', 
		'\x1E59', '\x5', '\x3BA', '\x1DE', '\x2', '\x1E58', '\x1E56', '\x3', '\x2', 
		'\x2', '\x2', '\x1E58', '\x1E57', '\x3', '\x2', '\x2', '\x2', '\x1E59', 
		'\x1EA1', '\x3', '\x2', '\x2', '\x2', '\x1E5A', '\x1E5C', '\a', '\x338', 
		'\x2', '\x2', '\x1E5B', '\x1E5A', '\x3', '\x2', '\x2', '\x2', '\x1E5B', 
		'\x1E5C', '\x3', '\x2', '\x2', '\x2', '\x1E5C', '\x1E5D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E5D', '\x1E5E', '\a', '\xC0', '\x2', '\x2', '\x1E5E', 
		'\x1E61', '\a', '\x324', '\x2', '\x2', '\x1E5F', '\x1E62', '\a', '\x31C', 
		'\x2', '\x2', '\x1E60', '\x1E62', '\x5', '\x3BA', '\x1DE', '\x2', '\x1E61', 
		'\x1E5F', '\x3', '\x2', '\x2', '\x2', '\x1E61', '\x1E60', '\x3', '\x2', 
		'\x2', '\x2', '\x1E62', '\x1EA1', '\x3', '\x2', '\x2', '\x2', '\x1E63', 
		'\x1E65', '\a', '\x338', '\x2', '\x2', '\x1E64', '\x1E63', '\x3', '\x2', 
		'\x2', '\x2', '\x1E64', '\x1E65', '\x3', '\x2', '\x2', '\x2', '\x1E65', 
		'\x1E66', '\x3', '\x2', '\x2', '\x2', '\x1E66', '\x1EA1', '\t', 'W', '\x2', 
		'\x2', '\x1E67', '\x1E69', '\a', '\x338', '\x2', '\x2', '\x1E68', '\x1E67', 
		'\x3', '\x2', '\x2', '\x2', '\x1E68', '\x1E69', '\x3', '\x2', '\x2', '\x2', 
		'\x1E69', '\x1E6A', '\x3', '\x2', '\x2', '\x2', '\x1E6A', '\x1EA1', '\t', 
		'X', '\x2', '\x2', '\x1E6B', '\x1E6D', '\a', '\x338', '\x2', '\x2', '\x1E6C', 
		'\x1E6B', '\x3', '\x2', '\x2', '\x2', '\x1E6C', '\x1E6D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E6D', '\x1E6E', '\x3', '\x2', '\x2', '\x2', '\x1E6E', 
		'\x1EA1', '\a', '\x116', '\x2', '\x2', '\x1E6F', '\x1E71', '\a', '\x338', 
		'\x2', '\x2', '\x1E70', '\x1E6F', '\x3', '\x2', '\x2', '\x2', '\x1E70', 
		'\x1E71', '\x3', '\x2', '\x2', '\x2', '\x1E71', '\x1E72', '\x3', '\x2', 
		'\x2', '\x2', '\x1E72', '\x1E75', '\a', '\x14D', '\x2', '\x2', '\x1E73', 
		'\x1E74', '\a', '\x324', '\x2', '\x2', '\x1E74', '\x1E76', '\a', '\x31C', 
		'\x2', '\x2', '\x1E75', '\x1E73', '\x3', '\x2', '\x2', '\x2', '\x1E75', 
		'\x1E76', '\x3', '\x2', '\x2', '\x2', '\x1E76', '\x1EA1', '\x3', '\x2', 
		'\x2', '\x2', '\x1E77', '\x1E79', '\a', '\x338', '\x2', '\x2', '\x1E78', 
		'\x1E77', '\x3', '\x2', '\x2', '\x2', '\x1E78', '\x1E79', '\x3', '\x2', 
		'\x2', '\x2', '\x1E79', '\x1E7A', '\x3', '\x2', '\x2', '\x2', '\x1E7A', 
		'\x1EA1', '\t', 'Y', '\x2', '\x2', '\x1E7B', '\x1E7D', '\a', '\x338', 
		'\x2', '\x2', '\x1E7C', '\x1E7B', '\x3', '\x2', '\x2', '\x2', '\x1E7C', 
		'\x1E7D', '\x3', '\x2', '\x2', '\x2', '\x1E7D', '\x1E7E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E7E', '\x1EA1', '\t', 'Z', '\x2', '\x2', '\x1E7F', '\x1E81', 
		'\a', '\x338', '\x2', '\x2', '\x1E80', '\x1E7F', '\x3', '\x2', '\x2', 
		'\x2', '\x1E80', '\x1E81', '\x3', '\x2', '\x2', '\x2', '\x1E81', '\x1E86', 
		'\x3', '\x2', '\x2', '\x2', '\x1E82', '\x1E87', '\a', '\x26D', '\x2', 
		'\x2', '\x1E83', '\x1E84', '\a', '\x2DB', '\x2', '\x2', '\x1E84', '\x1E85', 
		'\a', '\x324', '\x2', '\x2', '\x1E85', '\x1E87', '\a', '\x320', '\x2', 
		'\x2', '\x1E86', '\x1E82', '\x3', '\x2', '\x2', '\x2', '\x1E86', '\x1E83', 
		'\x3', '\x2', '\x2', '\x2', '\x1E87', '\x1EA1', '\x3', '\x2', '\x2', '\x2', 
		'\x1E88', '\x1E8A', '\a', '\x338', '\x2', '\x2', '\x1E89', '\x1E88', '\x3', 
		'\x2', '\x2', '\x2', '\x1E89', '\x1E8A', '\x3', '\x2', '\x2', '\x2', '\x1E8A', 
		'\x1E8B', '\x3', '\x2', '\x2', '\x2', '\x1E8B', '\x1EA1', '\a', '\x266', 
		'\x2', '\x2', '\x1E8C', '\x1E8E', '\a', '\x338', '\x2', '\x2', '\x1E8D', 
		'\x1E8C', '\x3', '\x2', '\x2', '\x2', '\x1E8D', '\x1E8E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E8E', '\x1E8F', '\x3', '\x2', '\x2', '\x2', '\x1E8F', 
		'\x1E90', '\a', '\x1EF', '\x2', '\x2', '\x1E90', '\x1E91', '\a', '\x336', 
		'\x2', '\x2', '\x1E91', '\x1E92', '\a', '\x18E', '\x2', '\x2', '\x1E92', 
		'\x1E93', '\a', '\x324', '\x2', '\x2', '\x1E93', '\x1E94', '\t', '[', 
		'\x2', '\x2', '\x1E94', '\x1E95', '\a', '\x338', '\x2', '\x2', '\x1E95', 
		'\x1E96', '\a', '\x138', '\x2', '\x2', '\x1E96', '\x1E97', '\a', '+', 
		'\x2', '\x2', '\x1E97', '\x1E9E', '\a', '\x324', '\x2', '\x2', '\x1E98', 
		'\x1E9F', '\x5', '\x3BA', '\x1DE', '\x2', '\x1E99', '\x1E9A', '\a', '\x138', 
		'\x2', '\x2', '\x1E9A', '\x1E9B', '\a', '\x12', '\x2', '\x2', '\x1E9B', 
		'\x1E9C', '\a', '\xAD', '\x2', '\x2', '\x1E9C', '\x1E9D', '\a', '\x324', 
		'\x2', '\x2', '\x1E9D', '\x1E9F', '\x5', '\x3BA', '\x1DE', '\x2', '\x1E9E', 
		'\x1E98', '\x3', '\x2', '\x2', '\x2', '\x1E9E', '\x1E99', '\x3', '\x2', 
		'\x2', '\x2', '\x1E9F', '\x1EA1', '\x3', '\x2', '\x2', '\x2', '\x1EA0', 
		'\x1DFA', '\x3', '\x2', '\x2', '\x2', '\x1EA0', '\x1DFE', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA0', '\x1E02', '\x3', '\x2', '\x2', '\x2', '\x1EA0', 
		'\x1E06', '\x3', '\x2', '\x2', '\x2', '\x1EA0', '\x1E0F', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA0', '\x1E15', '\x3', '\x2', '\x2', '\x2', '\x1EA0', 
		'\x1E19', '\x3', '\x2', '\x2', '\x2', '\x1EA0', '\x1E1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA0', '\x1E2E', '\x3', '\x2', '\x2', '\x2', '\x1EA0', 
		'\x1E32', '\x3', '\x2', '\x2', '\x2', '\x1EA0', '\x1E36', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA0', '\x1E3A', '\x3', '\x2', '\x2', '\x2', '\x1EA0', 
		'\x1E43', '\x3', '\x2', '\x2', '\x2', '\x1EA0', '\x1E49', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA0', '\x1E52', '\x3', '\x2', '\x2', '\x2', '\x1EA0', 
		'\x1E5B', '\x3', '\x2', '\x2', '\x2', '\x1EA0', '\x1E64', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA0', '\x1E68', '\x3', '\x2', '\x2', '\x2', '\x1EA0', 
		'\x1E6C', '\x3', '\x2', '\x2', '\x2', '\x1EA0', '\x1E70', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA0', '\x1E78', '\x3', '\x2', '\x2', '\x2', '\x1EA0', 
		'\x1E7C', '\x3', '\x2', '\x2', '\x2', '\x1EA0', '\x1E80', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA0', '\x1E89', '\x3', '\x2', '\x2', '\x2', '\x1EA0', 
		'\x1E8D', '\x3', '\x2', '\x2', '\x2', '\x1EA1', '\x1EA4', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA2', '\x1EA0', '\x3', '\x2', '\x2', '\x2', '\x1EA2', 
		'\x1EA3', '\x3', '\x2', '\x2', '\x2', '\x1EA3', '\x1EA6', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA4', '\x1EA2', '\x3', '\x2', '\x2', '\x2', '\x1EA5', 
		'\x1DF8', '\x3', '\x2', '\x2', '\x2', '\x1EA5', '\x1EA6', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA6', '\x269', '\x3', '\x2', '\x2', '\x2', '\x1EA7', 
		'\x1EA8', '\a', '\x1A', '\x2', '\x2', '\x1EA8', '\x1EA9', '\a', '+', '\x2', 
		'\x2', '\x1EA9', '\x1EAA', '\x5', '\x3BA', '\x1DE', '\x2', '\x1EAA', '\x1EAB', 
		'\a', '\x15E', '\x2', '\x2', '\x1EAB', '\x1EAC', '\a', '\x82', '\x2', 
		'\x2', '\x1EAC', '\x1EAD', '\a', '\x324', '\x2', '\x2', '\x1EAD', '\x1ECD', 
		'\a', '\x320', '\x2', '\x2', '\x1EAE', '\x1EAF', '\a', '\x17D', '\x2', 
		'\x2', '\x1EAF', '\x1EB0', '\a', '\x28D', '\x2', '\x2', '\x1EB0', '\x1EB1', 
		'\a', '\xAD', '\x2', '\x2', '\x1EB1', '\x1EC8', '\a', '\x336', '\x2', 
		'\x2', '\x1EB2', '\x1EB4', '\a', '\x338', '\x2', '\x2', '\x1EB3', '\x1EB2', 
		'\x3', '\x2', '\x2', '\x2', '\x1EB3', '\x1EB4', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB4', '\x1EB5', '\x3', '\x2', '\x2', '\x2', '\x1EB5', '\x1EB6', '\a', 
		'\x82', '\x2', '\x2', '\x1EB6', '\x1EB7', '\a', '\x324', '\x2', '\x2', 
		'\x1EB7', '\x1EC9', '\a', '\x320', '\x2', '\x2', '\x1EB8', '\x1EBA', '\a', 
		'\x338', '\x2', '\x2', '\x1EB9', '\x1EB8', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB9', '\x1EBA', '\x3', '\x2', '\x2', '\x2', '\x1EBA', '\x1EBB', '\x3', 
		'\x2', '\x2', '\x2', '\x1EBB', '\x1EBC', '\a', '\x1EF', '\x2', '\x2', 
		'\x1EBC', '\x1EBD', '\a', '&', '\x2', '\x2', '\x1EBD', '\x1EBE', '\a', 
		'\xF5', '\x2', '\x2', '\x1EBE', '\x1EBF', '\a', '\x324', '\x2', '\x2', 
		'\x1EBF', '\x1EC9', '\a', '\x320', '\x2', '\x2', '\x1EC0', '\x1EC2', '\a', 
		'\x338', '\x2', '\x2', '\x1EC1', '\x1EC0', '\x3', '\x2', '\x2', '\x2', 
		'\x1EC1', '\x1EC2', '\x3', '\x2', '\x2', '\x2', '\x1EC2', '\x1EC3', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC3', '\x1EC4', '\a', '\x1D4', '\x2', '\x2', 
		'\x1EC4', '\x1EC5', '\a', '&', '\x2', '\x2', '\x1EC5', '\x1EC6', '\a', 
		'\xF5', '\x2', '\x2', '\x1EC6', '\x1EC7', '\a', '\x324', '\x2', '\x2', 
		'\x1EC7', '\x1EC9', '\a', '\x320', '\x2', '\x2', '\x1EC8', '\x1EB3', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC8', '\x1EB9', '\x3', '\x2', '\x2', '\x2', '\x1EC8', 
		'\x1EC1', '\x3', '\x2', '\x2', '\x2', '\x1EC9', '\x1ECA', '\x3', '\x2', 
		'\x2', '\x2', '\x1ECA', '\x1EC8', '\x3', '\x2', '\x2', '\x2', '\x1ECA', 
		'\x1ECB', '\x3', '\x2', '\x2', '\x2', '\x1ECB', '\x1ECC', '\x3', '\x2', 
		'\x2', '\x2', '\x1ECC', '\x1ECE', '\a', '\x337', '\x2', '\x2', '\x1ECD', 
		'\x1EAE', '\x3', '\x2', '\x2', '\x2', '\x1ECD', '\x1ECE', '\x3', '\x2', 
		'\x2', '\x2', '\x1ECE', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x1ECF', 
		'\x1ED0', '\a', '\x1A', '\x2', '\x2', '\x1ED0', '\x1ED1', '\a', '\xBE', 
		'\x2', '\x2', '\x1ED1', '\x1ED2', '\a', '\xAD', '\x2', '\x2', '\x1ED2', 
		'\x1ED3', '\a', '\x15E', '\x2', '\x2', '\x1ED3', '\x1ED4', '\a', '\x82', 
		'\x2', '\x2', '\x1ED4', '\x1ED5', '\a', '\x324', '\x2', '\x2', '\x1ED5', 
		'\x1ED6', '\a', '\x320', '\x2', '\x2', '\x1ED6', '\x1ED7', '\a', '\x1EF', 
		'\x2', '\x2', '\x1ED7', '\x1ED8', '\a', '&', '\x2', '\x2', '\x1ED8', '\x1ED9', 
		'\a', '\xF5', '\x2', '\x2', '\x1ED9', '\x1EDA', '\a', '\x324', '\x2', 
		'\x2', '\x1EDA', '\x1EDB', '\a', '\x320', '\x2', '\x2', '\x1EDB', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', '\x1EDC', '\x1EDD', '\a', '\x1A', '\x2', '\x2', 
		'\x1EDD', '\x1EDE', '\a', '\x139', '\x2', '\x2', '\x1EDE', '\x1EDF', '\a', 
		'\xBE', '\x2', '\x2', '\x1EDF', '\x1EE0', '\a', '\xAD', '\x2', '\x2', 
		'\x1EE0', '\x1EE1', '\a', '\x15E', '\x2', '\x2', '\x1EE1', '\x1EE2', '\a', 
		'\x82', '\x2', '\x2', '\x1EE2', '\x1EE3', '\a', '\x324', '\x2', '\x2', 
		'\x1EE3', '\x1EE4', '\a', '\x320', '\x2', '\x2', '\x1EE4', '\x1EE5', '\a', 
		'\x1EF', '\x2', '\x2', '\x1EE5', '\x1EE6', '\a', '&', '\x2', '\x2', '\x1EE6', 
		'\x1EE7', '\a', '\xF5', '\x2', '\x2', '\x1EE7', '\x1EE8', '\a', '\x324', 
		'\x2', '\x2', '\x1EE8', '\x1EE9', '\a', '\x320', '\x2', '\x2', '\x1EE9', 
		'\x26F', '\x3', '\x2', '\x2', '\x2', '\x1EEA', '\x1EEB', '\a', 'w', '\x2', 
		'\x2', '\x1EEB', '\x1EEC', '\x5', '\x272', '\x13A', '\x2', '\x1EEC', '\x271', 
		'\x3', '\x2', '\x2', '\x2', '\x1EED', '\x1EEE', '\a', '\x31B', '\x2', 
		'\x2', '\x1EEE', '\x1EF0', '\a', '\x324', '\x2', '\x2', '\x1EEF', '\x1EED', 
		'\x3', '\x2', '\x2', '\x2', '\x1EEF', '\x1EF0', '\x3', '\x2', '\x2', '\x2', 
		'\x1EF0', '\x1EF3', '\x3', '\x2', '\x2', '\x2', '\x1EF1', '\x1EF4', '\x5', 
		'\x38A', '\x1C6', '\x2', '\x1EF2', '\x1EF4', '\x5', '\x2CC', '\x167', 
		'\x2', '\x1EF3', '\x1EF1', '\x3', '\x2', '\x2', '\x2', '\x1EF3', '\x1EF2', 
		'\x3', '\x2', '\x2', '\x2', '\x1EF4', '\x1EFD', '\x3', '\x2', '\x2', '\x2', 
		'\x1EF5', '\x1EFA', '\x5', '\x274', '\x13B', '\x2', '\x1EF6', '\x1EF7', 
		'\a', '\x338', '\x2', '\x2', '\x1EF7', '\x1EF9', '\x5', '\x274', '\x13B', 
		'\x2', '\x1EF8', '\x1EF6', '\x3', '\x2', '\x2', '\x2', '\x1EF9', '\x1EFC', 
		'\x3', '\x2', '\x2', '\x2', '\x1EFA', '\x1EF8', '\x3', '\x2', '\x2', '\x2', 
		'\x1EFA', '\x1EFB', '\x3', '\x2', '\x2', '\x2', '\x1EFB', '\x1EFE', '\x3', 
		'\x2', '\x2', '\x2', '\x1EFC', '\x1EFA', '\x3', '\x2', '\x2', '\x2', '\x1EFD', 
		'\x1EF5', '\x3', '\x2', '\x2', '\x2', '\x1EFD', '\x1EFE', '\x3', '\x2', 
		'\x2', '\x2', '\x1EFE', '\x1F00', '\x3', '\x2', '\x2', '\x2', '\x1EFF', 
		'\x1F01', '\a', '\x339', '\x2', '\x2', '\x1F00', '\x1EFF', '\x3', '\x2', 
		'\x2', '\x2', '\x1F00', '\x1F01', '\x3', '\x2', '\x2', '\x2', '\x1F01', 
		'\x1F18', '\x3', '\x2', '\x2', '\x2', '\x1F02', '\x1F03', '\a', '\x336', 
		'\x2', '\x2', '\x1F03', '\x1F08', '\x5', '\x276', '\x13C', '\x2', '\x1F04', 
		'\x1F05', '\a', '\x33E', '\x2', '\x2', '\x1F05', '\x1F07', '\x5', '\x276', 
		'\x13C', '\x2', '\x1F06', '\x1F04', '\x3', '\x2', '\x2', '\x2', '\x1F07', 
		'\x1F0A', '\x3', '\x2', '\x2', '\x2', '\x1F08', '\x1F06', '\x3', '\x2', 
		'\x2', '\x2', '\x1F08', '\x1F09', '\x3', '\x2', '\x2', '\x2', '\x1F09', 
		'\x1F0B', '\x3', '\x2', '\x2', '\x2', '\x1F0A', '\x1F08', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0B', '\x1F12', '\a', '\x337', '\x2', '\x2', '\x1F0C', 
		'\x1F0E', '\a', '\x10', '\x2', '\x2', '\x1F0D', '\x1F0C', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0D', '\x1F0E', '\x3', '\x2', '\x2', '\x2', '\x1F0E', 
		'\x1F0F', '\x3', '\x2', '\x2', '\x2', '\x1F0F', '\x1F10', '\t', '\\', 
		'\x2', '\x2', '\x1F10', '\x1F11', '\a', '\x324', '\x2', '\x2', '\x1F11', 
		'\x1F13', '\a', '\x320', '\x2', '\x2', '\x1F12', '\x1F0D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F12', '\x1F13', '\x3', '\x2', '\x2', '\x2', '\x1F13', 
		'\x1F15', '\x3', '\x2', '\x2', '\x2', '\x1F14', '\x1F16', '\a', '\x339', 
		'\x2', '\x2', '\x1F15', '\x1F14', '\x3', '\x2', '\x2', '\x2', '\x1F15', 
		'\x1F16', '\x3', '\x2', '\x2', '\x2', '\x1F16', '\x1F18', '\x3', '\x2', 
		'\x2', '\x2', '\x1F17', '\x1EEF', '\x3', '\x2', '\x2', '\x2', '\x1F17', 
		'\x1F02', '\x3', '\x2', '\x2', '\x2', '\x1F18', '\x273', '\x3', '\x2', 
		'\x2', '\x2', '\x1F19', '\x1F1A', '\a', '\x31B', '\x2', '\x2', '\x1F1A', 
		'\x1F1C', '\a', '\x324', '\x2', '\x2', '\x1F1B', '\x1F19', '\x3', '\x2', 
		'\x2', '\x2', '\x1F1B', '\x1F1C', '\x3', '\x2', '\x2', '\x2', '\x1F1C', 
		'\x1F26', '\x3', '\x2', '\x2', '\x2', '\x1F1D', '\x1F20', '\x5', '\x2CA', 
		'\x166', '\x2', '\x1F1E', '\x1F20', '\x5', '\x3BA', '\x1DE', '\x2', '\x1F1F', 
		'\x1F1D', '\x3', '\x2', '\x2', '\x2', '\x1F1F', '\x1F1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1F20', '\x1F22', '\x3', '\x2', '\x2', '\x2', '\x1F21', 
		'\x1F23', '\t', ']', '\x2', '\x2', '\x1F22', '\x1F21', '\x3', '\x2', '\x2', 
		'\x2', '\x1F22', '\x1F23', '\x3', '\x2', '\x2', '\x2', '\x1F23', '\x1F27', 
		'\x3', '\x2', '\x2', '\x2', '\x1F24', '\x1F27', '\a', 'Z', '\x2', '\x2', 
		'\x1F25', '\x1F27', '\a', '\xE0', '\x2', '\x2', '\x1F26', '\x1F1F', '\x3', 
		'\x2', '\x2', '\x2', '\x1F26', '\x1F24', '\x3', '\x2', '\x2', '\x2', '\x1F26', 
		'\x1F25', '\x3', '\x2', '\x2', '\x2', '\x1F27', '\x275', '\x3', '\x2', 
		'\x2', '\x2', '\x1F28', '\x1F29', '\t', '\x3', '\x2', '\x2', '\x1F29', 
		'\x277', '\x3', '\x2', '\x2', '\x2', '\x1F2A', '\x1F2C', '\x5', '\x2A2', 
		'\x152', '\x2', '\x1F2B', '\x1F2D', '\a', '\x339', '\x2', '\x2', '\x1F2C', 
		'\x1F2B', '\x3', '\x2', '\x2', '\x2', '\x1F2C', '\x1F2D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F2D', '\x1F66', '\x3', '\x2', '\x2', '\x2', '\x1F2E', 
		'\x1F3A', '\a', '\x92', '\x2', '\x2', '\x1F2F', '\x1F31', '\a', '\x6', 
		'\x2', '\x2', '\x1F30', '\x1F32', '\a', '\x28F', '\x2', '\x2', '\x1F31', 
		'\x1F30', '\x3', '\x2', '\x2', '\x2', '\x1F31', '\x1F32', '\x3', '\x2', 
		'\x2', '\x2', '\x1F32', '\x1F3B', '\x3', '\x2', '\x2', '\x2', '\x1F33', 
		'\x1F38', '\x5', '\x292', '\x14A', '\x2', '\x1F34', '\x1F35', '\a', '\x336', 
		'\x2', '\x2', '\x1F35', '\x1F36', '\x5', '\x392', '\x1CA', '\x2', '\x1F36', 
		'\x1F37', '\a', '\x337', '\x2', '\x2', '\x1F37', '\x1F39', '\x3', '\x2', 
		'\x2', '\x2', '\x1F38', '\x1F34', '\x3', '\x2', '\x2', '\x2', '\x1F38', 
		'\x1F39', '\x3', '\x2', '\x2', '\x2', '\x1F39', '\x1F3B', '\x3', '\x2', 
		'\x2', '\x2', '\x1F3A', '\x1F2F', '\x3', '\x2', '\x2', '\x2', '\x1F3A', 
		'\x1F33', '\x3', '\x2', '\x2', '\x2', '\x1F3B', '\x1F3E', '\x3', '\x2', 
		'\x2', '\x2', '\x1F3C', '\x1F3D', '\a', '\xE6', '\x2', '\x2', '\x1F3D', 
		'\x1F3F', '\x5', '\x382', '\x1C2', '\x2', '\x1F3E', '\x1F3C', '\x3', '\x2', 
		'\x2', '\x2', '\x1F3E', '\x1F3F', '\x3', '\x2', '\x2', '\x2', '\x1F3F', 
		'\x1F40', '\x3', '\x2', '\x2', '\x2', '\x1F40', '\x1F41', '\a', '\x15E', 
		'\x2', '\x2', '\x1F41', '\x1F46', '\x5', '\x3BA', '\x1DE', '\x2', '\x1F42', 
		'\x1F43', '\a', '\x338', '\x2', '\x2', '\x1F43', '\x1F45', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x1F44', '\x1F42', '\x3', '\x2', '\x2', '\x2', '\x1F45', 
		'\x1F48', '\x3', '\x2', '\x2', '\x2', '\x1F46', '\x1F44', '\x3', '\x2', 
		'\x2', '\x2', '\x1F46', '\x1F47', '\x3', '\x2', '\x2', '\x2', '\x1F47', 
		'\x1F4C', '\x3', '\x2', '\x2', '\x2', '\x1F48', '\x1F46', '\x3', '\x2', 
		'\x2', '\x2', '\x1F49', '\x1F4A', '\a', '\x17D', '\x2', '\x2', '\x1F4A', 
		'\x1F4B', '\a', '\x92', '\x2', '\x2', '\x1F4B', '\x1F4D', '\a', '\xED', 
		'\x2', '\x2', '\x1F4C', '\x1F49', '\x3', '\x2', '\x2', '\x2', '\x1F4C', 
		'\x1F4D', '\x3', '\x2', '\x2', '\x2', '\x1F4D', '\x1F50', '\x3', '\x2', 
		'\x2', '\x2', '\x1F4E', '\x1F4F', '\a', '\x10', '\x2', '\x2', '\x1F4F', 
		'\x1F51', '\x5', '\x3BA', '\x1DE', '\x2', '\x1F50', '\x1F4E', '\x3', '\x2', 
		'\x2', '\x2', '\x1F50', '\x1F51', '\x3', '\x2', '\x2', '\x2', '\x1F51', 
		'\x1F53', '\x3', '\x2', '\x2', '\x2', '\x1F52', '\x1F54', '\a', '\x339', 
		'\x2', '\x2', '\x1F53', '\x1F52', '\x3', '\x2', '\x2', '\x2', '\x1F53', 
		'\x1F54', '\x3', '\x2', '\x2', '\x2', '\x1F54', '\x1F66', '\x3', '\x2', 
		'\x2', '\x2', '\x1F55', '\x1F5C', '\a', '\x11D', '\x2', '\x2', '\x1F56', 
		'\x1F57', '\a', '\x336', '\x2', '\x2', '\x1F57', '\x1F58', '\a', '\x17D', 
		'\x2', '\x2', '\x1F58', '\x1F59', '\a', '\x1C1', '\x2', '\x2', '\x1F59', 
		'\x1F5A', '\a', '\x324', '\x2', '\x2', '\x1F5A', '\x1F5B', '\a', '\x31B', 
		'\x2', '\x2', '\x1F5B', '\x1F5D', '\a', '\x337', '\x2', '\x2', '\x1F5C', 
		'\x1F56', '\x3', '\x2', '\x2', '\x2', '\x1F5C', '\x1F5D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F5D', '\x1F5F', '\x3', '\x2', '\x2', '\x2', '\x1F5E', 
		'\x1F60', '\a', '\x339', '\x2', '\x2', '\x1F5F', '\x1F5E', '\x3', '\x2', 
		'\x2', '\x2', '\x1F5F', '\x1F60', '\x3', '\x2', '\x2', '\x2', '\x1F60', 
		'\x1F66', '\x3', '\x2', '\x2', '\x2', '\x1F61', '\x1F66', '\x5', '\x284', 
		'\x143', '\x2', '\x1F62', '\x1F66', '\x5', '\x286', '\x144', '\x2', '\x1F63', 
		'\x1F66', '\x5', '\x288', '\x145', '\x2', '\x1F64', '\x1F66', '\x5', '\x27A', 
		'\x13E', '\x2', '\x1F65', '\x1F2A', '\x3', '\x2', '\x2', '\x2', '\x1F65', 
		'\x1F2E', '\x3', '\x2', '\x2', '\x2', '\x1F65', '\x1F55', '\x3', '\x2', 
		'\x2', '\x2', '\x1F65', '\x1F61', '\x3', '\x2', '\x2', '\x2', '\x1F65', 
		'\x1F62', '\x3', '\x2', '\x2', '\x2', '\x1F65', '\x1F63', '\x3', '\x2', 
		'\x2', '\x2', '\x1F65', '\x1F64', '\x3', '\x2', '\x2', '\x2', '\x1F66', 
		'\x279', '\x3', '\x2', '\x2', '\x2', '\x1F67', '\x1F68', '\a', 'I', '\x2', 
		'\x2', '\x1F68', '\x1F69', '\a', '+', '\x2', '\x2', '\x1F69', '\x1F6C', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x1F6A', '\x1F6B', '\a', '\x14', '\x2', 
		'\x2', '\x1F6B', '\x1F6D', '\x5', '\x3BA', '\x1DE', '\x2', '\x1F6C', '\x1F6A', 
		'\x3', '\x2', '\x2', '\x2', '\x1F6C', '\x1F6D', '\x3', '\x2', '\x2', '\x2', 
		'\x1F6D', '\x1F71', '\x3', '\x2', '\x2', '\x2', '\x1F6E', '\x1F6F', '\a', 
		'\x8C', '\x2', '\x2', '\x1F6F', '\x1F72', '\x5', '\x27C', '\x13F', '\x2', 
		'\x1F70', '\x1F72', '\x5', '\x280', '\x141', '\x2', '\x1F71', '\x1F6E', 
		'\x3', '\x2', '\x2', '\x2', '\x1F71', '\x1F70', '\x3', '\x2', '\x2', '\x2', 
		'\x1F72', '\x1F79', '\x3', '\x2', '\x2', '\x2', '\x1F73', '\x1F74', '\a', 
		'\x186', '\x2', '\x2', '\x1F74', '\x1F75', '\a', '\x86', '\x2', '\x2', 
		'\x1F75', '\x1F76', '\a', '\x1C', '\x2', '\x2', '\x1F76', '\x1F77', '\a', 
		'\x1E1', '\x2', '\x2', '\x1F77', '\x1F78', '\a', '\x324', '\x2', '\x2', 
		'\x1F78', '\x1F7A', '\t', '\t', '\x2', '\x2', '\x1F79', '\x1F73', '\x3', 
		'\x2', '\x2', '\x2', '\x1F79', '\x1F7A', '\x3', '\x2', '\x2', '\x2', '\x1F7A', 
		'\x27B', '\x3', '\x2', '\x2', '\x2', '\x1F7B', '\x1F7C', '\a', '\x199', 
		'\x2', '\x2', '\x1F7C', '\x1F8D', '\x5', '\x3BA', '\x1DE', '\x2', '\x1F7D', 
		'\x1F7F', '\a', '\x1F3', '\x2', '\x2', '\x1F7E', '\x1F7D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F7E', '\x1F7F', '\x3', '\x2', '\x2', '\x2', '\x1F7F', 
		'\x1F80', '\x3', '\x2', '\x2', '\x2', '\x1F80', '\x1F81', '\a', '\x82', 
		'\x2', '\x2', '\x1F81', '\x1F82', '\a', '\x324', '\x2', '\x2', '\x1F82', 
		'\x1F8A', '\a', '\x320', '\x2', '\x2', '\x1F83', '\x1F84', '\a', '\x17D', 
		'\x2', '\x2', '\x1F84', '\x1F85', '\a', '\x28D', '\x2', '\x2', '\x1F85', 
		'\x1F86', '\a', '\xAD', '\x2', '\x2', '\x1F86', '\x1F87', '\a', '\x336', 
		'\x2', '\x2', '\x1F87', '\x1F88', '\x5', '\x27E', '\x140', '\x2', '\x1F88', 
		'\x1F89', '\a', '\x337', '\x2', '\x2', '\x1F89', '\x1F8B', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8A', '\x1F83', '\x3', '\x2', '\x2', '\x2', '\x1F8A', 
		'\x1F8B', '\x3', '\x2', '\x2', '\x2', '\x1F8B', '\x1F8D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8C', '\x1F7B', '\x3', '\x2', '\x2', '\x2', '\x1F8C', 
		'\x1F7E', '\x3', '\x2', '\x2', '\x2', '\x1F8D', '\x27D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8E', '\x1F8F', '\t', '^', '\x2', '\x2', '\x1F8F', '\x1F90', 
		'\a', '\x324', '\x2', '\x2', '\x1F90', '\x1F97', '\a', '\x320', '\x2', 
		'\x2', '\x1F91', '\x1F92', '\a', '\x338', '\x2', '\x2', '\x1F92', '\x1F93', 
		'\t', '_', '\x2', '\x2', '\x1F93', '\x1F94', '\a', '&', '\x2', '\x2', 
		'\x1F94', '\x1F95', '\a', '\xF5', '\x2', '\x2', '\x1F95', '\x1F96', '\a', 
		'\x324', '\x2', '\x2', '\x1F96', '\x1F98', '\a', '\x320', '\x2', '\x2', 
		'\x1F97', '\x1F91', '\x3', '\x2', '\x2', '\x2', '\x1F97', '\x1F98', '\x3', 
		'\x2', '\x2', '\x2', '\x1F98', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x1F99', 
		'\x1F9A', '\a', '\x1EF', '\x2', '\x2', '\x1F9A', '\x1F9B', '\a', '&', 
		'\x2', '\x2', '\x1F9B', '\x1F9C', '\a', '\xF5', '\x2', '\x2', '\x1F9C', 
		'\x1F9D', '\a', '\x324', '\x2', '\x2', '\x1F9D', '\x1F9F', '\a', '\x320', 
		'\x2', '\x2', '\x1F9E', '\x1F99', '\x3', '\x2', '\x2', '\x2', '\x1F9E', 
		'\x1F9F', '\x3', '\x2', '\x2', '\x2', '\x1F9F', '\x1FA0', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA0', '\x1FA1', '\a', '\x17D', '\x2', '\x2', '\x1FA1', 
		'\x1FA2', '\a', '\x2E4', '\x2', '\x2', '\x1FA2', '\x1FA3', '\a', '\x324', 
		'\x2', '\x2', '\x1FA3', '\x1FA8', '\a', '\x320', '\x2', '\x2', '\x1FA4', 
		'\x1FA5', '\a', '\x338', '\x2', '\x2', '\x1FA5', '\x1FA7', '\x5', '\x282', 
		'\x142', '\x2', '\x1FA6', '\x1FA4', '\x3', '\x2', '\x2', '\x2', '\x1FA7', 
		'\x1FAA', '\x3', '\x2', '\x2', '\x2', '\x1FA8', '\x1FA6', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA8', '\x1FA9', '\x3', '\x2', '\x2', '\x2', '\x1FA9', 
		'\x281', '\x3', '\x2', '\x2', '\x2', '\x1FAA', '\x1FA8', '\x3', '\x2', 
		'\x2', '\x2', '\x1FAB', '\x1FAC', '\t', '`', '\x2', '\x2', '\x1FAC', '\x1FAD', 
		'\a', '\x324', '\x2', '\x2', '\x1FAD', '\x1FAE', '\a', '\x320', '\x2', 
		'\x2', '\x1FAE', '\x283', '\x3', '\x2', '\x2', '\x2', '\x1FAF', '\x1FB0', 
		'\a', '\xE8', '\x2', '\x2', '\x1FB0', '\x1FB1', '\a', '\x2E7', '\x2', 
		'\x2', '\x1FB1', '\x1FB2', '\a', '\xAD', '\x2', '\x2', '\x1FB2', '\x1FB3', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x1FB3', '\x1FB4', '\a', '\x1D4', '\x2', 
		'\x2', '\x1FB4', '\x1FB5', '\a', '&', '\x2', '\x2', '\x1FB5', '\x1FB6', 
		'\x5', '\x290', '\x149', '\x2', '\x1FB6', '\x1FC0', '\x3', '\x2', '\x2', 
		'\x2', '\x1FB7', '\x1FB8', '\a', '\xE8', '\x2', '\x2', '\x1FB8', '\x1FB9', 
		'\a', '\xBE', '\x2', '\x2', '\x1FB9', '\x1FBA', '\a', '\xAD', '\x2', '\x2', 
		'\x1FBA', '\x1FBB', '\a', '\x1D4', '\x2', '\x2', '\x1FBB', '\x1FBC', '\a', 
		'&', '\x2', '\x2', '\x1FBC', '\x1FBD', '\a', '\xF5', '\x2', '\x2', '\x1FBD', 
		'\x1FBE', '\a', '\x324', '\x2', '\x2', '\x1FBE', '\x1FC0', '\a', '\x320', 
		'\x2', '\x2', '\x1FBF', '\x1FAF', '\x3', '\x2', '\x2', '\x2', '\x1FBF', 
		'\x1FB7', '\x3', '\x2', '\x2', '\x2', '\x1FC0', '\x285', '\x3', '\x2', 
		'\x2', '\x2', '\x1FC1', '\x1FC2', '\a', '\x33', '\x2', '\x2', '\x1FC2', 
		'\x1FC3', '\a', '\x2E7', '\x2', '\x2', '\x1FC3', '\x1FC4', '\a', '\xAD', 
		'\x2', '\x2', '\x1FC4', '\x1FCD', '\x5', '\x3BA', '\x1DE', '\x2', '\x1FC5', 
		'\x1FC6', '\a', '\x33', '\x2', '\x2', '\x1FC6', '\x1FC7', '\a', '\x6', 
		'\x2', '\x2', '\x1FC7', '\x1FC8', '\a', '\x2E7', '\x2', '\x2', '\x1FC8', 
		'\x1FCD', '\a', '\x22E', '\x2', '\x2', '\x1FC9', '\x1FCA', '\a', '\x33', 
		'\x2', '\x2', '\x1FCA', '\x1FCB', '\a', '\xBE', '\x2', '\x2', '\x1FCB', 
		'\x1FCD', '\a', '\xAD', '\x2', '\x2', '\x1FCC', '\x1FC1', '\x3', '\x2', 
		'\x2', '\x2', '\x1FCC', '\x1FC5', '\x3', '\x2', '\x2', '\x2', '\x1FCC', 
		'\x1FC9', '\x3', '\x2', '\x2', '\x2', '\x1FCD', '\x287', '\x3', '\x2', 
		'\x2', '\x2', '\x1FCE', '\x1FCF', '\a', 'I', '\x2', '\x2', '\x1FCF', '\x1FD0', 
		'\a', '\xBE', '\x2', '\x2', '\x1FD0', '\x1FD1', '\a', '\xAD', '\x2', '\x2', 
		'\x1FD1', '\x1FD2', '\a', '\x1EF', '\x2', '\x2', '\x1FD2', '\x1FD3', '\a', 
		'&', '\x2', '\x2', '\x1FD3', '\x1FD4', '\a', '\xF5', '\x2', '\x2', '\x1FD4', 
		'\x1FD5', '\a', '\x324', '\x2', '\x2', '\x1FD5', '\x1FF2', '\a', '\x320', 
		'\x2', '\x2', '\x1FD6', '\x1FD7', '\a', 'I', '\x2', '\x2', '\x1FD7', '\x1FD8', 
		'\a', '\x2E7', '\x2', '\x2', '\x1FD8', '\x1FD9', '\a', '\xAD', '\x2', 
		'\x2', '\x1FD9', '\x1FDC', '\x5', '\x3BA', '\x1DE', '\x2', '\x1FDA', '\x1FDB', 
		'\a', '\x14', '\x2', '\x2', '\x1FDB', '\x1FDD', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1FDC', '\x1FDA', '\x3', '\x2', '\x2', '\x2', '\x1FDC', '\x1FDD', 
		'\x3', '\x2', '\x2', '\x2', '\x1FDD', '\x1FE1', '\x3', '\x2', '\x2', '\x2', 
		'\x1FDE', '\x1FDF', '\a', '\x8C', '\x2', '\x2', '\x1FDF', '\x1FE0', '\a', 
		'\x292', '\x2', '\x2', '\x1FE0', '\x1FE2', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x1FE1', '\x1FDE', '\x3', '\x2', '\x2', '\x2', '\x1FE1', '\x1FE2', '\x3', 
		'\x2', '\x2', '\x2', '\x1FE2', '\x1FE3', '\x3', '\x2', '\x2', '\x2', '\x1FE3', 
		'\x1FED', '\a', '\x17D', '\x2', '\x2', '\x1FE4', '\x1FE9', '\x5', '\x28A', 
		'\x146', '\x2', '\x1FE5', '\x1FE6', '\a', '\x1EF', '\x2', '\x2', '\x1FE6', 
		'\x1FE7', '\a', '&', '\x2', '\x2', '\x1FE7', '\x1FE9', '\x5', '\x28E', 
		'\x148', '\x2', '\x1FE8', '\x1FE4', '\x3', '\x2', '\x2', '\x2', '\x1FE8', 
		'\x1FE5', '\x3', '\x2', '\x2', '\x2', '\x1FE9', '\x1FEB', '\x3', '\x2', 
		'\x2', '\x2', '\x1FEA', '\x1FEC', '\a', '\x338', '\x2', '\x2', '\x1FEB', 
		'\x1FEA', '\x3', '\x2', '\x2', '\x2', '\x1FEB', '\x1FEC', '\x3', '\x2', 
		'\x2', '\x2', '\x1FEC', '\x1FEE', '\x3', '\x2', '\x2', '\x2', '\x1FED', 
		'\x1FE8', '\x3', '\x2', '\x2', '\x2', '\x1FEE', '\x1FEF', '\x3', '\x2', 
		'\x2', '\x2', '\x1FEF', '\x1FED', '\x3', '\x2', '\x2', '\x2', '\x1FEF', 
		'\x1FF0', '\x3', '\x2', '\x2', '\x2', '\x1FF0', '\x1FF2', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF1', '\x1FCE', '\x3', '\x2', '\x2', '\x2', '\x1FF1', 
		'\x1FD6', '\x3', '\x2', '\x2', '\x2', '\x1FF2', '\x289', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF3', '\x1FF4', '\a', '\x22D', '\x2', '\x2', '\x1FF4', 
		'\x1FF5', '\a', '\x324', '\x2', '\x2', '\x1FF5', '\x2003', '\a', '\x320', 
		'\x2', '\x2', '\x1FF6', '\x1FF7', '\a', '\x18E', '\x2', '\x2', '\x1FF7', 
		'\x1FF8', '\a', '\x324', '\x2', '\x2', '\x1FF8', '\x2003', '\x5', '\x28C', 
		'\x147', '\x2', '\x1FF9', '\x1FFA', '\a', '\x21B', '\x2', '\x2', '\x1FFA', 
		'\x1FFB', '\a', '\x324', '\x2', '\x2', '\x1FFB', '\x2003', '\a', '\x320', 
		'\x2', '\x2', '\x1FFC', '\x1FFD', '\a', '\x293', '\x2', '\x2', '\x1FFD', 
		'\x1FFE', '\a', '\x324', '\x2', '\x2', '\x1FFE', '\x2003', '\a', '\x320', 
		'\x2', '\x2', '\x1FFF', '\x2000', '\a', '\x1C7', '\x2', '\x2', '\x2000', 
		'\x2001', '\a', '\x324', '\x2', '\x2', '\x2001', '\x2003', '\t', '\f', 
		'\x2', '\x2', '\x2002', '\x1FF3', '\x3', '\x2', '\x2', '\x2', '\x2002', 
		'\x1FF6', '\x3', '\x2', '\x2', '\x2', '\x2002', '\x1FF9', '\x3', '\x2', 
		'\x2', '\x2', '\x2002', '\x1FFC', '\x3', '\x2', '\x2', '\x2', '\x2002', 
		'\x1FFF', '\x3', '\x2', '\x2', '\x2', '\x2003', '\x28B', '\x3', '\x2', 
		'\x2', '\x2', '\x2004', '\x2005', '\t', '\x33', '\x2', '\x2', '\x2005', 
		'\x28D', '\x3', '\x2', '\x2', '\x2', '\x2006', '\x2007', '\a', '+', '\x2', 
		'\x2', '\x2007', '\x2012', '\x5', '\x3BA', '\x1DE', '\x2', '\x2008', '\x2009', 
		'\a', '\x12', '\x2', '\x2', '\x2009', '\x200A', '\a', '\xAD', '\x2', '\x2', 
		'\x200A', '\x2012', '\x5', '\x3BA', '\x1DE', '\x2', '\x200B', '\x200C', 
		'\a', '\x2E7', '\x2', '\x2', '\x200C', '\x200D', '\a', '\xAD', '\x2', 
		'\x2', '\x200D', '\x2012', '\x5', '\x3BA', '\x1DE', '\x2', '\x200E', '\x200F', 
		'\a', '\xF5', '\x2', '\x2', '\x200F', '\x2010', '\a', '\x324', '\x2', 
		'\x2', '\x2010', '\x2012', '\a', '\x320', '\x2', '\x2', '\x2011', '\x2006', 
		'\x3', '\x2', '\x2', '\x2', '\x2011', '\x2008', '\x3', '\x2', '\x2', '\x2', 
		'\x2011', '\x200B', '\x3', '\x2', '\x2', '\x2', '\x2011', '\x200E', '\x3', 
		'\x2', '\x2', '\x2', '\x2012', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x2013', 
		'\x2014', '\a', '+', '\x2', '\x2', '\x2014', '\x2019', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2015', '\x2016', '\a', '\x17D', '\x2', '\x2', '\x2016', 
		'\x2017', '\a', '\xF5', '\x2', '\x2', '\x2017', '\x2018', '\a', '\x324', 
		'\x2', '\x2', '\x2018', '\x201A', '\a', '\x320', '\x2', '\x2', '\x2019', 
		'\x2015', '\x3', '\x2', '\x2', '\x2', '\x2019', '\x201A', '\x3', '\x2', 
		'\x2', '\x2', '\x201A', '\x202B', '\x3', '\x2', '\x2', '\x2', '\x201B', 
		'\x201C', '\a', '\x12', '\x2', '\x2', '\x201C', '\x201D', '\a', '\xAD', 
		'\x2', '\x2', '\x201D', '\x2022', '\x5', '\x3BA', '\x1DE', '\x2', '\x201E', 
		'\x201F', '\a', '\x17D', '\x2', '\x2', '\x201F', '\x2020', '\a', '\xF5', 
		'\x2', '\x2', '\x2020', '\x2021', '\a', '\x324', '\x2', '\x2', '\x2021', 
		'\x2023', '\a', '\x320', '\x2', '\x2', '\x2022', '\x201E', '\x3', '\x2', 
		'\x2', '\x2', '\x2022', '\x2023', '\x3', '\x2', '\x2', '\x2', '\x2023', 
		'\x202B', '\x3', '\x2', '\x2', '\x2', '\x2024', '\x2025', '\a', '\x2E7', 
		'\x2', '\x2', '\x2025', '\x2026', '\a', '\xAD', '\x2', '\x2', '\x2026', 
		'\x202B', '\x5', '\x3BA', '\x1DE', '\x2', '\x2027', '\x2028', '\a', '\xF5', 
		'\x2', '\x2', '\x2028', '\x2029', '\a', '\x324', '\x2', '\x2', '\x2029', 
		'\x202B', '\a', '\x320', '\x2', '\x2', '\x202A', '\x2013', '\x3', '\x2', 
		'\x2', '\x2', '\x202A', '\x201B', '\x3', '\x2', '\x2', '\x2', '\x202A', 
		'\x2024', '\x3', '\x2', '\x2', '\x2', '\x202A', '\x2027', '\x3', '\x2', 
		'\x2', '\x2', '\x202B', '\x291', '\x3', '\x2', '\x2', '\x2', '\x202C', 
		'\x2047', '\a', 'w', '\x2', '\x2', '\x202D', '\x202E', '\a', '\x176', 
		'\x2', '\x2', '\x202E', '\x2047', '\x5', '\x3BA', '\x1DE', '\x2', '\x202F', 
		'\x2030', '\a', '\x2EA', '\x2', '\x2', '\x2030', '\x2047', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2031', '\x2033', '\a', '\x1C0', '\x2', '\x2', '\x2032', 
		'\x2034', '\x5', '\x3BA', '\x1DE', '\x2', '\x2033', '\x2032', '\x3', '\x2', 
		'\x2', '\x2', '\x2033', '\x2034', '\x3', '\x2', '\x2', '\x2', '\x2034', 
		'\x2047', '\x3', '\x2', '\x2', '\x2', '\x2035', '\x2036', '\a', 'I', '\x2', 
		'\x2', '\x2036', '\x2047', '\t', '\x61', '\x2', '\x2', '\x2037', '\x2047', 
		'\a', '\x2D3', '\x2', '\x2', '\x2038', '\x2047', '\a', '\x21E', '\x2', 
		'\x2', '\x2039', '\x2047', '\a', '\x133', '\x2', '\x2', '\x203A', '\x2047', 
		'\a', '\x10F', '\x2', '\x2', '\x203B', '\x2047', '\a', '\xA3', '\x2', 
		'\x2', '\x203C', '\x2044', '\a', '\n', '\x2', '\x2', '\x203D', '\x203F', 
		'\a', '\r', '\x2', '\x2', '\x203E', '\x203D', '\x3', '\x2', '\x2', '\x2', 
		'\x203E', '\x203F', '\x3', '\x2', '\x2', '\x2', '\x203F', '\x2042', '\x3', 
		'\x2', '\x2', '\x2', '\x2040', '\x2043', '\x5', '\x3BA', '\x1DE', '\x2', 
		'\x2041', '\x2043', '\a', 'U', '\x2', '\x2', '\x2042', '\x2040', '\x3', 
		'\x2', '\x2', '\x2', '\x2042', '\x2041', '\x3', '\x2', '\x2', '\x2', '\x2043', 
		'\x2045', '\x3', '\x2', '\x2', '\x2', '\x2044', '\x203E', '\x3', '\x2', 
		'\x2', '\x2', '\x2044', '\x2045', '\x3', '\x2', '\x2', '\x2', '\x2045', 
		'\x2047', '\x3', '\x2', '\x2', '\x2', '\x2046', '\x202C', '\x3', '\x2', 
		'\x2', '\x2', '\x2046', '\x202D', '\x3', '\x2', '\x2', '\x2', '\x2046', 
		'\x202F', '\x3', '\x2', '\x2', '\x2', '\x2046', '\x2031', '\x3', '\x2', 
		'\x2', '\x2', '\x2046', '\x2035', '\x3', '\x2', '\x2', '\x2', '\x2046', 
		'\x2037', '\x3', '\x2', '\x2', '\x2', '\x2046', '\x2038', '\x3', '\x2', 
		'\x2', '\x2', '\x2046', '\x2039', '\x3', '\x2', '\x2', '\x2', '\x2046', 
		'\x203A', '\x3', '\x2', '\x2', '\x2', '\x2046', '\x203B', '\x3', '\x2', 
		'\x2', '\x2', '\x2046', '\x203C', '\x3', '\x2', '\x2', '\x2', '\x2047', 
		'\x293', '\x3', '\x2', '\x2', '\x2', '\x2048', '\x2049', '\a', '\x13E', 
		'\x2', '\x2', '\x2049', '\x204C', '\a', '\x31B', '\x2', '\x2', '\x204A', 
		'\x204B', '\a', '\x331', '\x2', '\x2', '\x204B', '\x204D', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x204C', '\x204A', '\x3', '\x2', '\x2', '\x2', '\x204C', 
		'\x204D', '\x3', '\x2', '\x2', '\x2', '\x204D', '\x204E', '\x3', '\x2', 
		'\x2', '\x2', '\x204E', '\x204F', '\a', '\x324', '\x2', '\x2', '\x204F', 
		'\x2051', '\x5', '\x2CC', '\x167', '\x2', '\x2050', '\x2052', '\a', '\x339', 
		'\x2', '\x2', '\x2051', '\x2050', '\x3', '\x2', '\x2', '\x2', '\x2051', 
		'\x2052', '\x3', '\x2', '\x2', '\x2', '\x2052', '\x2070', '\x3', '\x2', 
		'\x2', '\x2', '\x2053', '\x2054', '\a', '\x13E', '\x2', '\x2', '\x2054', 
		'\x2055', '\a', '\x31B', '\x2', '\x2', '\x2055', '\x2056', '\x5', '\x3C0', 
		'\x1E1', '\x2', '\x2056', '\x2058', '\x5', '\x2CC', '\x167', '\x2', '\x2057', 
		'\x2059', '\a', '\x339', '\x2', '\x2', '\x2058', '\x2057', '\x3', '\x2', 
		'\x2', '\x2', '\x2058', '\x2059', '\x3', '\x2', '\x2', '\x2', '\x2059', 
		'\x2070', '\x3', '\x2', '\x2', '\x2', '\x205A', '\x205B', '\a', '\x13E', 
		'\x2', '\x2', '\x205B', '\x205C', '\a', '\x31B', '\x2', '\x2', '\x205C', 
		'\x205D', '\a', '\x324', '\x2', '\x2', '\x205D', '\x205E', '\a', 'P', 
		'\x2', '\x2', '\x205E', '\x2069', '\x5', '\x2C2', '\x162', '\x2', '\x205F', 
		'\x2067', '\a', '\x86', '\x2', '\x2', '\x2060', '\x2061', '\a', '\x10B', 
		'\x2', '\x2', '\x2061', '\x2068', '\a', '\x278', '\x2', '\x2', '\x2062', 
		'\x2065', '\a', '\x16D', '\x2', '\x2', '\x2063', '\x2064', '\a', '\xE2', 
		'\x2', '\x2', '\x2064', '\x2066', '\x5', '\x392', '\x1CA', '\x2', '\x2065', 
		'\x2063', '\x3', '\x2', '\x2', '\x2', '\x2065', '\x2066', '\x3', '\x2', 
		'\x2', '\x2', '\x2066', '\x2068', '\x3', '\x2', '\x2', '\x2', '\x2067', 
		'\x2060', '\x3', '\x2', '\x2', '\x2', '\x2067', '\x2062', '\x3', '\x2', 
		'\x2', '\x2', '\x2068', '\x206A', '\x3', '\x2', '\x2', '\x2', '\x2069', 
		'\x205F', '\x3', '\x2', '\x2', '\x2', '\x2069', '\x206A', '\x3', '\x2', 
		'\x2', '\x2', '\x206A', '\x206C', '\x3', '\x2', '\x2', '\x2', '\x206B', 
		'\x206D', '\a', '\x339', '\x2', '\x2', '\x206C', '\x206B', '\x3', '\x2', 
		'\x2', '\x2', '\x206C', '\x206D', '\x3', '\x2', '\x2', '\x2', '\x206D', 
		'\x2070', '\x3', '\x2', '\x2', '\x2', '\x206E', '\x2070', '\x5', '\x2C8', 
		'\x165', '\x2', '\x206F', '\x2048', '\x3', '\x2', '\x2', '\x2', '\x206F', 
		'\x2053', '\x3', '\x2', '\x2', '\x2', '\x206F', '\x205A', '\x3', '\x2', 
		'\x2', '\x2', '\x206F', '\x206E', '\x3', '\x2', '\x2', '\x2', '\x2070', 
		'\x295', '\x3', '\x2', '\x2', '\x2', '\x2071', '\x2072', '\a', '\x1C', 
		'\x2', '\x2', '\x2072', '\x2073', '\a', '\x64', '\x2', '\x2', '\x2073', 
		'\x2076', '\t', '\x62', '\x2', '\x2', '\x2074', '\x2077', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2075', '\x2077', '\a', '\x31B', '\x2', '\x2', '\x2076', 
		'\x2074', '\x3', '\x2', '\x2', '\x2', '\x2076', '\x2075', '\x3', '\x2', 
		'\x2', '\x2', '\x2076', '\x2077', '\x3', '\x2', '\x2', '\x2', '\x2077', 
		'\x2079', '\x3', '\x2', '\x2', '\x2', '\x2078', '\x207A', '\a', '\x339', 
		'\x2', '\x2', '\x2079', '\x2078', '\x3', '\x2', '\x2', '\x2', '\x2079', 
		'\x207A', '\x3', '\x2', '\x2', '\x2', '\x207A', '\x20C3', '\x3', '\x2', 
		'\x2', '\x2', '\x207B', '\x207C', '\a', '\x1C', '\x2', '\x2', '\x207C', 
		'\x2086', '\t', '\x62', '\x2', '\x2', '\x207D', '\x2080', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x207E', '\x2080', '\a', '\x31B', '\x2', '\x2', '\x207F', 
		'\x207D', '\x3', '\x2', '\x2', '\x2', '\x207F', '\x207E', '\x3', '\x2', 
		'\x2', '\x2', '\x2080', '\x2084', '\x3', '\x2', '\x2', '\x2', '\x2081', 
		'\x2082', '\a', '\x17D', '\x2', '\x2', '\x2082', '\x2083', '\a', '\x241', 
		'\x2', '\x2', '\x2083', '\x2085', '\a', '\x320', '\x2', '\x2', '\x2084', 
		'\x2081', '\x3', '\x2', '\x2', '\x2', '\x2084', '\x2085', '\x3', '\x2', 
		'\x2', '\x2', '\x2085', '\x2087', '\x3', '\x2', '\x2', '\x2', '\x2086', 
		'\x207F', '\x3', '\x2', '\x2', '\x2', '\x2086', '\x2087', '\x3', '\x2', 
		'\x2', '\x2', '\x2087', '\x2089', '\x3', '\x2', '\x2', '\x2', '\x2088', 
		'\x208A', '\a', '\x339', '\x2', '\x2', '\x2089', '\x2088', '\x3', '\x2', 
		'\x2', '\x2', '\x2089', '\x208A', '\x3', '\x2', '\x2', '\x2', '\x208A', 
		'\x20C3', '\x3', '\x2', '\x2', '\x2', '\x208B', '\x208C', '\a', ':', '\x2', 
		'\x2', '\x208C', '\x2099', '\t', '\x62', '\x2', '\x2', '\x208D', '\x2090', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x208E', '\x2090', '\a', '\x31B', '\x2', 
		'\x2', '\x208F', '\x208D', '\x3', '\x2', '\x2', '\x2', '\x208F', '\x208E', 
		'\x3', '\x2', '\x2', '\x2', '\x2090', '\x2097', '\x3', '\x2', '\x2', '\x2', 
		'\x2091', '\x2092', '\a', '\x17D', '\x2', '\x2', '\x2092', '\x2093', '\a', 
		'\x336', '\x2', '\x2', '\x2093', '\x2094', '\a', '\x1D9', '\x2', '\x2', 
		'\x2094', '\x2095', '\a', '\x324', '\x2', '\x2', '\x2095', '\x2096', '\t', 
		'\t', '\x2', '\x2', '\x2096', '\x2098', '\a', '\x337', '\x2', '\x2', '\x2097', 
		'\x2091', '\x3', '\x2', '\x2', '\x2', '\x2097', '\x2098', '\x3', '\x2', 
		'\x2', '\x2', '\x2098', '\x209A', '\x3', '\x2', '\x2', '\x2', '\x2099', 
		'\x208F', '\x3', '\x2', '\x2', '\x2', '\x2099', '\x209A', '\x3', '\x2', 
		'\x2', '\x2', '\x209A', '\x209C', '\x3', '\x2', '\x2', '\x2', '\x209B', 
		'\x209D', '\a', '\x339', '\x2', '\x2', '\x209C', '\x209B', '\x3', '\x2', 
		'\x2', '\x2', '\x209C', '\x209D', '\x3', '\x2', '\x2', '\x2', '\x209D', 
		'\x20C3', '\x3', '\x2', '\x2', '\x2', '\x209E', '\x20A0', '\a', ':', '\x2', 
		'\x2', '\x209F', '\x20A1', '\a', '\x30D', '\x2', '\x2', '\x20A0', '\x209F', 
		'\x3', '\x2', '\x2', '\x2', '\x20A0', '\x20A1', '\x3', '\x2', '\x2', '\x2', 
		'\x20A1', '\x20A3', '\x3', '\x2', '\x2', '\x2', '\x20A2', '\x20A4', '\a', 
		'\x339', '\x2', '\x2', '\x20A3', '\x20A2', '\x3', '\x2', '\x2', '\x2', 
		'\x20A3', '\x20A4', '\x3', '\x2', '\x2', '\x2', '\x20A4', '\x20C3', '\x3', 
		'\x2', '\x2', '\x2', '\x20A5', '\x20A6', '\a', ':', '\x2', '\x2', '\x20A6', 
		'\x20C3', '\x5', '\x3BA', '\x1DE', '\x2', '\x20A7', '\x20A8', '\a', '\x121', 
		'\x2', '\x2', '\x20A8', '\x20C3', '\x5', '\x3BA', '\x1DE', '\x2', '\x20A9', 
		'\x20AA', '\a', '\x121', '\x2', '\x2', '\x20AA', '\x20AD', '\t', '\x62', 
		'\x2', '\x2', '\x20AB', '\x20AE', '\x5', '\x3BA', '\x1DE', '\x2', '\x20AC', 
		'\x20AE', '\a', '\x31B', '\x2', '\x2', '\x20AD', '\x20AB', '\x3', '\x2', 
		'\x2', '\x2', '\x20AD', '\x20AC', '\x3', '\x2', '\x2', '\x2', '\x20AD', 
		'\x20AE', '\x3', '\x2', '\x2', '\x2', '\x20AE', '\x20B0', '\x3', '\x2', 
		'\x2', '\x2', '\x20AF', '\x20B1', '\a', '\x339', '\x2', '\x2', '\x20B0', 
		'\x20AF', '\x3', '\x2', '\x2', '\x2', '\x20B0', '\x20B1', '\x3', '\x2', 
		'\x2', '\x2', '\x20B1', '\x20C3', '\x3', '\x2', '\x2', '\x2', '\x20B2', 
		'\x20B4', '\a', '\x121', '\x2', '\x2', '\x20B3', '\x20B5', '\a', '\x30D', 
		'\x2', '\x2', '\x20B4', '\x20B3', '\x3', '\x2', '\x2', '\x2', '\x20B4', 
		'\x20B5', '\x3', '\x2', '\x2', '\x2', '\x20B5', '\x20B7', '\x3', '\x2', 
		'\x2', '\x2', '\x20B6', '\x20B8', '\a', '\x339', '\x2', '\x2', '\x20B7', 
		'\x20B6', '\x3', '\x2', '\x2', '\x2', '\x20B7', '\x20B8', '\x3', '\x2', 
		'\x2', '\x2', '\x20B8', '\x20C3', '\x3', '\x2', '\x2', '\x2', '\x20B9', 
		'\x20BA', '\a', '\x12D', '\x2', '\x2', '\x20BA', '\x20BD', '\t', '\x62', 
		'\x2', '\x2', '\x20BB', '\x20BE', '\x5', '\x3BA', '\x1DE', '\x2', '\x20BC', 
		'\x20BE', '\a', '\x31B', '\x2', '\x2', '\x20BD', '\x20BB', '\x3', '\x2', 
		'\x2', '\x2', '\x20BD', '\x20BC', '\x3', '\x2', '\x2', '\x2', '\x20BD', 
		'\x20BE', '\x3', '\x2', '\x2', '\x2', '\x20BE', '\x20C0', '\x3', '\x2', 
		'\x2', '\x2', '\x20BF', '\x20C1', '\a', '\x339', '\x2', '\x2', '\x20C0', 
		'\x20BF', '\x3', '\x2', '\x2', '\x2', '\x20C0', '\x20C1', '\x3', '\x2', 
		'\x2', '\x2', '\x20C1', '\x20C3', '\x3', '\x2', '\x2', '\x2', '\x20C2', 
		'\x2071', '\x3', '\x2', '\x2', '\x2', '\x20C2', '\x207B', '\x3', '\x2', 
		'\x2', '\x2', '\x20C2', '\x208B', '\x3', '\x2', '\x2', '\x2', '\x20C2', 
		'\x209E', '\x3', '\x2', '\x2', '\x2', '\x20C2', '\x20A5', '\x3', '\x2', 
		'\x2', '\x2', '\x20C2', '\x20A7', '\x3', '\x2', '\x2', '\x2', '\x20C2', 
		'\x20A9', '\x3', '\x2', '\x2', '\x2', '\x20C2', '\x20B2', '\x3', '\x2', 
		'\x2', '\x2', '\x20C2', '\x20B9', '\x3', '\x2', '\x2', '\x2', '\x20C3', 
		'\x297', '\x3', '\x2', '\x2', '\x2', '\x20C4', '\x20C6', '\a', '\x211', 
		'\x2', '\x2', '\x20C5', '\x20C7', '\a', '\x31C', '\x2', '\x2', '\x20C6', 
		'\x20C5', '\x3', '\x2', '\x2', '\x2', '\x20C6', '\x20C7', '\x3', '\x2', 
		'\x2', '\x2', '\x20C7', '\x299', '\x3', '\x2', '\x2', '\x2', '\x20C8', 
		'\x20C9', '\a', '\x170', '\x2', '\x2', '\x20C9', '\x20CB', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x20CA', '\x20CC', '\a', '\x339', '\x2', '\x2', '\x20CB', 
		'\x20CA', '\x3', '\x2', '\x2', '\x2', '\x20CB', '\x20CC', '\x3', '\x2', 
		'\x2', '\x2', '\x20CC', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x20CD', 
		'\x20CF', '\a', '\x13F', '\x2', '\x2', '\x20CE', '\x20D0', '\a', '\x320', 
		'\x2', '\x2', '\x20CF', '\x20CE', '\x3', '\x2', '\x2', '\x2', '\x20CF', 
		'\x20D0', '\x3', '\x2', '\x2', '\x2', '\x20D0', '\x29D', '\x3', '\x2', 
		'\x2', '\x2', '\x20D1', '\x20D2', '\a', 'W', '\x2', '\x2', '\x20D2', '\x20D7', 
		'\x5', '\x3BC', '\x1DF', '\x2', '\x20D3', '\x20D4', '\a', '\x336', '\x2', 
		'\x2', '\x20D4', '\x20D5', '\x5', '\x35A', '\x1AE', '\x2', '\x20D5', '\x20D6', 
		'\a', '\x337', '\x2', '\x2', '\x20D6', '\x20D8', '\x3', '\x2', '\x2', 
		'\x2', '\x20D7', '\x20D3', '\x3', '\x2', '\x2', '\x2', '\x20D7', '\x20D8', 
		'\x3', '\x2', '\x2', '\x2', '\x20D8', '\x20DB', '\x3', '\x2', '\x2', '\x2', 
		'\x20D9', '\x20DA', '\a', '\x17D', '\x2', '\x2', '\x20DA', '\x20DC', '\x5', 
		'\x2A0', '\x151', '\x2', '\x20DB', '\x20D9', '\x3', '\x2', '\x2', '\x2', 
		'\x20DB', '\x20DC', '\x3', '\x2', '\x2', '\x2', '\x20DC', '\x20DE', '\x3', 
		'\x2', '\x2', '\x2', '\x20DD', '\x20DF', '\a', '\x339', '\x2', '\x2', 
		'\x20DE', '\x20DD', '\x3', '\x2', '\x2', '\x2', '\x20DE', '\x20DF', '\x3', 
		'\x2', '\x2', '\x2', '\x20DF', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x20E0', 
		'\x20E3', '\x5', '\x3BC', '\x1DF', '\x2', '\x20E1', '\x20E2', '\a', '\x338', 
		'\x2', '\x2', '\x20E2', '\x20E4', '\x5', '\x3BC', '\x1DF', '\x2', '\x20E3', 
		'\x20E1', '\x3', '\x2', '\x2', '\x2', '\x20E3', '\x20E4', '\x3', '\x2', 
		'\x2', '\x2', '\x20E4', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x20E5', 
		'\x20E6', '\a', 'w', '\x2', '\x2', '\x20E6', '\x20E7', '\a', '\x10', '\x2', 
		'\x2', '\x20E7', '\x20E8', '\t', '\x63', '\x2', '\x2', '\x20E8', '\x2A3', 
		'\x3', '\x2', '\x2', '\x2', '\x20E9', '\x20EB', '\a', '\x31B', '\x2', 
		'\x2', '\x20EA', '\x20EC', '\a', '\x10', '\x2', '\x2', '\x20EB', '\x20EA', 
		'\x3', '\x2', '\x2', '\x2', '\x20EB', '\x20EC', '\x3', '\x2', '\x2', '\x2', 
		'\x20EC', '\x20ED', '\x3', '\x2', '\x2', '\x2', '\x20ED', '\x20F0', '\x5', 
		'\x3B2', '\x1DA', '\x2', '\x20EE', '\x20EF', '\a', '\x324', '\x2', '\x2', 
		'\x20EF', '\x20F1', '\x5', '\x2CC', '\x167', '\x2', '\x20F0', '\x20EE', 
		'\x3', '\x2', '\x2', '\x2', '\x20F0', '\x20F1', '\x3', '\x2', '\x2', '\x2', 
		'\x20F1', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x20F2', '\x20F3', '\a', 
		'\x157', '\x2', '\x2', '\x20F3', '\x20F4', '\a', '\x336', '\x2', '\x2', 
		'\x20F4', '\x20F5', '\x5', '\x2AC', '\x157', '\x2', '\x20F5', '\x20F6', 
		'\a', '\x337', '\x2', '\x2', '\x20F6', '\x2A7', '\x3', '\x2', '\x2', '\x2', 
		'\x20F7', '\x20F8', '\a', '\x30F', '\x2', '\x2', '\x20F8', '\x20FA', '\a', 
		'\x336', '\x2', '\x2', '\x20F9', '\x20FB', '\t', '\x64', '\x2', '\x2', 
		'\x20FA', '\x20F9', '\x3', '\x2', '\x2', '\x2', '\x20FA', '\x20FB', '\x3', 
		'\x2', '\x2', '\x2', '\x20FB', '\x20FC', '\x3', '\x2', '\x2', '\x2', '\x20FC', 
		'\x20FD', '\x5', '\x2AA', '\x156', '\x2', '\x20FD', '\x20FE', '\a', '\x337', 
		'\x2', '\x2', '\x20FE', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x20FF', 
		'\x2100', '\a', '\x31D', '\x2', '\x2', '\x2100', '\x2101', '\a', '\x331', 
		'\x2', '\x2', '\x2101', '\x2102', '\a', '\x31D', '\x2', '\x2', '\x2102', 
		'\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2103', '\x210A', '\x5', '\x2AE', 
		'\x158', '\x2', '\x2104', '\x2106', '\a', '\x338', '\x2', '\x2', '\x2105', 
		'\x2104', '\x3', '\x2', '\x2', '\x2', '\x2105', '\x2106', '\x3', '\x2', 
		'\x2', '\x2', '\x2106', '\x2107', '\x3', '\x2', '\x2', '\x2', '\x2107', 
		'\x2109', '\x5', '\x2AE', '\x158', '\x2', '\x2108', '\x2105', '\x3', '\x2', 
		'\x2', '\x2', '\x2109', '\x210C', '\x3', '\x2', '\x2', '\x2', '\x210A', 
		'\x2108', '\x3', '\x2', '\x2', '\x2', '\x210A', '\x210B', '\x3', '\x2', 
		'\x2', '\x2', '\x210B', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x210C', 
		'\x210A', '\x3', '\x2', '\x2', '\x2', '\x210D', '\x2111', '\x5', '\x2B0', 
		'\x159', '\x2', '\x210E', '\x2111', '\x5', '\x2B2', '\x15A', '\x2', '\x210F', 
		'\x2111', '\x5', '\x2B6', '\x15C', '\x2', '\x2110', '\x210D', '\x3', '\x2', 
		'\x2', '\x2', '\x2110', '\x210E', '\x3', '\x2', '\x2', '\x2', '\x2110', 
		'\x210F', '\x3', '\x2', '\x2', '\x2', '\x2111', '\x2AF', '\x3', '\x2', 
		'\x2', '\x2', '\x2112', '\x2116', '\x5', '\x3BA', '\x1DE', '\x2', '\x2113', 
		'\x2117', '\x5', '\x3B2', '\x1DA', '\x2', '\x2114', '\x2115', '\a', '\x10', 
		'\x2', '\x2', '\x2115', '\x2117', '\x5', '\x2CC', '\x167', '\x2', '\x2116', 
		'\x2113', '\x3', '\x2', '\x2', '\x2', '\x2116', '\x2114', '\x3', '\x2', 
		'\x2', '\x2', '\x2117', '\x211A', '\x3', '\x2', '\x2', '\x2', '\x2118', 
		'\x2119', '\a', '\x37', '\x2', '\x2', '\x2119', '\x211B', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x211A', '\x2118', '\x3', '\x2', '\x2', '\x2', '\x211A', 
		'\x211B', '\x3', '\x2', '\x2', '\x2', '\x211B', '\x211D', '\x3', '\x2', 
		'\x2', '\x2', '\x211C', '\x211E', '\x5', '\x39A', '\x1CE', '\x2', '\x211D', 
		'\x211C', '\x3', '\x2', '\x2', '\x2', '\x211D', '\x211E', '\x3', '\x2', 
		'\x2', '\x2', '\x211E', '\x2134', '\x3', '\x2', '\x2', '\x2', '\x211F', 
		'\x2120', '\a', '=', '\x2', '\x2', '\x2120', '\x2122', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2121', '\x211F', '\x3', '\x2', '\x2', '\x2', '\x2121', 
		'\x2122', '\x3', '\x2', '\x2', '\x2', '\x2122', '\x2123', '\x3', '\x2', 
		'\x2', '\x2', '\x2123', '\x2125', '\x5', '\x39C', '\x1CF', '\x2', '\x2124', 
		'\x2126', '\x5', '\x39C', '\x1CF', '\x2', '\x2125', '\x2124', '\x3', '\x2', 
		'\x2', '\x2', '\x2125', '\x2126', '\x3', '\x2', '\x2', '\x2', '\x2126', 
		'\x2135', '\x3', '\x2', '\x2', '\x2', '\x2127', '\x212D', '\a', '\x97', 
		'\x2', '\x2', '\x2128', '\x2129', '\a', '\x336', '\x2', '\x2', '\x2129', 
		'\x212A', '\a', '\x31C', '\x2', '\x2', '\x212A', '\x212B', '\a', '\x338', 
		'\x2', '\x2', '\x212B', '\x212C', '\a', '\x31C', '\x2', '\x2', '\x212C', 
		'\x212E', '\a', '\x337', '\x2', '\x2', '\x212D', '\x2128', '\x3', '\x2', 
		'\x2', '\x2', '\x212D', '\x212E', '\x3', '\x2', '\x2', '\x2', '\x212E', 
		'\x2132', '\x3', '\x2', '\x2', '\x2', '\x212F', '\x2130', '\a', '\xDD', 
		'\x2', '\x2', '\x2130', '\x2131', '\a', '\x86', '\x2', '\x2', '\x2131', 
		'\x2133', '\a', '\x113', '\x2', '\x2', '\x2132', '\x212F', '\x3', '\x2', 
		'\x2', '\x2', '\x2132', '\x2133', '\x3', '\x2', '\x2', '\x2', '\x2133', 
		'\x2135', '\x3', '\x2', '\x2', '\x2', '\x2134', '\x2121', '\x3', '\x2', 
		'\x2', '\x2', '\x2134', '\x2127', '\x3', '\x2', '\x2', '\x2', '\x2134', 
		'\x2135', '\x3', '\x2', '\x2', '\x2', '\x2135', '\x2137', '\x3', '\x2', 
		'\x2', '\x2', '\x2136', '\x2138', '\a', '\x124', '\x2', '\x2', '\x2137', 
		'\x2136', '\x3', '\x2', '\x2', '\x2', '\x2137', '\x2138', '\x3', '\x2', 
		'\x2', '\x2', '\x2138', '\x213C', '\x3', '\x2', '\x2', '\x2', '\x2139', 
		'\x213B', '\x5', '\x2B4', '\x15B', '\x2', '\x213A', '\x2139', '\x3', '\x2', 
		'\x2', '\x2', '\x213B', '\x213E', '\x3', '\x2', '\x2', '\x2', '\x213C', 
		'\x213A', '\x3', '\x2', '\x2', '\x2', '\x213C', '\x213D', '\x3', '\x2', 
		'\x2', '\x2', '\x213D', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x213E', 
		'\x213C', '\x3', '\x2', '\x2', '\x2', '\x213F', '\x2140', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2140', '\x2141', '\t', '\x65', '\x2', '\x2', '\x2141', 
		'\x2145', '\x5', '\x2CC', '\x167', '\x2', '\x2142', '\x2146', '\a', '\x242', 
		'\x2', '\x2', '\x2143', '\x2144', '\a', '\xDD', '\x2', '\x2', '\x2144', 
		'\x2146', '\a', '\x242', '\x2', '\x2', '\x2145', '\x2142', '\x3', '\x2', 
		'\x2', '\x2', '\x2145', '\x2143', '\x3', '\x2', '\x2', '\x2', '\x2145', 
		'\x2146', '\x3', '\x2', '\x2', '\x2', '\x2146', '\x2B3', '\x3', '\x2', 
		'\x2', '\x2', '\x2147', '\x2148', '\a', '=', '\x2', '\x2', '\x2148', '\x214A', 
		'\x5', '\x3BA', '\x1DE', '\x2', '\x2149', '\x2147', '\x3', '\x2', '\x2', 
		'\x2', '\x2149', '\x214A', '\x3', '\x2', '\x2', '\x2', '\x214A', '\x2170', 
		'\x3', '\x2', '\x2', '\x2', '\x214B', '\x214C', '\a', '\x101', '\x2', 
		'\x2', '\x214C', '\x214F', '\a', '\xAD', '\x2', '\x2', '\x214D', '\x214F', 
		'\a', '\x169', '\x2', '\x2', '\x214E', '\x214B', '\x3', '\x2', '\x2', 
		'\x2', '\x214E', '\x214D', '\x3', '\x2', '\x2', '\x2', '\x214F', '\x2151', 
		'\x3', '\x2', '\x2', '\x2', '\x2150', '\x2152', '\x5', '\x398', '\x1CD', 
		'\x2', '\x2151', '\x2150', '\x3', '\x2', '\x2', '\x2', '\x2151', '\x2152', 
		'\x3', '\x2', '\x2', '\x2', '\x2152', '\x2154', '\x3', '\x2', '\x2', '\x2', 
		'\x2153', '\x2155', '\x5', '\x2BC', '\x15F', '\x2', '\x2154', '\x2153', 
		'\x3', '\x2', '\x2', '\x2', '\x2154', '\x2155', '\x3', '\x2', '\x2', '\x2', 
		'\x2155', '\x2171', '\x3', '\x2', '\x2', '\x2', '\x2156', '\x215A', '\a', 
		'.', '\x2', '\x2', '\x2157', '\x2158', '\a', '\xDD', '\x2', '\x2', '\x2158', 
		'\x2159', '\a', '\x86', '\x2', '\x2', '\x2159', '\x215B', '\a', '\x113', 
		'\x2', '\x2', '\x215A', '\x2157', '\x3', '\x2', '\x2', '\x2', '\x215A', 
		'\x215B', '\x3', '\x2', '\x2', '\x2', '\x215B', '\x215C', '\x3', '\x2', 
		'\x2', '\x2', '\x215C', '\x215D', '\a', '\x336', '\x2', '\x2', '\x215D', 
		'\x215E', '\x5', '\x2E2', '\x172', '\x2', '\x215E', '\x215F', '\a', '\x337', 
		'\x2', '\x2', '\x215F', '\x2171', '\x3', '\x2', '\x2', '\x2', '\x2160', 
		'\x2161', '\a', '\x89', '\x2', '\x2', '\x2161', '\x2163', '\a', '\xAD', 
		'\x2', '\x2', '\x2162', '\x2160', '\x3', '\x2', '\x2', '\x2', '\x2162', 
		'\x2163', '\x3', '\x2', '\x2', '\x2', '\x2163', '\x2164', '\x3', '\x2', 
		'\x2', '\x2', '\x2164', '\x2165', '\a', '\x10F', '\x2', '\x2', '\x2165', 
		'\x2166', '\x5', '\x382', '\x1C2', '\x2', '\x2166', '\x2167', '\a', '\x336', 
		'\x2', '\x2', '\x2167', '\x2168', '\x5', '\x392', '\x1CA', '\x2', '\x2168', 
		'\x216A', '\a', '\x337', '\x2', '\x2', '\x2169', '\x216B', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x216A', '\x2169', '\x3', '\x2', '\x2', '\x2', '\x216A', 
		'\x216B', '\x3', '\x2', '\x2', '\x2', '\x216B', '\x216D', '\x3', '\x2', 
		'\x2', '\x2', '\x216C', '\x216E', '\x5', '\x2BA', '\x15E', '\x2', '\x216D', 
		'\x216C', '\x3', '\x2', '\x2', '\x2', '\x216D', '\x216E', '\x3', '\x2', 
		'\x2', '\x2', '\x216E', '\x2171', '\x3', '\x2', '\x2', '\x2', '\x216F', 
		'\x2171', '\x5', '\x39A', '\x1CE', '\x2', '\x2170', '\x214E', '\x3', '\x2', 
		'\x2', '\x2', '\x2170', '\x2156', '\x3', '\x2', '\x2', '\x2', '\x2170', 
		'\x2162', '\x3', '\x2', '\x2', '\x2', '\x2170', '\x216F', '\x3', '\x2', 
		'\x2', '\x2', '\x2171', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2172', 
		'\x2173', '\a', '=', '\x2', '\x2', '\x2173', '\x2175', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2174', '\x2172', '\x3', '\x2', '\x2', '\x2', '\x2174', 
		'\x2175', '\x3', '\x2', '\x2', '\x2', '\x2175', '\x21B6', '\x3', '\x2', 
		'\x2', '\x2', '\x2176', '\x2177', '\a', '\x101', '\x2', '\x2', '\x2177', 
		'\x217A', '\a', '\xAD', '\x2', '\x2', '\x2178', '\x217A', '\a', '\x169', 
		'\x2', '\x2', '\x2179', '\x2176', '\x3', '\x2', '\x2', '\x2', '\x2179', 
		'\x2178', '\x3', '\x2', '\x2', '\x2', '\x217A', '\x217C', '\x3', '\x2', 
		'\x2', '\x2', '\x217B', '\x217D', '\x5', '\x398', '\x1CD', '\x2', '\x217C', 
		'\x217B', '\x3', '\x2', '\x2', '\x2', '\x217C', '\x217D', '\x3', '\x2', 
		'\x2', '\x2', '\x217D', '\x217E', '\x3', '\x2', '\x2', '\x2', '\x217E', 
		'\x217F', '\a', '\x336', '\x2', '\x2', '\x217F', '\x2180', '\x5', '\x390', 
		'\x1C9', '\x2', '\x2180', '\x2182', '\a', '\x337', '\x2', '\x2', '\x2181', 
		'\x2183', '\x5', '\x2BC', '\x15F', '\x2', '\x2182', '\x2181', '\x3', '\x2', 
		'\x2', '\x2', '\x2182', '\x2183', '\x3', '\x2', '\x2', '\x2', '\x2183', 
		'\x2186', '\x3', '\x2', '\x2', '\x2', '\x2184', '\x2185', '\a', '\xE6', 
		'\x2', '\x2', '\x2185', '\x2187', '\x5', '\x3BA', '\x1DE', '\x2', '\x2186', 
		'\x2184', '\x3', '\x2', '\x2', '\x2', '\x2186', '\x2187', '\x3', '\x2', 
		'\x2', '\x2', '\x2187', '\x21B7', '\x3', '\x2', '\x2', '\x2', '\x2188', 
		'\x218C', '\a', '.', '\x2', '\x2', '\x2189', '\x218A', '\a', '\xDD', '\x2', 
		'\x2', '\x218A', '\x218B', '\a', '\x86', '\x2', '\x2', '\x218B', '\x218D', 
		'\a', '\x113', '\x2', '\x2', '\x218C', '\x2189', '\x3', '\x2', '\x2', 
		'\x2', '\x218C', '\x218D', '\x3', '\x2', '\x2', '\x2', '\x218D', '\x218E', 
		'\x3', '\x2', '\x2', '\x2', '\x218E', '\x218F', '\a', '\x336', '\x2', 
		'\x2', '\x218F', '\x2190', '\x5', '\x2E2', '\x172', '\x2', '\x2190', '\x2191', 
		'\a', '\x337', '\x2', '\x2', '\x2191', '\x21B7', '\x3', '\x2', '\x2', 
		'\x2', '\x2192', '\x2194', '\a', 'Z', '\x2', '\x2', '\x2193', '\x2195', 
		'\a', '\x336', '\x2', '\x2', '\x2194', '\x2193', '\x3', '\x2', '\x2', 
		'\x2', '\x2194', '\x2195', '\x3', '\x2', '\x2', '\x2', '\x2195', '\x219A', 
		'\x3', '\x2', '\x2', '\x2', '\x2196', '\x219B', '\a', '\x320', '\x2', 
		'\x2', '\x2197', '\x219B', '\a', '\x33E', '\x2', '\x2', '\x2198', '\x219B', 
		'\x5', '\x334', '\x19B', '\x2', '\x2199', '\x219B', '\a', '\x31C', '\x2', 
		'\x2', '\x219A', '\x2196', '\x3', '\x2', '\x2', '\x2', '\x219A', '\x2197', 
		'\x3', '\x2', '\x2', '\x2', '\x219A', '\x2198', '\x3', '\x2', '\x2', '\x2', 
		'\x219A', '\x2199', '\x3', '\x2', '\x2', '\x2', '\x219B', '\x219C', '\x3', 
		'\x2', '\x2', '\x2', '\x219C', '\x219A', '\x3', '\x2', '\x2', '\x2', '\x219C', 
		'\x219D', '\x3', '\x2', '\x2', '\x2', '\x219D', '\x219F', '\x3', '\x2', 
		'\x2', '\x2', '\x219E', '\x21A0', '\a', '\x337', '\x2', '\x2', '\x219F', 
		'\x219E', '\x3', '\x2', '\x2', '\x2', '\x219F', '\x21A0', '\x3', '\x2', 
		'\x2', '\x2', '\x21A0', '\x21A1', '\x3', '\x2', '\x2', '\x2', '\x21A1', 
		'\x21A2', '\a', '\x86', '\x2', '\x2', '\x21A2', '\x21B7', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x21A3', '\x21A4', '\a', '\x89', '\x2', '\x2', '\x21A4', 
		'\x21A5', '\a', '\xAD', '\x2', '\x2', '\x21A5', '\x21A6', '\a', '\x336', 
		'\x2', '\x2', '\x21A6', '\x21A7', '\x5', '\x392', '\x1CA', '\x2', '\x21A7', 
		'\x21A8', '\a', '\x337', '\x2', '\x2', '\x21A8', '\x21A9', '\a', '\x10F', 
		'\x2', '\x2', '\x21A9', '\x21AE', '\x5', '\x382', '\x1C2', '\x2', '\x21AA', 
		'\x21AB', '\a', '\x336', '\x2', '\x2', '\x21AB', '\x21AC', '\x5', '\x392', 
		'\x1CA', '\x2', '\x21AC', '\x21AD', '\a', '\x337', '\x2', '\x2', '\x21AD', 
		'\x21AF', '\x3', '\x2', '\x2', '\x2', '\x21AE', '\x21AA', '\x3', '\x2', 
		'\x2', '\x2', '\x21AE', '\x21AF', '\x3', '\x2', '\x2', '\x2', '\x21AF', 
		'\x21B1', '\x3', '\x2', '\x2', '\x2', '\x21B0', '\x21B2', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x21B1', '\x21B0', '\x3', '\x2', '\x2', '\x2', '\x21B1', 
		'\x21B2', '\x3', '\x2', '\x2', '\x2', '\x21B2', '\x21B4', '\x3', '\x2', 
		'\x2', '\x2', '\x21B3', '\x21B5', '\x5', '\x2BA', '\x15E', '\x2', '\x21B4', 
		'\x21B3', '\x3', '\x2', '\x2', '\x2', '\x21B4', '\x21B5', '\x3', '\x2', 
		'\x2', '\x2', '\x21B5', '\x21B7', '\x3', '\x2', '\x2', '\x2', '\x21B6', 
		'\x2179', '\x3', '\x2', '\x2', '\x2', '\x21B6', '\x2188', '\x3', '\x2', 
		'\x2', '\x2', '\x21B6', '\x2192', '\x3', '\x2', '\x2', '\x2', '\x21B6', 
		'\x21A3', '\x3', '\x2', '\x2', '\x2', '\x21B7', '\x2B7', '\x3', '\x2', 
		'\x2', '\x2', '\x21B8', '\x21B9', '\a', '\xE6', '\x2', '\x2', '\x21B9', 
		'\x21C1', '\a', ']', '\x2', '\x2', '\x21BA', '\x21BB', '\a', '\x265', 
		'\x2', '\x2', '\x21BB', '\x21C2', '\a', '\x184', '\x2', '\x2', '\x21BC', 
		'\x21C2', '\a', ')', '\x2', '\x2', '\x21BD', '\x21BE', '\a', '\x13E', 
		'\x2', '\x2', '\x21BE', '\x21C2', '\a', '\xE0', '\x2', '\x2', '\x21BF', 
		'\x21C0', '\a', '\x13E', '\x2', '\x2', '\x21C0', '\x21C2', '\a', 'Z', 
		'\x2', '\x2', '\x21C1', '\x21BA', '\x3', '\x2', '\x2', '\x2', '\x21C1', 
		'\x21BC', '\x3', '\x2', '\x2', '\x2', '\x21C1', '\x21BD', '\x3', '\x2', 
		'\x2', '\x2', '\x21C1', '\x21BF', '\x3', '\x2', '\x2', '\x2', '\x21C2', 
		'\x2B9', '\x3', '\x2', '\x2', '\x2', '\x21C3', '\x21C4', '\a', '\xE6', 
		'\x2', '\x2', '\x21C4', '\x21CC', '\a', '\x16D', '\x2', '\x2', '\x21C5', 
		'\x21C6', '\a', '\x265', '\x2', '\x2', '\x21C6', '\x21CD', '\a', '\x184', 
		'\x2', '\x2', '\x21C7', '\x21CD', '\a', ')', '\x2', '\x2', '\x21C8', '\x21C9', 
		'\a', '\x13E', '\x2', '\x2', '\x21C9', '\x21CD', '\a', '\xE0', '\x2', 
		'\x2', '\x21CA', '\x21CB', '\a', '\x13E', '\x2', '\x2', '\x21CB', '\x21CD', 
		'\a', 'Z', '\x2', '\x2', '\x21CC', '\x21C5', '\x3', '\x2', '\x2', '\x2', 
		'\x21CC', '\x21C7', '\x3', '\x2', '\x2', '\x2', '\x21CC', '\x21C8', '\x3', 
		'\x2', '\x2', '\x2', '\x21CC', '\x21CA', '\x3', '\x2', '\x2', '\x2', '\x21CD', 
		'\x2BB', '\x3', '\x2', '\x2', '\x2', '\x21CE', '\x21CF', '\a', '\x17D', 
		'\x2', '\x2', '\x21CF', '\x21D0', '\a', '\x336', '\x2', '\x2', '\x21D0', 
		'\x21D5', '\x5', '\x2BE', '\x160', '\x2', '\x21D1', '\x21D2', '\a', '\x338', 
		'\x2', '\x2', '\x21D2', '\x21D4', '\x5', '\x2BE', '\x160', '\x2', '\x21D3', 
		'\x21D1', '\x3', '\x2', '\x2', '\x2', '\x21D4', '\x21D7', '\x3', '\x2', 
		'\x2', '\x2', '\x21D5', '\x21D3', '\x3', '\x2', '\x2', '\x2', '\x21D5', 
		'\x21D6', '\x3', '\x2', '\x2', '\x2', '\x21D6', '\x21D8', '\x3', '\x2', 
		'\x2', '\x2', '\x21D7', '\x21D5', '\x3', '\x2', '\x2', '\x2', '\x21D8', 
		'\x21D9', '\a', '\x337', '\x2', '\x2', '\x21D9', '\x2BD', '\x3', '\x2', 
		'\x2', '\x2', '\x21DA', '\x21DB', '\x5', '\x3BC', '\x1DF', '\x2', '\x21DB', 
		'\x21DF', '\a', '\x324', '\x2', '\x2', '\x21DC', '\x21E0', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x21DD', '\x21E0', '\x5', '\x396', '\x1CC', '\x2', '\x21DE', 
		'\x21E0', '\a', '\x31C', '\x2', '\x2', '\x21DF', '\x21DC', '\x3', '\x2', 
		'\x2', '\x2', '\x21DF', '\x21DD', '\x3', '\x2', '\x2', '\x2', '\x21DF', 
		'\x21DE', '\x3', '\x2', '\x2', '\x2', '\x21E0', '\x2BF', '\x3', '\x2', 
		'\x2', '\x2', '\x21E1', '\x21E2', '\a', 'Y', '\x2', '\x2', '\x21E2', '\x2202', 
		'\x5', '\x394', '\x1CB', '\x2', '\x21E3', '\x21ED', '\a', 'P', '\x2', 
		'\x2', '\x21E4', '\x21EB', '\x5', '\x2C2', '\x162', '\x2', '\x21E5', '\x21E6', 
		'\a', '\x86', '\x2', '\x2', '\x21E6', '\x21E9', '\a', '\x16D', '\x2', 
		'\x2', '\x21E7', '\x21E8', '\a', '\xE2', '\x2', '\x2', '\x21E8', '\x21EA', 
		'\x5', '\x392', '\x1CA', '\x2', '\x21E9', '\x21E7', '\x3', '\x2', '\x2', 
		'\x2', '\x21E9', '\x21EA', '\x3', '\x2', '\x2', '\x2', '\x21EA', '\x21EC', 
		'\x3', '\x2', '\x2', '\x2', '\x21EB', '\x21E5', '\x3', '\x2', '\x2', '\x2', 
		'\x21EB', '\x21EC', '\x3', '\x2', '\x2', '\x2', '\x21EC', '\x21EE', '\x3', 
		'\x2', '\x2', '\x2', '\x21ED', '\x21E4', '\x3', '\x2', '\x2', '\x2', '\x21ED', 
		'\x21EE', '\x3', '\x2', '\x2', '\x2', '\x21EE', '\x2203', '\x3', '\x2', 
		'\x2', '\x2', '\x21EF', '\x21F1', '\t', '\x66', '\x2', '\x2', '\x21F0', 
		'\x21EF', '\x3', '\x2', '\x2', '\x2', '\x21F0', '\x21F1', '\x3', '\x2', 
		'\x2', '\x2', '\x21F1', '\x21F3', '\x3', '\x2', '\x2', '\x2', '\x21F2', 
		'\x21F4', '\a', '\x2C1', '\x2', '\x2', '\x21F3', '\x21F2', '\x3', '\x2', 
		'\x2', '\x2', '\x21F3', '\x21F4', '\x3', '\x2', '\x2', '\x2', '\x21F4', 
		'\x21F5', '\x3', '\x2', '\x2', '\x2', '\x21F5', '\x21F6', '\a', 'P', '\x2', 
		'\x2', '\x21F6', '\x21F7', '\a', '\x86', '\x2', '\x2', '\x21F7', '\x2200', 
		'\x5', '\x1BE', '\xE0', '\x2', '\x21F8', '\x21FE', '\a', '\x86', '\x2', 
		'\x2', '\x21F9', '\x21FA', '\a', '\x10B', '\x2', '\x2', '\x21FA', '\x21FF', 
		'\a', '\x278', '\x2', '\x2', '\x21FB', '\x21FF', '\a', '\x16D', '\x2', 
		'\x2', '\x21FC', '\x21FD', '\a', '\xE2', '\x2', '\x2', '\x21FD', '\x21FF', 
		'\x5', '\x392', '\x1CA', '\x2', '\x21FE', '\x21F9', '\x3', '\x2', '\x2', 
		'\x2', '\x21FE', '\x21FB', '\x3', '\x2', '\x2', '\x2', '\x21FE', '\x21FC', 
		'\x3', '\x2', '\x2', '\x2', '\x21FF', '\x2201', '\x3', '\x2', '\x2', '\x2', 
		'\x2200', '\x21F8', '\x3', '\x2', '\x2', '\x2', '\x2200', '\x2201', '\x3', 
		'\x2', '\x2', '\x2', '\x2201', '\x2203', '\x3', '\x2', '\x2', '\x2', '\x2202', 
		'\x21E3', '\x3', '\x2', '\x2', '\x2', '\x2202', '\x21F0', '\x3', '\x2', 
		'\x2', '\x2', '\x2203', '\x2205', '\x3', '\x2', '\x2', '\x2', '\x2204', 
		'\x2206', '\a', '\x339', '\x2', '\x2', '\x2205', '\x2204', '\x3', '\x2', 
		'\x2', '\x2', '\x2205', '\x2206', '\x3', '\x2', '\x2', '\x2', '\x2206', 
		'\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2207', '\x2209', '\x5', '\x2C4', 
		'\x163', '\x2', '\x2208', '\x2207', '\x3', '\x2', '\x2', '\x2', '\x2209', 
		'\x220C', '\x3', '\x2', '\x2', '\x2', '\x220A', '\x2208', '\x3', '\x2', 
		'\x2', '\x2', '\x220A', '\x220B', '\x3', '\x2', '\x2', '\x2', '\x220B', 
		'\x220D', '\x3', '\x2', '\x2', '\x2', '\x220C', '\x220A', '\x3', '\x2', 
		'\x2', '\x2', '\x220D', '\x220E', '\a', '\x86', '\x2', '\x2', '\x220E', 
		'\x220F', '\x5', '\x1BE', '\xE0', '\x2', '\x220F', '\x2C3', '\x3', '\x2', 
		'\x2', '\x2', '\x2210', '\x2216', '\t', '\x41', '\x2', '\x2', '\x2211', 
		'\x2216', '\t', 'g', '\x2', '\x2', '\x2212', '\x2216', '\t', 'h', '\x2', 
		'\x2', '\x2213', '\x2216', '\t', 'i', '\x2', '\x2', '\x2214', '\x2216', 
		'\a', '\x2FD', '\x2', '\x2', '\x2215', '\x2210', '\x3', '\x2', '\x2', 
		'\x2', '\x2215', '\x2211', '\x3', '\x2', '\x2', '\x2', '\x2215', '\x2212', 
		'\x3', '\x2', '\x2', '\x2', '\x2215', '\x2213', '\x3', '\x2', '\x2', '\x2', 
		'\x2215', '\x2214', '\x3', '\x2', '\x2', '\x2', '\x2216', '\x2C5', '\x3', 
		'\x2', '\x2', '\x2', '\x2217', '\x2221', '\a', '\x81', '\x2', '\x2', '\x2218', 
		'\x221F', '\a', '\x264', '\x2', '\x2', '\x2219', '\x221F', '\a', '\x28A', 
		'\x2', '\x2', '\x221A', '\x221F', '\a', '\x203', '\x2', '\x2', '\x221B', 
		'\x221F', '\a', '\x231', '\x2', '\x2', '\x221C', '\x221D', '\t', 'j', 
		'\x2', '\x2', '\x221D', '\x221F', '\x5', '\x2CC', '\x167', '\x2', '\x221E', 
		'\x2218', '\x3', '\x2', '\x2', '\x2', '\x221E', '\x2219', '\x3', '\x2', 
		'\x2', '\x2', '\x221E', '\x221A', '\x3', '\x2', '\x2', '\x2', '\x221E', 
		'\x221B', '\x3', '\x2', '\x2', '\x2', '\x221E', '\x221C', '\x3', '\x2', 
		'\x2', '\x2', '\x221E', '\x221F', '\x3', '\x2', '\x2', '\x2', '\x221F', 
		'\x2220', '\x3', '\x2', '\x2', '\x2', '\x2220', '\x2222', '\a', '\x8C', 
		'\x2', '\x2', '\x2221', '\x221E', '\x3', '\x2', '\x2', '\x2', '\x2221', 
		'\x2222', '\x3', '\x2', '\x2', '\x2', '\x2222', '\x2224', '\x3', '\x2', 
		'\x2', '\x2', '\x2223', '\x2225', '\a', '\x210', '\x2', '\x2', '\x2224', 
		'\x2223', '\x3', '\x2', '\x2', '\x2', '\x2224', '\x2225', '\x3', '\x2', 
		'\x2', '\x2', '\x2225', '\x2226', '\x3', '\x2', '\x2', '\x2', '\x2226', 
		'\x2230', '\x5', '\x394', '\x1CB', '\x2', '\x2227', '\x2228', '\a', '\xA6', 
		'\x2', '\x2', '\x2228', '\x222D', '\a', '\x31B', '\x2', '\x2', '\x2229', 
		'\x222A', '\a', '\x338', '\x2', '\x2', '\x222A', '\x222C', '\a', '\x31B', 
		'\x2', '\x2', '\x222B', '\x2229', '\x3', '\x2', '\x2', '\x2', '\x222C', 
		'\x222F', '\x3', '\x2', '\x2', '\x2', '\x222D', '\x222B', '\x3', '\x2', 
		'\x2', '\x2', '\x222D', '\x222E', '\x3', '\x2', '\x2', '\x2', '\x222E', 
		'\x2231', '\x3', '\x2', '\x2', '\x2', '\x222F', '\x222D', '\x3', '\x2', 
		'\x2', '\x2', '\x2230', '\x2227', '\x3', '\x2', '\x2', '\x2', '\x2230', 
		'\x2231', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2233', '\x3', '\x2', 
		'\x2', '\x2', '\x2232', '\x2234', '\a', '\x339', '\x2', '\x2', '\x2233', 
		'\x2232', '\x3', '\x2', '\x2', '\x2', '\x2233', '\x2234', '\x3', '\x2', 
		'\x2', '\x2', '\x2234', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2235', 
		'\x2236', '\a', '\x13E', '\x2', '\x2', '\x2236', '\x223A', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2237', '\x223B', '\x5', '\x3BA', '\x1DE', '\x2', '\x2238', 
		'\x223B', '\x5', '\x2CA', '\x166', '\x2', '\x2239', '\x223B', '\x5', '\x396', 
		'\x1CC', '\x2', '\x223A', '\x2237', '\x3', '\x2', '\x2', '\x2', '\x223A', 
		'\x2238', '\x3', '\x2', '\x2', '\x2', '\x223A', '\x2239', '\x3', '\x2', 
		'\x2', '\x2', '\x223B', '\x223D', '\x3', '\x2', '\x2', '\x2', '\x223C', 
		'\x223E', '\a', '\x339', '\x2', '\x2', '\x223D', '\x223C', '\x3', '\x2', 
		'\x2', '\x2', '\x223D', '\x223E', '\x3', '\x2', '\x2', '\x2', '\x223E', 
		'\x2267', '\x3', '\x2', '\x2', '\x2', '\x223F', '\x2240', '\a', '\x13E', 
		'\x2', '\x2', '\x2240', '\x2241', '\a', '\x162', '\x2', '\x2', '\x2241', 
		'\x2242', '\a', '\x228', '\x2', '\x2', '\x2242', '\x224C', '\a', '\x234', 
		'\x2', '\x2', '\x2243', '\x2244', '\a', '\x10B', '\x2', '\x2', '\x2244', 
		'\x224D', '\a', '\x2FF', '\x2', '\x2', '\x2245', '\x2246', '\a', '\x10B', 
		'\x2', '\x2', '\x2246', '\x224D', '\a', '\x1BB', '\x2', '\x2', '\x2247', 
		'\x2248', '\a', '\x2AC', '\x2', '\x2', '\x2248', '\x224D', '\a', '\x10B', 
		'\x2', '\x2', '\x2249', '\x224D', '\a', '\x2D9', '\x2', '\x2', '\x224A', 
		'\x224D', '\a', '\x2CF', '\x2', '\x2', '\x224B', '\x224D', '\a', '\x31C', 
		'\x2', '\x2', '\x224C', '\x2243', '\x3', '\x2', '\x2', '\x2', '\x224C', 
		'\x2245', '\x3', '\x2', '\x2', '\x2', '\x224C', '\x2247', '\x3', '\x2', 
		'\x2', '\x2', '\x224C', '\x2249', '\x3', '\x2', '\x2', '\x2', '\x224C', 
		'\x224A', '\x3', '\x2', '\x2', '\x2', '\x224C', '\x224B', '\x3', '\x2', 
		'\x2', '\x2', '\x224D', '\x224F', '\x3', '\x2', '\x2', '\x2', '\x224E', 
		'\x2250', '\a', '\x339', '\x2', '\x2', '\x224F', '\x224E', '\x3', '\x2', 
		'\x2', '\x2', '\x224F', '\x2250', '\x3', '\x2', '\x2', '\x2', '\x2250', 
		'\x2267', '\x3', '\x2', '\x2', '\x2', '\x2251', '\x2252', '\a', '\x13E', 
		'\x2', '\x2', '\x2252', '\x2253', '\a', '\x99', '\x2', '\x2', '\x2253', 
		'\x2254', '\x5', '\x382', '\x1C2', '\x2', '\x2254', '\x2256', '\x5', '\x396', 
		'\x1CC', '\x2', '\x2255', '\x2257', '\a', '\x339', '\x2', '\x2', '\x2256', 
		'\x2255', '\x3', '\x2', '\x2', '\x2', '\x2256', '\x2257', '\x3', '\x2', 
		'\x2', '\x2', '\x2257', '\x2267', '\x3', '\x2', '\x2', '\x2', '\x2258', 
		'\x2259', '\a', '\x13E', '\x2', '\x2', '\x2259', '\x225A', '\a', '\x193', 
		'\x2', '\x2', '\x225A', '\x2267', '\x5', '\x396', '\x1CC', '\x2', '\x225B', 
		'\x225C', '\a', '\x13E', '\x2', '\x2', '\x225C', '\x225D', '\a', '\x297', 
		'\x2', '\x2', '\x225D', '\x2267', '\x5', '\x396', '\x1CC', '\x2', '\x225E', 
		'\x225F', '\a', '\x13E', '\x2', '\x2', '\x225F', '\x2260', '\a', '\x194', 
		'\x2', '\x2', '\x2260', '\x2267', '\x5', '\x396', '\x1CC', '\x2', '\x2261', 
		'\x2262', '\a', '\x13E', '\x2', '\x2', '\x2262', '\x2263', '\a', '\x195', 
		'\x2', '\x2', '\x2263', '\x2267', '\x5', '\x396', '\x1CC', '\x2', '\x2264', 
		'\x2265', '\a', '\x13E', '\x2', '\x2', '\x2265', '\x2267', '\x5', '\x33E', 
		'\x1A0', '\x2', '\x2266', '\x2235', '\x3', '\x2', '\x2', '\x2', '\x2266', 
		'\x223F', '\x3', '\x2', '\x2', '\x2', '\x2266', '\x2251', '\x3', '\x2', 
		'\x2', '\x2', '\x2266', '\x2258', '\x3', '\x2', '\x2', '\x2', '\x2266', 
		'\x225B', '\x3', '\x2', '\x2', '\x2', '\x2266', '\x225E', '\x3', '\x2', 
		'\x2', '\x2', '\x2266', '\x2261', '\x3', '\x2', '\x2', '\x2', '\x2266', 
		'\x2264', '\x3', '\x2', '\x2', '\x2', '\x2267', '\x2C9', '\x3', '\x2', 
		'\x2', '\x2', '\x2268', '\x226B', '\x5', '\x3B6', '\x1DC', '\x2', '\x2269', 
		'\x226B', '\a', '\x31B', '\x2', '\x2', '\x226A', '\x2268', '\x3', '\x2', 
		'\x2', '\x2', '\x226A', '\x2269', '\x3', '\x2', '\x2', '\x2', '\x226B', 
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\x226C', '\x226D', '\b', '\x167', 
		'\x1', '\x2', '\x226D', '\x2275', '\x5', '\x2CE', '\x168', '\x2', '\x226E', 
		'\x2275', '\x5', '\x334', '\x19B', '\x2', '\x226F', '\x2275', '\x5', '\x2D0', 
		'\x169', '\x2', '\x2270', '\x2275', '\x5', '\x38E', '\x1C8', '\x2', '\x2271', 
		'\x2275', '\x5', '\x2D4', '\x16B', '\x2', '\x2272', '\x2275', '\x5', '\x2D2', 
		'\x16A', '\x2', '\x2273', '\x2275', '\x5', '\x364', '\x1B3', '\x2', '\x2274', 
		'\x226C', '\x3', '\x2', '\x2', '\x2', '\x2274', '\x226E', '\x3', '\x2', 
		'\x2', '\x2', '\x2274', '\x226F', '\x3', '\x2', '\x2', '\x2', '\x2274', 
		'\x2270', '\x3', '\x2', '\x2', '\x2', '\x2274', '\x2271', '\x3', '\x2', 
		'\x2', '\x2', '\x2274', '\x2272', '\x3', '\x2', '\x2', '\x2', '\x2274', 
		'\x2273', '\x3', '\x2', '\x2', '\x2', '\x2275', '\x2289', '\x3', '\x2', 
		'\x2', '\x2', '\x2276', '\x2277', '\f', '\a', '\x2', '\x2', '\x2277', 
		'\x2278', '\t', 'k', '\x2', '\x2', '\x2278', '\x2288', '\x5', '\x2CC', 
		'\x167', '\b', '\x2279', '\x227A', '\f', '\x6', '\x2', '\x2', '\x227A', 
		'\x227B', '\t', 'l', '\x2', '\x2', '\x227B', '\x2288', '\x5', '\x2CC', 
		'\x167', '\a', '\x227C', '\x227D', '\f', '\x5', '\x2', '\x2', '\x227D', 
		'\x227E', '\x5', '\x3BE', '\x1E0', '\x2', '\x227E', '\x227F', '\x5', '\x2CC', 
		'\x167', '\x6', '\x227F', '\x2288', '\x3', '\x2', '\x2', '\x2', '\x2280', 
		'\x2281', '\f', '\x4', '\x2', '\x2', '\x2281', '\x2282', '\x5', '\x3C0', 
		'\x1E1', '\x2', '\x2282', '\x2283', '\x5', '\x2CC', '\x167', '\x5', '\x2283', 
		'\x2288', '\x3', '\x2', '\x2', '\x2', '\x2284', '\x2285', '\f', '\f', 
		'\x2', '\x2', '\x2285', '\x2286', '\a', '\x37', '\x2', '\x2', '\x2286', 
		'\x2288', '\x5', '\x3BA', '\x1DE', '\x2', '\x2287', '\x2276', '\x3', '\x2', 
		'\x2', '\x2', '\x2287', '\x2279', '\x3', '\x2', '\x2', '\x2', '\x2287', 
		'\x227C', '\x3', '\x2', '\x2', '\x2', '\x2287', '\x2280', '\x3', '\x2', 
		'\x2', '\x2', '\x2287', '\x2284', '\x3', '\x2', '\x2', '\x2', '\x2288', 
		'\x228B', '\x3', '\x2', '\x2', '\x2', '\x2289', '\x2287', '\x3', '\x2', 
		'\x2', '\x2', '\x2289', '\x228A', '\x3', '\x2', '\x2', '\x2', '\x228A', 
		'\x2CD', '\x3', '\x2', '\x2', '\x2', '\x228B', '\x2289', '\x3', '\x2', 
		'\x2', '\x2', '\x228C', '\x2291', '\a', 'Z', '\x2', '\x2', '\x228D', '\x2291', 
		'\a', '\xE0', '\x2', '\x2', '\x228E', '\x2291', '\a', '\x31B', '\x2', 
		'\x2', '\x228F', '\x2291', '\x5', '\x3B6', '\x1DC', '\x2', '\x2290', '\x228C', 
		'\x3', '\x2', '\x2', '\x2', '\x2290', '\x228D', '\x3', '\x2', '\x2', '\x2', 
		'\x2290', '\x228E', '\x3', '\x2', '\x2', '\x2', '\x2290', '\x228F', '\x3', 
		'\x2', '\x2', '\x2', '\x2291', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2292', 
		'\x2293', '\a', '*', '\x2', '\x2', '\x2293', '\x2295', '\x5', '\x2CC', 
		'\x167', '\x2', '\x2294', '\x2296', '\x5', '\x342', '\x1A2', '\x2', '\x2295', 
		'\x2294', '\x3', '\x2', '\x2', '\x2', '\x2296', '\x2297', '\x3', '\x2', 
		'\x2', '\x2', '\x2297', '\x2295', '\x3', '\x2', '\x2', '\x2', '\x2297', 
		'\x2298', '\x3', '\x2', '\x2', '\x2', '\x2298', '\x229B', '\x3', '\x2', 
		'\x2', '\x2', '\x2299', '\x229A', '\a', 'k', '\x2', '\x2', '\x229A', '\x229C', 
		'\x5', '\x2CC', '\x167', '\x2', '\x229B', '\x2299', '\x3', '\x2', '\x2', 
		'\x2', '\x229B', '\x229C', '\x3', '\x2', '\x2', '\x2', '\x229C', '\x229D', 
		'\x3', '\x2', '\x2', '\x2', '\x229D', '\x229E', '\a', 'm', '\x2', '\x2', 
		'\x229E', '\x22AC', '\x3', '\x2', '\x2', '\x2', '\x229F', '\x22A1', '\a', 
		'*', '\x2', '\x2', '\x22A0', '\x22A2', '\x5', '\x344', '\x1A3', '\x2', 
		'\x22A1', '\x22A0', '\x3', '\x2', '\x2', '\x2', '\x22A2', '\x22A3', '\x3', 
		'\x2', '\x2', '\x2', '\x22A3', '\x22A1', '\x3', '\x2', '\x2', '\x2', '\x22A3', 
		'\x22A4', '\x3', '\x2', '\x2', '\x2', '\x22A4', '\x22A7', '\x3', '\x2', 
		'\x2', '\x2', '\x22A5', '\x22A6', '\a', 'k', '\x2', '\x2', '\x22A6', '\x22A8', 
		'\x5', '\x2CC', '\x167', '\x2', '\x22A7', '\x22A5', '\x3', '\x2', '\x2', 
		'\x2', '\x22A7', '\x22A8', '\x3', '\x2', '\x2', '\x2', '\x22A8', '\x22A9', 
		'\x3', '\x2', '\x2', '\x2', '\x22A9', '\x22AA', '\a', 'm', '\x2', '\x2', 
		'\x22AA', '\x22AC', '\x3', '\x2', '\x2', '\x2', '\x22AB', '\x2292', '\x3', 
		'\x2', '\x2', '\x2', '\x22AB', '\x229F', '\x3', '\x2', '\x2', '\x2', '\x22AC', 
		'\x2D1', '\x3', '\x2', '\x2', '\x2', '\x22AD', '\x22AE', '\a', '\x340', 
		'\x2', '\x2', '\x22AE', '\x22B2', '\x5', '\x2CC', '\x167', '\x2', '\x22AF', 
		'\x22B0', '\t', 'm', '\x2', '\x2', '\x22B0', '\x22B2', '\x5', '\x2CC', 
		'\x167', '\x2', '\x22B1', '\x22AD', '\x3', '\x2', '\x2', '\x2', '\x22B1', 
		'\x22AF', '\x3', '\x2', '\x2', '\x2', '\x22B2', '\x2D3', '\x3', '\x2', 
		'\x2', '\x2', '\x22B3', '\x22B4', '\a', '\x336', '\x2', '\x2', '\x22B4', 
		'\x22B5', '\x5', '\x2CC', '\x167', '\x2', '\x22B5', '\x22B6', '\a', '\x337', 
		'\x2', '\x2', '\x22B6', '\x22BC', '\x3', '\x2', '\x2', '\x2', '\x22B7', 
		'\x22B8', '\a', '\x336', '\x2', '\x2', '\x22B8', '\x22B9', '\x5', '\x2D8', 
		'\x16D', '\x2', '\x22B9', '\x22BA', '\a', '\x337', '\x2', '\x2', '\x22BA', 
		'\x22BC', '\x3', '\x2', '\x2', '\x2', '\x22BB', '\x22B3', '\x3', '\x2', 
		'\x2', '\x2', '\x22BB', '\x22B7', '\x3', '\x2', '\x2', '\x2', '\x22BC', 
		'\x2D5', '\x3', '\x2', '\x2', '\x2', '\x22BD', '\x22C6', '\a', '\xE0', 
		'\x2', '\x2', '\x22BE', '\x22C6', '\x5', '\x3B6', '\x1DC', '\x2', '\x22BF', 
		'\x22C6', '\x5', '\x334', '\x19B', '\x2', '\x22C0', '\x22C6', '\a', '\x31B', 
		'\x2', '\x2', '\x22C1', '\x22C2', '\a', '\x336', '\x2', '\x2', '\x22C2', 
		'\x22C3', '\x5', '\x2D6', '\x16C', '\x2', '\x22C3', '\x22C4', '\a', '\x337', 
		'\x2', '\x2', '\x22C4', '\x22C6', '\x3', '\x2', '\x2', '\x2', '\x22C5', 
		'\x22BD', '\x3', '\x2', '\x2', '\x2', '\x22C5', '\x22BE', '\x3', '\x2', 
		'\x2', '\x2', '\x22C5', '\x22BF', '\x3', '\x2', '\x2', '\x2', '\x22C5', 
		'\x22C0', '\x3', '\x2', '\x2', '\x2', '\x22C5', '\x22C1', '\x3', '\x2', 
		'\x2', '\x2', '\x22C6', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x22C7', 
		'\x22C8', '\x5', '\x1BE', '\xE0', '\x2', '\x22C8', '\x2D9', '\x3', '\x2', 
		'\x2', '\x2', '\x22C9', '\x22CC', '\a', '\x17D', '\x2', '\x2', '\x22CA', 
		'\x22CB', '\a', '\x311', '\x2', '\x2', '\x22CB', '\x22CD', '\a', '\x338', 
		'\x2', '\x2', '\x22CC', '\x22CA', '\x3', '\x2', '\x2', '\x2', '\x22CC', 
		'\x22CD', '\x3', '\x2', '\x2', '\x2', '\x22CD', '\x22CE', '\x3', '\x2', 
		'\x2', '\x2', '\x22CE', '\x22D3', '\x5', '\x2DC', '\x16F', '\x2', '\x22CF', 
		'\x22D0', '\a', '\x338', '\x2', '\x2', '\x22D0', '\x22D2', '\x5', '\x2DC', 
		'\x16F', '\x2', '\x22D1', '\x22CF', '\x3', '\x2', '\x2', '\x2', '\x22D2', 
		'\x22D5', '\x3', '\x2', '\x2', '\x2', '\x22D3', '\x22D1', '\x3', '\x2', 
		'\x2', '\x2', '\x22D3', '\x22D4', '\x3', '\x2', '\x2', '\x2', '\x22D4', 
		'\x22E4', '\x3', '\x2', '\x2', '\x2', '\x22D5', '\x22D3', '\x3', '\x2', 
		'\x2', '\x2', '\x22D6', '\x22D7', '\a', '\x17D', '\x2', '\x2', '\x22D7', 
		'\x22DC', '\a', ' ', '\x2', '\x2', '\x22D8', '\x22D9', '\a', '\x336', 
		'\x2', '\x2', '\x22D9', '\x22DA', '\x5', '\x32A', '\x196', '\x2', '\x22DA', 
		'\x22DB', '\a', '\x337', '\x2', '\x2', '\x22DB', '\x22DD', '\x3', '\x2', 
		'\x2', '\x2', '\x22DC', '\x22D8', '\x3', '\x2', '\x2', '\x2', '\x22DC', 
		'\x22DD', '\x3', '\x2', '\x2', '\x2', '\x22DD', '\x22DE', '\x3', '\x2', 
		'\x2', '\x2', '\x22DE', '\x22DF', '\a', '\x10', '\x2', '\x2', '\x22DF', 
		'\x22E0', '\a', '\x336', '\x2', '\x2', '\x22E0', '\x22E1', '\x5', '\x1BE', 
		'\xE0', '\x2', '\x22E1', '\x22E2', '\a', '\x337', '\x2', '\x2', '\x22E2', 
		'\x22E4', '\x3', '\x2', '\x2', '\x2', '\x22E3', '\x22C9', '\x3', '\x2', 
		'\x2', '\x2', '\x22E3', '\x22D6', '\x3', '\x2', '\x2', '\x2', '\x22E4', 
		'\x2DB', '\x3', '\x2', '\x2', '\x2', '\x22E5', '\x22EA', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x22E6', '\x22E7', '\a', '\x336', '\x2', '\x2', '\x22E7', 
		'\x22E8', '\x5', '\x392', '\x1CA', '\x2', '\x22E8', '\x22E9', '\a', '\x337', 
		'\x2', '\x2', '\x22E9', '\x22EB', '\x3', '\x2', '\x2', '\x2', '\x22EA', 
		'\x22E6', '\x3', '\x2', '\x2', '\x2', '\x22EA', '\x22EB', '\x3', '\x2', 
		'\x2', '\x2', '\x22EB', '\x22EC', '\x3', '\x2', '\x2', '\x2', '\x22EC', 
		'\x22ED', '\a', '\x10', '\x2', '\x2', '\x22ED', '\x22EE', '\a', '\x336', 
		'\x2', '\x2', '\x22EE', '\x22EF', '\x5', '\x1BE', '\xE0', '\x2', '\x22EF', 
		'\x22F0', '\a', '\x337', '\x2', '\x2', '\x22F0', '\x2DD', '\x3', '\x2', 
		'\x2', '\x2', '\x22F1', '\x22F4', '\x5', '\x38E', '\x1C8', '\x2', '\x22F2', 
		'\x22F4', '\a', '\x31B', '\x2', '\x2', '\x22F3', '\x22F1', '\x3', '\x2', 
		'\x2', '\x2', '\x22F3', '\x22F2', '\x3', '\x2', '\x2', '\x2', '\x22F4', 
		'\x22F7', '\x3', '\x2', '\x2', '\x2', '\x22F5', '\x22F8', '\a', '\x324', 
		'\x2', '\x2', '\x22F6', '\x22F8', '\x5', '\x3C0', '\x1E1', '\x2', '\x22F7', 
		'\x22F5', '\x3', '\x2', '\x2', '\x2', '\x22F7', '\x22F6', '\x3', '\x2', 
		'\x2', '\x2', '\x22F8', '\x22F9', '\x3', '\x2', '\x2', '\x2', '\x22F9', 
		'\x2302', '\x5', '\x2CC', '\x167', '\x2', '\x22FA', '\x22FB', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x22FB', '\x22FC', '\a', '\x331', '\x2', '\x2', '\x22FC', 
		'\x22FD', '\x5', '\x3BA', '\x1DE', '\x2', '\x22FD', '\x22FE', '\a', '\x336', 
		'\x2', '\x2', '\x22FE', '\x22FF', '\x5', '\x35A', '\x1AE', '\x2', '\x22FF', 
		'\x2300', '\a', '\x337', '\x2', '\x2', '\x2300', '\x2302', '\x3', '\x2', 
		'\x2', '\x2', '\x2301', '\x22F3', '\x3', '\x2', '\x2', '\x2', '\x2301', 
		'\x22FA', '\x3', '\x2', '\x2', '\x2', '\x2302', '\x2DF', '\x3', '\x2', 
		'\x2', '\x2', '\x2303', '\x2308', '\x5', '\x2E2', '\x172', '\x2', '\x2304', 
		'\x2305', '\a', '\x338', '\x2', '\x2', '\x2305', '\x2307', '\x5', '\x2E2', 
		'\x172', '\x2', '\x2306', '\x2304', '\x3', '\x2', '\x2', '\x2', '\x2307', 
		'\x230A', '\x3', '\x2', '\x2', '\x2', '\x2308', '\x2306', '\x3', '\x2', 
		'\x2', '\x2', '\x2308', '\x2309', '\x3', '\x2', '\x2', '\x2', '\x2309', 
		'\x2E1', '\x3', '\x2', '\x2', '\x2', '\x230A', '\x2308', '\x3', '\x2', 
		'\x2', '\x2', '\x230B', '\x2310', '\x5', '\x2E4', '\x173', '\x2', '\x230C', 
		'\x230D', '\a', '\xEE', '\x2', '\x2', '\x230D', '\x230F', '\x5', '\x2E4', 
		'\x173', '\x2', '\x230E', '\x230C', '\x3', '\x2', '\x2', '\x2', '\x230F', 
		'\x2312', '\x3', '\x2', '\x2', '\x2', '\x2310', '\x230E', '\x3', '\x2', 
		'\x2', '\x2', '\x2310', '\x2311', '\x3', '\x2', '\x2', '\x2', '\x2311', 
		'\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2312', '\x2310', '\x3', '\x2', 
		'\x2', '\x2', '\x2313', '\x2318', '\x5', '\x2E6', '\x174', '\x2', '\x2314', 
		'\x2315', '\a', '\v', '\x2', '\x2', '\x2315', '\x2317', '\x5', '\x2E6', 
		'\x174', '\x2', '\x2316', '\x2314', '\x3', '\x2', '\x2', '\x2', '\x2317', 
		'\x231A', '\x3', '\x2', '\x2', '\x2', '\x2318', '\x2316', '\x3', '\x2', 
		'\x2', '\x2', '\x2318', '\x2319', '\x3', '\x2', '\x2', '\x2', '\x2319', 
		'\x2E5', '\x3', '\x2', '\x2', '\x2', '\x231A', '\x2318', '\x3', '\x2', 
		'\x2', '\x2', '\x231B', '\x231D', '\a', '\xDD', '\x2', '\x2', '\x231C', 
		'\x231B', '\x3', '\x2', '\x2', '\x2', '\x231C', '\x231D', '\x3', '\x2', 
		'\x2', '\x2', '\x231D', '\x231E', '\x3', '\x2', '\x2', '\x2', '\x231E', 
		'\x231F', '\x5', '\x2E8', '\x175', '\x2', '\x231F', '\x2E7', '\x3', '\x2', 
		'\x2', '\x2', '\x2320', '\x2321', '\a', 'x', '\x2', '\x2', '\x2321', '\x2322', 
		'\a', '\x336', '\x2', '\x2', '\x2322', '\x2323', '\x5', '\x2D8', '\x16D', 
		'\x2', '\x2323', '\x2324', '\a', '\x337', '\x2', '\x2', '\x2324', '\x2358', 
		'\x3', '\x2', '\x2', '\x2', '\x2325', '\x2326', '\x5', '\x2CC', '\x167', 
		'\x2', '\x2326', '\x2327', '\x5', '\x3BE', '\x1E0', '\x2', '\x2327', '\x2328', 
		'\x5', '\x2CC', '\x167', '\x2', '\x2328', '\x2358', '\x3', '\x2', '\x2', 
		'\x2', '\x2329', '\x232A', '\x5', '\x2CC', '\x167', '\x2', '\x232A', '\x232B', 
		'\x5', '\x3BE', '\x1E0', '\x2', '\x232B', '\x232C', '\t', 'n', '\x2', 
		'\x2', '\x232C', '\x232D', '\a', '\x336', '\x2', '\x2', '\x232D', '\x232E', 
		'\x5', '\x2D8', '\x16D', '\x2', '\x232E', '\x232F', '\a', '\x337', '\x2', 
		'\x2', '\x232F', '\x2358', '\x3', '\x2', '\x2', '\x2', '\x2330', '\x2332', 
		'\x5', '\x2CC', '\x167', '\x2', '\x2331', '\x2333', '\a', '\xDD', '\x2', 
		'\x2', '\x2332', '\x2331', '\x3', '\x2', '\x2', '\x2', '\x2332', '\x2333', 
		'\x3', '\x2', '\x2', '\x2', '\x2333', '\x2334', '\x3', '\x2', '\x2', '\x2', 
		'\x2334', '\x2335', '\a', '\x1D', '\x2', '\x2', '\x2335', '\x2336', '\x5', 
		'\x2CC', '\x167', '\x2', '\x2336', '\x2337', '\a', '\v', '\x2', '\x2', 
		'\x2337', '\x2338', '\x5', '\x2CC', '\x167', '\x2', '\x2338', '\x2358', 
		'\x3', '\x2', '\x2', '\x2', '\x2339', '\x233B', '\x5', '\x2CC', '\x167', 
		'\x2', '\x233A', '\x233C', '\a', '\xDD', '\x2', '\x2', '\x233B', '\x233A', 
		'\x3', '\x2', '\x2', '\x2', '\x233B', '\x233C', '\x3', '\x2', '\x2', '\x2', 
		'\x233C', '\x233D', '\x3', '\x2', '\x2', '\x2', '\x233D', '\x233E', '\a', 
		'\x9C', '\x2', '\x2', '\x233E', '\x2341', '\a', '\x336', '\x2', '\x2', 
		'\x233F', '\x2342', '\x5', '\x2D8', '\x16D', '\x2', '\x2340', '\x2342', 
		'\x5', '\x35A', '\x1AE', '\x2', '\x2341', '\x233F', '\x3', '\x2', '\x2', 
		'\x2', '\x2341', '\x2340', '\x3', '\x2', '\x2', '\x2', '\x2342', '\x2343', 
		'\x3', '\x2', '\x2', '\x2', '\x2343', '\x2344', '\a', '\x337', '\x2', 
		'\x2', '\x2344', '\x2358', '\x3', '\x2', '\x2', '\x2', '\x2345', '\x2347', 
		'\x5', '\x2CC', '\x167', '\x2', '\x2346', '\x2348', '\a', '\xDD', '\x2', 
		'\x2', '\x2347', '\x2346', '\x3', '\x2', '\x2', '\x2', '\x2347', '\x2348', 
		'\x3', '\x2', '\x2', '\x2', '\x2348', '\x2349', '\x3', '\x2', '\x2', '\x2', 
		'\x2349', '\x234A', '\a', '\xB5', '\x2', '\x2', '\x234A', '\x234D', '\x5', 
		'\x2CC', '\x167', '\x2', '\x234B', '\x234C', '\a', 'p', '\x2', '\x2', 
		'\x234C', '\x234E', '\x5', '\x2CC', '\x167', '\x2', '\x234D', '\x234B', 
		'\x3', '\x2', '\x2', '\x2', '\x234D', '\x234E', '\x3', '\x2', '\x2', '\x2', 
		'\x234E', '\x2358', '\x3', '\x2', '\x2', '\x2', '\x234F', '\x2350', '\x5', 
		'\x2CC', '\x167', '\x2', '\x2350', '\x2351', '\a', '\xA9', '\x2', '\x2', 
		'\x2351', '\x2352', '\x5', '\x39A', '\x1CE', '\x2', '\x2352', '\x2358', 
		'\x3', '\x2', '\x2', '\x2', '\x2353', '\x2354', '\a', '\x336', '\x2', 
		'\x2', '\x2354', '\x2355', '\x5', '\x2E2', '\x172', '\x2', '\x2355', '\x2356', 
		'\a', '\x337', '\x2', '\x2', '\x2356', '\x2358', '\x3', '\x2', '\x2', 
		'\x2', '\x2357', '\x2320', '\x3', '\x2', '\x2', '\x2', '\x2357', '\x2325', 
		'\x3', '\x2', '\x2', '\x2', '\x2357', '\x2329', '\x3', '\x2', '\x2', '\x2', 
		'\x2357', '\x2330', '\x3', '\x2', '\x2', '\x2', '\x2357', '\x2339', '\x3', 
		'\x2', '\x2', '\x2', '\x2357', '\x2345', '\x3', '\x2', '\x2', '\x2', '\x2357', 
		'\x234F', '\x3', '\x2', '\x2', '\x2', '\x2357', '\x2353', '\x3', '\x2', 
		'\x2', '\x2', '\x2358', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2359', 
		'\x235F', '\x5', '\x2EE', '\x178', '\x2', '\x235A', '\x235B', '\a', '\x336', 
		'\x2', '\x2', '\x235B', '\x235C', '\x5', '\x2EA', '\x176', '\x2', '\x235C', 
		'\x235D', '\a', '\x337', '\x2', '\x2', '\x235D', '\x235F', '\x3', '\x2', 
		'\x2', '\x2', '\x235E', '\x2359', '\x3', '\x2', '\x2', '\x2', '\x235E', 
		'\x235A', '\x3', '\x2', '\x2', '\x2', '\x235F', '\x2363', '\x3', '\x2', 
		'\x2', '\x2', '\x2360', '\x2362', '\x5', '\x2EC', '\x177', '\x2', '\x2361', 
		'\x2360', '\x3', '\x2', '\x2', '\x2', '\x2362', '\x2365', '\x3', '\x2', 
		'\x2', '\x2', '\x2363', '\x2361', '\x3', '\x2', '\x2', '\x2', '\x2363', 
		'\x2364', '\x3', '\x2', '\x2', '\x2', '\x2364', '\x2EB', '\x3', '\x2', 
		'\x2', '\x2', '\x2365', '\x2363', '\x3', '\x2', '\x2', '\x2', '\x2366', 
		'\x2368', '\a', '\x168', '\x2', '\x2', '\x2367', '\x2369', '\a', '\x6', 
		'\x2', '\x2', '\x2368', '\x2367', '\x3', '\x2', '\x2', '\x2', '\x2368', 
		'\x2369', '\x3', '\x2', '\x2', '\x2', '\x2369', '\x236D', '\x3', '\x2', 
		'\x2', '\x2', '\x236A', '\x236D', '\a', 'u', '\x2', '\x2', '\x236B', '\x236D', 
		'\a', '\xA5', '\x2', '\x2', '\x236C', '\x2366', '\x3', '\x2', '\x2', '\x2', 
		'\x236C', '\x236A', '\x3', '\x2', '\x2', '\x2', '\x236C', '\x236B', '\x3', 
		'\x2', '\x2', '\x2', '\x236D', '\x2373', '\x3', '\x2', '\x2', '\x2', '\x236E', 
		'\x2374', '\x5', '\x2EE', '\x178', '\x2', '\x236F', '\x2370', '\a', '\x336', 
		'\x2', '\x2', '\x2370', '\x2371', '\x5', '\x2EA', '\x176', '\x2', '\x2371', 
		'\x2372', '\a', '\x337', '\x2', '\x2', '\x2372', '\x2374', '\x3', '\x2', 
		'\x2', '\x2', '\x2373', '\x236E', '\x3', '\x2', '\x2', '\x2', '\x2373', 
		'\x236F', '\x3', '\x2', '\x2', '\x2', '\x2374', '\x2ED', '\x3', '\x2', 
		'\x2', '\x2', '\x2375', '\x2377', '\a', '\x133', '\x2', '\x2', '\x2376', 
		'\x2378', '\t', 'o', '\x2', '\x2', '\x2377', '\x2376', '\x3', '\x2', '\x2', 
		'\x2', '\x2377', '\x2378', '\x3', '\x2', '\x2', '\x2', '\x2378', '\x237A', 
		'\x3', '\x2', '\x2', '\x2', '\x2379', '\x237B', '\x5', '\x2F0', '\x179', 
		'\x2', '\x237A', '\x2379', '\x3', '\x2', '\x2', '\x2', '\x237A', '\x237B', 
		'\x3', '\x2', '\x2', '\x2', '\x237B', '\x237C', '\x3', '\x2', '\x2', '\x2', 
		'\x237C', '\x237F', '\x5', '\x306', '\x184', '\x2', '\x237D', '\x237E', 
		'\a', '\xA6', '\x2', '\x2', '\x237E', '\x2380', '\x5', '\x382', '\x1C2', 
		'\x2', '\x237F', '\x237D', '\x3', '\x2', '\x2', '\x2', '\x237F', '\x2380', 
		'\x3', '\x2', '\x2', '\x2', '\x2380', '\x2383', '\x3', '\x2', '\x2', '\x2', 
		'\x2381', '\x2382', '\a', '\x8C', '\x2', '\x2', '\x2382', '\x2384', '\x5', 
		'\x314', '\x18B', '\x2', '\x2383', '\x2381', '\x3', '\x2', '\x2', '\x2', 
		'\x2383', '\x2384', '\x3', '\x2', '\x2', '\x2', '\x2384', '\x2387', '\x3', 
		'\x2', '\x2', '\x2', '\x2385', '\x2386', '\a', '\x17A', '\x2', '\x2', 
		'\x2386', '\x2388', '\x5', '\x2E2', '\x172', '\x2', '\x2387', '\x2385', 
		'\x3', '\x2', '\x2', '\x2', '\x2387', '\x2388', '\x3', '\x2', '\x2', '\x2', 
		'\x2388', '\x2396', '\x3', '\x2', '\x2', '\x2', '\x2389', '\x238A', '\a', 
		'\x93', '\x2', '\x2', '\x238A', '\x238C', '\a', '&', '\x2', '\x2', '\x238B', 
		'\x238D', '\a', '\x6', '\x2', '\x2', '\x238C', '\x238B', '\x3', '\x2', 
		'\x2', '\x2', '\x238C', '\x238D', '\x3', '\x2', '\x2', '\x2', '\x238D', 
		'\x238E', '\x3', '\x2', '\x2', '\x2', '\x238E', '\x2393', '\x5', '\x2FE', 
		'\x180', '\x2', '\x238F', '\x2390', '\a', '\x338', '\x2', '\x2', '\x2390', 
		'\x2392', '\x5', '\x2FE', '\x180', '\x2', '\x2391', '\x238F', '\x3', '\x2', 
		'\x2', '\x2', '\x2392', '\x2395', '\x3', '\x2', '\x2', '\x2', '\x2393', 
		'\x2391', '\x3', '\x2', '\x2', '\x2', '\x2393', '\x2394', '\x3', '\x2', 
		'\x2', '\x2', '\x2394', '\x2397', '\x3', '\x2', '\x2', '\x2', '\x2395', 
		'\x2393', '\x3', '\x2', '\x2', '\x2', '\x2396', '\x2389', '\x3', '\x2', 
		'\x2', '\x2', '\x2396', '\x2397', '\x3', '\x2', '\x2', '\x2', '\x2397', 
		'\x239A', '\x3', '\x2', '\x2', '\x2', '\x2398', '\x2399', '\a', '\x94', 
		'\x2', '\x2', '\x2399', '\x239B', '\x5', '\x2E2', '\x172', '\x2', '\x239A', 
		'\x2398', '\x3', '\x2', '\x2', '\x2', '\x239A', '\x239B', '\x3', '\x2', 
		'\x2', '\x2', '\x239B', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x239C', 
		'\x239F', '\a', '\x15F', '\x2', '\x2', '\x239D', '\x23A0', '\x5', '\x2F2', 
		'\x17A', '\x2', '\x239E', '\x23A0', '\x5', '\x2F4', '\x17B', '\x2', '\x239F', 
		'\x239D', '\x3', '\x2', '\x2', '\x2', '\x239F', '\x239E', '\x3', '\x2', 
		'\x2', '\x2', '\x23A0', '\x23A3', '\x3', '\x2', '\x2', '\x2', '\x23A1', 
		'\x23A2', '\a', '\x17D', '\x2', '\x2', '\x23A2', '\x23A4', '\a', '\x2EF', 
		'\x2', '\x2', '\x23A3', '\x23A1', '\x3', '\x2', '\x2', '\x2', '\x23A3', 
		'\x23A4', '\x3', '\x2', '\x2', '\x2', '\x23A4', '\x2F1', '\x3', '\x2', 
		'\x2', '\x2', '\x23A5', '\x23A6', '\t', 'p', '\x2', '\x2', '\x23A6', '\x23AD', 
		'\a', '\xF6', '\x2', '\x2', '\x23A7', '\x23A8', '\a', '\x336', '\x2', 
		'\x2', '\x23A8', '\x23A9', '\x5', '\x2CC', '\x167', '\x2', '\x23A9', '\x23AA', 
		'\a', '\x337', '\x2', '\x2', '\x23AA', '\x23AB', '\a', '\xF6', '\x2', 
		'\x2', '\x23AB', '\x23AD', '\x3', '\x2', '\x2', '\x2', '\x23AC', '\x23A5', 
		'\x3', '\x2', '\x2', '\x2', '\x23AC', '\x23A7', '\x3', '\x2', '\x2', '\x2', 
		'\x23AD', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x23AE', '\x23B4', '\a', 
		'\x31C', '\x2', '\x2', '\x23AF', '\x23B0', '\a', '\x336', '\x2', '\x2', 
		'\x23B0', '\x23B1', '\x5', '\x2CC', '\x167', '\x2', '\x23B1', '\x23B2', 
		'\a', '\x337', '\x2', '\x2', '\x23B2', '\x23B4', '\x3', '\x2', '\x2', 
		'\x2', '\x23B3', '\x23AE', '\x3', '\x2', '\x2', '\x2', '\x23B3', '\x23AF', 
		'\x3', '\x2', '\x2', '\x2', '\x23B4', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\x23B5', '\x23B6', '\a', '\xEF', '\x2', '\x2', '\x23B6', '\x23B7', '\a', 
		'&', '\x2', '\x2', '\x23B7', '\x23BC', '\x5', '\x2FC', '\x17F', '\x2', 
		'\x23B8', '\x23B9', '\a', '\x338', '\x2', '\x2', '\x23B9', '\x23BB', '\x5', 
		'\x2FC', '\x17F', '\x2', '\x23BA', '\x23B8', '\x3', '\x2', '\x2', '\x2', 
		'\x23BB', '\x23BE', '\x3', '\x2', '\x2', '\x2', '\x23BC', '\x23BA', '\x3', 
		'\x2', '\x2', '\x2', '\x23BC', '\x23BD', '\x3', '\x2', '\x2', '\x2', '\x23BD', 
		'\x23CA', '\x3', '\x2', '\x2', '\x2', '\x23BE', '\x23BC', '\x3', '\x2', 
		'\x2', '\x2', '\x23BF', '\x23C0', '\a', '\x275', '\x2', '\x2', '\x23C0', 
		'\x23C1', '\x5', '\x2CC', '\x167', '\x2', '\x23C1', '\x23C8', '\t', 'q', 
		'\x2', '\x2', '\x23C2', '\x23C3', '\a', '\x81', '\x2', '\x2', '\x23C3', 
		'\x23C4', '\t', 'r', '\x2', '\x2', '\x23C4', '\x23C5', '\x5', '\x2CC', 
		'\x167', '\x2', '\x23C5', '\x23C6', '\t', 'q', '\x2', '\x2', '\x23C6', 
		'\x23C7', '\a', '\x278', '\x2', '\x2', '\x23C7', '\x23C9', '\x3', '\x2', 
		'\x2', '\x2', '\x23C8', '\x23C2', '\x3', '\x2', '\x2', '\x2', '\x23C8', 
		'\x23C9', '\x3', '\x2', '\x2', '\x2', '\x23C9', '\x23CB', '\x3', '\x2', 
		'\x2', '\x2', '\x23CA', '\x23BF', '\x3', '\x2', '\x2', '\x2', '\x23CA', 
		'\x23CB', '\x3', '\x2', '\x2', '\x2', '\x23CB', '\x2F7', '\x3', '\x2', 
		'\x2', '\x2', '\x23CC', '\x23CD', '\a', '\x86', '\x2', '\x2', '\x23CD', 
		'\x2425', '\a', '\"', '\x2', '\x2', '\x23CE', '\x23CF', '\a', '\x86', 
		'\x2', '\x2', '\x23CF', '\x23D7', '\a', '\x30F', '\x2', '\x2', '\x23D0', 
		'\x23D4', '\a', '\x10A', '\x2', '\x2', '\x23D1', '\x23D2', '\a', '\x336', 
		'\x2', '\x2', '\x23D2', '\x23D3', '\a', '\x320', '\x2', '\x2', '\x23D3', 
		'\x23D5', '\a', '\x337', '\x2', '\x2', '\x23D4', '\x23D1', '\x3', '\x2', 
		'\x2', '\x2', '\x23D4', '\x23D5', '\x3', '\x2', '\x2', '\x2', '\x23D5', 
		'\x23D8', '\x3', '\x2', '\x2', '\x2', '\x23D6', '\x23D8', '\a', '\x19C', 
		'\x2', '\x2', '\x23D7', '\x23D0', '\x3', '\x2', '\x2', '\x2', '\x23D7', 
		'\x23D6', '\x3', '\x2', '\x2', '\x2', '\x23D8', '\x23DC', '\x3', '\x2', 
		'\x2', '\x2', '\x23D9', '\x23DB', '\x5', '\x2FA', '\x17E', '\x2', '\x23DA', 
		'\x23D9', '\x3', '\x2', '\x2', '\x2', '\x23DB', '\x23DE', '\x3', '\x2', 
		'\x2', '\x2', '\x23DC', '\x23DA', '\x3', '\x2', '\x2', '\x2', '\x23DC', 
		'\x23DD', '\x3', '\x2', '\x2', '\x2', '\x23DD', '\x23E9', '\x3', '\x2', 
		'\x2', '\x2', '\x23DE', '\x23DC', '\x3', '\x2', '\x2', '\x2', '\x23DF', 
		'\x23E7', '\a', '\x338', '\x2', '\x2', '\x23E0', '\x23E8', '\a', '\x310', 
		'\x2', '\x2', '\x23E1', '\x23E5', '\a', '\x312', '\x2', '\x2', '\x23E2', 
		'\x23E3', '\a', '\x336', '\x2', '\x2', '\x23E3', '\x23E4', '\a', '\x320', 
		'\x2', '\x2', '\x23E4', '\x23E6', '\a', '\x337', '\x2', '\x2', '\x23E5', 
		'\x23E2', '\x3', '\x2', '\x2', '\x2', '\x23E5', '\x23E6', '\x3', '\x2', 
		'\x2', '\x2', '\x23E6', '\x23E8', '\x3', '\x2', '\x2', '\x2', '\x23E7', 
		'\x23E0', '\x3', '\x2', '\x2', '\x2', '\x23E7', '\x23E1', '\x3', '\x2', 
		'\x2', '\x2', '\x23E8', '\x23EA', '\x3', '\x2', '\x2', '\x2', '\x23E9', 
		'\x23DF', '\x3', '\x2', '\x2', '\x2', '\x23E9', '\x23EA', '\x3', '\x2', 
		'\x2', '\x2', '\x23EA', '\x23EE', '\x3', '\x2', '\x2', '\x2', '\x23EB', 
		'\x23EC', '\a', '\x338', '\x2', '\x2', '\x23EC', '\x23ED', '\a', '\x1E9', 
		'\x2', '\x2', '\x23ED', '\x23EF', '\t', 's', '\x2', '\x2', '\x23EE', '\x23EB', 
		'\x3', '\x2', '\x2', '\x2', '\x23EE', '\x23EF', '\x3', '\x2', '\x2', '\x2', 
		'\x23EF', '\x2425', '\x3', '\x2', '\x2', '\x2', '\x23F0', '\x23F1', '\a', 
		'\x86', '\x2', '\x2', '\x23F1', '\x23F2', '\a', '\x30F', '\x2', '\x2', 
		'\x23F2', '\x23F6', '\a', '\x1F7', '\x2', '\x2', '\x23F3', '\x23F5', '\x5', 
		'\x2FA', '\x17E', '\x2', '\x23F4', '\x23F3', '\x3', '\x2', '\x2', '\x2', 
		'\x23F5', '\x23F8', '\x3', '\x2', '\x2', '\x2', '\x23F6', '\x23F4', '\x3', 
		'\x2', '\x2', '\x2', '\x23F6', '\x23F7', '\x3', '\x2', '\x2', '\x2', '\x23F7', 
		'\x23FB', '\x3', '\x2', '\x2', '\x2', '\x23F8', '\x23F6', '\x3', '\x2', 
		'\x2', '\x2', '\x23F9', '\x23FA', '\a', '\x338', '\x2', '\x2', '\x23FA', 
		'\x23FC', '\a', '\x310', '\x2', '\x2', '\x23FB', '\x23F9', '\x3', '\x2', 
		'\x2', '\x2', '\x23FB', '\x23FC', '\x3', '\x2', '\x2', '\x2', '\x23FC', 
		'\x2425', '\x3', '\x2', '\x2', '\x2', '\x23FD', '\x23FE', '\a', '\x86', 
		'\x2', '\x2', '\x23FE', '\x23FF', '\a', '\x30F', '\x2', '\x2', '\x23FF', 
		'\x2403', '\a', '\x284', '\x2', '\x2', '\x2400', '\x2401', '\a', '\x336', 
		'\x2', '\x2', '\x2401', '\x2402', '\a', '\x320', '\x2', '\x2', '\x2402', 
		'\x2404', '\a', '\x337', '\x2', '\x2', '\x2403', '\x2400', '\x3', '\x2', 
		'\x2', '\x2', '\x2403', '\x2404', '\x3', '\x2', '\x2', '\x2', '\x2404', 
		'\x2408', '\x3', '\x2', '\x2', '\x2', '\x2405', '\x2407', '\x5', '\x2FA', 
		'\x17E', '\x2', '\x2406', '\x2405', '\x3', '\x2', '\x2', '\x2', '\x2407', 
		'\x240A', '\x3', '\x2', '\x2', '\x2', '\x2408', '\x2406', '\x3', '\x2', 
		'\x2', '\x2', '\x2408', '\x2409', '\x3', '\x2', '\x2', '\x2', '\x2409', 
		'\x240E', '\x3', '\x2', '\x2', '\x2', '\x240A', '\x2408', '\x3', '\x2', 
		'\x2', '\x2', '\x240B', '\x240C', '\a', '\x338', '\x2', '\x2', '\x240C', 
		'\x240D', '\a', '\x1E9', '\x2', '\x2', '\x240D', '\x240F', '\t', 's', 
		'\x2', '\x2', '\x240E', '\x240B', '\x3', '\x2', '\x2', '\x2', '\x240E', 
		'\x240F', '\x3', '\x2', '\x2', '\x2', '\x240F', '\x2425', '\x3', '\x2', 
		'\x2', '\x2', '\x2410', '\x2411', '\a', '\x86', '\x2', '\x2', '\x2411', 
		'\x2412', '\a', '\x229', '\x2', '\x2', '\x2412', '\x241A', '\t', 't', 
		'\x2', '\x2', '\x2413', '\x2414', '\a', '\x338', '\x2', '\x2', '\x2414', 
		'\x2418', '\a', '\x2B8', '\x2', '\x2', '\x2415', '\x2416', '\a', '\x336', 
		'\x2', '\x2', '\x2416', '\x2417', '\a', '\x320', '\x2', '\x2', '\x2417', 
		'\x2419', '\a', '\x337', '\x2', '\x2', '\x2418', '\x2415', '\x3', '\x2', 
		'\x2', '\x2', '\x2418', '\x2419', '\x3', '\x2', '\x2', '\x2', '\x2419', 
		'\x241B', '\x3', '\x2', '\x2', '\x2', '\x241A', '\x2413', '\x3', '\x2', 
		'\x2', '\x2', '\x241A', '\x241B', '\x3', '\x2', '\x2', '\x2', '\x241B', 
		'\x241E', '\x3', '\x2', '\x2', '\x2', '\x241C', '\x241D', '\a', '\x338', 
		'\x2', '\x2', '\x241D', '\x241F', '\a', '\x220', '\x2', '\x2', '\x241E', 
		'\x241C', '\x3', '\x2', '\x2', '\x2', '\x241E', '\x241F', '\x3', '\x2', 
		'\x2', '\x2', '\x241F', '\x2422', '\x3', '\x2', '\x2', '\x2', '\x2420', 
		'\x2421', '\a', '\x338', '\x2', '\x2', '\x2421', '\x2423', '\a', '\x30C', 
		'\x2', '\x2', '\x2422', '\x2420', '\x3', '\x2', '\x2', '\x2', '\x2422', 
		'\x2423', '\x3', '\x2', '\x2', '\x2', '\x2423', '\x2425', '\x3', '\x2', 
		'\x2', '\x2', '\x2424', '\x23CC', '\x3', '\x2', '\x2', '\x2', '\x2424', 
		'\x23CE', '\x3', '\x2', '\x2', '\x2', '\x2424', '\x23F0', '\x3', '\x2', 
		'\x2', '\x2', '\x2424', '\x23FD', '\x3', '\x2', '\x2', '\x2', '\x2424', 
		'\x2410', '\x3', '\x2', '\x2', '\x2', '\x2425', '\x2F9', '\x3', '\x2', 
		'\x2', '\x2', '\x2426', '\x2427', '\a', '\x338', '\x2', '\x2', '\x2427', 
		'\x2428', '\t', 'u', '\x2', '\x2', '\x2428', '\x2FB', '\x3', '\x2', '\x2', 
		'\x2', '\x2429', '\x242B', '\x5', '\x2CC', '\x167', '\x2', '\x242A', '\x242C', 
		'\t', 'v', '\x2', '\x2', '\x242B', '\x242A', '\x3', '\x2', '\x2', '\x2', 
		'\x242B', '\x242C', '\x3', '\x2', '\x2', '\x2', '\x242C', '\x2FD', '\x3', 
		'\x2', '\x2', '\x2', '\x242D', '\x242E', '\x5', '\x2CC', '\x167', '\x2', 
		'\x242E', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x242F', '\x2430', '\a', 
		'\xED', '\x2', '\x2', '\x2430', '\x2431', '\a', '\x336', '\x2', '\x2', 
		'\x2431', '\x2436', '\x5', '\x302', '\x182', '\x2', '\x2432', '\x2433', 
		'\a', '\x338', '\x2', '\x2', '\x2433', '\x2435', '\x5', '\x302', '\x182', 
		'\x2', '\x2434', '\x2432', '\x3', '\x2', '\x2', '\x2', '\x2435', '\x2438', 
		'\x3', '\x2', '\x2', '\x2', '\x2436', '\x2434', '\x3', '\x2', '\x2', '\x2', 
		'\x2436', '\x2437', '\x3', '\x2', '\x2', '\x2', '\x2437', '\x2439', '\x3', 
		'\x2', '\x2', '\x2', '\x2438', '\x2436', '\x3', '\x2', '\x2', '\x2', '\x2439', 
		'\x243A', '\a', '\x337', '\x2', '\x2', '\x243A', '\x301', '\x3', '\x2', 
		'\x2', '\x2', '\x243B', '\x243C', '\a', '\x1FC', '\x2', '\x2', '\x243C', 
		'\x2469', '\a', '\x31C', '\x2', '\x2', '\x243D', '\x243E', '\t', 'w', 
		'\x2', '\x2', '\x243E', '\x2469', '\a', '\x93', '\x2', '\x2', '\x243F', 
		'\x2440', '\t', 'x', '\x2', '\x2', '\x2440', '\x2469', '\a', '\x168', 
		'\x2', '\x2', '\x2441', '\x2442', '\t', 'y', '\x2', '\x2', '\x2442', '\x2469', 
		'\a', '\xAB', '\x2', '\x2', '\x2443', '\x2444', '\a', '\x1F5', '\x2', 
		'\x2', '\x2444', '\x2469', '\a', '\x309', '\x2', '\x2', '\x2445', '\x2446', 
		'\a', '\x206', '\x2', '\x2', '\x2446', '\x2469', '\a', '\xEF', '\x2', 
		'\x2', '\x2447', '\x2469', '\a', '\x21C', '\x2', '\x2', '\x2448', '\x2449', 
		'\a', '\x22B', '\x2', '\x2', '\x2449', '\x2469', '\a', '\xFC', '\x2', 
		'\x2', '\x244A', '\x244B', '\a', '\x22C', '\x2', '\x2', '\x244B', '\x2469', 
		'\a', '\xFC', '\x2', '\x2', '\x244C', '\x244D', '\a', '\x24C', '\x2', 
		'\x2', '\x244D', '\x2469', '\a', '\x31C', '\x2', '\x2', '\x244E', '\x244F', 
		'\a', '\x24D', '\x2', '\x2', '\x244F', '\x2469', '\a', '\x31C', '\x2', 
		'\x2', '\x2450', '\x2451', '\a', '\x27B', '\x2', '\x2', '\x2451', '\x2452', 
		'\a', '\x86', '\x2', '\x2', '\x2452', '\x2453', '\a', '\x336', '\x2', 
		'\x2', '\x2453', '\x2458', '\x5', '\x304', '\x183', '\x2', '\x2454', '\x2455', 
		'\a', '\x338', '\x2', '\x2', '\x2455', '\x2457', '\x5', '\x304', '\x183', 
		'\x2', '\x2456', '\x2454', '\x3', '\x2', '\x2', '\x2', '\x2457', '\x245A', 
		'\x3', '\x2', '\x2', '\x2', '\x2458', '\x2456', '\x3', '\x2', '\x2', '\x2', 
		'\x2458', '\x2459', '\x3', '\x2', '\x2', '\x2', '\x2459', '\x245B', '\x3', 
		'\x2', '\x2', '\x2', '\x245A', '\x2458', '\x3', '\x2', '\x2', '\x2', '\x245B', 
		'\x245C', '\a', '\x337', '\x2', '\x2', '\x245C', '\x2469', '\x3', '\x2', 
		'\x2', '\x2', '\x245D', '\x245E', '\a', '\x27B', '\x2', '\x2', '\x245E', 
		'\x245F', '\a', '\x86', '\x2', '\x2', '\x245F', '\x2469', '\a', '\x300', 
		'\x2', '\x2', '\x2460', '\x2461', '\a', '\x280', '\x2', '\x2', '\x2461', 
		'\x2469', '\t', 'M', '\x2', '\x2', '\x2462', '\x2469', '\a', '\x2A4', 
		'\x2', '\x2', '\x2463', '\x2464', '\a', '\x2B7', '\x2', '\x2', '\x2464', 
		'\x2469', '\a', '\xFC', '\x2', '\x2', '\x2465', '\x2466', '\a', '\x170', 
		'\x2', '\x2', '\x2466', '\x2467', '\a', '\xFC', '\x2', '\x2', '\x2467', 
		'\x2469', '\a', '\x320', '\x2', '\x2', '\x2468', '\x243B', '\x3', '\x2', 
		'\x2', '\x2', '\x2468', '\x243D', '\x3', '\x2', '\x2', '\x2', '\x2468', 
		'\x243F', '\x3', '\x2', '\x2', '\x2', '\x2468', '\x2441', '\x3', '\x2', 
		'\x2', '\x2', '\x2468', '\x2443', '\x3', '\x2', '\x2', '\x2', '\x2468', 
		'\x2445', '\x3', '\x2', '\x2', '\x2', '\x2468', '\x2447', '\x3', '\x2', 
		'\x2', '\x2', '\x2468', '\x2448', '\x3', '\x2', '\x2', '\x2', '\x2468', 
		'\x244A', '\x3', '\x2', '\x2', '\x2', '\x2468', '\x244C', '\x3', '\x2', 
		'\x2', '\x2', '\x2468', '\x244E', '\x3', '\x2', '\x2', '\x2', '\x2468', 
		'\x2450', '\x3', '\x2', '\x2', '\x2', '\x2468', '\x245D', '\x3', '\x2', 
		'\x2', '\x2', '\x2468', '\x2460', '\x3', '\x2', '\x2', '\x2', '\x2468', 
		'\x2462', '\x3', '\x2', '\x2', '\x2', '\x2468', '\x2463', '\x3', '\x2', 
		'\x2', '\x2', '\x2468', '\x2465', '\x3', '\x2', '\x2', '\x2', '\x2469', 
		'\x303', '\x3', '\x2', '\x2', '\x2', '\x246A', '\x2471', '\a', '\x31B', 
		'\x2', '\x2', '\x246B', '\x2472', '\a', '\x300', '\x2', '\x2', '\x246C', 
		'\x246F', '\a', '\x324', '\x2', '\x2', '\x246D', '\x2470', '\x5', '\x3B6', 
		'\x1DC', '\x2', '\x246E', '\x2470', '\a', '\xE0', '\x2', '\x2', '\x246F', 
		'\x246D', '\x3', '\x2', '\x2', '\x2', '\x246F', '\x246E', '\x3', '\x2', 
		'\x2', '\x2', '\x2470', '\x2472', '\x3', '\x2', '\x2', '\x2', '\x2471', 
		'\x246B', '\x3', '\x2', '\x2', '\x2', '\x2471', '\x246C', '\x3', '\x2', 
		'\x2', '\x2', '\x2472', '\x305', '\x3', '\x2', '\x2', '\x2', '\x2473', 
		'\x2478', '\x5', '\x312', '\x18A', '\x2', '\x2474', '\x2475', '\a', '\x338', 
		'\x2', '\x2', '\x2475', '\x2477', '\x5', '\x312', '\x18A', '\x2', '\x2476', 
		'\x2474', '\x3', '\x2', '\x2', '\x2', '\x2477', '\x247A', '\x3', '\x2', 
		'\x2', '\x2', '\x2478', '\x2476', '\x3', '\x2', '\x2', '\x2', '\x2478', 
		'\x2479', '\x3', '\x2', '\x2', '\x2', '\x2479', '\x307', '\x3', '\x2', 
		'\x2', '\x2', '\x247A', '\x2478', '\x3', '\x2', '\x2', '\x2', '\x247B', 
		'\x247C', '\a', '\x336', '\x2', '\x2', '\x247C', '\x2481', '\x5', '\x276', 
		'\x13C', '\x2', '\x247D', '\x247E', '\a', '\x338', '\x2', '\x2', '\x247E', 
		'\x2480', '\x5', '\x276', '\x13C', '\x2', '\x247F', '\x247D', '\x3', '\x2', 
		'\x2', '\x2', '\x2480', '\x2483', '\x3', '\x2', '\x2', '\x2', '\x2481', 
		'\x247F', '\x3', '\x2', '\x2', '\x2', '\x2481', '\x2482', '\x3', '\x2', 
		'\x2', '\x2', '\x2482', '\x2484', '\x3', '\x2', '\x2', '\x2', '\x2483', 
		'\x2481', '\x3', '\x2', '\x2', '\x2', '\x2484', '\x2485', '\a', '\x337', 
		'\x2', '\x2', '\x2485', '\x309', '\x3', '\x2', '\x2', '\x2', '\x2486', 
		'\x248C', '\a', '\x33B', '\x2', '\x2', '\x2487', '\x2488', '\x5', '\x382', 
		'\x1C2', '\x2', '\x2488', '\x2489', '\a', '\x331', '\x2', '\x2', '\x2489', 
		'\x248A', '\x5', '\x30A', '\x186', '\x2', '\x248A', '\x248C', '\x3', '\x2', 
		'\x2', '\x2', '\x248B', '\x2486', '\x3', '\x2', '\x2', '\x2', '\x248B', 
		'\x2487', '\x3', '\x2', '\x2', '\x2', '\x248C', '\x30B', '\x3', '\x2', 
		'\x2', '\x2', '\x248D', '\x248E', '\x5', '\x382', '\x1C2', '\x2', '\x248E', 
		'\x248F', '\a', '\x331', '\x2', '\x2', '\x248F', '\x2491', '\x3', '\x2', 
		'\x2', '\x2', '\x2490', '\x248D', '\x3', '\x2', '\x2', '\x2', '\x2490', 
		'\x2491', '\x3', '\x2', '\x2', '\x2', '\x2491', '\x2497', '\x3', '\x2', 
		'\x2', '\x2', '\x2492', '\x2498', '\x5', '\x3BA', '\x1DE', '\x2', '\x2493', 
		'\x2494', '\a', '\x335', '\x2', '\x2', '\x2494', '\x2498', '\a', '\x97', 
		'\x2', '\x2', '\x2495', '\x2496', '\a', '\x335', '\x2', '\x2', '\x2496', 
		'\x2498', '\a', '\x2BC', '\x2', '\x2', '\x2497', '\x2492', '\x3', '\x2', 
		'\x2', '\x2', '\x2497', '\x2493', '\x3', '\x2', '\x2', '\x2', '\x2497', 
		'\x2495', '\x3', '\x2', '\x2', '\x2', '\x2498', '\x249A', '\x3', '\x2', 
		'\x2', '\x2', '\x2499', '\x249B', '\x5', '\x346', '\x1A4', '\x2', '\x249A', 
		'\x2499', '\x3', '\x2', '\x2', '\x2', '\x249A', '\x249B', '\x3', '\x2', 
		'\x2', '\x2', '\x249B', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x249C', 
		'\x249D', '\x5', '\x3BA', '\x1DE', '\x2', '\x249D', '\x249E', '\a', '\x331', 
		'\x2', '\x2', '\x249E', '\x249F', '\x5', '\x3BA', '\x1DE', '\x2', '\x249F', 
		'\x24A1', '\x5', '\x308', '\x185', '\x2', '\x24A0', '\x24A2', '\x5', '\x346', 
		'\x1A4', '\x2', '\x24A1', '\x24A0', '\x3', '\x2', '\x2', '\x2', '\x24A1', 
		'\x24A2', '\x3', '\x2', '\x2', '\x2', '\x24A2', '\x24AE', '\x3', '\x2', 
		'\x2', '\x2', '\x24A3', '\x24A4', '\x5', '\x3BA', '\x1DE', '\x2', '\x24A4', 
		'\x24A5', '\a', '\x33A', '\x2', '\x2', '\x24A5', '\x24A6', '\a', '\x33A', 
		'\x2', '\x2', '\x24A6', '\x24A8', '\x5', '\x3BA', '\x1DE', '\x2', '\x24A7', 
		'\x24A9', '\x5', '\x308', '\x185', '\x2', '\x24A8', '\x24A7', '\x3', '\x2', 
		'\x2', '\x2', '\x24A8', '\x24A9', '\x3', '\x2', '\x2', '\x2', '\x24A9', 
		'\x24AB', '\x3', '\x2', '\x2', '\x2', '\x24AA', '\x24AC', '\x5', '\x346', 
		'\x1A4', '\x2', '\x24AB', '\x24AA', '\x3', '\x2', '\x2', '\x2', '\x24AB', 
		'\x24AC', '\x3', '\x2', '\x2', '\x2', '\x24AC', '\x24AE', '\x3', '\x2', 
		'\x2', '\x2', '\x24AD', '\x249C', '\x3', '\x2', '\x2', '\x2', '\x24AD', 
		'\x24A3', '\x3', '\x2', '\x2', '\x2', '\x24AE', '\x30F', '\x3', '\x2', 
		'\x2', '\x2', '\x24AF', '\x24B0', '\x5', '\x356', '\x1AC', '\x2', '\x24B0', 
		'\x24B1', '\a', '\x324', '\x2', '\x2', '\x24B1', '\x24B2', '\x5', '\x2CC', 
		'\x167', '\x2', '\x24B2', '\x24B8', '\x3', '\x2', '\x2', '\x2', '\x24B3', 
		'\x24B5', '\x5', '\x2CC', '\x167', '\x2', '\x24B4', '\x24B6', '\x5', '\x346', 
		'\x1A4', '\x2', '\x24B5', '\x24B4', '\x3', '\x2', '\x2', '\x2', '\x24B5', 
		'\x24B6', '\x3', '\x2', '\x2', '\x2', '\x24B6', '\x24B8', '\x3', '\x2', 
		'\x2', '\x2', '\x24B7', '\x24AF', '\x3', '\x2', '\x2', '\x2', '\x24B7', 
		'\x24B3', '\x3', '\x2', '\x2', '\x2', '\x24B8', '\x311', '\x3', '\x2', 
		'\x2', '\x2', '\x24B9', '\x24BE', '\x5', '\x30A', '\x186', '\x2', '\x24BA', 
		'\x24BE', '\x5', '\x30C', '\x187', '\x2', '\x24BB', '\x24BE', '\x5', '\x30E', 
		'\x188', '\x2', '\x24BC', '\x24BE', '\x5', '\x310', '\x189', '\x2', '\x24BD', 
		'\x24B9', '\x3', '\x2', '\x2', '\x2', '\x24BD', '\x24BA', '\x3', '\x2', 
		'\x2', '\x2', '\x24BD', '\x24BB', '\x3', '\x2', '\x2', '\x2', '\x24BD', 
		'\x24BC', '\x3', '\x2', '\x2', '\x2', '\x24BE', '\x313', '\x3', '\x2', 
		'\x2', '\x2', '\x24BF', '\x24C4', '\x5', '\x316', '\x18C', '\x2', '\x24C0', 
		'\x24C1', '\a', '\x338', '\x2', '\x2', '\x24C1', '\x24C3', '\x5', '\x316', 
		'\x18C', '\x2', '\x24C2', '\x24C0', '\x3', '\x2', '\x2', '\x2', '\x24C3', 
		'\x24C6', '\x3', '\x2', '\x2', '\x2', '\x24C4', '\x24C2', '\x3', '\x2', 
		'\x2', '\x2', '\x24C4', '\x24C5', '\x3', '\x2', '\x2', '\x2', '\x24C5', 
		'\x315', '\x3', '\x2', '\x2', '\x2', '\x24C6', '\x24C4', '\x3', '\x2', 
		'\x2', '\x2', '\x24C7', '\x24CD', '\x5', '\x318', '\x18D', '\x2', '\x24C8', 
		'\x24C9', '\a', '\x336', '\x2', '\x2', '\x24C9', '\x24CA', '\x5', '\x318', 
		'\x18D', '\x2', '\x24CA', '\x24CB', '\a', '\x337', '\x2', '\x2', '\x24CB', 
		'\x24CD', '\x3', '\x2', '\x2', '\x2', '\x24CC', '\x24C7', '\x3', '\x2', 
		'\x2', '\x2', '\x24CC', '\x24C8', '\x3', '\x2', '\x2', '\x2', '\x24CD', 
		'\x317', '\x3', '\x2', '\x2', '\x2', '\x24CE', '\x24D2', '\x5', '\x31A', 
		'\x18E', '\x2', '\x24CF', '\x24D1', '\x5', '\x324', '\x193', '\x2', '\x24D0', 
		'\x24CF', '\x3', '\x2', '\x2', '\x2', '\x24D1', '\x24D4', '\x3', '\x2', 
		'\x2', '\x2', '\x24D2', '\x24D0', '\x3', '\x2', '\x2', '\x2', '\x24D2', 
		'\x24D3', '\x3', '\x2', '\x2', '\x2', '\x24D3', '\x319', '\x3', '\x2', 
		'\x2', '\x2', '\x24D4', '\x24D2', '\x3', '\x2', '\x2', '\x2', '\x24D5', 
		'\x24D7', '\x5', '\x32C', '\x197', '\x2', '\x24D6', '\x24D8', '\x5', '\x348', 
		'\x1A5', '\x2', '\x24D7', '\x24D6', '\x3', '\x2', '\x2', '\x2', '\x24D7', 
		'\x24D8', '\x3', '\x2', '\x2', '\x2', '\x24D8', '\x2504', '\x3', '\x2', 
		'\x2', '\x2', '\x24D9', '\x24DB', '\x5', '\x380', '\x1C1', '\x2', '\x24DA', 
		'\x24DC', '\x5', '\x348', '\x1A5', '\x2', '\x24DB', '\x24DA', '\x3', '\x2', 
		'\x2', '\x2', '\x24DB', '\x24DC', '\x3', '\x2', '\x2', '\x2', '\x24DC', 
		'\x2504', '\x3', '\x2', '\x2', '\x2', '\x24DD', '\x24DF', '\x5', '\x32E', 
		'\x198', '\x2', '\x24DE', '\x24E0', '\x5', '\x348', '\x1A5', '\x2', '\x24DF', 
		'\x24DE', '\x3', '\x2', '\x2', '\x2', '\x24DF', '\x24E0', '\x3', '\x2', 
		'\x2', '\x2', '\x24E0', '\x2504', '\x3', '\x2', '\x2', '\x2', '\x24E1', 
		'\x24E6', '\x5', '\x332', '\x19A', '\x2', '\x24E2', '\x24E4', '\x5', '\x348', 
		'\x1A5', '\x2', '\x24E3', '\x24E5', '\x5', '\x354', '\x1AB', '\x2', '\x24E4', 
		'\x24E3', '\x3', '\x2', '\x2', '\x2', '\x24E4', '\x24E5', '\x3', '\x2', 
		'\x2', '\x2', '\x24E5', '\x24E7', '\x3', '\x2', '\x2', '\x2', '\x24E6', 
		'\x24E2', '\x3', '\x2', '\x2', '\x2', '\x24E6', '\x24E7', '\x3', '\x2', 
		'\x2', '\x2', '\x24E7', '\x2504', '\x3', '\x2', '\x2', '\x2', '\x24E8', 
		'\x24E9', '\x5', '\x322', '\x192', '\x2', '\x24E9', '\x24EA', '\x5', '\x348', 
		'\x1A5', '\x2', '\x24EA', '\x2504', '\x3', '\x2', '\x2', '\x2', '\x24EB', 
		'\x24ED', '\x5', '\x334', '\x19B', '\x2', '\x24EC', '\x24EE', '\x5', '\x348', 
		'\x1A5', '\x2', '\x24ED', '\x24EC', '\x3', '\x2', '\x2', '\x2', '\x24ED', 
		'\x24EE', '\x3', '\x2', '\x2', '\x2', '\x24EE', '\x2504', '\x3', '\x2', 
		'\x2', '\x2', '\x24EF', '\x24F1', '\a', '\x31B', '\x2', '\x2', '\x24F0', 
		'\x24F2', '\x5', '\x348', '\x1A5', '\x2', '\x24F1', '\x24F0', '\x3', '\x2', 
		'\x2', '\x2', '\x24F1', '\x24F2', '\x3', '\x2', '\x2', '\x2', '\x24F2', 
		'\x2504', '\x3', '\x2', '\x2', '\x2', '\x24F3', '\x24F4', '\a', '\x31B', 
		'\x2', '\x2', '\x24F4', '\x24F5', '\a', '\x331', '\x2', '\x2', '\x24F5', 
		'\x24FA', '\x5', '\x334', '\x19B', '\x2', '\x24F6', '\x24F8', '\x5', '\x348', 
		'\x1A5', '\x2', '\x24F7', '\x24F9', '\x5', '\x354', '\x1AB', '\x2', '\x24F8', 
		'\x24F7', '\x3', '\x2', '\x2', '\x2', '\x24F8', '\x24F9', '\x3', '\x2', 
		'\x2', '\x2', '\x24F9', '\x24FB', '\x3', '\x2', '\x2', '\x2', '\x24FA', 
		'\x24F6', '\x3', '\x2', '\x2', '\x2', '\x24FA', '\x24FB', '\x3', '\x2', 
		'\x2', '\x2', '\x24FB', '\x2504', '\x3', '\x2', '\x2', '\x2', '\x24FC', 
		'\x2504', '\x5', '\x31C', '\x18F', '\x2', '\x24FD', '\x24FE', '\a', '\x33A', 
		'\x2', '\x2', '\x24FE', '\x24FF', '\a', '\x33A', '\x2', '\x2', '\x24FF', 
		'\x2501', '\x5', '\x334', '\x19B', '\x2', '\x2500', '\x2502', '\x5', '\x348', 
		'\x1A5', '\x2', '\x2501', '\x2500', '\x3', '\x2', '\x2', '\x2', '\x2501', 
		'\x2502', '\x3', '\x2', '\x2', '\x2', '\x2502', '\x2504', '\x3', '\x2', 
		'\x2', '\x2', '\x2503', '\x24D5', '\x3', '\x2', '\x2', '\x2', '\x2503', 
		'\x24D9', '\x3', '\x2', '\x2', '\x2', '\x2503', '\x24DD', '\x3', '\x2', 
		'\x2', '\x2', '\x2503', '\x24E1', '\x3', '\x2', '\x2', '\x2', '\x2503', 
		'\x24E8', '\x3', '\x2', '\x2', '\x2', '\x2503', '\x24EB', '\x3', '\x2', 
		'\x2', '\x2', '\x2503', '\x24EF', '\x3', '\x2', '\x2', '\x2', '\x2503', 
		'\x24F3', '\x3', '\x2', '\x2', '\x2', '\x2503', '\x24FC', '\x3', '\x2', 
		'\x2', '\x2', '\x2503', '\x24FD', '\x3', '\x2', '\x2', '\x2', '\x2504', 
		'\x31B', '\x3', '\x2', '\x2', '\x2', '\x2505', '\x2506', '\a', '\xEC', 
		'\x2', '\x2', '\x2506', '\x2507', '\a', '\x336', '\x2', '\x2', '\x2507', 
		'\x2508', '\x5', '\x2CC', '\x167', '\x2', '\x2508', '\x2509', '\a', '\x338', 
		'\x2', '\x2', '\x2509', '\x250C', '\x5', '\x2CC', '\x167', '\x2', '\x250A', 
		'\x250B', '\a', '\x338', '\x2', '\x2', '\x250B', '\x250D', '\x5', '\x2CC', 
		'\x167', '\x2', '\x250C', '\x250A', '\x3', '\x2', '\x2', '\x2', '\x250C', 
		'\x250D', '\x3', '\x2', '\x2', '\x2', '\x250D', '\x250E', '\x3', '\x2', 
		'\x2', '\x2', '\x250E', '\x2514', '\a', '\x337', '\x2', '\x2', '\x250F', 
		'\x2510', '\a', '\x17D', '\x2', '\x2', '\x2510', '\x2511', '\a', '\x336', 
		'\x2', '\x2', '\x2511', '\x2512', '\x5', '\x31E', '\x190', '\x2', '\x2512', 
		'\x2513', '\a', '\x337', '\x2', '\x2', '\x2513', '\x2515', '\x3', '\x2', 
		'\x2', '\x2', '\x2514', '\x250F', '\x3', '\x2', '\x2', '\x2', '\x2514', 
		'\x2515', '\x3', '\x2', '\x2', '\x2', '\x2515', '\x31D', '\x3', '\x2', 
		'\x2', '\x2', '\x2516', '\x251B', '\x5', '\x320', '\x191', '\x2', '\x2517', 
		'\x2518', '\a', '\x338', '\x2', '\x2', '\x2518', '\x251A', '\x5', '\x320', 
		'\x191', '\x2', '\x2519', '\x2517', '\x3', '\x2', '\x2', '\x2', '\x251A', 
		'\x251D', '\x3', '\x2', '\x2', '\x2', '\x251B', '\x2519', '\x3', '\x2', 
		'\x2', '\x2', '\x251B', '\x251C', '\x3', '\x2', '\x2', '\x2', '\x251C', 
		'\x31F', '\x3', '\x2', '\x2', '\x2', '\x251D', '\x251B', '\x3', '\x2', 
		'\x2', '\x2', '\x251E', '\x251F', '\a', '\x31D', '\x2', '\x2', '\x251F', 
		'\x2521', '\x5', '\x3B2', '\x1DA', '\x2', '\x2520', '\x2522', '\a', '\x320', 
		'\x2', '\x2', '\x2521', '\x2520', '\x3', '\x2', '\x2', '\x2', '\x2521', 
		'\x2522', '\x3', '\x2', '\x2', '\x2', '\x2522', '\x321', '\x3', '\x2', 
		'\x2', '\x2', '\x2523', '\x2524', '\a', ',', '\x2', '\x2', '\x2524', '\x2525', 
		'\a', '\x336', '\x2', '\x2', '\x2525', '\x2526', '\a', '-', '\x2', '\x2', 
		'\x2526', '\x2527', '\x5', '\x382', '\x1C2', '\x2', '\x2527', '\x2528', 
		'\a', '\x338', '\x2', '\x2', '\x2528', '\x2529', '\t', 'z', '\x2', '\x2', 
		'\x2529', '\x252A', '\a', '\x337', '\x2', '\x2', '\x252A', '\x323', '\x3', 
		'\x2', '\x2', '\x2', '\x252B', '\x252D', '\a', '\xA2', '\x2', '\x2', '\x252C', 
		'\x252B', '\x3', '\x2', '\x2', '\x2', '\x252C', '\x252D', '\x3', '\x2', 
		'\x2', '\x2', '\x252D', '\x2533', '\x3', '\x2', '\x2', '\x2', '\x252E', 
		'\x2530', '\t', '{', '\x2', '\x2', '\x252F', '\x2531', '\a', '\xF0', '\x2', 
		'\x2', '\x2530', '\x252F', '\x3', '\x2', '\x2', '\x2', '\x2530', '\x2531', 
		'\x3', '\x2', '\x2', '\x2', '\x2531', '\x2533', '\x3', '\x2', '\x2', '\x2', 
		'\x2532', '\x252C', '\x3', '\x2', '\x2', '\x2', '\x2532', '\x252E', '\x3', 
		'\x2', '\x2', '\x2', '\x2533', '\x2535', '\x3', '\x2', '\x2', '\x2', '\x2534', 
		'\x2536', '\t', '|', '\x2', '\x2', '\x2535', '\x2534', '\x3', '\x2', '\x2', 
		'\x2', '\x2535', '\x2536', '\x3', '\x2', '\x2', '\x2', '\x2536', '\x2537', 
		'\x3', '\x2', '\x2', '\x2', '\x2537', '\x2538', '\a', '\xAB', '\x2', '\x2', 
		'\x2538', '\x2539', '\x5', '\x316', '\x18C', '\x2', '\x2539', '\x253A', 
		'\a', '\xE6', '\x2', '\x2', '\x253A', '\x253B', '\x5', '\x2E2', '\x172', 
		'\x2', '\x253B', '\x254E', '\x3', '\x2', '\x2', '\x2', '\x253C', '\x253D', 
		'\a', 'J', '\x2', '\x2', '\x253D', '\x253E', '\a', '\xAB', '\x2', '\x2', 
		'\x253E', '\x254E', '\x5', '\x316', '\x18C', '\x2', '\x253F', '\x2540', 
		'\a', 'J', '\x2', '\x2', '\x2540', '\x2541', '\a', '\x197', '\x2', '\x2', 
		'\x2541', '\x254E', '\x5', '\x316', '\x18C', '\x2', '\x2542', '\x2543', 
		'\a', '\xF0', '\x2', '\x2', '\x2543', '\x2544', '\a', '\x197', '\x2', 
		'\x2', '\x2544', '\x254E', '\x5', '\x316', '\x18C', '\x2', '\x2545', '\x2546', 
		'\a', '\xFB', '\x2', '\x2', '\x2546', '\x2547', '\x5', '\x326', '\x194', 
		'\x2', '\x2547', '\x2548', '\x5', '\x348', '\x1A5', '\x2', '\x2548', '\x254E', 
		'\x3', '\x2', '\x2', '\x2', '\x2549', '\x254A', '\a', '\x16B', '\x2', 
		'\x2', '\x254A', '\x254B', '\x5', '\x328', '\x195', '\x2', '\x254B', '\x254C', 
		'\x5', '\x348', '\x1A5', '\x2', '\x254C', '\x254E', '\x3', '\x2', '\x2', 
		'\x2', '\x254D', '\x2532', '\x3', '\x2', '\x2', '\x2', '\x254D', '\x253C', 
		'\x3', '\x2', '\x2', '\x2', '\x254D', '\x253F', '\x3', '\x2', '\x2', '\x2', 
		'\x254D', '\x2542', '\x3', '\x2', '\x2', '\x2', '\x254D', '\x2545', '\x3', 
		'\x2', '\x2', '\x2', '\x254D', '\x2549', '\x3', '\x2', '\x2', '\x2', '\x254E', 
		'\x325', '\x3', '\x2', '\x2', '\x2', '\x254F', '\x2550', '\a', '\x336', 
		'\x2', '\x2', '\x2550', '\x2551', '\x5', '\x35E', '\x1B0', '\x2', '\x2551', 
		'\x2552', '\a', '\x86', '\x2', '\x2', '\x2552', '\x2553', '\x5', '\x38E', 
		'\x1C8', '\x2', '\x2553', '\x2554', '\a', '\x9C', '\x2', '\x2', '\x2554', 
		'\x2555', '\x5', '\x354', '\x1AB', '\x2', '\x2555', '\x2556', '\a', '\x337', 
		'\x2', '\x2', '\x2556', '\x327', '\x3', '\x2', '\x2', '\x2', '\x2557', 
		'\x2558', '\a', '\x336', '\x2', '\x2', '\x2558', '\x2559', '\x5', '\x2CC', 
		'\x167', '\x2', '\x2559', '\x255A', '\a', '\x86', '\x2', '\x2', '\x255A', 
		'\x255B', '\x5', '\x38E', '\x1C8', '\x2', '\x255B', '\x255C', '\a', '\x9C', 
		'\x2', '\x2', '\x255C', '\x255D', '\a', '\x336', '\x2', '\x2', '\x255D', 
		'\x255E', '\x5', '\x32A', '\x196', '\x2', '\x255E', '\x255F', '\a', '\x337', 
		'\x2', '\x2', '\x255F', '\x2560', '\a', '\x337', '\x2', '\x2', '\x2560', 
		'\x329', '\x3', '\x2', '\x2', '\x2', '\x2561', '\x2566', '\x5', '\x38E', 
		'\x1C8', '\x2', '\x2562', '\x2563', '\a', '\x338', '\x2', '\x2', '\x2563', 
		'\x2565', '\x5', '\x38E', '\x1C8', '\x2', '\x2564', '\x2562', '\x3', '\x2', 
		'\x2', '\x2', '\x2565', '\x2568', '\x3', '\x2', '\x2', '\x2', '\x2566', 
		'\x2564', '\x3', '\x2', '\x2', '\x2', '\x2566', '\x2567', '\x3', '\x2', 
		'\x2', '\x2', '\x2567', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x2568', 
		'\x2566', '\x3', '\x2', '\x2', '\x2', '\x2569', '\x256B', '\x5', '\x382', 
		'\x1C2', '\x2', '\x256A', '\x256C', '\x5', '\x34C', '\x1A7', '\x2', '\x256B', 
		'\x256A', '\x3', '\x2', '\x2', '\x2', '\x256B', '\x256C', '\x3', '\x2', 
		'\x2', '\x2', '\x256C', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x256D', 
		'\x256E', '\a', '\xEB', '\x2', '\x2', '\x256E', '\x256F', '\a', '\x336', 
		'\x2', '\x2', '\x256F', '\x2570', '\a', '\x320', '\x2', '\x2', '\x2570', 
		'\x2571', '\a', '\x338', '\x2', '\x2', '\x2571', '\x2572', '\a', '\x320', 
		'\x2', '\x2', '\x2572', '\x2573', '\a', '\x338', '\x2', '\x2', '\x2573', 
		'\x2574', '\a', '\x320', '\x2', '\x2', '\x2574', '\x2588', '\a', '\x337', 
		'\x2', '\x2', '\x2575', '\x2576', '\a', '\xEB', '\x2', '\x2', '\x2576', 
		'\x2577', '\a', '\x336', '\x2', '\x2', '\x2577', '\x2578', '\a', '%', 
		'\x2', '\x2', '\x2578', '\x2579', '\a', '\x320', '\x2', '\x2', '\x2579', 
		'\x2583', '\a', '\x338', '\x2', '\x2', '\x257A', '\x257F', '\x5', '\x330', 
		'\x199', '\x2', '\x257B', '\x257C', '\a', '\x338', '\x2', '\x2', '\x257C', 
		'\x257E', '\x5', '\x330', '\x199', '\x2', '\x257D', '\x257B', '\x3', '\x2', 
		'\x2', '\x2', '\x257E', '\x2581', '\x3', '\x2', '\x2', '\x2', '\x257F', 
		'\x257D', '\x3', '\x2', '\x2', '\x2', '\x257F', '\x2580', '\x3', '\x2', 
		'\x2', '\x2', '\x2580', '\x2584', '\x3', '\x2', '\x2', '\x2', '\x2581', 
		'\x257F', '\x3', '\x2', '\x2', '\x2', '\x2582', '\x2584', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2583', '\x257A', '\x3', '\x2', '\x2', '\x2', '\x2583', 
		'\x2582', '\x3', '\x2', '\x2', '\x2', '\x2584', '\x2585', '\x3', '\x2', 
		'\x2', '\x2', '\x2585', '\x2586', '\a', '\x337', '\x2', '\x2', '\x2586', 
		'\x2588', '\x3', '\x2', '\x2', '\x2', '\x2587', '\x256D', '\x3', '\x2', 
		'\x2', '\x2', '\x2587', '\x2575', '\x3', '\x2', '\x2', '\x2', '\x2588', 
		'\x32F', '\x3', '\x2', '\x2', '\x2', '\x2589', '\x258A', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x258A', '\x258B', '\a', '\x324', '\x2', '\x2', '\x258B', 
		'\x258C', '\t', '\x18', '\x2', '\x2', '\x258C', '\x331', '\x3', '\x2', 
		'\x2', '\x2', '\x258D', '\x2598', '\x5', '\x2D8', '\x16D', '\x2', '\x258E', 
		'\x258F', '\a', '\x336', '\x2', '\x2', '\x258F', '\x2590', '\x5', '\x2D8', 
		'\x16D', '\x2', '\x2590', '\x2591', '\a', '\x337', '\x2', '\x2', '\x2591', 
		'\x2598', '\x3', '\x2', '\x2', '\x2', '\x2592', '\x2598', '\x5', '\x358', 
		'\x1AD', '\x2', '\x2593', '\x2594', '\a', '\x336', '\x2', '\x2', '\x2594', 
		'\x2595', '\x5', '\x358', '\x1AD', '\x2', '\x2595', '\x2596', '\a', '\x337', 
		'\x2', '\x2', '\x2596', '\x2598', '\x3', '\x2', '\x2', '\x2', '\x2597', 
		'\x258D', '\x3', '\x2', '\x2', '\x2', '\x2597', '\x258E', '\x3', '\x2', 
		'\x2', '\x2', '\x2597', '\x2592', '\x3', '\x2', '\x2', '\x2', '\x2597', 
		'\x2593', '\x3', '\x2', '\x2', '\x2', '\x2598', '\x333', '\x3', '\x2', 
		'\x2', '\x2', '\x2599', '\x261E', '\x5', '\x35C', '\x1AF', '\x2', '\x259A', 
		'\x261E', '\x5', '\x35E', '\x1B0', '\x2', '\x259B', '\x261E', '\x5', '\x360', 
		'\x1B1', '\x2', '\x259C', '\x259D', '\x5', '\x39E', '\x1D0', '\x2', '\x259D', 
		'\x259F', '\a', '\x336', '\x2', '\x2', '\x259E', '\x25A0', '\x5', '\x35A', 
		'\x1AE', '\x2', '\x259F', '\x259E', '\x3', '\x2', '\x2', '\x2', '\x259F', 
		'\x25A0', '\x3', '\x2', '\x2', '\x2', '\x25A0', '\x25A1', '\x3', '\x2', 
		'\x2', '\x2', '\x25A1', '\x25A2', '\a', '\x337', '\x2', '\x2', '\x25A2', 
		'\x261E', '\x3', '\x2', '\x2', '\x2', '\x25A3', '\x25A4', '\a', '\x1A9', 
		'\x2', '\x2', '\x25A4', '\x25A5', '\a', '\x336', '\x2', '\x2', '\x25A5', 
		'\x25A6', '\a', '\x33B', '\x2', '\x2', '\x25A6', '\x261E', '\a', '\x337', 
		'\x2', '\x2', '\x25A7', '\x25A8', '\a', '\x1B1', '\x2', '\x2', '\x25A8', 
		'\x25A9', '\a', '\x336', '\x2', '\x2', '\x25A9', '\x25AA', '\x5', '\x2CC', 
		'\x167', '\x2', '\x25AA', '\x25AB', '\a', '\x10', '\x2', '\x2', '\x25AB', 
		'\x25AC', '\x5', '\x3B2', '\x1DA', '\x2', '\x25AC', '\x25AD', '\a', '\x337', 
		'\x2', '\x2', '\x25AD', '\x261E', '\x3', '\x2', '\x2', '\x2', '\x25AE', 
		'\x25AF', '\a', 'G', '\x2', '\x2', '\x25AF', '\x25B0', '\a', '\x336', 
		'\x2', '\x2', '\x25B0', '\x25B1', '\x5', '\x3B2', '\x1DA', '\x2', '\x25B1', 
		'\x25B2', '\a', '\x338', '\x2', '\x2', '\x25B2', '\x25B5', '\x5', '\x2CC', 
		'\x167', '\x2', '\x25B3', '\x25B4', '\a', '\x338', '\x2', '\x2', '\x25B4', 
		'\x25B6', '\x5', '\x2CC', '\x167', '\x2', '\x25B5', '\x25B3', '\x3', '\x2', 
		'\x2', '\x2', '\x25B5', '\x25B6', '\x3', '\x2', '\x2', '\x2', '\x25B6', 
		'\x25B7', '\x3', '\x2', '\x2', '\x2', '\x25B7', '\x25B8', '\a', '\x337', 
		'\x2', '\x2', '\x25B8', '\x261E', '\x3', '\x2', '\x2', '\x2', '\x25B9', 
		'\x25BA', '\a', '\x1B6', '\x2', '\x2', '\x25BA', '\x25BB', '\a', '\x336', 
		'\x2', '\x2', '\x25BB', '\x25BC', '\a', '\x33B', '\x2', '\x2', '\x25BC', 
		'\x261E', '\a', '\x337', '\x2', '\x2', '\x25BD', '\x25BE', '\a', '\x36', 
		'\x2', '\x2', '\x25BE', '\x25BF', '\a', '\x336', '\x2', '\x2', '\x25BF', 
		'\x25C0', '\x5', '\x35A', '\x1AE', '\x2', '\x25C0', '\x25C1', '\a', '\x337', 
		'\x2', '\x2', '\x25C1', '\x261E', '\x3', '\x2', '\x2', '\x2', '\x25C2', 
		'\x261E', '\a', 'N', '\x2', '\x2', '\x25C3', '\x261E', '\a', 'O', '\x2', 
		'\x2', '\x25C4', '\x25C5', '\a', '\x1CD', '\x2', '\x2', '\x25C5', '\x25C6', 
		'\a', '\x336', '\x2', '\x2', '\x25C6', '\x25C7', '\a', '\x31D', '\x2', 
		'\x2', '\x25C7', '\x25C8', '\a', '\x338', '\x2', '\x2', '\x25C8', '\x25C9', 
		'\x5', '\x2CC', '\x167', '\x2', '\x25C9', '\x25CA', '\a', '\x338', '\x2', 
		'\x2', '\x25CA', '\x25CB', '\x5', '\x2CC', '\x167', '\x2', '\x25CB', '\x25CC', 
		'\a', '\x337', '\x2', '\x2', '\x25CC', '\x261E', '\x3', '\x2', '\x2', 
		'\x2', '\x25CD', '\x25CE', '\a', '\x1CE', '\x2', '\x2', '\x25CE', '\x25CF', 
		'\a', '\x336', '\x2', '\x2', '\x25CF', '\x25D0', '\a', '\x31D', '\x2', 
		'\x2', '\x25D0', '\x25D1', '\a', '\x338', '\x2', '\x2', '\x25D1', '\x25D2', 
		'\x5', '\x2CC', '\x167', '\x2', '\x25D2', '\x25D3', '\a', '\x338', '\x2', 
		'\x2', '\x25D3', '\x25D4', '\x5', '\x2CC', '\x167', '\x2', '\x25D4', '\x25D5', 
		'\a', '\x337', '\x2', '\x2', '\x25D5', '\x261E', '\x3', '\x2', '\x2', 
		'\x2', '\x25D6', '\x25D7', '\a', '\x1CF', '\x2', '\x2', '\x25D7', '\x25D8', 
		'\a', '\x336', '\x2', '\x2', '\x25D8', '\x25D9', '\a', '\x31D', '\x2', 
		'\x2', '\x25D9', '\x25DA', '\a', '\x338', '\x2', '\x2', '\x25DA', '\x25DB', 
		'\x5', '\x2CC', '\x167', '\x2', '\x25DB', '\x25DC', '\a', '\x337', '\x2', 
		'\x2', '\x25DC', '\x261E', '\x3', '\x2', '\x2', '\x2', '\x25DD', '\x25DE', 
		'\a', '\x1D0', '\x2', '\x2', '\x25DE', '\x25DF', '\a', '\x336', '\x2', 
		'\x2', '\x25DF', '\x25E0', '\a', '\x31D', '\x2', '\x2', '\x25E0', '\x25E1', 
		'\a', '\x338', '\x2', '\x2', '\x25E1', '\x25E2', '\x5', '\x2CC', '\x167', 
		'\x2', '\x25E2', '\x25E3', '\a', '\x337', '\x2', '\x2', '\x25E3', '\x261E', 
		'\x3', '\x2', '\x2', '\x2', '\x25E4', '\x25E5', '\a', '\x20E', '\x2', 
		'\x2', '\x25E5', '\x25E6', '\a', '\x336', '\x2', '\x2', '\x25E6', '\x261E', 
		'\a', '\x337', '\x2', '\x2', '\x25E7', '\x25E8', '\a', '\x20F', '\x2', 
		'\x2', '\x25E8', '\x25E9', '\a', '\x336', '\x2', '\x2', '\x25E9', '\x261E', 
		'\a', '\x337', '\x2', '\x2', '\x25EA', '\x25EB', '\a', '\x97', '\x2', 
		'\x2', '\x25EB', '\x25EC', '\a', '\x336', '\x2', '\x2', '\x25EC', '\x25EF', 
		'\x5', '\x3B2', '\x1DA', '\x2', '\x25ED', '\x25EE', '\a', '\x338', '\x2', 
		'\x2', '\x25EE', '\x25F0', '\a', '\x31C', '\x2', '\x2', '\x25EF', '\x25ED', 
		'\x3', '\x2', '\x2', '\x2', '\x25EF', '\x25F0', '\x3', '\x2', '\x2', '\x2', 
		'\x25F0', '\x25F3', '\x3', '\x2', '\x2', '\x2', '\x25F1', '\x25F2', '\a', 
		'\x338', '\x2', '\x2', '\x25F2', '\x25F4', '\a', '\x31C', '\x2', '\x2', 
		'\x25F3', '\x25F1', '\x3', '\x2', '\x2', '\x2', '\x25F3', '\x25F4', '\x3', 
		'\x2', '\x2', '\x2', '\x25F4', '\x25F5', '\x3', '\x2', '\x2', '\x2', '\x25F5', 
		'\x25F6', '\a', '\x337', '\x2', '\x2', '\x25F6', '\x261E', '\x3', '\x2', 
		'\x2', '\x2', '\x25F7', '\x261E', '\a', '\x254', '\x2', '\x2', '\x25F8', 
		'\x25F9', '\a', '\xE1', '\x2', '\x2', '\x25F9', '\x25FA', '\a', '\x336', 
		'\x2', '\x2', '\x25FA', '\x25FB', '\x5', '\x2CC', '\x167', '\x2', '\x25FB', 
		'\x25FC', '\a', '\x338', '\x2', '\x2', '\x25FC', '\x25FD', '\x5', '\x2CC', 
		'\x167', '\x2', '\x25FD', '\x25FE', '\a', '\x337', '\x2', '\x2', '\x25FE', 
		'\x261E', '\x3', '\x2', '\x2', '\x2', '\x25FF', '\x2600', '\a', '\x2E3', 
		'\x2', '\x2', '\x2600', '\x2601', '\a', '\x336', '\x2', '\x2', '\x2601', 
		'\x2602', '\x5', '\x2CC', '\x167', '\x2', '\x2602', '\x2603', '\a', '\x338', 
		'\x2', '\x2', '\x2603', '\x2604', '\a', '\x31C', '\x2', '\x2', '\x2604', 
		'\x2605', '\a', '\x338', '\x2', '\x2', '\x2605', '\x2606', '\a', '\x31C', 
		'\x2', '\x2', '\x2606', '\x2607', '\a', '\x338', '\x2', '\x2', '\x2607', 
		'\x2608', '\x5', '\x2CC', '\x167', '\x2', '\x2608', '\x2609', '\a', '\x337', 
		'\x2', '\x2', '\x2609', '\x261E', '\x3', '\x2', '\x2', '\x2', '\x260A', 
		'\x261E', '\a', '\x13D', '\x2', '\x2', '\x260B', '\x261E', '\a', '\x156', 
		'\x2', '\x2', '\x260C', '\x260D', '\a', '\xAA', '\x2', '\x2', '\x260D', 
		'\x260E', '\a', '\x336', '\x2', '\x2', '\x260E', '\x260F', '\x5', '\x2CC', 
		'\x167', '\x2', '\x260F', '\x2610', '\a', '\x338', '\x2', '\x2', '\x2610', 
		'\x2611', '\x5', '\x2CC', '\x167', '\x2', '\x2611', '\x2612', '\a', '\x337', 
		'\x2', '\x2', '\x2612', '\x261E', '\x3', '\x2', '\x2', '\x2', '\x2613', 
		'\x261E', '\x5', '\x336', '\x19C', '\x2', '\x2614', '\x2615', '\a', '\x9B', 
		'\x2', '\x2', '\x2615', '\x2616', '\a', '\x336', '\x2', '\x2', '\x2616', 
		'\x2617', '\x5', '\x2E2', '\x172', '\x2', '\x2617', '\x2618', '\a', '\x338', 
		'\x2', '\x2', '\x2618', '\x2619', '\x5', '\x2CC', '\x167', '\x2', '\x2619', 
		'\x261A', '\a', '\x338', '\x2', '\x2', '\x261A', '\x261B', '\x5', '\x2CC', 
		'\x167', '\x2', '\x261B', '\x261C', '\a', '\x337', '\x2', '\x2', '\x261C', 
		'\x261E', '\x3', '\x2', '\x2', '\x2', '\x261D', '\x2599', '\x3', '\x2', 
		'\x2', '\x2', '\x261D', '\x259A', '\x3', '\x2', '\x2', '\x2', '\x261D', 
		'\x259B', '\x3', '\x2', '\x2', '\x2', '\x261D', '\x259C', '\x3', '\x2', 
		'\x2', '\x2', '\x261D', '\x25A3', '\x3', '\x2', '\x2', '\x2', '\x261D', 
		'\x25A7', '\x3', '\x2', '\x2', '\x2', '\x261D', '\x25AE', '\x3', '\x2', 
		'\x2', '\x2', '\x261D', '\x25B9', '\x3', '\x2', '\x2', '\x2', '\x261D', 
		'\x25BD', '\x3', '\x2', '\x2', '\x2', '\x261D', '\x25C2', '\x3', '\x2', 
		'\x2', '\x2', '\x261D', '\x25C3', '\x3', '\x2', '\x2', '\x2', '\x261D', 
		'\x25C4', '\x3', '\x2', '\x2', '\x2', '\x261D', '\x25CD', '\x3', '\x2', 
		'\x2', '\x2', '\x261D', '\x25D6', '\x3', '\x2', '\x2', '\x2', '\x261D', 
		'\x25DD', '\x3', '\x2', '\x2', '\x2', '\x261D', '\x25E4', '\x3', '\x2', 
		'\x2', '\x2', '\x261D', '\x25E7', '\x3', '\x2', '\x2', '\x2', '\x261D', 
		'\x25EA', '\x3', '\x2', '\x2', '\x2', '\x261D', '\x25F7', '\x3', '\x2', 
		'\x2', '\x2', '\x261D', '\x25F8', '\x3', '\x2', '\x2', '\x2', '\x261D', 
		'\x25FF', '\x3', '\x2', '\x2', '\x2', '\x261D', '\x260A', '\x3', '\x2', 
		'\x2', '\x2', '\x261D', '\x260B', '\x3', '\x2', '\x2', '\x2', '\x261D', 
		'\x260C', '\x3', '\x2', '\x2', '\x2', '\x261D', '\x2613', '\x3', '\x2', 
		'\x2', '\x2', '\x261D', '\x2614', '\x3', '\x2', '\x2', '\x2', '\x261E', 
		'\x335', '\x3', '\x2', '\x2', '\x2', '\x261F', '\x2625', '\x5', '\x338', 
		'\x19D', '\x2', '\x2620', '\x2625', '\x5', '\x33A', '\x19E', '\x2', '\x2621', 
		'\x2625', '\x5', '\x33C', '\x19F', '\x2', '\x2622', '\x2625', '\x5', '\x33E', 
		'\x1A0', '\x2', '\x2623', '\x2625', '\x5', '\x340', '\x1A1', '\x2', '\x2624', 
		'\x261F', '\x3', '\x2', '\x2', '\x2', '\x2624', '\x2620', '\x3', '\x2', 
		'\x2', '\x2', '\x2624', '\x2621', '\x3', '\x2', '\x2', '\x2', '\x2624', 
		'\x2622', '\x3', '\x2', '\x2', '\x2', '\x2624', '\x2623', '\x3', '\x2', 
		'\x2', '\x2', '\x2625', '\x337', '\x3', '\x2', '\x2', '\x2', '\x2626', 
		'\x262B', '\a', '\x31B', '\x2', '\x2', '\x2627', '\x262B', '\a', '\x31D', 
		'\x2', '\x2', '\x2628', '\x262B', '\a', 's', '\x2', '\x2', '\x2629', '\x262B', 
		'\x5', '\x33A', '\x19E', '\x2', '\x262A', '\x2626', '\x3', '\x2', '\x2', 
		'\x2', '\x262A', '\x2627', '\x3', '\x2', '\x2', '\x2', '\x262A', '\x2628', 
		'\x3', '\x2', '\x2', '\x2', '\x262A', '\x2629', '\x3', '\x2', '\x2', '\x2', 
		'\x262B', '\x262C', '\x3', '\x2', '\x2', '\x2', '\x262C', '\x262D', '\a', 
		'\x331', '\x2', '\x2', '\x262D', '\x262E', '\a', '\x305', '\x2', '\x2', 
		'\x262E', '\x262F', '\a', '\x336', '\x2', '\x2', '\x262F', '\x2630', '\a', 
		'\x320', '\x2', '\x2', '\x2630', '\x2631', '\a', '\x338', '\x2', '\x2', 
		'\x2631', '\x2632', '\a', '\x320', '\x2', '\x2', '\x2632', '\x2652', '\a', 
		'\x337', '\x2', '\x2', '\x2633', '\x2638', '\a', '\x31B', '\x2', '\x2', 
		'\x2634', '\x2638', '\a', '\x31D', '\x2', '\x2', '\x2635', '\x2638', '\a', 
		's', '\x2', '\x2', '\x2636', '\x2638', '\x5', '\x33A', '\x19E', '\x2', 
		'\x2637', '\x2633', '\x3', '\x2', '\x2', '\x2', '\x2637', '\x2634', '\x3', 
		'\x2', '\x2', '\x2', '\x2637', '\x2635', '\x3', '\x2', '\x2', '\x2', '\x2637', 
		'\x2636', '\x3', '\x2', '\x2', '\x2', '\x2638', '\x2639', '\x3', '\x2', 
		'\x2', '\x2', '\x2639', '\x263A', '\a', '\x331', '\x2', '\x2', '\x263A', 
		'\x263B', '\a', '\x2BA', '\x2', '\x2', '\x263B', '\x263C', '\a', '\x331', 
		'\x2', '\x2', '\x263C', '\x263D', '\a', '\x305', '\x2', '\x2', '\x263D', 
		'\x263E', '\a', '\x336', '\x2', '\x2', '\x263E', '\x263F', '\a', '\x320', 
		'\x2', '\x2', '\x263F', '\x2640', '\a', '\x338', '\x2', '\x2', '\x2640', 
		'\x2641', '\a', '\x320', '\x2', '\x2', '\x2641', '\x2652', '\a', '\x337', 
		'\x2', '\x2', '\x2642', '\x2647', '\a', '\x31B', '\x2', '\x2', '\x2643', 
		'\x2647', '\a', '\x31D', '\x2', '\x2', '\x2644', '\x2647', '\a', 's', 
		'\x2', '\x2', '\x2645', '\x2647', '\x5', '\x33A', '\x19E', '\x2', '\x2646', 
		'\x2642', '\x3', '\x2', '\x2', '\x2', '\x2646', '\x2643', '\x3', '\x2', 
		'\x2', '\x2', '\x2646', '\x2644', '\x3', '\x2', '\x2', '\x2', '\x2646', 
		'\x2645', '\x3', '\x2', '\x2', '\x2', '\x2647', '\x2648', '\x3', '\x2', 
		'\x2', '\x2', '\x2648', '\x2649', '\a', '\x331', '\x2', '\x2', '\x2649', 
		'\x264A', '\a', '\xF3', '\x2', '\x2', '\x264A', '\x264B', '\a', '\x331', 
		'\x2', '\x2', '\x264B', '\x264C', '\a', '\x305', '\x2', '\x2', '\x264C', 
		'\x264D', '\a', '\x336', '\x2', '\x2', '\x264D', '\x264E', '\a', '\x320', 
		'\x2', '\x2', '\x264E', '\x264F', '\a', '\x338', '\x2', '\x2', '\x264F', 
		'\x2650', '\a', '\x320', '\x2', '\x2', '\x2650', '\x2652', '\a', '\x337', 
		'\x2', '\x2', '\x2651', '\x262A', '\x3', '\x2', '\x2', '\x2', '\x2651', 
		'\x2637', '\x3', '\x2', '\x2', '\x2', '\x2651', '\x2646', '\x3', '\x2', 
		'\x2', '\x2', '\x2652', '\x339', '\x3', '\x2', '\x2', '\x2', '\x2653', 
		'\x2657', '\a', '\x31B', '\x2', '\x2', '\x2654', '\x2657', '\a', '\x31D', 
		'\x2', '\x2', '\x2655', '\x2657', '\x5', '\x380', '\x1C1', '\x2', '\x2656', 
		'\x2653', '\x3', '\x2', '\x2', '\x2', '\x2656', '\x2654', '\x3', '\x2', 
		'\x2', '\x2', '\x2656', '\x2655', '\x3', '\x2', '\x2', '\x2', '\x2657', 
		'\x2658', '\x3', '\x2', '\x2', '\x2', '\x2658', '\x2659', '\a', '\x331', 
		'\x2', '\x2', '\x2659', '\x265A', '\a', '\x294', '\x2', '\x2', '\x265A', 
		'\x265B', '\a', '\x336', '\x2', '\x2', '\x265B', '\x265C', '\a', '\x320', 
		'\x2', '\x2', '\x265C', '\x266A', '\a', '\x337', '\x2', '\x2', '\x265D', 
		'\x2661', '\a', '\x31B', '\x2', '\x2', '\x265E', '\x2661', '\a', '\x31D', 
		'\x2', '\x2', '\x265F', '\x2661', '\x5', '\x380', '\x1C1', '\x2', '\x2660', 
		'\x265D', '\x3', '\x2', '\x2', '\x2', '\x2660', '\x265E', '\x3', '\x2', 
		'\x2', '\x2', '\x2660', '\x265F', '\x3', '\x2', '\x2', '\x2', '\x2661', 
		'\x2662', '\x3', '\x2', '\x2', '\x2', '\x2662', '\x2663', '\a', '\x331', 
		'\x2', '\x2', '\x2663', '\x2664', '\a', '\x2BA', '\x2', '\x2', '\x2664', 
		'\x2665', '\a', '\x331', '\x2', '\x2', '\x2665', '\x2666', '\a', '\x294', 
		'\x2', '\x2', '\x2666', '\x2667', '\a', '\x336', '\x2', '\x2', '\x2667', 
		'\x2668', '\a', '\x320', '\x2', '\x2', '\x2668', '\x266A', '\a', '\x337', 
		'\x2', '\x2', '\x2669', '\x2656', '\x3', '\x2', '\x2', '\x2', '\x2669', 
		'\x2660', '\x3', '\x2', '\x2', '\x2', '\x266A', '\x33B', '\x3', '\x2', 
		'\x2', '\x2', '\x266B', '\x266C', '\t', '}', '\x2', '\x2', '\x266C', '\x266D', 
		'\a', '\x331', '\x2', '\x2', '\x266D', '\x266E', '\a', '\x1F4', '\x2', 
		'\x2', '\x266E', '\x266F', '\a', '\x336', '\x2', '\x2', '\x266F', '\x2670', 
		'\a', '\x320', '\x2', '\x2', '\x2670', '\x2671', '\a', '\x337', '\x2', 
		'\x2', '\x2671', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x2672', '\x2673', 
		'\t', '}', '\x2', '\x2', '\x2673', '\x2674', '\a', '\x331', '\x2', '\x2', 
		'\x2674', '\x2675', '\a', '\x25C', '\x2', '\x2', '\x2675', '\x2676', '\a', 
		'\x336', '\x2', '\x2', '\x2676', '\x2677', '\a', '\x320', '\x2', '\x2', 
		'\x2677', '\x2678', '\a', '\x337', '\x2', '\x2', '\x2678', '\x33F', '\x3', 
		'\x2', '\x2', '\x2', '\x2679', '\x267A', '\t', '}', '\x2', '\x2', '\x267A', 
		'\x267B', '\a', '\x331', '\x2', '\x2', '\x267B', '\x267C', '\a', '\x269', 
		'\x2', '\x2', '\x267C', '\x267D', '\a', '\x336', '\x2', '\x2', '\x267D', 
		'\x267E', '\a', '\x320', '\x2', '\x2', '\x267E', '\x267F', '\a', '\x337', 
		'\x2', '\x2', '\x267F', '\x341', '\x3', '\x2', '\x2', '\x2', '\x2680', 
		'\x2681', '\a', '\x179', '\x2', '\x2', '\x2681', '\x2682', '\x5', '\x2CC', 
		'\x167', '\x2', '\x2682', '\x2683', '\a', '\x15D', '\x2', '\x2', '\x2683', 
		'\x2684', '\x5', '\x2CC', '\x167', '\x2', '\x2684', '\x343', '\x3', '\x2', 
		'\x2', '\x2', '\x2685', '\x2686', '\a', '\x179', '\x2', '\x2', '\x2686', 
		'\x2687', '\x5', '\x2E2', '\x172', '\x2', '\x2687', '\x2688', '\a', '\x15D', 
		'\x2', '\x2', '\x2688', '\x2689', '\x5', '\x2CC', '\x167', '\x2', '\x2689', 
		'\x345', '\x3', '\x2', '\x2', '\x2', '\x268A', '\x268C', '\a', '\x10', 
		'\x2', '\x2', '\x268B', '\x268A', '\x3', '\x2', '\x2', '\x2', '\x268B', 
		'\x268C', '\x3', '\x2', '\x2', '\x2', '\x268C', '\x268D', '\x3', '\x2', 
		'\x2', '\x2', '\x268D', '\x268E', '\x5', '\x356', '\x1AC', '\x2', '\x268E', 
		'\x347', '\x3', '\x2', '\x2', '\x2', '\x268F', '\x2691', '\a', '\x10', 
		'\x2', '\x2', '\x2690', '\x268F', '\x3', '\x2', '\x2', '\x2', '\x2690', 
		'\x2691', '\x3', '\x2', '\x2', '\x2', '\x2691', '\x2692', '\x3', '\x2', 
		'\x2', '\x2', '\x2692', '\x2693', '\x5', '\x34A', '\x1A6', '\x2', '\x2693', 
		'\x349', '\x3', '\x2', '\x2', '\x2', '\x2694', '\x2696', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2695', '\x2697', '\x5', '\x34C', '\x1A7', '\x2', '\x2696', 
		'\x2695', '\x3', '\x2', '\x2', '\x2', '\x2696', '\x2697', '\x3', '\x2', 
		'\x2', '\x2', '\x2697', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x2698', 
		'\x269A', '\a', '\x17D', '\x2', '\x2', '\x2699', '\x2698', '\x3', '\x2', 
		'\x2', '\x2', '\x2699', '\x269A', '\x3', '\x2', '\x2', '\x2', '\x269A', 
		'\x269B', '\x3', '\x2', '\x2', '\x2', '\x269B', '\x269C', '\a', '\x336', 
		'\x2', '\x2', '\x269C', '\x26A3', '\x5', '\x350', '\x1A9', '\x2', '\x269D', 
		'\x269F', '\a', '\x338', '\x2', '\x2', '\x269E', '\x269D', '\x3', '\x2', 
		'\x2', '\x2', '\x269E', '\x269F', '\x3', '\x2', '\x2', '\x2', '\x269F', 
		'\x26A0', '\x3', '\x2', '\x2', '\x2', '\x26A0', '\x26A2', '\x5', '\x350', 
		'\x1A9', '\x2', '\x26A1', '\x269E', '\x3', '\x2', '\x2', '\x2', '\x26A2', 
		'\x26A5', '\x3', '\x2', '\x2', '\x2', '\x26A3', '\x26A1', '\x3', '\x2', 
		'\x2', '\x2', '\x26A3', '\x26A4', '\x3', '\x2', '\x2', '\x2', '\x26A4', 
		'\x26A6', '\x3', '\x2', '\x2', '\x2', '\x26A5', '\x26A3', '\x3', '\x2', 
		'\x2', '\x2', '\x26A6', '\x26A7', '\a', '\x337', '\x2', '\x2', '\x26A7', 
		'\x34D', '\x3', '\x2', '\x2', '\x2', '\x26A8', '\x26A9', '\a', '\x17D', 
		'\x2', '\x2', '\x26A9', '\x26AA', '\a', '\x336', '\x2', '\x2', '\x26AA', 
		'\x26B1', '\x5', '\x350', '\x1A9', '\x2', '\x26AB', '\x26AD', '\a', '\x338', 
		'\x2', '\x2', '\x26AC', '\x26AB', '\x3', '\x2', '\x2', '\x2', '\x26AC', 
		'\x26AD', '\x3', '\x2', '\x2', '\x2', '\x26AD', '\x26AE', '\x3', '\x2', 
		'\x2', '\x2', '\x26AE', '\x26B0', '\x5', '\x350', '\x1A9', '\x2', '\x26AF', 
		'\x26AC', '\x3', '\x2', '\x2', '\x2', '\x26B0', '\x26B3', '\x3', '\x2', 
		'\x2', '\x2', '\x26B1', '\x26AF', '\x3', '\x2', '\x2', '\x2', '\x26B1', 
		'\x26B2', '\x3', '\x2', '\x2', '\x2', '\x26B2', '\x26B4', '\x3', '\x2', 
		'\x2', '\x2', '\x26B3', '\x26B1', '\x3', '\x2', '\x2', '\x2', '\x26B4', 
		'\x26B5', '\a', '\x337', '\x2', '\x2', '\x26B5', '\x34F', '\x3', '\x2', 
		'\x2', '\x2', '\x26B6', '\x26B8', '\a', '\x26A', '\x2', '\x2', '\x26B7', 
		'\x26B6', '\x3', '\x2', '\x2', '\x2', '\x26B7', '\x26B8', '\x3', '\x2', 
		'\x2', '\x2', '\x26B8', '\x26E9', '\x3', '\x2', '\x2', '\x2', '\x26B9', 
		'\x26CD', '\a', '\x9F', '\x2', '\x2', '\x26BA', '\x26BB', '\a', '\x336', 
		'\x2', '\x2', '\x26BB', '\x26C0', '\x5', '\x352', '\x1AA', '\x2', '\x26BC', 
		'\x26BD', '\a', '\x338', '\x2', '\x2', '\x26BD', '\x26BF', '\x5', '\x352', 
		'\x1AA', '\x2', '\x26BE', '\x26BC', '\x3', '\x2', '\x2', '\x2', '\x26BF', 
		'\x26C2', '\x3', '\x2', '\x2', '\x2', '\x26C0', '\x26BE', '\x3', '\x2', 
		'\x2', '\x2', '\x26C0', '\x26C1', '\x3', '\x2', '\x2', '\x2', '\x26C1', 
		'\x26C3', '\x3', '\x2', '\x2', '\x2', '\x26C2', '\x26C0', '\x3', '\x2', 
		'\x2', '\x2', '\x26C3', '\x26C4', '\a', '\x337', '\x2', '\x2', '\x26C4', 
		'\x26CE', '\x3', '\x2', '\x2', '\x2', '\x26C5', '\x26CA', '\x5', '\x352', 
		'\x1AA', '\x2', '\x26C6', '\x26C7', '\a', '\x338', '\x2', '\x2', '\x26C7', 
		'\x26C9', '\x5', '\x352', '\x1AA', '\x2', '\x26C8', '\x26C6', '\x3', '\x2', 
		'\x2', '\x2', '\x26C9', '\x26CC', '\x3', '\x2', '\x2', '\x2', '\x26CA', 
		'\x26C8', '\x3', '\x2', '\x2', '\x2', '\x26CA', '\x26CB', '\x3', '\x2', 
		'\x2', '\x2', '\x26CB', '\x26CE', '\x3', '\x2', '\x2', '\x2', '\x26CC', 
		'\x26CA', '\x3', '\x2', '\x2', '\x2', '\x26CD', '\x26BA', '\x3', '\x2', 
		'\x2', '\x2', '\x26CD', '\x26C5', '\x3', '\x2', '\x2', '\x2', '\x26CE', 
		'\x26EA', '\x3', '\x2', '\x2', '\x2', '\x26CF', '\x26D0', '\a', '\x9F', 
		'\x2', '\x2', '\x26D0', '\x26D1', '\a', '\x324', '\x2', '\x2', '\x26D1', 
		'\x26EA', '\x5', '\x352', '\x1AA', '\x2', '\x26D2', '\x26E1', '\a', '\x87', 
		'\x2', '\x2', '\x26D3', '\x26D4', '\a', '\x336', '\x2', '\x2', '\x26D4', 
		'\x26D5', '\x5', '\x352', '\x1AA', '\x2', '\x26D5', '\x26D6', '\a', '\x336', 
		'\x2', '\x2', '\x26D6', '\x26DB', '\a', '\x31D', '\x2', '\x2', '\x26D7', 
		'\x26D8', '\a', '\x338', '\x2', '\x2', '\x26D8', '\x26DA', '\a', '\x31D', 
		'\x2', '\x2', '\x26D9', '\x26D7', '\x3', '\x2', '\x2', '\x2', '\x26DA', 
		'\x26DD', '\x3', '\x2', '\x2', '\x2', '\x26DB', '\x26D9', '\x3', '\x2', 
		'\x2', '\x2', '\x26DB', '\x26DC', '\x3', '\x2', '\x2', '\x2', '\x26DC', 
		'\x26DE', '\x3', '\x2', '\x2', '\x2', '\x26DD', '\x26DB', '\x3', '\x2', 
		'\x2', '\x2', '\x26DE', '\x26DF', '\a', '\x337', '\x2', '\x2', '\x26DF', 
		'\x26E0', '\a', '\x337', '\x2', '\x2', '\x26E0', '\x26E2', '\x3', '\x2', 
		'\x2', '\x2', '\x26E1', '\x26D3', '\x3', '\x2', '\x2', '\x2', '\x26E1', 
		'\x26E2', '\x3', '\x2', '\x2', '\x2', '\x26E2', '\x26EA', '\x3', '\x2', 
		'\x2', '\x2', '\x26E3', '\x26EA', '\a', '\x2CF', '\x2', '\x2', '\x26E4', 
		'\x26EA', '\a', '\x2D9', '\x2', '\x2', '\x26E5', '\x26E6', '\a', '\x2DA', 
		'\x2', '\x2', '\x26E6', '\x26E7', '\a', '\x324', '\x2', '\x2', '\x26E7', 
		'\x26EA', '\a', '\x31C', '\x2', '\x2', '\x26E8', '\x26EA', '\a', '\x31D', 
		'\x2', '\x2', '\x26E9', '\x26B9', '\x3', '\x2', '\x2', '\x2', '\x26E9', 
		'\x26CF', '\x3', '\x2', '\x2', '\x2', '\x26E9', '\x26D2', '\x3', '\x2', 
		'\x2', '\x2', '\x26E9', '\x26E3', '\x3', '\x2', '\x2', '\x2', '\x26E9', 
		'\x26E4', '\x3', '\x2', '\x2', '\x2', '\x26E9', '\x26E5', '\x3', '\x2', 
		'\x2', '\x2', '\x26E9', '\x26E8', '\x3', '\x2', '\x2', '\x2', '\x26EA', 
		'\x351', '\x3', '\x2', '\x2', '\x2', '\x26EB', '\x26EE', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x26EC', '\x26EE', '\a', '\x31C', '\x2', '\x2', '\x26ED', 
		'\x26EB', '\x3', '\x2', '\x2', '\x2', '\x26ED', '\x26EC', '\x3', '\x2', 
		'\x2', '\x2', '\x26EE', '\x353', '\x3', '\x2', '\x2', '\x2', '\x26EF', 
		'\x26F0', '\a', '\x336', '\x2', '\x2', '\x26F0', '\x26F5', '\x5', '\x356', 
		'\x1AC', '\x2', '\x26F1', '\x26F2', '\a', '\x338', '\x2', '\x2', '\x26F2', 
		'\x26F4', '\x5', '\x356', '\x1AC', '\x2', '\x26F3', '\x26F1', '\x3', '\x2', 
		'\x2', '\x2', '\x26F4', '\x26F7', '\x3', '\x2', '\x2', '\x2', '\x26F5', 
		'\x26F3', '\x3', '\x2', '\x2', '\x2', '\x26F5', '\x26F6', '\x3', '\x2', 
		'\x2', '\x2', '\x26F6', '\x26F8', '\x3', '\x2', '\x2', '\x2', '\x26F7', 
		'\x26F5', '\x3', '\x2', '\x2', '\x2', '\x26F8', '\x26F9', '\a', '\x337', 
		'\x2', '\x2', '\x26F9', '\x355', '\x3', '\x2', '\x2', '\x2', '\x26FA', 
		'\x26FD', '\x5', '\x3BA', '\x1DE', '\x2', '\x26FB', '\x26FD', '\a', '\x320', 
		'\x2', '\x2', '\x26FC', '\x26FA', '\x3', '\x2', '\x2', '\x2', '\x26FC', 
		'\x26FB', '\x3', '\x2', '\x2', '\x2', '\x26FD', '\x357', '\x3', '\x2', 
		'\x2', '\x2', '\x26FE', '\x26FF', '\a', '\x173', '\x2', '\x2', '\x26FF', 
		'\x2700', '\a', '\x336', '\x2', '\x2', '\x2700', '\x2701', '\x5', '\x35A', 
		'\x1AE', '\x2', '\x2701', '\x2709', '\a', '\x337', '\x2', '\x2', '\x2702', 
		'\x2703', '\a', '\x338', '\x2', '\x2', '\x2703', '\x2704', '\a', '\x336', 
		'\x2', '\x2', '\x2704', '\x2705', '\x5', '\x35A', '\x1AE', '\x2', '\x2705', 
		'\x2706', '\a', '\x337', '\x2', '\x2', '\x2706', '\x2708', '\x3', '\x2', 
		'\x2', '\x2', '\x2707', '\x2702', '\x3', '\x2', '\x2', '\x2', '\x2708', 
		'\x270B', '\x3', '\x2', '\x2', '\x2', '\x2709', '\x2707', '\x3', '\x2', 
		'\x2', '\x2', '\x2709', '\x270A', '\x3', '\x2', '\x2', '\x2', '\x270A', 
		'\x359', '\x3', '\x2', '\x2', '\x2', '\x270B', '\x2709', '\x3', '\x2', 
		'\x2', '\x2', '\x270C', '\x2711', '\x5', '\x2CC', '\x167', '\x2', '\x270D', 
		'\x270E', '\a', '\x338', '\x2', '\x2', '\x270E', '\x2710', '\x5', '\x2CC', 
		'\x167', '\x2', '\x270F', '\x270D', '\x3', '\x2', '\x2', '\x2', '\x2710', 
		'\x2713', '\x3', '\x2', '\x2', '\x2', '\x2711', '\x270F', '\x3', '\x2', 
		'\x2', '\x2', '\x2711', '\x2712', '\x3', '\x2', '\x2', '\x2', '\x2712', 
		'\x35B', '\x3', '\x2', '\x2', '\x2', '\x2713', '\x2711', '\x3', '\x2', 
		'\x2', '\x2', '\x2714', '\x2715', '\t', '~', '\x2', '\x2', '\x2715', '\x2716', 
		'\a', '\x336', '\x2', '\x2', '\x2716', '\x2717', '\a', '\x337', '\x2', 
		'\x2', '\x2717', '\x271F', '\x5', '\x364', '\x1B3', '\x2', '\x2718', '\x2719', 
		'\a', '\x26F', '\x2', '\x2', '\x2719', '\x271A', '\a', '\x336', '\x2', 
		'\x2', '\x271A', '\x271B', '\x5', '\x2CC', '\x167', '\x2', '\x271B', '\x271C', 
		'\a', '\x337', '\x2', '\x2', '\x271C', '\x271D', '\x5', '\x364', '\x1B3', 
		'\x2', '\x271D', '\x271F', '\x3', '\x2', '\x2', '\x2', '\x271E', '\x2714', 
		'\x3', '\x2', '\x2', '\x2', '\x271E', '\x2718', '\x3', '\x2', '\x2', '\x2', 
		'\x271F', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x2720', '\x2721', '\t', 
		'\x7F', '\x2', '\x2', '\x2721', '\x2722', '\a', '\x336', '\x2', '\x2', 
		'\x2722', '\x2723', '\x5', '\x362', '\x1B2', '\x2', '\x2723', '\x2725', 
		'\a', '\x337', '\x2', '\x2', '\x2724', '\x2726', '\x5', '\x364', '\x1B3', 
		'\x2', '\x2725', '\x2724', '\x3', '\x2', '\x2', '\x2', '\x2725', '\x2726', 
		'\x3', '\x2', '\x2', '\x2', '\x2726', '\x2741', '\x3', '\x2', '\x2', '\x2', 
		'\x2727', '\x2728', '\t', '\x80', '\x2', '\x2', '\x2728', '\x272B', '\a', 
		'\x336', '\x2', '\x2', '\x2729', '\x272C', '\a', '\x33B', '\x2', '\x2', 
		'\x272A', '\x272C', '\x5', '\x362', '\x1B2', '\x2', '\x272B', '\x2729', 
		'\x3', '\x2', '\x2', '\x2', '\x272B', '\x272A', '\x3', '\x2', '\x2', '\x2', 
		'\x272C', '\x272D', '\x3', '\x2', '\x2', '\x2', '\x272D', '\x272F', '\a', 
		'\x337', '\x2', '\x2', '\x272E', '\x2730', '\x5', '\x364', '\x1B3', '\x2', 
		'\x272F', '\x272E', '\x3', '\x2', '\x2', '\x2', '\x272F', '\x2730', '\x3', 
		'\x2', '\x2', '\x2', '\x2730', '\x2741', '\x3', '\x2', '\x2', '\x2', '\x2731', 
		'\x2732', '\a', '\x1B7', '\x2', '\x2', '\x2732', '\x2733', '\a', '\x336', 
		'\x2', '\x2', '\x2733', '\x2734', '\x5', '\x362', '\x1B2', '\x2', '\x2734', 
		'\x2735', '\a', '\x337', '\x2', '\x2', '\x2735', '\x2741', '\x3', '\x2', 
		'\x2', '\x2', '\x2736', '\x2737', '\a', '\x213', '\x2', '\x2', '\x2737', 
		'\x2738', '\a', '\x336', '\x2', '\x2', '\x2738', '\x2739', '\x5', '\x2CC', 
		'\x167', '\x2', '\x2739', '\x273A', '\a', '\x337', '\x2', '\x2', '\x273A', 
		'\x2741', '\x3', '\x2', '\x2', '\x2', '\x273B', '\x273C', '\a', '\x214', 
		'\x2', '\x2', '\x273C', '\x273D', '\a', '\x336', '\x2', '\x2', '\x273D', 
		'\x273E', '\x5', '\x35A', '\x1AE', '\x2', '\x273E', '\x273F', '\a', '\x337', 
		'\x2', '\x2', '\x273F', '\x2741', '\x3', '\x2', '\x2', '\x2', '\x2740', 
		'\x2720', '\x3', '\x2', '\x2', '\x2', '\x2740', '\x2727', '\x3', '\x2', 
		'\x2', '\x2', '\x2740', '\x2731', '\x3', '\x2', '\x2', '\x2', '\x2740', 
		'\x2736', '\x3', '\x2', '\x2', '\x2', '\x2740', '\x273B', '\x3', '\x2', 
		'\x2', '\x2', '\x2741', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x2742', 
		'\x2743', '\t', '\x81', '\x2', '\x2', '\x2743', '\x2744', '\a', '\x336', 
		'\x2', '\x2', '\x2744', '\x2745', '\x5', '\x2CC', '\x167', '\x2', '\x2745', 
		'\x2746', '\a', '\x337', '\x2', '\x2', '\x2746', '\x2747', '\x5', '\x364', 
		'\x1B3', '\x2', '\x2747', '\x2757', '\x3', '\x2', '\x2', '\x2', '\x2748', 
		'\x2749', '\t', '\x82', '\x2', '\x2', '\x2749', '\x274A', '\a', '\x336', 
		'\x2', '\x2', '\x274A', '\x2751', '\x5', '\x2CC', '\x167', '\x2', '\x274B', 
		'\x274C', '\a', '\x338', '\x2', '\x2', '\x274C', '\x274F', '\x5', '\x2CC', 
		'\x167', '\x2', '\x274D', '\x274E', '\a', '\x338', '\x2', '\x2', '\x274E', 
		'\x2750', '\x5', '\x2CC', '\x167', '\x2', '\x274F', '\x274D', '\x3', '\x2', 
		'\x2', '\x2', '\x274F', '\x2750', '\x3', '\x2', '\x2', '\x2', '\x2750', 
		'\x2752', '\x3', '\x2', '\x2', '\x2', '\x2751', '\x274B', '\x3', '\x2', 
		'\x2', '\x2', '\x2751', '\x2752', '\x3', '\x2', '\x2', '\x2', '\x2752', 
		'\x2753', '\x3', '\x2', '\x2', '\x2', '\x2753', '\x2754', '\a', '\x337', 
		'\x2', '\x2', '\x2754', '\x2755', '\x5', '\x364', '\x1B3', '\x2', '\x2755', 
		'\x2757', '\x3', '\x2', '\x2', '\x2', '\x2756', '\x2742', '\x3', '\x2', 
		'\x2', '\x2', '\x2756', '\x2748', '\x3', '\x2', '\x2', '\x2', '\x2757', 
		'\x361', '\x3', '\x2', '\x2', '\x2', '\x2758', '\x275A', '\t', 'o', '\x2', 
		'\x2', '\x2759', '\x2758', '\x3', '\x2', '\x2', '\x2', '\x2759', '\x275A', 
		'\x3', '\x2', '\x2', '\x2', '\x275A', '\x275B', '\x3', '\x2', '\x2', '\x2', 
		'\x275B', '\x275C', '\x5', '\x2CC', '\x167', '\x2', '\x275C', '\x363', 
		'\x3', '\x2', '\x2', '\x2', '\x275D', '\x275E', '\a', '\xF1', '\x2', '\x2', 
		'\x275E', '\x2762', '\a', '\x336', '\x2', '\x2', '\x275F', '\x2760', '\a', 
		'\x281', '\x2', '\x2', '\x2760', '\x2761', '\a', '&', '\x2', '\x2', '\x2761', 
		'\x2763', '\x5', '\x35A', '\x1AE', '\x2', '\x2762', '\x275F', '\x3', '\x2', 
		'\x2', '\x2', '\x2762', '\x2763', '\x3', '\x2', '\x2', '\x2', '\x2763', 
		'\x2765', '\x3', '\x2', '\x2', '\x2', '\x2764', '\x2766', '\x5', '\x2F6', 
		'\x17C', '\x2', '\x2765', '\x2764', '\x3', '\x2', '\x2', '\x2', '\x2765', 
		'\x2766', '\x3', '\x2', '\x2', '\x2', '\x2766', '\x2768', '\x3', '\x2', 
		'\x2', '\x2', '\x2767', '\x2769', '\x5', '\x366', '\x1B4', '\x2', '\x2768', 
		'\x2767', '\x3', '\x2', '\x2', '\x2', '\x2768', '\x2769', '\x3', '\x2', 
		'\x2', '\x2', '\x2769', '\x276A', '\x3', '\x2', '\x2', '\x2', '\x276A', 
		'\x276B', '\a', '\x337', '\x2', '\x2', '\x276B', '\x365', '\x3', '\x2', 
		'\x2', '\x2', '\x276C', '\x276D', '\t', '\x83', '\x2', '\x2', '\x276D', 
		'\x276E', '\x5', '\x368', '\x1B5', '\x2', '\x276E', '\x367', '\x3', '\x2', 
		'\x2', '\x2', '\x276F', '\x2776', '\x5', '\x36C', '\x1B7', '\x2', '\x2770', 
		'\x2771', '\a', '\x1D', '\x2', '\x2', '\x2771', '\x2772', '\x5', '\x36A', 
		'\x1B6', '\x2', '\x2772', '\x2773', '\a', '\v', '\x2', '\x2', '\x2773', 
		'\x2774', '\x5', '\x36A', '\x1B6', '\x2', '\x2774', '\x2776', '\x3', '\x2', 
		'\x2', '\x2', '\x2775', '\x276F', '\x3', '\x2', '\x2', '\x2', '\x2775', 
		'\x2770', '\x3', '\x2', '\x2', '\x2', '\x2776', '\x369', '\x3', '\x2', 
		'\x2', '\x2', '\x2777', '\x277A', '\x5', '\x36C', '\x1B7', '\x2', '\x2778', 
		'\x277A', '\x5', '\x36E', '\x1B8', '\x2', '\x2779', '\x2777', '\x3', '\x2', 
		'\x2', '\x2', '\x2779', '\x2778', '\x3', '\x2', '\x2', '\x2', '\x277A', 
		'\x36B', '\x3', '\x2', '\x2', '\x2', '\x277B', '\x277C', '\a', '\x2FE', 
		'\x2', '\x2', '\x277C', '\x2782', '\a', '\x288', '\x2', '\x2', '\x277D', 
		'\x277E', '\a', '\x31C', '\x2', '\x2', '\x277E', '\x2782', '\a', '\x288', 
		'\x2', '\x2', '\x277F', '\x2780', '\a', 'K', '\x2', '\x2', '\x2780', '\x2782', 
		'\a', '\x2BA', '\x2', '\x2', '\x2781', '\x277B', '\x3', '\x2', '\x2', 
		'\x2', '\x2781', '\x277D', '\x3', '\x2', '\x2', '\x2', '\x2781', '\x277F', 
		'\x3', '\x2', '\x2', '\x2', '\x2782', '\x36D', '\x3', '\x2', '\x2', '\x2', 
		'\x2783', '\x2784', '\a', '\x2FE', '\x2', '\x2', '\x2784', '\x2788', '\a', 
		'\x205', '\x2', '\x2', '\x2785', '\x2786', '\a', '\x31C', '\x2', '\x2', 
		'\x2786', '\x2788', '\a', '\x205', '\x2', '\x2', '\x2787', '\x2783', '\x3', 
		'\x2', '\x2', '\x2', '\x2787', '\x2785', '\x3', '\x2', '\x2', '\x2', '\x2788', 
		'\x36F', '\x3', '\x2', '\x2', '\x2', '\x2789', '\x278A', '\a', '\x201', 
		'\x2', '\x2', '\x278A', '\x278F', '\x5', '\x372', '\x1BA', '\x2', '\x278B', 
		'\x278C', '\a', '\x338', '\x2', '\x2', '\x278C', '\x278E', '\x5', '\x372', 
		'\x1BA', '\x2', '\x278D', '\x278B', '\x3', '\x2', '\x2', '\x2', '\x278E', 
		'\x2791', '\x3', '\x2', '\x2', '\x2', '\x278F', '\x278D', '\x3', '\x2', 
		'\x2', '\x2', '\x278F', '\x2790', '\x3', '\x2', '\x2', '\x2', '\x2790', 
		'\x27AC', '\x3', '\x2', '\x2', '\x2', '\x2791', '\x278F', '\x3', '\x2', 
		'\x2', '\x2', '\x2792', '\x2793', '\a', '\x1D7', '\x2', '\x2', '\x2793', 
		'\x2796', '\a', '\x324', '\x2', '\x2', '\x2794', '\x2797', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2795', '\x2797', '\a', '\x320', '\x2', '\x2', '\x2796', 
		'\x2794', '\x3', '\x2', '\x2', '\x2', '\x2796', '\x2795', '\x3', '\x2', 
		'\x2', '\x2', '\x2797', '\x27AC', '\x3', '\x2', '\x2', '\x2', '\x2798', 
		'\x2799', '\a', '\x1D6', '\x2', '\x2', '\x2799', '\x279C', '\a', '\x324', 
		'\x2', '\x2', '\x279A', '\x279D', '\x5', '\x3BA', '\x1DE', '\x2', '\x279B', 
		'\x279D', '\a', '\x320', '\x2', '\x2', '\x279C', '\x279A', '\x3', '\x2', 
		'\x2', '\x2', '\x279C', '\x279B', '\x3', '\x2', '\x2', '\x2', '\x279D', 
		'\x27AC', '\x3', '\x2', '\x2', '\x2', '\x279E', '\x279F', '\a', '\x260', 
		'\x2', '\x2', '\x279F', '\x27A0', '\a', '\x324', '\x2', '\x2', '\x27A0', 
		'\x27AC', '\t', '\t', '\x2', '\x2', '\x27A1', '\x27A2', '\a', '\x2F5', 
		'\x2', '\x2', '\x27A2', '\x27A3', '\a', '\x324', '\x2', '\x2', '\x27A3', 
		'\x27AC', '\t', '\t', '\x2', '\x2', '\x27A4', '\x27A5', '\a', '\x2FB', 
		'\x2', '\x2', '\x27A5', '\x27A6', '\a', '\x324', '\x2', '\x2', '\x27A6', 
		'\x27AC', '\a', '\x31C', '\x2', '\x2', '\x27A7', '\x27A8', '\a', '\x1D2', 
		'\x2', '\x2', '\x27A8', '\x27AC', '\t', '\t', '\x2', '\x2', '\x27A9', 
		'\x27AA', '\a', '\x2F8', '\x2', '\x2', '\x27AA', '\x27AC', '\t', '\t', 
		'\x2', '\x2', '\x27AB', '\x2789', '\x3', '\x2', '\x2', '\x2', '\x27AB', 
		'\x2792', '\x3', '\x2', '\x2', '\x2', '\x27AB', '\x2798', '\x3', '\x2', 
		'\x2', '\x2', '\x27AB', '\x279E', '\x3', '\x2', '\x2', '\x2', '\x27AB', 
		'\x27A1', '\x3', '\x2', '\x2', '\x2', '\x27AB', '\x27A4', '\x3', '\x2', 
		'\x2', '\x2', '\x27AB', '\x27A7', '\x3', '\x2', '\x2', '\x2', '\x27AB', 
		'\x27A9', '\x3', '\x2', '\x2', '\x2', '\x27AC', '\x371', '\x3', '\x2', 
		'\x2', '\x2', '\x27AD', '\x27B4', '\a', '\x336', '\x2', '\x2', '\x27AE', 
		'\x27AF', '\a', '\x26B', '\x2', '\x2', '\x27AF', '\x27B0', '\a', '\x324', 
		'\x2', '\x2', '\x27B0', '\x27B5', '\t', '\x84', '\x2', '\x2', '\x27B1', 
		'\x27B2', '\a', '\x1E2', '\x2', '\x2', '\x27B2', '\x27B3', '\a', '\x324', 
		'\x2', '\x2', '\x27B3', '\x27B5', '\a', '\x320', '\x2', '\x2', '\x27B4', 
		'\x27AE', '\x3', '\x2', '\x2', '\x2', '\x27B4', '\x27B1', '\x3', '\x2', 
		'\x2', '\x2', '\x27B5', '\x27B6', '\x3', '\x2', '\x2', '\x2', '\x27B6', 
		'\x27B7', '\a', '\x337', '\x2', '\x2', '\x27B7', '\x373', '\x3', '\x2', 
		'\x2', '\x2', '\x27B8', '\x27BB', '\x5', '\x376', '\x1BC', '\x2', '\x27B9', 
		'\x27BB', '\x5', '\x378', '\x1BD', '\x2', '\x27BA', '\x27B8', '\x3', '\x2', 
		'\x2', '\x2', '\x27BA', '\x27B9', '\x3', '\x2', '\x2', '\x2', '\x27BB', 
		'\x375', '\x3', '\x2', '\x2', '\x2', '\x27BC', '\x27BD', '\a', '\x1FE', 
		'\x2', '\x2', '\x27BD', '\x27C0', '\x5', '\x3BA', '\x1DE', '\x2', '\x27BE', 
		'\x27BF', '\a', '?', '\x2', '\x2', '\x27BF', '\x27C1', '\a', '\x201', 
		'\x2', '\x2', '\x27C0', '\x27BE', '\x3', '\x2', '\x2', '\x2', '\x27C0', 
		'\x27C1', '\x3', '\x2', '\x2', '\x2', '\x27C1', '\x27C3', '\x3', '\x2', 
		'\x2', '\x2', '\x27C2', '\x27C4', '\a', 'Z', '\x2', '\x2', '\x27C3', '\x27C2', 
		'\x3', '\x2', '\x2', '\x2', '\x27C3', '\x27C4', '\x3', '\x2', '\x2', '\x2', 
		'\x27C4', '\x27C7', '\x3', '\x2', '\x2', '\x2', '\x27C5', '\x27C6', '\a', 
		'?', '\x2', '\x2', '\x27C6', '\x27C8', '\a', '\x251', '\x2', '\x2', '\x27C7', 
		'\x27C5', '\x3', '\x2', '\x2', '\x2', '\x27C7', '\x27C8', '\x3', '\x2', 
		'\x2', '\x2', '\x27C8', '\x27C9', '\x3', '\x2', '\x2', '\x2', '\x27C9', 
		'\x27CE', '\x5', '\x378', '\x1BD', '\x2', '\x27CA', '\x27CB', '\a', '\x338', 
		'\x2', '\x2', '\x27CB', '\x27CD', '\x5', '\x378', '\x1BD', '\x2', '\x27CC', 
		'\x27CA', '\x3', '\x2', '\x2', '\x2', '\x27CD', '\x27D0', '\x3', '\x2', 
		'\x2', '\x2', '\x27CE', '\x27CC', '\x3', '\x2', '\x2', '\x2', '\x27CE', 
		'\x27CF', '\x3', '\x2', '\x2', '\x2', '\x27CF', '\x377', '\x3', '\x2', 
		'\x2', '\x2', '\x27D0', '\x27CE', '\x3', '\x2', '\x2', '\x2', '\x27D1', 
		'\x27D2', '\a', '\x336', '\x2', '\x2', '\x27D2', '\x27D3', '\a', '\x25F', 
		'\x2', '\x2', '\x27D3', '\x27D6', '\a', '\x324', '\x2', '\x2', '\x27D4', 
		'\x27D7', '\x5', '\x3BA', '\x1DE', '\x2', '\x27D5', '\x27D7', '\a', '\x320', 
		'\x2', '\x2', '\x27D6', '\x27D4', '\x3', '\x2', '\x2', '\x2', '\x27D6', 
		'\x27D5', '\x3', '\x2', '\x2', '\x2', '\x27D7', '\x27D9', '\x3', '\x2', 
		'\x2', '\x2', '\x27D8', '\x27DA', '\a', '\x338', '\x2', '\x2', '\x27D9', 
		'\x27D8', '\x3', '\x2', '\x2', '\x2', '\x27D9', '\x27DA', '\x3', '\x2', 
		'\x2', '\x2', '\x27DA', '\x27DB', '\x3', '\x2', '\x2', '\x2', '\x27DB', 
		'\x27DC', '\a', '\x83', '\x2', '\x2', '\x27DC', '\x27DD', '\a', '\x324', 
		'\x2', '\x2', '\x27DD', '\x27DF', '\a', '\x320', '\x2', '\x2', '\x27DE', 
		'\x27E0', '\a', '\x338', '\x2', '\x2', '\x27DF', '\x27DE', '\x3', '\x2', 
		'\x2', '\x2', '\x27DF', '\x27E0', '\x3', '\x2', '\x2', '\x2', '\x27E0', 
		'\x27E7', '\x3', '\x2', '\x2', '\x2', '\x27E1', '\x27E2', '\a', '\x2D7', 
		'\x2', '\x2', '\x27E2', '\x27E3', '\a', '\x324', '\x2', '\x2', '\x27E3', 
		'\x27E5', '\x5', '\x3C2', '\x1E2', '\x2', '\x27E4', '\x27E6', '\a', '\x338', 
		'\x2', '\x2', '\x27E5', '\x27E4', '\x3', '\x2', '\x2', '\x2', '\x27E5', 
		'\x27E6', '\x3', '\x2', '\x2', '\x2', '\x27E6', '\x27E8', '\x3', '\x2', 
		'\x2', '\x2', '\x27E7', '\x27E1', '\x3', '\x2', '\x2', '\x2', '\x27E7', 
		'\x27E8', '\x3', '\x2', '\x2', '\x2', '\x27E8', '\x27F2', '\x3', '\x2', 
		'\x2', '\x2', '\x27E9', '\x27EA', '\a', '\x24E', '\x2', '\x2', '\x27EA', 
		'\x27ED', '\a', '\x324', '\x2', '\x2', '\x27EB', '\x27EE', '\x5', '\x3C2', 
		'\x1E2', '\x2', '\x27EC', '\x27EE', '\a', '\x301', '\x2', '\x2', '\x27ED', 
		'\x27EB', '\x3', '\x2', '\x2', '\x2', '\x27ED', '\x27EC', '\x3', '\x2', 
		'\x2', '\x2', '\x27EE', '\x27F0', '\x3', '\x2', '\x2', '\x2', '\x27EF', 
		'\x27F1', '\a', '\x338', '\x2', '\x2', '\x27F0', '\x27EF', '\x3', '\x2', 
		'\x2', '\x2', '\x27F0', '\x27F1', '\x3', '\x2', '\x2', '\x2', '\x27F1', 
		'\x27F3', '\x3', '\x2', '\x2', '\x2', '\x27F2', '\x27E9', '\x3', '\x2', 
		'\x2', '\x2', '\x27F2', '\x27F3', '\x3', '\x2', '\x2', '\x2', '\x27F3', 
		'\x27FA', '\x3', '\x2', '\x2', '\x2', '\x27F4', '\x27F5', '\a', '\x1FF', 
		'\x2', '\x2', '\x27F5', '\x27F6', '\a', '\x324', '\x2', '\x2', '\x27F6', 
		'\x27F8', '\x5', '\x3C2', '\x1E2', '\x2', '\x27F7', '\x27F9', '\a', '\x338', 
		'\x2', '\x2', '\x27F8', '\x27F7', '\x3', '\x2', '\x2', '\x2', '\x27F8', 
		'\x27F9', '\x3', '\x2', '\x2', '\x2', '\x27F9', '\x27FB', '\x3', '\x2', 
		'\x2', '\x2', '\x27FA', '\x27F4', '\x3', '\x2', '\x2', '\x2', '\x27FA', 
		'\x27FB', '\x3', '\x2', '\x2', '\x2', '\x27FB', '\x27FC', '\x3', '\x2', 
		'\x2', '\x2', '\x27FC', '\x27FD', '\a', '\x337', '\x2', '\x2', '\x27FD', 
		'\x379', '\x3', '\x2', '\x2', '\x2', '\x27FE', '\x27FF', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x27FF', '\x2800', '\a', '\x331', '\x2', '\x2', '\x2800', 
		'\x2801', '\x5', '\x3BA', '\x1DE', '\x2', '\x2801', '\x2802', '\a', '\x331', 
		'\x2', '\x2', '\x2802', '\x2803', '\x5', '\x3BA', '\x1DE', '\x2', '\x2803', 
		'\x2804', '\a', '\x331', '\x2', '\x2', '\x2804', '\x2810', '\x3', '\x2', 
		'\x2', '\x2', '\x2805', '\x2806', '\x5', '\x3BA', '\x1DE', '\x2', '\x2806', 
		'\x2808', '\a', '\x331', '\x2', '\x2', '\x2807', '\x2809', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2808', '\x2807', '\x3', '\x2', '\x2', '\x2', '\x2808', 
		'\x2809', '\x3', '\x2', '\x2', '\x2', '\x2809', '\x280A', '\x3', '\x2', 
		'\x2', '\x2', '\x280A', '\x280B', '\a', '\x331', '\x2', '\x2', '\x280B', 
		'\x2810', '\x3', '\x2', '\x2', '\x2', '\x280C', '\x280D', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x280D', '\x280E', '\a', '\x331', '\x2', '\x2', '\x280E', 
		'\x2810', '\x3', '\x2', '\x2', '\x2', '\x280F', '\x27FE', '\x3', '\x2', 
		'\x2', '\x2', '\x280F', '\x2805', '\x3', '\x2', '\x2', '\x2', '\x280F', 
		'\x280C', '\x3', '\x2', '\x2', '\x2', '\x280F', '\x2810', '\x3', '\x2', 
		'\x2', '\x2', '\x2810', '\x2811', '\x3', '\x2', '\x2', '\x2', '\x2811', 
		'\x2812', '\x5', '\x3BA', '\x1DE', '\x2', '\x2812', '\x37B', '\x3', '\x2', 
		'\x2', '\x2', '\x2813', '\x2819', '\x5', '\x3BA', '\x1DE', '\x2', '\x2814', 
		'\x2815', '\x5', '\x3BA', '\x1DE', '\x2', '\x2815', '\x2816', '\a', '\x331', 
		'\x2', '\x2', '\x2816', '\x2817', '\x5', '\x3BA', '\x1DE', '\x2', '\x2817', 
		'\x2819', '\x3', '\x2', '\x2', '\x2', '\x2818', '\x2813', '\x3', '\x2', 
		'\x2', '\x2', '\x2818', '\x2814', '\x3', '\x2', '\x2', '\x2', '\x2819', 
		'\x37D', '\x3', '\x2', '\x2', '\x2', '\x281A', '\x2820', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x281B', '\x281C', '\x5', '\x3BA', '\x1DE', '\x2', '\x281C', 
		'\x281D', '\a', '\x331', '\x2', '\x2', '\x281D', '\x281E', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x281E', '\x2820', '\x3', '\x2', '\x2', '\x2', '\x281F', 
		'\x281A', '\x3', '\x2', '\x2', '\x2', '\x281F', '\x281B', '\x3', '\x2', 
		'\x2', '\x2', '\x2820', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x2821', 
		'\x2822', '\x5', '\x3BA', '\x1DE', '\x2', '\x2822', '\x2823', '\a', '\x331', 
		'\x2', '\x2', '\x2823', '\x2824', '\x5', '\x3BA', '\x1DE', '\x2', '\x2824', 
		'\x2825', '\a', '\x331', '\x2', '\x2', '\x2825', '\x2826', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2826', '\x2827', '\a', '\x331', '\x2', '\x2', '\x2827', 
		'\x2833', '\x3', '\x2', '\x2', '\x2', '\x2828', '\x2829', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2829', '\x282B', '\a', '\x331', '\x2', '\x2', '\x282A', 
		'\x282C', '\x5', '\x3BA', '\x1DE', '\x2', '\x282B', '\x282A', '\x3', '\x2', 
		'\x2', '\x2', '\x282B', '\x282C', '\x3', '\x2', '\x2', '\x2', '\x282C', 
		'\x282D', '\x3', '\x2', '\x2', '\x2', '\x282D', '\x282E', '\a', '\x331', 
		'\x2', '\x2', '\x282E', '\x2833', '\x3', '\x2', '\x2', '\x2', '\x282F', 
		'\x2830', '\x5', '\x3BA', '\x1DE', '\x2', '\x2830', '\x2831', '\a', '\x331', 
		'\x2', '\x2', '\x2831', '\x2833', '\x3', '\x2', '\x2', '\x2', '\x2832', 
		'\x2821', '\x3', '\x2', '\x2', '\x2', '\x2832', '\x2828', '\x3', '\x2', 
		'\x2', '\x2', '\x2832', '\x282F', '\x3', '\x2', '\x2', '\x2', '\x2832', 
		'\x2833', '\x3', '\x2', '\x2', '\x2', '\x2833', '\x2834', '\x3', '\x2', 
		'\x2', '\x2', '\x2834', '\x2835', '\x5', '\x3BA', '\x1DE', '\x2', '\x2835', 
		'\x381', '\x3', '\x2', '\x2', '\x2', '\x2836', '\x2837', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2837', '\x2839', '\a', '\x331', '\x2', '\x2', '\x2838', 
		'\x283A', '\x5', '\x3BA', '\x1DE', '\x2', '\x2839', '\x2838', '\x3', '\x2', 
		'\x2', '\x2', '\x2839', '\x283A', '\x3', '\x2', '\x2', '\x2', '\x283A', 
		'\x283B', '\x3', '\x2', '\x2', '\x2', '\x283B', '\x283C', '\a', '\x331', 
		'\x2', '\x2', '\x283C', '\x2841', '\x3', '\x2', '\x2', '\x2', '\x283D', 
		'\x283E', '\x5', '\x3BA', '\x1DE', '\x2', '\x283E', '\x283F', '\a', '\x331', 
		'\x2', '\x2', '\x283F', '\x2841', '\x3', '\x2', '\x2', '\x2', '\x2840', 
		'\x2836', '\x3', '\x2', '\x2', '\x2', '\x2840', '\x283D', '\x3', '\x2', 
		'\x2', '\x2', '\x2840', '\x2841', '\x3', '\x2', '\x2', '\x2', '\x2841', 
		'\x2842', '\x3', '\x2', '\x2', '\x2', '\x2842', '\x2851', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2843', '\x2844', '\x5', '\x3BA', '\x1DE', '\x2', '\x2844', 
		'\x2846', '\a', '\x331', '\x2', '\x2', '\x2845', '\x2847', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2846', '\x2845', '\x3', '\x2', '\x2', '\x2', '\x2846', 
		'\x2847', '\x3', '\x2', '\x2', '\x2', '\x2847', '\x2848', '\x3', '\x2', 
		'\x2', '\x2', '\x2848', '\x2849', '\a', '\x331', '\x2', '\x2', '\x2849', 
		'\x284E', '\x3', '\x2', '\x2', '\x2', '\x284A', '\x284B', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x284B', '\x284C', '\a', '\x331', '\x2', '\x2', '\x284C', 
		'\x284E', '\x3', '\x2', '\x2', '\x2', '\x284D', '\x2843', '\x3', '\x2', 
		'\x2', '\x2', '\x284D', '\x284A', '\x3', '\x2', '\x2', '\x2', '\x284D', 
		'\x284E', '\x3', '\x2', '\x2', '\x2', '\x284E', '\x284F', '\x3', '\x2', 
		'\x2', '\x2', '\x284F', '\x2851', '\a', ' ', '\x2', '\x2', '\x2850', '\x2840', 
		'\x3', '\x2', '\x2', '\x2', '\x2850', '\x284D', '\x3', '\x2', '\x2', '\x2', 
		'\x2851', '\x383', '\x3', '\x2', '\x2', '\x2', '\x2852', '\x2853', '\x5', 
		'\x3BA', '\x1DE', '\x2', '\x2853', '\x2854', '\a', '\x331', '\x2', '\x2', 
		'\x2854', '\x2856', '\x3', '\x2', '\x2', '\x2', '\x2855', '\x2852', '\x3', 
		'\x2', '\x2', '\x2', '\x2855', '\x2856', '\x3', '\x2', '\x2', '\x2', '\x2856', 
		'\x2857', '\x3', '\x2', '\x2', '\x2', '\x2857', '\x2858', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2858', '\x385', '\x3', '\x2', '\x2', '\x2', '\x2859', 
		'\x285A', '\x5', '\x3BA', '\x1DE', '\x2', '\x285A', '\x285B', '\a', '\x331', 
		'\x2', '\x2', '\x285B', '\x285D', '\x3', '\x2', '\x2', '\x2', '\x285C', 
		'\x2859', '\x3', '\x2', '\x2', '\x2', '\x285C', '\x285D', '\x3', '\x2', 
		'\x2', '\x2', '\x285D', '\x285E', '\x3', '\x2', '\x2', '\x2', '\x285E', 
		'\x285F', '\x5', '\x3BA', '\x1DE', '\x2', '\x285F', '\x387', '\x3', '\x2', 
		'\x2', '\x2', '\x2860', '\x286C', '\x5', '\x386', '\x1C4', '\x2', '\x2861', 
		'\x2862', '\x5', '\x3BA', '\x1DE', '\x2', '\x2862', '\x2864', '\a', '\x331', 
		'\x2', '\x2', '\x2863', '\x2865', '\x5', '\x3BA', '\x1DE', '\x2', '\x2864', 
		'\x2863', '\x3', '\x2', '\x2', '\x2', '\x2864', '\x2865', '\x3', '\x2', 
		'\x2', '\x2', '\x2865', '\x2866', '\x3', '\x2', '\x2', '\x2', '\x2866', 
		'\x2867', '\a', '\x331', '\x2', '\x2', '\x2867', '\x2869', '\x3', '\x2', 
		'\x2', '\x2', '\x2868', '\x2861', '\x3', '\x2', '\x2', '\x2', '\x2868', 
		'\x2869', '\x3', '\x2', '\x2', '\x2', '\x2869', '\x286A', '\x3', '\x2', 
		'\x2', '\x2', '\x286A', '\x286C', '\x5', '\x3BA', '\x1DE', '\x2', '\x286B', 
		'\x2860', '\x3', '\x2', '\x2', '\x2', '\x286B', '\x2868', '\x3', '\x2', 
		'\x2', '\x2', '\x286C', '\x389', '\x3', '\x2', '\x2', '\x2', '\x286D', 
		'\x287B', '\x5', '\x388', '\x1C5', '\x2', '\x286E', '\x286F', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x286F', '\x2870', '\a', '\x331', '\x2', '\x2', '\x2870', 
		'\x2871', '\x5', '\x3BA', '\x1DE', '\x2', '\x2871', '\x2873', '\a', '\x331', 
		'\x2', '\x2', '\x2872', '\x2874', '\x5', '\x3BA', '\x1DE', '\x2', '\x2873', 
		'\x2872', '\x3', '\x2', '\x2', '\x2', '\x2873', '\x2874', '\x3', '\x2', 
		'\x2', '\x2', '\x2874', '\x2875', '\x3', '\x2', '\x2', '\x2', '\x2875', 
		'\x2876', '\a', '\x331', '\x2', '\x2', '\x2876', '\x2878', '\x3', '\x2', 
		'\x2', '\x2', '\x2877', '\x286E', '\x3', '\x2', '\x2', '\x2', '\x2877', 
		'\x2878', '\x3', '\x2', '\x2', '\x2', '\x2878', '\x2879', '\x3', '\x2', 
		'\x2', '\x2', '\x2879', '\x287B', '\x5', '\x3BA', '\x1DE', '\x2', '\x287A', 
		'\x286D', '\x3', '\x2', '\x2', '\x2', '\x287A', '\x2877', '\x3', '\x2', 
		'\x2', '\x2', '\x287B', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x287C', 
		'\x287F', '\x5', '\x380', '\x1C1', '\x2', '\x287D', '\x287F', '\a', '\x31B', 
		'\x2', '\x2', '\x287E', '\x287C', '\x3', '\x2', '\x2', '\x2', '\x287E', 
		'\x287D', '\x3', '\x2', '\x2', '\x2', '\x287F', '\x38D', '\x3', '\x2', 
		'\x2', '\x2', '\x2880', '\x2881', '\x5', '\x382', '\x1C2', '\x2', '\x2881', 
		'\x2882', '\a', '\x331', '\x2', '\x2', '\x2882', '\x2884', '\x3', '\x2', 
		'\x2', '\x2', '\x2883', '\x2880', '\x3', '\x2', '\x2', '\x2', '\x2883', 
		'\x2884', '\x3', '\x2', '\x2', '\x2', '\x2884', '\x2885', '\x3', '\x2', 
		'\x2', '\x2', '\x2885', '\x28B1', '\x5', '\x3BA', '\x1DE', '\x2', '\x2886', 
		'\x2887', '\x5', '\x382', '\x1C2', '\x2', '\x2887', '\x2888', '\a', '\x331', 
		'\x2', '\x2', '\x2888', '\x288A', '\x3', '\x2', '\x2', '\x2', '\x2889', 
		'\x2886', '\x3', '\x2', '\x2', '\x2', '\x2889', '\x288A', '\x3', '\x2', 
		'\x2', '\x2', '\x288A', '\x288B', '\x3', '\x2', '\x2', '\x2', '\x288B', 
		'\x28B1', '\a', '\x1BC', '\x2', '\x2', '\x288C', '\x288D', '\x5', '\x382', 
		'\x1C2', '\x2', '\x288D', '\x288E', '\a', '\x331', '\x2', '\x2', '\x288E', 
		'\x2890', '\x3', '\x2', '\x2', '\x2', '\x288F', '\x288C', '\x3', '\x2', 
		'\x2', '\x2', '\x288F', '\x2890', '\x3', '\x2', '\x2', '\x2', '\x2890', 
		'\x2891', '\x3', '\x2', '\x2', '\x2', '\x2891', '\x28B1', '\a', '\x2DF', 
		'\x2', '\x2', '\x2892', '\x2893', '\x5', '\x382', '\x1C2', '\x2', '\x2893', 
		'\x2894', '\a', '\x331', '\x2', '\x2', '\x2894', '\x2896', '\x3', '\x2', 
		'\x2', '\x2', '\x2895', '\x2892', '\x3', '\x2', '\x2', '\x2', '\x2895', 
		'\x2896', '\x3', '\x2', '\x2', '\x2', '\x2896', '\x2897', '\x3', '\x2', 
		'\x2', '\x2', '\x2897', '\x28B1', '\a', '\x297', '\x2', '\x2', '\x2898', 
		'\x2899', '\x5', '\x382', '\x1C2', '\x2', '\x2899', '\x289A', '\a', '\x331', 
		'\x2', '\x2', '\x289A', '\x289C', '\x3', '\x2', '\x2', '\x2', '\x289B', 
		'\x2898', '\x3', '\x2', '\x2', '\x2', '\x289B', '\x289C', '\x3', '\x2', 
		'\x2', '\x2', '\x289C', '\x289D', '\x3', '\x2', '\x2', '\x2', '\x289D', 
		'\x28B1', '\a', '\x198', '\x2', '\x2', '\x289E', '\x289F', '\x5', '\x382', 
		'\x1C2', '\x2', '\x289F', '\x28A0', '\a', '\x331', '\x2', '\x2', '\x28A0', 
		'\x28A2', '\x3', '\x2', '\x2', '\x2', '\x28A1', '\x289E', '\x3', '\x2', 
		'\x2', '\x2', '\x28A1', '\x28A2', '\x3', '\x2', '\x2', '\x2', '\x28A2', 
		'\x28A3', '\x3', '\x2', '\x2', '\x2', '\x28A3', '\x28B1', '\a', '\x195', 
		'\x2', '\x2', '\x28A4', '\x28A5', '\x5', '\x382', '\x1C2', '\x2', '\x28A5', 
		'\x28A6', '\a', '\x331', '\x2', '\x2', '\x28A6', '\x28A8', '\x3', '\x2', 
		'\x2', '\x2', '\x28A7', '\x28A4', '\x3', '\x2', '\x2', '\x2', '\x28A7', 
		'\x28A8', '\x3', '\x2', '\x2', '\x2', '\x28A8', '\x28A9', '\x3', '\x2', 
		'\x2', '\x2', '\x28A9', '\x28B1', '\a', '\x194', '\x2', '\x2', '\x28AA', 
		'\x28AB', '\x5', '\x382', '\x1C2', '\x2', '\x28AB', '\x28AC', '\a', '\x331', 
		'\x2', '\x2', '\x28AC', '\x28AE', '\x3', '\x2', '\x2', '\x2', '\x28AD', 
		'\x28AA', '\x3', '\x2', '\x2', '\x2', '\x28AD', '\x28AE', '\x3', '\x2', 
		'\x2', '\x2', '\x28AE', '\x28AF', '\x3', '\x2', '\x2', '\x2', '\x28AF', 
		'\x28B1', '\a', '\x193', '\x2', '\x2', '\x28B0', '\x2883', '\x3', '\x2', 
		'\x2', '\x2', '\x28B0', '\x2889', '\x3', '\x2', '\x2', '\x2', '\x28B0', 
		'\x288F', '\x3', '\x2', '\x2', '\x2', '\x28B0', '\x2895', '\x3', '\x2', 
		'\x2', '\x2', '\x28B0', '\x289B', '\x3', '\x2', '\x2', '\x2', '\x28B0', 
		'\x28A1', '\x3', '\x2', '\x2', '\x2', '\x28B0', '\x28A7', '\x3', '\x2', 
		'\x2', '\x2', '\x28B0', '\x28AD', '\x3', '\x2', '\x2', '\x2', '\x28B1', 
		'\x38F', '\x3', '\x2', '\x2', '\x2', '\x28B2', '\x28B4', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x28B3', '\x28B5', '\t', 'v', '\x2', '\x2', '\x28B4', 
		'\x28B3', '\x3', '\x2', '\x2', '\x2', '\x28B4', '\x28B5', '\x3', '\x2', 
		'\x2', '\x2', '\x28B5', '\x28BD', '\x3', '\x2', '\x2', '\x2', '\x28B6', 
		'\x28B7', '\a', '\x338', '\x2', '\x2', '\x28B7', '\x28B9', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x28B8', '\x28BA', '\t', 'v', '\x2', '\x2', '\x28B9', 
		'\x28B8', '\x3', '\x2', '\x2', '\x2', '\x28B9', '\x28BA', '\x3', '\x2', 
		'\x2', '\x2', '\x28BA', '\x28BC', '\x3', '\x2', '\x2', '\x2', '\x28BB', 
		'\x28B6', '\x3', '\x2', '\x2', '\x2', '\x28BC', '\x28BF', '\x3', '\x2', 
		'\x2', '\x2', '\x28BD', '\x28BB', '\x3', '\x2', '\x2', '\x2', '\x28BD', 
		'\x28BE', '\x3', '\x2', '\x2', '\x2', '\x28BE', '\x391', '\x3', '\x2', 
		'\x2', '\x2', '\x28BF', '\x28BD', '\x3', '\x2', '\x2', '\x2', '\x28C0', 
		'\x28C5', '\x5', '\x3BA', '\x1DE', '\x2', '\x28C1', '\x28C2', '\a', '\x338', 
		'\x2', '\x2', '\x28C2', '\x28C4', '\x5', '\x3BA', '\x1DE', '\x2', '\x28C3', 
		'\x28C1', '\x3', '\x2', '\x2', '\x2', '\x28C4', '\x28C7', '\x3', '\x2', 
		'\x2', '\x2', '\x28C5', '\x28C3', '\x3', '\x2', '\x2', '\x2', '\x28C5', 
		'\x28C6', '\x3', '\x2', '\x2', '\x2', '\x28C6', '\x393', '\x3', '\x2', 
		'\x2', '\x2', '\x28C7', '\x28C5', '\x3', '\x2', '\x2', '\x2', '\x28C8', 
		'\x28CB', '\x5', '\x3BA', '\x1DE', '\x2', '\x28C9', '\x28CB', '\a', '\x31B', 
		'\x2', '\x2', '\x28CA', '\x28C8', '\x3', '\x2', '\x2', '\x2', '\x28CA', 
		'\x28C9', '\x3', '\x2', '\x2', '\x2', '\x28CB', '\x395', '\x3', '\x2', 
		'\x2', '\x2', '\x28CC', '\x28CD', '\t', '\t', '\x2', '\x2', '\x28CD', 
		'\x397', '\x3', '\x2', '\x2', '\x2', '\x28CE', '\x28CF', '\t', '\x85', 
		'\x2', '\x2', '\x28CF', '\x399', '\x3', '\x2', '\x2', '\x2', '\x28D0', 
		'\x28D2', '\a', '\xDD', '\x2', '\x2', '\x28D1', '\x28D0', '\x3', '\x2', 
		'\x2', '\x2', '\x28D1', '\x28D2', '\x3', '\x2', '\x2', '\x2', '\x28D2', 
		'\x28D3', '\x3', '\x2', '\x2', '\x2', '\x28D3', '\x28D4', '\a', '\xE0', 
		'\x2', '\x2', '\x28D4', '\x39B', '\x3', '\x2', '\x2', '\x2', '\x28D5', 
		'\x28DD', '\x5', '\x39A', '\x1CE', '\x2', '\x28D6', '\x28D7', '\a', 'Z', 
		'\x2', '\x2', '\x28D7', '\x28DA', '\x5', '\x2D6', '\x16C', '\x2', '\x28D8', 
		'\x28D9', '\a', '\x17D', '\x2', '\x2', '\x28D9', '\x28DB', '\a', '\x173', 
		'\x2', '\x2', '\x28DA', '\x28D8', '\x3', '\x2', '\x2', '\x2', '\x28DA', 
		'\x28DB', '\x3', '\x2', '\x2', '\x2', '\x28DB', '\x28DD', '\x3', '\x2', 
		'\x2', '\x2', '\x28DC', '\x28D5', '\x3', '\x2', '\x2', '\x2', '\x28DC', 
		'\x28D6', '\x3', '\x2', '\x2', '\x2', '\x28DD', '\x39D', '\x3', '\x2', 
		'\x2', '\x2', '\x28DE', '\x28E4', '\x5', '\x38A', '\x1C6', '\x2', '\x28DF', 
		'\x28E4', '\a', '\x120', '\x2', '\x2', '\x28E0', '\x28E4', '\a', '\xB2', 
		'\x2', '\x2', '\x28E1', '\x28E4', '\a', '\x1A9', '\x2', '\x2', '\x28E2', 
		'\x28E4', '\a', '\x1B6', '\x2', '\x2', '\x28E3', '\x28DE', '\x3', '\x2', 
		'\x2', '\x2', '\x28E3', '\x28DF', '\x3', '\x2', '\x2', '\x2', '\x28E3', 
		'\x28E0', '\x3', '\x2', '\x2', '\x2', '\x28E3', '\x28E1', '\x3', '\x2', 
		'\x2', '\x2', '\x28E3', '\x28E2', '\x3', '\x2', '\x2', '\x2', '\x28E4', 
		'\x39F', '\x3', '\x2', '\x2', '\x2', '\x28E5', '\x28E6', '\a', '\x1C', 
		'\x2', '\x2', '\x28E6', '\x28E7', '\a', '\x46', '\x2', '\x2', '\x28E7', 
		'\x28E8', '\a', '\x2F2', '\x2', '\x2', '\x28E8', '\x28E9', '\a', '\x336', 
		'\x2', '\x2', '\x28E9', '\x28EA', '\a', '\x31B', '\x2', '\x2', '\x28EA', 
		'\x28EB', '\a', '\x337', '\x2', '\x2', '\x28EB', '\x28EC', '\a', '\x2F1', 
		'\x2', '\x2', '\x28EC', '\x28ED', '\a', '\x324', '\x2', '\x2', '\x28ED', 
		'\x28EF', '\x5', '\x1C0', '\xE1', '\x2', '\x28EE', '\x28F0', '\a', '\x339', 
		'\x2', '\x2', '\x28EF', '\x28EE', '\x3', '\x2', '\x2', '\x2', '\x28EF', 
		'\x28F0', '\x3', '\x2', '\x2', '\x2', '\x28F0', '\x3A1', '\x3', '\x2', 
		'\x2', '\x2', '\x28F1', '\x28F2', '\a', '\x1C', '\x2', '\x2', '\x28F2', 
		'\x28F4', '\a', '\x1E1', '\x2', '\x2', '\x28F3', '\x28F5', '\a', '\x46', 
		'\x2', '\x2', '\x28F4', '\x28F3', '\x3', '\x2', '\x2', '\x2', '\x28F4', 
		'\x28F5', '\x3', '\x2', '\x2', '\x2', '\x28F5', '\x28F6', '\x3', '\x2', 
		'\x2', '\x2', '\x28F6', '\x28F7', '\a', '\x31B', '\x2', '\x2', '\x28F7', 
		'\x28F8', '\a', '\x8C', '\x2', '\x2', '\x28F8', '\x28F9', '\a', '\x139', 
		'\x2', '\x2', '\x28F9', '\x28FA', '\x5', '\x3A6', '\x1D4', '\x2', '\x28FA', 
		'\x28FB', '\a', '\x15E', '\x2', '\x2', '\x28FB', '\x28FC', '\a', '\x139', 
		'\x2', '\x2', '\x28FC', '\x28FF', '\x5', '\x3A6', '\x1D4', '\x2', '\x28FD', 
		'\x28FE', '\a', '\x338', '\x2', '\x2', '\x28FE', '\x2900', '\a', '\x320', 
		'\x2', '\x2', '\x28FF', '\x28FD', '\x3', '\x2', '\x2', '\x2', '\x28FF', 
		'\x2900', '\x3', '\x2', '\x2', '\x2', '\x2900', '\x2901', '\x3', '\x2', 
		'\x2', '\x2', '\x2901', '\x2902', '\a', '\xE6', '\x2', '\x2', '\x2902', 
		'\x2903', '\a', '\x44', '\x2', '\x2', '\x2903', '\x291A', '\x5', '\x3A4', 
		'\x1D3', '\x2', '\x2904', '\x290B', '\a', '\x17D', '\x2', '\x2', '\x2905', 
		'\x2906', '\t', '\x86', '\x2', '\x2', '\x2906', '\x2907', '\a', '\x324', 
		'\x2', '\x2', '\x2907', '\x2909', '\a', '\x31B', '\x2', '\x2', '\x2908', 
		'\x290A', '\a', '\x338', '\x2', '\x2', '\x2909', '\x2908', '\x3', '\x2', 
		'\x2', '\x2', '\x2909', '\x290A', '\x3', '\x2', '\x2', '\x2', '\x290A', 
		'\x290C', '\x3', '\x2', '\x2', '\x2', '\x290B', '\x2905', '\x3', '\x2', 
		'\x2', '\x2', '\x290B', '\x290C', '\x3', '\x2', '\x2', '\x2', '\x290C', 
		'\x2913', '\x3', '\x2', '\x2', '\x2', '\x290D', '\x290E', '\a', '\xB4', 
		'\x2', '\x2', '\x290E', '\x290F', '\a', '\x324', '\x2', '\x2', '\x290F', 
		'\x2911', '\t', '\x2', '\x2', '\x2', '\x2910', '\x2912', '\a', '\x338', 
		'\x2', '\x2', '\x2911', '\x2910', '\x3', '\x2', '\x2', '\x2', '\x2911', 
		'\x2912', '\x3', '\x2', '\x2', '\x2', '\x2912', '\x2914', '\x3', '\x2', 
		'\x2', '\x2', '\x2913', '\x290D', '\x3', '\x2', '\x2', '\x2', '\x2913', 
		'\x2914', '\x3', '\x2', '\x2', '\x2', '\x2914', '\x2918', '\x3', '\x2', 
		'\x2', '\x2', '\x2915', '\x2916', '\a', '\x1EF', '\x2', '\x2', '\x2916', 
		'\x2917', '\a', '\x324', '\x2', '\x2', '\x2917', '\x2919', '\t', '\t', 
		'\x2', '\x2', '\x2918', '\x2915', '\x3', '\x2', '\x2', '\x2', '\x2918', 
		'\x2919', '\x3', '\x2', '\x2', '\x2', '\x2919', '\x291B', '\x3', '\x2', 
		'\x2', '\x2', '\x291A', '\x2904', '\x3', '\x2', '\x2', '\x2', '\x291A', 
		'\x291B', '\x3', '\x2', '\x2', '\x2', '\x291B', '\x291D', '\x3', '\x2', 
		'\x2', '\x2', '\x291C', '\x291E', '\a', '\x339', '\x2', '\x2', '\x291D', 
		'\x291C', '\x3', '\x2', '\x2', '\x2', '\x291D', '\x291E', '\x3', '\x2', 
		'\x2', '\x2', '\x291E', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x291F', 
		'\x2922', '\x5', '\x3BA', '\x1DE', '\x2', '\x2920', '\x2922', '\x5', '\x2CC', 
		'\x167', '\x2', '\x2921', '\x291F', '\x3', '\x2', '\x2', '\x2', '\x2921', 
		'\x2920', '\x3', '\x2', '\x2', '\x2', '\x2922', '\x3A5', '\x3', '\x2', 
		'\x2', '\x2', '\x2923', '\x2926', '\x5', '\x3BA', '\x1DE', '\x2', '\x2924', 
		'\x2926', '\x5', '\x2CC', '\x167', '\x2', '\x2925', '\x2923', '\x3', '\x2', 
		'\x2', '\x2', '\x2925', '\x2924', '\x3', '\x2', '\x2', '\x2', '\x2926', 
		'\x3A7', '\x3', '\x2', '\x2', '\x2', '\x2927', '\x2928', '\a', 'm', '\x2', 
		'\x2', '\x2928', '\x2929', '\a', '\x46', '\x2', '\x2', '\x2929', '\x292B', 
		'\a', '\x31B', '\x2', '\x2', '\x292A', '\x292C', '\a', '\x339', '\x2', 
		'\x2', '\x292B', '\x292A', '\x3', '\x2', '\x2', '\x2', '\x292B', '\x292C', 
		'\x3', '\x2', '\x2', '\x2', '\x292C', '\x2939', '\x3', '\x2', '\x2', '\x2', 
		'\x292D', '\x2934', '\a', '\x17D', '\x2', '\x2', '\x292E', '\x292F', '\a', 
		'q', '\x2', '\x2', '\x292F', '\x2930', '\a', '\x324', '\x2', '\x2', '\x2930', 
		'\x2931', '\t', '\x3', '\x2', '\x2', '\x2931', '\x2932', '\a', '\x1DE', 
		'\x2', '\x2', '\x2932', '\x2933', '\a', '\x324', '\x2', '\x2', '\x2933', 
		'\x2935', '\t', '\x3', '\x2', '\x2', '\x2934', '\x292E', '\x3', '\x2', 
		'\x2', '\x2', '\x2934', '\x2935', '\x3', '\x2', '\x2', '\x2', '\x2935', 
		'\x2937', '\x3', '\x2', '\x2', '\x2', '\x2936', '\x2938', '\a', '\x1B8', 
		'\x2', '\x2', '\x2937', '\x2936', '\x3', '\x2', '\x2', '\x2', '\x2937', 
		'\x2938', '\x3', '\x2', '\x2', '\x2', '\x2938', '\x293A', '\x3', '\x2', 
		'\x2', '\x2', '\x2939', '\x292D', '\x3', '\x2', '\x2', '\x2', '\x2939', 
		'\x293A', '\x3', '\x2', '\x2', '\x2', '\x293A', '\x3A9', '\x3', '\x2', 
		'\x2', '\x2', '\x293B', '\x293D', '\a', '\x178', '\x2', '\x2', '\x293C', 
		'\x293B', '\x3', '\x2', '\x2', '\x2', '\x293C', '\x293D', '\x3', '\x2', 
		'\x2', '\x2', '\x293D', '\x293E', '\x3', '\x2', '\x2', '\x2', '\x293E', 
		'\x293F', '\a', '\x336', '\x2', '\x2', '\x293F', '\x2940', '\x5', '\x3AC', 
		'\x1D7', '\x2', '\x2940', '\x2946', '\a', '\x337', '\x2', '\x2', '\x2941', 
		'\x2943', '\a', '\x338', '\x2', '\x2', '\x2942', '\x2941', '\x3', '\x2', 
		'\x2', '\x2', '\x2942', '\x2943', '\x3', '\x2', '\x2', '\x2', '\x2943', 
		'\x2944', '\x3', '\x2', '\x2', '\x2', '\x2944', '\x2945', '\a', '\x2F1', 
		'\x2', '\x2', '\x2945', '\x2947', '\x5', '\x1C0', '\xE1', '\x2', '\x2946', 
		'\x2942', '\x3', '\x2', '\x2', '\x2', '\x2946', '\x2947', '\x3', '\x2', 
		'\x2', '\x2', '\x2947', '\x2949', '\x3', '\x2', '\x2', '\x2', '\x2948', 
		'\x294A', '\a', '\x339', '\x2', '\x2', '\x2949', '\x2948', '\x3', '\x2', 
		'\x2', '\x2', '\x2949', '\x294A', '\x3', '\x2', '\x2', '\x2', '\x294A', 
		'\x3AB', '\x3', '\x2', '\x2', '\x2', '\x294B', '\x294C', '\a', '\x8F', 
		'\x2', '\x2', '\x294C', '\x294D', '\a', '\x46', '\x2', '\x2', '\x294D', 
		'\x294E', '\a', '\x93', '\x2', '\x2', '\x294E', '\x294F', '\t', '\x3', 
		'\x2', '\x2', '\x294F', '\x2950', '\a', '\x8C', '\x2', '\x2', '\x2950', 
		'\x2952', '\x5', '\x3AE', '\x1D8', '\x2', '\x2951', '\x2953', '\a', '\x339', 
		'\x2', '\x2', '\x2952', '\x2951', '\x3', '\x2', '\x2', '\x2', '\x2952', 
		'\x2953', '\x3', '\x2', '\x2', '\x2', '\x2953', '\x3AD', '\x3', '\x2', 
		'\x2', '\x2', '\x2954', '\x2955', '\x5', '\x3BA', '\x1DE', '\x2', '\x2955', 
		'\x2956', '\a', '\x331', '\x2', '\x2', '\x2956', '\x2957', '\x5', '\x3BA', 
		'\x1DE', '\x2', '\x2957', '\x2958', '\a', '\x331', '\x2', '\x2', '\x2958', 
		'\x2959', '\x5', '\x3BA', '\x1DE', '\x2', '\x2959', '\x295C', '\x3', '\x2', 
		'\x2', '\x2', '\x295A', '\x295C', '\x5', '\x3BA', '\x1DE', '\x2', '\x295B', 
		'\x2954', '\x3', '\x2', '\x2', '\x2', '\x295B', '\x295A', '\x3', '\x2', 
		'\x2', '\x2', '\x295C', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x295D', 
		'\x295E', '\a', '\x2CD', '\x2', '\x2', '\x295E', '\x295F', '\a', '\xE6', 
		'\x2', '\x2', '\x295F', '\x2960', '\a', '\x46', '\x2', '\x2', '\x2960', 
		'\x2961', '\t', '\x3', '\x2', '\x2', '\x2961', '\x2962', '\a', '\x252', 
		'\x2', '\x2', '\x2962', '\x2963', '\a', '\x2FC', '\x2', '\x2', '\x2963', 
		'\x2967', '\x5', '\x2CC', '\x167', '\x2', '\x2964', '\x2965', '\a', '\x336', 
		'\x2', '\x2', '\x2965', '\x2966', '\t', '\x3', '\x2', '\x2', '\x2966', 
		'\x2968', '\a', '\x337', '\x2', '\x2', '\x2967', '\x2964', '\x3', '\x2', 
		'\x2', '\x2', '\x2967', '\x2968', '\x3', '\x2', '\x2', '\x2', '\x2968', 
		'\x296A', '\x3', '\x2', '\x2', '\x2', '\x2969', '\x296B', '\a', '\x339', 
		'\x2', '\x2', '\x296A', '\x2969', '\x3', '\x2', '\x2', '\x2', '\x296A', 
		'\x296B', '\x3', '\x2', '\x2', '\x2', '\x296B', '\x3B1', '\x3', '\x2', 
		'\x2', '\x2', '\x296C', '\x296E', '\x5', '\x3BA', '\x1DE', '\x2', '\x296D', 
		'\x296F', '\a', '\x97', '\x2', '\x2', '\x296E', '\x296D', '\x3', '\x2', 
		'\x2', '\x2', '\x296E', '\x296F', '\x3', '\x2', '\x2', '\x2', '\x296F', 
		'\x2977', '\x3', '\x2', '\x2', '\x2', '\x2970', '\x2971', '\a', '\x336', 
		'\x2', '\x2', '\x2971', '\x2974', '\t', '\x87', '\x2', '\x2', '\x2972', 
		'\x2973', '\a', '\x338', '\x2', '\x2', '\x2973', '\x2975', '\a', '\x31C', 
		'\x2', '\x2', '\x2974', '\x2972', '\x3', '\x2', '\x2', '\x2', '\x2974', 
		'\x2975', '\x3', '\x2', '\x2', '\x2', '\x2975', '\x2976', '\x3', '\x2', 
		'\x2', '\x2', '\x2976', '\x2978', '\a', '\x337', '\x2', '\x2', '\x2977', 
		'\x2970', '\x3', '\x2', '\x2', '\x2', '\x2977', '\x2978', '\x3', '\x2', 
		'\x2', '\x2', '\x2978', '\x2982', '\x3', '\x2', '\x2', '\x2', '\x2979', 
		'\x297B', '\a', '\x65', '\x2', '\x2', '\x297A', '\x297C', '\a', '\xFF', 
		'\x2', '\x2', '\x297B', '\x297A', '\x3', '\x2', '\x2', '\x2', '\x297B', 
		'\x297C', '\x3', '\x2', '\x2', '\x2', '\x297C', '\x2982', '\x3', '\x2', 
		'\x2', '\x2', '\x297D', '\x2982', '\a', '\x226', '\x2', '\x2', '\x297E', 
		'\x2982', '\a', '\x2F3', '\x2', '\x2', '\x297F', '\x2982', '\a', '\x2D8', 
		'\x2', '\x2', '\x2980', '\x2982', '\a', '\x1A7', '\x2', '\x2', '\x2981', 
		'\x296C', '\x3', '\x2', '\x2', '\x2', '\x2981', '\x2979', '\x3', '\x2', 
		'\x2', '\x2', '\x2981', '\x297D', '\x3', '\x2', '\x2', '\x2', '\x2981', 
		'\x297E', '\x3', '\x2', '\x2', '\x2', '\x2981', '\x297F', '\x3', '\x2', 
		'\x2', '\x2', '\x2981', '\x2980', '\x3', '\x2', '\x2', '\x2', '\x2982', 
		'\x3B3', '\x3', '\x2', '\x2', '\x2', '\x2983', '\x2987', '\a', '\xE0', 
		'\x2', '\x2', '\x2984', '\x2987', '\a', 'Z', '\x2', '\x2', '\x2985', '\x2987', 
		'\x5', '\x3B6', '\x1DC', '\x2', '\x2986', '\x2983', '\x3', '\x2', '\x2', 
		'\x2', '\x2986', '\x2984', '\x3', '\x2', '\x2', '\x2', '\x2986', '\x2985', 
		'\x3', '\x2', '\x2', '\x2', '\x2987', '\x3B5', '\x3', '\x2', '\x2', '\x2', 
		'\x2988', '\x2998', '\a', '\x320', '\x2', '\x2', '\x2989', '\x2998', '\a', 
		'\x321', '\x2', '\x2', '\x298A', '\x298C', '\x5', '\x3B8', '\x1DD', '\x2', 
		'\x298B', '\x298A', '\x3', '\x2', '\x2', '\x2', '\x298B', '\x298C', '\x3', 
		'\x2', '\x2', '\x2', '\x298C', '\x298D', '\x3', '\x2', '\x2', '\x2', '\x298D', 
		'\x2998', '\a', '\x31C', '\x2', '\x2', '\x298E', '\x2990', '\x5', '\x3B8', 
		'\x1DD', '\x2', '\x298F', '\x298E', '\x3', '\x2', '\x2', '\x2', '\x298F', 
		'\x2990', '\x3', '\x2', '\x2', '\x2', '\x2990', '\x2991', '\x3', '\x2', 
		'\x2', '\x2', '\x2991', '\x2998', '\t', 'p', '\x2', '\x2', '\x2992', '\x2994', 
		'\x5', '\x3B8', '\x1DD', '\x2', '\x2993', '\x2992', '\x3', '\x2', '\x2', 
		'\x2', '\x2993', '\x2994', '\x3', '\x2', '\x2', '\x2', '\x2994', '\x2995', 
		'\x3', '\x2', '\x2', '\x2', '\x2995', '\x2996', '\a', '\x335', '\x2', 
		'\x2', '\x2996', '\x2998', '\t', '\x88', '\x2', '\x2', '\x2997', '\x2988', 
		'\x3', '\x2', '\x2', '\x2', '\x2997', '\x2989', '\x3', '\x2', '\x2', '\x2', 
		'\x2997', '\x298B', '\x3', '\x2', '\x2', '\x2', '\x2997', '\x298F', '\x3', 
		'\x2', '\x2', '\x2', '\x2997', '\x2993', '\x3', '\x2', '\x2', '\x2', '\x2998', 
		'\x3B7', '\x3', '\x2', '\x2', '\x2', '\x2999', '\x299A', '\t', 'm', '\x2', 
		'\x2', '\x299A', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x299B', '\x299F', 
		'\x5', '\x3BC', '\x1DF', '\x2', '\x299C', '\x299F', '\a', '\x318', '\x2', 
		'\x2', '\x299D', '\x299F', '\a', '\x31A', '\x2', '\x2', '\x299E', '\x299B', 
		'\x3', '\x2', '\x2', '\x2', '\x299E', '\x299C', '\x3', '\x2', '\x2', '\x2', 
		'\x299E', '\x299D', '\x3', '\x2', '\x2', '\x2', '\x299F', '\x3BB', '\x3', 
		'\x2', '\x2', '\x2', '\x29A0', '\x29A1', '\t', '\x89', '\x2', '\x2', '\x29A1', 
		'\x3BD', '\x3', '\x2', '\x2', '\x2', '\x29A2', '\x29B2', '\a', '\x324', 
		'\x2', '\x2', '\x29A3', '\x29B2', '\a', '\x325', '\x2', '\x2', '\x29A4', 
		'\x29B2', '\a', '\x326', '\x2', '\x2', '\x29A5', '\x29A6', '\a', '\x326', 
		'\x2', '\x2', '\x29A6', '\x29B2', '\a', '\x324', '\x2', '\x2', '\x29A7', 
		'\x29A8', '\a', '\x325', '\x2', '\x2', '\x29A8', '\x29B2', '\a', '\x324', 
		'\x2', '\x2', '\x29A9', '\x29AA', '\a', '\x326', '\x2', '\x2', '\x29AA', 
		'\x29B2', '\a', '\x325', '\x2', '\x2', '\x29AB', '\x29AC', '\a', '\x327', 
		'\x2', '\x2', '\x29AC', '\x29B2', '\a', '\x324', '\x2', '\x2', '\x29AD', 
		'\x29AE', '\a', '\x327', '\x2', '\x2', '\x29AE', '\x29B2', '\a', '\x325', 
		'\x2', '\x2', '\x29AF', '\x29B0', '\a', '\x327', '\x2', '\x2', '\x29B0', 
		'\x29B2', '\a', '\x326', '\x2', '\x2', '\x29B1', '\x29A2', '\x3', '\x2', 
		'\x2', '\x2', '\x29B1', '\x29A3', '\x3', '\x2', '\x2', '\x2', '\x29B1', 
		'\x29A4', '\x3', '\x2', '\x2', '\x2', '\x29B1', '\x29A5', '\x3', '\x2', 
		'\x2', '\x2', '\x29B1', '\x29A7', '\x3', '\x2', '\x2', '\x2', '\x29B1', 
		'\x29A9', '\x3', '\x2', '\x2', '\x2', '\x29B1', '\x29AB', '\x3', '\x2', 
		'\x2', '\x2', '\x29B1', '\x29AD', '\x3', '\x2', '\x2', '\x2', '\x29B1', 
		'\x29AF', '\x3', '\x2', '\x2', '\x2', '\x29B2', '\x3BF', '\x3', '\x2', 
		'\x2', '\x2', '\x29B3', '\x29B4', '\t', '\x8A', '\x2', '\x2', '\x29B4', 
		'\x3C1', '\x3', '\x2', '\x2', '\x2', '\x29B5', '\x29B7', '\a', '\x31C', 
		'\x2', '\x2', '\x29B6', '\x29B8', '\t', '\x8B', '\x2', '\x2', '\x29B7', 
		'\x29B6', '\x3', '\x2', '\x2', '\x2', '\x29B7', '\x29B8', '\x3', '\x2', 
		'\x2', '\x2', '\x29B8', '\x3C3', '\x3', '\x2', '\x2', '\x2', '\x5EA', 
		'\x3C7', '\x3D0', '\x3D4', '\x3DA', '\x3DD', '\x3E1', '\x3E5', '\x3EE', 
		'\x3F5', '\x496', '\x49D', '\x4AB', '\x4AF', '\x4B2', '\x4B6', '\x4BA', 
		'\x4BE', '\x4C3', '\x4C8', '\x4CA', '\x4CE', '\x4D1', '\x4D8', '\x4DB', 
		'\x4E4', '\x4E7', '\x4F2', '\x4F5', '\x4FA', '\x4FF', '\x502', '\x507', 
		'\x50B', '\x50E', '\x512', '\x515', '\x518', '\x51F', '\x523', '\x525', 
		'\x52A', '\x530', '\x534', '\x541', '\x547', '\x54A', '\x553', '\x556', 
		'\x567', '\x56F', '\x574', '\x577', '\x57C', '\x57F', '\x584', '\x58C', 
		'\x591', '\x594', '\x599', '\x59F', '\x5A4', '\x5B5', '\x5B8', '\x5BB', 
		'\x5BE', '\x5C3', '\x5CC', '\x5DB', '\x5EC', '\x5F7', '\x5FD', '\x60C', 
		'\x61B', '\x624', '\x628', '\x62D', '\x633', '\x639', '\x63C', '\x641', 
		'\x646', '\x64E', '\x658', '\x66B', '\x673', '\x680', '\x682', '\x68E', 
		'\x690', '\x697', '\x6A0', '\x6A6', '\x6AF', '\x6BE', '\x6C8', '\x6D2', 
		'\x6FA', '\x711', '\x735', '\x747', '\x74A', '\x74F', '\x752', '\x757', 
		'\x75A', '\x75F', '\x762', '\x767', '\x76A', '\x772', '\x775', '\x77D', 
		'\x78A', '\x795', '\x79A', '\x79E', '\x7A4', '\x7BB', '\x7C7', '\x7D2', 
		'\x7D7', '\x7DB', '\x7E1', '\x7E3', '\x7F0', '\x807', '\x80E', '\x817', 
		'\x81C', '\x81F', '\x824', '\x827', '\x82C', '\x831', '\x84D', '\x854', 
		'\x859', '\x860', '\x862', '\x86D', '\x873', '\x882', '\x890', '\x893', 
		'\x895', '\x89A', '\x89E', '\x8A1', '\x8A3', '\x8A9', '\x8AC', '\x8AE', 
		'\x8B4', '\x8B6', '\x8CC', '\x8D4', '\x8DC', '\x8DE', '\x8E0', '\x8E9', 
		'\x8FE', '\x90B', '\x91A', '\x91E', '\x941', '\x944', '\x949', '\x95B', 
		'\x95E', '\x963', '\x97D', '\x98B', '\x990', '\x998', '\x99D', '\x9A4', 
		'\x9B9', '\x9DE', '\x9E3', '\x9F6', '\xA02', '\xA05', '\xA0A', '\xA0D', 
		'\xA13', '\xA22', '\xA27', '\xA2F', '\xA32', '\xA37', '\xA3C', '\xA3F', 
		'\xA57', '\xA5E', '\xA63', '\xA68', '\xA6D', '\xA6F', '\xA76', '\xA83', 
		'\xA89', '\xA8E', '\xA96', '\xAA6', '\xAAD', '\xAB2', '\xAB7', '\xABA', 
		'\xAC0', '\xAC6', '\xACB', '\xAD0', '\xAD5', '\xAD8', '\xADE', '\xAE4', 
		'\xAEF', '\xAF2', '\xAFC', '\xB02', '\xB06', '\xB0A', '\xB27', '\xB34', 
		'\xB3A', '\xB44', '\xB47', '\xB5B', '\xB5F', '\xB63', '\xB68', '\xB77', 
		'\xB7E', '\xB87', '\xB8F', '\xB92', '\xB97', '\xB9C', '\xBA4', '\xBAA', 
		'\xBAE', '\xBB4', '\xBB9', '\xBBD', '\xBC4', '\xBCC', '\xBD4', '\xBDD', 
		'\xBE2', '\xBE6', '\xBE9', '\xBED', '\xBF3', '\xBF8', '\xC00', '\xC08', 
		'\xC0E', '\xC14', '\xC17', '\xC1C', '\xC1F', '\xC26', '\xC28', '\xC2B', 
		'\xC31', '\xC34', '\xC39', '\xC3C', '\xC41', '\xC44', '\xC49', '\xC4C', 
		'\xC51', '\xC54', '\xC57', '\xC5A', '\xC61', '\xC65', '\xC6C', '\xC73', 
		'\xC79', '\xC86', '\xC8A', '\xC8F', '\xC99', '\xCA2', '\xCA6', '\xCB2', 
		'\xCB8', '\xCBD', '\xCBF', '\xCD3', '\xCD7', '\xCDF', '\xCE8', '\xCEE', 
		'\xCF4', '\xCFC', '\xCFE', '\xD08', '\xD0C', '\xD0F', '\xD13', '\xD18', 
		'\xD1E', '\xD21', '\xD25', '\xD2D', '\xD2F', '\xD32', '\xD3A', '\xD42', 
		'\xD49', '\xD50', '\xD52', '\xD54', '\xD59', '\xD5F', '\xD62', '\xD64', 
		'\xD66', '\xD69', '\xD6E', '\xD71', '\xD76', '\xD85', '\xD8C', '\xD93', 
		'\xD95', '\xD97', '\xD9C', '\xDA2', '\xDA5', '\xDA7', '\xDA9', '\xDAC', 
		'\xDB1', '\xDB4', '\xDB9', '\xDC6', '\xDCB', '\xDD4', '\xDD9', '\xDDF', 
		'\xDE3', '\xDE7', '\xDF8', '\xDFA', '\xE04', '\xE09', '\xE0B', '\xE0F', 
		'\xE15', '\xE1D', '\xE22', '\xE25', '\xE2D', '\xE30', '\xE35', '\xE3A', 
		'\xE3F', '\xE44', '\xE49', '\xE4E', '\xE52', '\xE57', '\xE62', '\xE67', 
		'\xE6A', '\xE6D', '\xE72', '\xE75', '\xE7A', '\xE7D', '\xE82', '\xE85', 
		'\xE8A', '\xE8D', '\xE92', '\xE95', '\xE9A', '\xEA0', '\xEA5', '\xEA8', 
		'\xEAD', '\xEB4', '\xEB6', '\xEBC', '\xEC5', '\xECA', '\xECC', '\xED8', 
		'\xEDE', '\xEEA', '\xEED', '\xEF2', '\xEF4', '\xEFE', '\xF03', '\xF05', 
		'\xF09', '\xF0F', '\xF21', '\xF23', '\xF32', '\xF44', '\xF4C', '\xF56', 
		'\xF66', '\xF7B', '\xF86', '\xF8C', '\xF95', '\xF9E', '\xFA4', '\xFAD', 
		'\xFB2', '\xFB5', '\xFBA', '\xFBD', '\xFC2', '\xFC5', '\xFCD', '\xFD3', 
		'\xFD7', '\xFDE', '\xFE4', '\xFE8', '\xFEB', '\xFED', '\xFF0', '\xFF5', 
		'\xFF8', '\xFFD', '\x1000', '\x1005', '\x1008', '\x100D', '\x1010', '\x101F', 
		'\x102A', '\x1036', '\x103D', '\x1044', '\x1048', '\x104D', '\x1050', 
		'\x1055', '\x1058', '\x105D', '\x1060', '\x1069', '\x1070', '\x107F', 
		'\x1083', '\x1088', '\x1093', '\x109D', '\x10A9', '\x10AF', '\x10B1', 
		'\x10B9', '\x10C2', '\x10C7', '\x10D2', '\x10D5', '\x10D9', '\x10E1', 
		'\x10E5', '\x10E9', '\x10F1', '\x10F6', '\x10FE', '\x1103', '\x1107', 
		'\x1109', '\x110E', '\x1117', '\x111A', '\x111F', '\x1126', '\x112C', 
		'\x112E', '\x1133', '\x1139', '\x113F', '\x1144', '\x114A', '\x1151', 
		'\x1156', '\x115B', '\x1160', '\x1163', '\x1167', '\x116B', '\x116F', 
		'\x1173', '\x1178', '\x117C', '\x1180', '\x118A', '\x1190', '\x1197', 
		'\x119A', '\x11A0', '\x11A6', '\x11AB', '\x11AD', '\x11B3', '\x11B5', 
		'\x11BA', '\x11C0', '\x11C6', '\x11CB', '\x11CD', '\x11D1', '\x11D5', 
		'\x11D8', '\x11E6', '\x11EB', '\x11EF', '\x11FC', '\x11FF', '\x1201', 
		'\x1209', '\x1213', '\x1219', '\x1220', '\x1223', '\x1229', '\x122F', 
		'\x1234', '\x1236', '\x123C', '\x123E', '\x1243', '\x1249', '\x124F', 
		'\x1255', '\x125A', '\x125C', '\x1260', '\x1264', '\x1267', '\x1275', 
		'\x127A', '\x127E', '\x128B', '\x128E', '\x1290', '\x1298', '\x12A3', 
		'\x12AC', '\x12B5', '\x12C0', '\x12C9', '\x12D2', '\x12DE', '\x12E2', 
		'\x12E7', '\x12E9', '\x12EB', '\x12F0', '\x12F4', '\x12F9', '\x12FB', 
		'\x12FD', '\x130B', '\x1310', '\x1326', '\x133C', '\x1341', '\x134E', 
		'\x1356', '\x136A', '\x136D', '\x1373', '\x137B', '\x1382', '\x1387', 
		'\x138B', '\x138F', '\x1392', '\x1399', '\x13AB', '\x13AD', '\x13C1', 
		'\x13C9', '\x13CE', '\x13E0', '\x13EF', '\x13F1', '\x13F8', '\x13FF', 
		'\x1404', '\x1409', '\x140F', '\x1414', '\x1416', '\x141D', '\x1423', 
		'\x1429', '\x142C', '\x1432', '\x143C', '\x143F', '\x1446', '\x1449', 
		'\x144E', '\x1450', '\x1458', '\x145C', '\x1462', '\x1467', '\x1469', 
		'\x146C', '\x1473', '\x1479', '\x1480', '\x1483', '\x1489', '\x148E', 
		'\x1490', '\x1493', '\x149B', '\x14A1', '\x14A8', '\x14AB', '\x14B1', 
		'\x14B6', '\x14B8', '\x14C0', '\x14C8', '\x14CE', '\x14D3', '\x14D5', 
		'\x14DF', '\x14E4', '\x14EE', '\x14F4', '\x1500', '\x1502', '\x1509', 
		'\x150F', '\x1515', '\x151B', '\x1520', '\x1522', '\x1529', '\x1531', 
		'\x1537', '\x1545', '\x1547', '\x154A', '\x154F', '\x1551', '\x155D', 
		'\x1563', '\x1571', '\x1573', '\x1576', '\x157B', '\x157E', '\x1583', 
		'\x1585', '\x158E', '\x1595', '\x159B', '\x159E', '\x15A3', '\x15AA', 
		'\x15AC', '\x15B2', '\x15B4', '\x15BC', '\x15BE', '\x15C4', '\x15C6', 
		'\x15CC', '\x15CE', '\x15D5', '\x15D8', '\x15DA', '\x15DD', '\x15E1', 
		'\x15E3', '\x15EC', '\x15F2', '\x15F6', '\x15FE', '\x1605', '\x160B', 
		'\x160D', '\x1618', '\x161D', '\x1623', '\x1627', '\x1631', '\x1639', 
		'\x1645', '\x1648', '\x1650', '\x1652', '\x1655', '\x1659', '\x165C', 
		'\x1666', '\x166C', '\x1674', '\x1678', '\x167C', '\x1685', '\x168B', 
		'\x168F', '\x1692', '\x169D', '\x16A1', '\x16A8', '\x16AD', '\x16B0', 
		'\x16B8', '\x16BC', '\x16BF', '\x16C3', '\x16C6', '\x16CA', '\x16D1', 
		'\x16D5', '\x16D7', '\x16D9', '\x16DC', '\x16DF', '\x16E2', '\x16E8', 
		'\x16EB', '\x16F3', '\x16F5', '\x16F8', '\x16FC', '\x16FF', '\x1705', 
		'\x1708', '\x170C', '\x170F', '\x1712', '\x1719', '\x171C', '\x1723', 
		'\x1729', '\x172D', '\x1737', '\x173A', '\x173D', '\x1741', '\x1744', 
		'\x1747', '\x174A', '\x174E', '\x1751', '\x1759', '\x175B', '\x175F', 
		'\x1762', '\x176A', '\x176E', '\x1772', '\x1779', '\x177D', '\x177F', 
		'\x1781', '\x1784', '\x1787', '\x178A', '\x1792', '\x1798', '\x179E', 
		'\x17A0', '\x17A4', '\x17A7', '\x17AC', '\x17B1', '\x17B4', '\x17BC', 
		'\x17C0', '\x17C7', '\x17CA', '\x17D3', '\x17D6', '\x17DA', '\x17E2', 
		'\x17E5', '\x17E9', '\x17EC', '\x17FA', '\x17FE', '\x1801', '\x1805', 
		'\x1808', '\x180D', '\x1810', '\x1816', '\x1819', '\x1820', '\x1824', 
		'\x1826', '\x182E', '\x1831', '\x1835', '\x183C', '\x1841', '\x1844', 
		'\x1850', '\x1853', '\x1859', '\x1860', '\x1865', '\x186A', '\x1871', 
		'\x1878', '\x187B', '\x1883', '\x188B', '\x188E', '\x1896', '\x18A1', 
		'\x18A4', '\x18AE', '\x18B5', '\x18BA', '\x18BD', '\x18C7', '\x18CA', 
		'\x18CD', '\x18D5', '\x18E0', '\x18E3', '\x18E6', '\x18EC', '\x18F1', 
		'\x18F5', '\x18FF', '\x1902', '\x1905', '\x190B', '\x1911', '\x1919', 
		'\x191C', '\x1920', '\x1924', '\x1927', '\x192C', '\x193A', '\x194A', 
		'\x194E', '\x1954', '\x1956', '\x1959', '\x195D', '\x1962', '\x1967', 
		'\x196F', '\x1974', '\x1979', '\x197F', '\x1984', '\x1987', '\x1990', 
		'\x199A', '\x199D', '\x19A6', '\x19AE', '\x19B1', '\x19B8', '\x19BB', 
		'\x19E9', '\x19ED', '\x19F0', '\x19F6', '\x1A02', '\x1A04', '\x1A07', 
		'\x1A20', '\x1A2B', '\x1A33', '\x1A3E', '\x1A43', '\x1A46', '\x1A4E', 
		'\x1A58', '\x1A5F', '\x1A66', '\x1A68', '\x1A74', '\x1A7F', '\x1A83', 
		'\x1A88', '\x1A8B', '\x1A8D', '\x1A90', '\x1A9C', '\x1A9E', '\x1AA0', 
		'\x1AA3', '\x1AA8', '\x1AAB', '\x1AB0', '\x1ABA', '\x1ABE', '\x1AC3', 
		'\x1AC6', '\x1AC8', '\x1ACB', '\x1AD7', '\x1AD9', '\x1ADB', '\x1ADE', 
		'\x1AE4', '\x1AEE', '\x1B02', '\x1B08', '\x1B21', '\x1B23', '\x1B3D', 
		'\x1B43', '\x1B4E', '\x1B56', '\x1B59', '\x1B67', '\x1B6F', '\x1B76', 
		'\x1B8D', '\x1B9A', '\x1BA0', '\x1BA7', '\x1BAF', '\x1BB2', '\x1BB5', 
		'\x1BBE', '\x1BC8', '\x1BCF', '\x1BD3', '\x1BD7', '\x1BDD', '\x1BE4', 
		'\x1BE8', '\x1BEE', '\x1BF5', '\x1BFC', '\x1BFF', '\x1C05', '\x1C0C', 
		'\x1C10', '\x1C15', '\x1C1A', '\x1C1F', '\x1C27', '\x1C2B', '\x1C31', 
		'\x1C38', '\x1C3C', '\x1C45', '\x1C4D', '\x1C53', '\x1C59', '\x1C6A', 
		'\x1C6E', '\x1C76', '\x1C7A', '\x1C82', '\x1C86', '\x1C8B', '\x1C8F', 
		'\x1C96', '\x1C9C', '\x1C9E', '\x1CA2', '\x1CA6', '\x1CAA', '\x1CAD', 
		'\x1CB1', '\x1CB7', '\x1CBB', '\x1CBD', '\x1CC4', '\x1CCB', '\x1CCE', 
		'\x1CD1', '\x1CD8', '\x1CDD', '\x1CE2', '\x1CE6', '\x1CEC', '\x1CF0', 
		'\x1CF2', '\x1CF7', '\x1CFC', '\x1D00', '\x1D05', '\x1D0B', '\x1D0F', 
		'\x1D13', '\x1D15', '\x1D19', '\x1D1D', '\x1D21', '\x1D25', '\x1D2B', 
		'\x1D2E', '\x1D34', '\x1D38', '\x1D3C', '\x1D42', '\x1D48', '\x1D4A', 
		'\x1D4D', '\x1D51', '\x1D55', '\x1D59', '\x1D5F', '\x1D62', '\x1D68', 
		'\x1D6E', '\x1D71', '\x1D77', '\x1D7A', '\x1D80', '\x1D83', '\x1D87', 
		'\x1D8B', '\x1D8F', '\x1D94', '\x1D97', '\x1D9B', '\x1D9F', '\x1DB0', 
		'\x1DB2', '\x1DB4', '\x1DB7', '\x1DBE', '\x1DC3', '\x1DC7', '\x1DCD', 
		'\x1DD1', '\x1DD3', '\x1DD8', '\x1DDD', '\x1DE1', '\x1DE6', '\x1DEC', 
		'\x1DF0', '\x1DF4', '\x1DF6', '\x1DFA', '\x1DFE', '\x1E02', '\x1E06', 
		'\x1E0C', '\x1E0F', '\x1E15', '\x1E19', '\x1E1D', '\x1E23', '\x1E29', 
		'\x1E2B', '\x1E2E', '\x1E32', '\x1E36', '\x1E3A', '\x1E40', '\x1E43', 
		'\x1E49', '\x1E4F', '\x1E52', '\x1E58', '\x1E5B', '\x1E61', '\x1E64', 
		'\x1E68', '\x1E6C', '\x1E70', '\x1E75', '\x1E78', '\x1E7C', '\x1E80', 
		'\x1E86', '\x1E89', '\x1E8D', '\x1E9E', '\x1EA0', '\x1EA2', '\x1EA5', 
		'\x1EB3', '\x1EB9', '\x1EC1', '\x1EC8', '\x1ECA', '\x1ECD', '\x1EEF', 
		'\x1EF3', '\x1EFA', '\x1EFD', '\x1F00', '\x1F08', '\x1F0D', '\x1F12', 
		'\x1F15', '\x1F17', '\x1F1B', '\x1F1F', '\x1F22', '\x1F26', '\x1F2C', 
		'\x1F31', '\x1F38', '\x1F3A', '\x1F3E', '\x1F46', '\x1F4C', '\x1F50', 
		'\x1F53', '\x1F5C', '\x1F5F', '\x1F65', '\x1F6C', '\x1F71', '\x1F79', 
		'\x1F7E', '\x1F8A', '\x1F8C', '\x1F97', '\x1F9E', '\x1FA8', '\x1FBF', 
		'\x1FCC', '\x1FDC', '\x1FE1', '\x1FE8', '\x1FEB', '\x1FEF', '\x1FF1', 
		'\x2002', '\x2011', '\x2019', '\x2022', '\x202A', '\x2033', '\x203E', 
		'\x2042', '\x2044', '\x2046', '\x204C', '\x2051', '\x2058', '\x2065', 
		'\x2067', '\x2069', '\x206C', '\x206F', '\x2076', '\x2079', '\x207F', 
		'\x2084', '\x2086', '\x2089', '\x208F', '\x2097', '\x2099', '\x209C', 
		'\x20A0', '\x20A3', '\x20AD', '\x20B0', '\x20B4', '\x20B7', '\x20BD', 
		'\x20C0', '\x20C2', '\x20C6', '\x20CB', '\x20CF', '\x20D7', '\x20DB', 
		'\x20DE', '\x20E3', '\x20EB', '\x20F0', '\x20FA', '\x2105', '\x210A', 
		'\x2110', '\x2116', '\x211A', '\x211D', '\x2121', '\x2125', '\x212D', 
		'\x2132', '\x2134', '\x2137', '\x213C', '\x2145', '\x2149', '\x214E', 
		'\x2151', '\x2154', '\x215A', '\x2162', '\x216A', '\x216D', '\x2170', 
		'\x2174', '\x2179', '\x217C', '\x2182', '\x2186', '\x218C', '\x2194', 
		'\x219A', '\x219C', '\x219F', '\x21AE', '\x21B1', '\x21B4', '\x21B6', 
		'\x21C1', '\x21CC', '\x21D5', '\x21DF', '\x21E9', '\x21EB', '\x21ED', 
		'\x21F0', '\x21F3', '\x21FE', '\x2200', '\x2202', '\x2205', '\x220A', 
		'\x2215', '\x221E', '\x2221', '\x2224', '\x222D', '\x2230', '\x2233', 
		'\x223A', '\x223D', '\x224C', '\x224F', '\x2256', '\x2266', '\x226A', 
		'\x2274', '\x2287', '\x2289', '\x2290', '\x2297', '\x229B', '\x22A3', 
		'\x22A7', '\x22AB', '\x22B1', '\x22BB', '\x22C5', '\x22CC', '\x22D3', 
		'\x22DC', '\x22E3', '\x22EA', '\x22F3', '\x22F7', '\x2301', '\x2308', 
		'\x2310', '\x2318', '\x231C', '\x2332', '\x233B', '\x2341', '\x2347', 
		'\x234D', '\x2357', '\x235E', '\x2363', '\x2368', '\x236C', '\x2373', 
		'\x2377', '\x237A', '\x237F', '\x2383', '\x2387', '\x238C', '\x2393', 
		'\x2396', '\x239A', '\x239F', '\x23A3', '\x23AC', '\x23B3', '\x23BC', 
		'\x23C8', '\x23CA', '\x23D4', '\x23D7', '\x23DC', '\x23E5', '\x23E7', 
		'\x23E9', '\x23EE', '\x23F6', '\x23FB', '\x2403', '\x2408', '\x240E', 
		'\x2418', '\x241A', '\x241E', '\x2422', '\x2424', '\x242B', '\x2436', 
		'\x2458', '\x2468', '\x246F', '\x2471', '\x2478', '\x2481', '\x248B', 
		'\x2490', '\x2497', '\x249A', '\x24A1', '\x24A8', '\x24AB', '\x24AD', 
		'\x24B5', '\x24B7', '\x24BD', '\x24C4', '\x24CC', '\x24D2', '\x24D7', 
		'\x24DB', '\x24DF', '\x24E4', '\x24E6', '\x24ED', '\x24F1', '\x24F8', 
		'\x24FA', '\x2501', '\x2503', '\x250C', '\x2514', '\x251B', '\x2521', 
		'\x252C', '\x2530', '\x2532', '\x2535', '\x254D', '\x2566', '\x256B', 
		'\x257F', '\x2583', '\x2587', '\x2597', '\x259F', '\x25B5', '\x25EF', 
		'\x25F3', '\x261D', '\x2624', '\x262A', '\x2637', '\x2646', '\x2651', 
		'\x2656', '\x2660', '\x2669', '\x268B', '\x2690', '\x2696', '\x2699', 
		'\x269E', '\x26A3', '\x26AC', '\x26B1', '\x26B7', '\x26C0', '\x26CA', 
		'\x26CD', '\x26DB', '\x26E1', '\x26E9', '\x26ED', '\x26F5', '\x26FC', 
		'\x2709', '\x2711', '\x271E', '\x2725', '\x272B', '\x272F', '\x2740', 
		'\x274F', '\x2751', '\x2756', '\x2759', '\x2762', '\x2765', '\x2768', 
		'\x2775', '\x2779', '\x2781', '\x2787', '\x278F', '\x2796', '\x279C', 
		'\x27AB', '\x27B4', '\x27BA', '\x27C0', '\x27C3', '\x27C7', '\x27CE', 
		'\x27D6', '\x27D9', '\x27DF', '\x27E5', '\x27E7', '\x27ED', '\x27F0', 
		'\x27F2', '\x27F8', '\x27FA', '\x2808', '\x280F', '\x2818', '\x281F', 
		'\x282B', '\x2832', '\x2839', '\x2840', '\x2846', '\x284D', '\x2850', 
		'\x2855', '\x285C', '\x2864', '\x2868', '\x286B', '\x2873', '\x2877', 
		'\x287A', '\x287E', '\x2883', '\x2889', '\x288F', '\x2895', '\x289B', 
		'\x28A1', '\x28A7', '\x28AD', '\x28B0', '\x28B4', '\x28B9', '\x28BD', 
		'\x28C5', '\x28CA', '\x28D1', '\x28DA', '\x28DC', '\x28E3', '\x28EF', 
		'\x28F4', '\x28FF', '\x2909', '\x290B', '\x2911', '\x2913', '\x2918', 
		'\x291A', '\x291D', '\x2921', '\x2925', '\x292B', '\x2934', '\x2937', 
		'\x2939', '\x293C', '\x2942', '\x2946', '\x2949', '\x2952', '\x295B', 
		'\x2967', '\x296A', '\x296E', '\x2974', '\x2977', '\x297B', '\x2981', 
		'\x2986', '\x298B', '\x298F', '\x2993', '\x2997', '\x299E', '\x29B1', 
		'\x29B7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SmartSql.SqlParsers.TSql
